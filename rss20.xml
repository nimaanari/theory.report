<?xml version="1.0"?>
<rss version="2.0">

<channel>
  <title>Theory of Computing Report</title>
  <link></link>
  <language>en</language>
  <description></description>


<item>
  <title>Partitioning Hypergraphs is Hard: Models, Inapproximability, and Applications</title>
  <guid>http://arxiv.org/abs/2208.08257</guid>
  <link>http://arxiv.org/abs/2208.08257</link>
  <description>
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Papp_P/0/1/0/all/0/1&quot;&gt;P&amp;#xe1;l Andr&amp;#xe1;s Papp&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Anegg_G/0/1/0/all/0/1&quot;&gt;Georg Anegg&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Yzelman_A/0/1/0/all/0/1&quot;&gt;A. N. Yzelman&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We study the balanced $k$-way hypergraph partitioning problem, with a special
focus on its practical applications to manycore scheduling. Given a hypergraph
on $n$ nodes, our goal is to partition the node set into $k$ parts of size at
most $(1+\epsilon)\cdot \frac{n}{k}$ each, while minimizing the cost of the
partitioning, defined as the number of cut hyperedges, possibly also weighted
by the number of partitions they intersect. We show that this problem cannot be
approximated to within a $n^{1/\text{poly} \log\log n}$ factor of the optimal
solution in polynomial time if the Exponential Time Hypothesis holds, even for
hypergraphs of maximal degree 2. We also study the hardness of the partitioning
problem from a parameterized complexity perspective, and in the more general
case when we have multiple balance constraints.
&lt;/p&gt;
&lt;p&gt;Furthermore, we consider two extensions of the partitioning problem that are
motivated from practical considerations. Firstly, we introduce the concept of
hyperDAGs to model precedence-constrained computations as hypergraphs, and we
analyze the adaptation of the balanced partitioning problem to this case.
Secondly, we study the hierarchical partitioning problem to model hierarchical
NUMA (non-uniform memory access) effects in modern computer architectures, and
we show that ignoring this hierarchical aspect of the communication cost can
yield significantly weaker solutions.
&lt;/p&gt;
  </description>
  <pubDate>2022-08-18 00:30:00 UTC</pubDate>
  <author>arXiv: Computational Complexity</author>
</item>

<item>
  <title>The proper conflict-free $k$-coloring problem and the odd $k$-coloring problem are NP-complete on bipartite graphs</title>
  <guid>http://arxiv.org/abs/2208.08330</guid>
  <link>http://arxiv.org/abs/2208.08330</link>
  <description>
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Ahn_J/0/1/0/all/0/1&quot;&gt;Jungho Ahn&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Im_S/0/1/0/all/0/1&quot;&gt;Seonghyuk Im&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Oum_S/0/1/0/all/0/1&quot;&gt;Sang-il Oum&lt;/a&gt;&lt;/p&gt;&lt;p&gt;A proper coloring of a graph is \emph{proper conflict-free} if every
non-isolated vertex $v$ has a neighbor whose color is unique in the
neighborhood of $v$. A proper coloring of a graph is \emph{odd} if for every
non-isolated vertex $v$, there is a color appearing an odd number of times in
the neighborhood of $v$. For an integer $k$, the \textsc{PCF $k$-Coloring}
problem asks whether an input graph admits a proper conflict-free $k$-coloring
and the \textsc{Odd $k$-Coloring} asks whether an input graph admits an odd
$k$-coloring. We show that for every integer $k\geq3$, both problems are
NP-complete, even if the input graph is bipartite. Furthermore, we show that
the \textsc{PCF $4$-Coloring} problem is NP-complete when the input graph is
planar.
&lt;/p&gt;
  </description>
  <pubDate>2022-08-18 00:30:00 UTC</pubDate>
  <author>arXiv: Computational Complexity</author>
</item>

<item>
  <title>Constant-Depth Sorting Networks</title>
  <guid>http://arxiv.org/abs/2208.08394</guid>
  <link>http://arxiv.org/abs/2208.08394</link>
  <description>
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Dobrokhotova_Maikova_N/0/1/0/all/0/1&quot;&gt;Natalia Dobrokhotova-Maikova&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kozachinskiy_A/0/1/0/all/0/1&quot;&gt;Alexander Kozachinskiy&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Podolskii_V/0/1/0/all/0/1&quot;&gt;Vladimir Podolskii&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In this paper, we address sorting networks that are constructed from
comparators of arity $k &amp;gt; 2$. That is, in our setting the arity of the
comparators -- or, in other words, the number of inputs that can be sorted at
the unit cost -- is a parameter. We study its relationship with two other
parameters -- $n$, the number of inputs, and $d$, the depth.
&lt;/p&gt;
&lt;p&gt;This model received considerable attention. Partly, its motivation is to
better understand the structure of sorting networks. In particular, sorting
networks with large arity are related to recursive constructions of ordinary
sorting networks. Additionally, studies of this model have natural
correspondence with a recent line of work on constructing circuits for majority
functions from majority gates of lower fan-in.
&lt;/p&gt;
&lt;p&gt;Motivated by these questions, we obtain the first lower bounds on the arity
of constant-depth sorting networks. More precisely, we consider sorting
networks of depth $d$ up to 4, and determine the minimal $k$ for which there is
such a network with comparators of arity $k$. For depths $d=1,2$ we observe
that $k=n$. For $d=3$ we show that $k = \lceil \frac n2 \rceil$. For $d=4$ the
minimal arity becomes sublinear: $k = \Theta(n^{2/3})$. This contrasts with the
case of majority circuits, in which $k = O(n^{2/3})$ is achievable already for
depth $d=3$.
&lt;/p&gt;
  </description>
  <pubDate>2022-08-18 00:30:00 UTC</pubDate>
  <author>arXiv: Computational Complexity</author>
</item>

</channel>
</rss>
