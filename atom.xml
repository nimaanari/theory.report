<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Theory of Computing Report</title>
  <link rel="self" href=""/>
  <link href=""/>
  <id></id>
  <updated></updated>
  <generator uri="http://feedreader.github.io/">Pluto 1.6.2 on Ruby 3.0.5 (2022-11-24) [x86_64-linux]</generator>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Constraint Optimization over Semirings</title>
    <link href="http://arxiv.org/abs/2302.12937"/>
    <id>http://arxiv.org/abs/2302.12937</id>
    <updated>2023-02-28T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Pavan_A/0/1/0/all/0/1&quot;&gt;A. Pavan&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Meel_K/0/1/0/all/0/1&quot;&gt;Kuldeep S. Meel&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Vinodchandran_N/0/1/0/all/0/1&quot;&gt;N. V. Vinodchandran&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Bhattacharyya_A/0/1/0/all/0/1&quot;&gt;Arnab Bhattacharyya&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Interpretations of logical formulas over semirings have applications in
various areas of computer science including logic, AI, databases, and security.
Such interpretations provide richer information beyond the truth or falsity of
a statement. Examples of such semirings include Viterbi semiring, min-max or
access control semiring, tropical semiring, and fuzzy semiring.
&lt;/p&gt;
&lt;p&gt;The present work investigates the complexity of constraint optimization
problems over semirings. The generic optimization problem we study is the
following: Given a propositional formula $\varphi$ over $n$ variable and a
semiring $(K,+,\cdot,0,1)$, find the maximum value over all possible
interpretations of $\varphi$ over $K$. This can be seen as a generalization of
the well-known satisfiability problem. A related problem is to find an
interpretation that achieves the maximum value. In this work, we first focus on
these optimization problems over the Viterbi semiring, which we call optConfVal
and optConf.
&lt;/p&gt;
&lt;p&gt;We show that for general propositional formulas in negation normal form,
optConfVal and optConf are in ${\mathrm{FP}}^{\mathrm{NP}}$. We investigate
optConf when the input formula $\varphi$ is represented as a CNF. For CNF
formulae, we first derive an upper bound on optConfVal as a function of the
number of maximum satisfiable clauses. In particular, we show that if $r$ is
the maximum number of satisfiable clauses in a CNF formula with $m$ clauses,
then its optConfVal is at most $1/4^{m-r}$. Building on this we establish that
optConfVal for CNF formulae is hard for the complexity class
${\mathrm{FP}}^{\mathrm{NP}[\log]}$. We also design polynomial-time
approximation algorithms and establish an inapproximability for optConfVal. We
establish similar complexity results for these optimization problems over other
semirings including tropical, fuzzy, and access control semirings.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Exponential Hardness of Reinforcement Learning with Linear Function Approximation</title>
    <link href="http://arxiv.org/abs/2302.12940"/>
    <id>http://arxiv.org/abs/2302.12940</id>
    <updated>2023-02-28T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kane_D/0/1/0/all/0/1&quot;&gt;Daniel Kane&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Liu_S/0/1/0/all/0/1&quot;&gt;Sihan Liu&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Lovett_S/0/1/0/all/0/1&quot;&gt;Shachar Lovett&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Mahajan_G/0/1/0/all/0/1&quot;&gt;Gaurav Mahajan&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Szepesvari_C/0/1/0/all/0/1&quot;&gt;Csaba Szepesv&amp;#xe1;ri&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Weisz_G/0/1/0/all/0/1&quot;&gt;Gell&amp;#xe9;rt Weisz&lt;/a&gt;&lt;/p&gt;&lt;p&gt;A fundamental question in reinforcement learning theory is: suppose the
optimal value functions are linear in given features, can we learn them
efficiently? This problem&#39;s counterpart in supervised learning, linear
regression, can be solved both statistically and computationally efficiently.
Therefore, it was quite surprising when a recent work
\cite{kane2022computational} showed a computational-statistical gap for linear
reinforcement learning: even though there are polynomial sample-complexity
algorithms, unless NP = RP, there are no polynomial time algorithms for this
setting.
&lt;/p&gt;
&lt;p&gt;In this work, we build on their result to show a computational lower bound,
which is exponential in feature dimension and horizon, for linear reinforcement
learning under the Randomized Exponential Time Hypothesis. To prove this we
build a round-based game where in each round the learner is searching for an
unknown vector in a unit hypercube. The rewards in this game are chosen such
that if the learner achieves large reward, then the learner&#39;s actions can be
used to simulate solving a variant of 3-SAT, where (a) each variable shows up
in a bounded number of clauses (b) if an instance has no solutions then it also
has no solutions that satisfy more than (1-$\epsilon$)-fraction of clauses. We
use standard reductions to show this 3-SAT variant is approximately as hard as
3-SAT. Finally, we also show a lower bound optimized for horizon dependence
that almost matches the best known upper bound of $\exp(\sqrt{H})$.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Optimization Problems on The Weighted Massively Parallel Computation Model: Hardness and Algorithms</title>
    <link href="http://arxiv.org/abs/2302.12953"/>
    <id>http://arxiv.org/abs/2302.12953</id>
    <updated>2023-02-28T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Ma_H/0/1/0/all/0/1&quot;&gt;Hengzhao Ma&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Li_J/0/1/0/all/0/1&quot;&gt;Jianzhong Li&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Gao_X/0/1/0/all/0/1&quot;&gt;Xiangyu Gao&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The topology-aware Massively Parallel Computation (MPC) model is proposed and
studied recently, which enhances the classical MPC model by the awareness of
network topology. The work of Hu et. al. on topology-aware MPC model considers
only the tree topology. In this paper a more general case is considered, where
the underlying network is a weighted complete graph. We then call this model as
Weighted Massively Parallel Computation (WMPC) model, and study the problem of
minimizing communication cost under it. Three communication cost minimization
problems are defined based on different pattern of communication, which are the
Data Redistribution Problem, Data Allocation Problem on Continuous data, and
Data Allocation Problem on Categorized data. We also define four kinds of
objective functions for communication cost, which consider the total cost,
bottleneck cost, maximum of send and receive cost, and summation of send and
receive cost, respectively. Combining the three problems in different
communication pattern with the four kinds of objective cost functions, 12
problems are obtained. The hardness results and algorithms of the 12 problems
make up the content of this paper. With rigorous proof, we prove that some of
the 12 problems are in P, some FPT, some NP-complete, and some W[1]-complete.
Approximate algorithms are proposed for several selected problems.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Cosecure Domination: Hardness Results and Algorithm</title>
    <link href="http://arxiv.org/abs/2302.13031"/>
    <id>http://arxiv.org/abs/2302.13031</id>
    <updated>2023-02-28T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kusum/0/1/0/all/0/1&quot;&gt;Kusum&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Pandey_A/0/1/0/all/0/1&quot;&gt;Arti Pandey&lt;/a&gt;&lt;/p&gt;&lt;p&gt;For a simple graph $G=(V,E)$ without any isolated vertex, a cosecure
dominating set $D$ of $G$ satisfies the following two properties (i) $S$ is a
dominating set of $G$, (ii) for every vertex $v \in S$ there exists a vertex $u
\in V \setminus S$ such that $uv \in E$ and $(S \setminus \{v\}) \cup \{u\}$ is
a dominating set of $G$. The minimum cardinality of a cosecure dominating set
of $G$ is called cosecure domination number of $G$ and is denoted by
$\gamma_{cs}(G)$. The Minimum Cosecure Domination problem is to find a cosecure
dominating set of a graph $G$ of cardinality $\gamma_{cs}(G)$. The decision
version of the problem is known to be NP-complete for bipartite, planar, and
split graphs. Also, it is known that the Minimum Cosecure Domination problem is
efficiently solvable for proper interval graphs and cographs.
&lt;/p&gt;
&lt;p&gt;In this paper, we work on various important graph classes in an effort to
reduce the complexity gap of the Minimum Cosecure Domination problem. We show
that the decision version of the problem remains NP-complete for circle graphs,
doubly chordal graphs, chordal bipartite graphs, star-convex bipartite graphs
and comb-convex bipartite graphs. On the positive side, we give an efficient
algorithm to compute the cosecure domination number of chain graphs, which is
an important subclass of bipartite graphs. In addition, we show that the
problem is linear-time solvable for bounded tree-width graphs. Further, we
prove that the computational complexity of this problem varies from the
domination problem.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: The $\mathsf{AC}^0$-Complexity Of Visibly Pushdown Languages</title>
    <link href="http://arxiv.org/abs/2302.13116"/>
    <id>http://arxiv.org/abs/2302.13116</id>
    <updated>2023-02-28T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Goller_S/0/1/0/all/0/1&quot;&gt;Stefan G&amp;#xf6;ller&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Grosshans_N/0/1/0/all/0/1&quot;&gt;Nathan Grosshans&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We concern ourselves with the question which visibly pushdown languages are
in the complexity class $\mathsf{AC}^0$.
&lt;/p&gt;
&lt;p&gt;We provide a conjectural characterization that isolates a stubborn subclass
of particular one-turn visibly pushdown languages (that we call intermediate
VPLs) all of which our community seems to lack tools for determining
containment in $\mathsf{AC}^0$.
&lt;/p&gt;
&lt;p&gt;Our main result states that there is an algorithm that, given a visibly
pushdown automaton, correctly outputs if its language is in $\mathsf{AC}^0$,
some $m\geq 2$ such that $\text{MOD}_m\leq_{\text{cd}} L$ (implying that $L$ is
not in $\mathsf{AC}^0$), or a finite disjoint union of intermediate languages
$L$ is constant-depth equivalent to. In the latter case one can moreover
effectively compute $k,l&amp;gt;0$ with $k\not=l$ such that the visibly pushdown
language is hard for the more concrete intermediate language $L(S\rightarrow
\varepsilon\mid a c^{k-1} S b_1\mid ac^{l-1}Sb_2)$.
&lt;/p&gt;
&lt;p&gt;For our proofs we revisit so-called Ext-algebras, introduced by Czarnetzki,
Krebs and Lange, which in turn are closely related to forest algebras
introduced by Boja\&#39;nczyk and Walukiewicz, and Green&#39;s relations.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Geometry: Two-Disk Compound Symmetry Groups</title>
    <link href="http://arxiv.org/abs/2302.12950"/>
    <id>http://arxiv.org/abs/2302.12950</id>
    <updated>2023-02-28T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Hearn_R/0/1/0/all/0/1&quot;&gt;Robert A. Hearn&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Kretschmer_W/0/1/0/all/0/1&quot;&gt;William Kretschmer&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Rokicki_T/0/1/0/all/0/1&quot;&gt;Tomas Rokicki&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Streeter_B/0/1/0/all/0/1&quot;&gt;Benjamin Streeter&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Vergo_E/0/1/0/all/0/1&quot;&gt;Eric Vergo&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Symmetry is at the heart of much of mathematics, physics, and art.
Traditional geometric symmetry groups are defined in terms of isometries of the
ambient space of a shape or pattern. If we slightly generalize this notion to
allow the isometries to operate on overlapping but non-identical metric spaces,
we obtain what we call compound symmetry groups. A natural example is that of
the groups generated by discrete rotations of overlapping disks in the plane.
Investigation of these groups reveals a new family of fractals, as well as a
rich structure that is intriguing both mathematically and artistically. We
report on our initial investigations.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Geometry</name>
      <uri>https://arxiv.org/list/cs.CG/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Limited Query Graph Connectivity Test</title>
    <link href="http://arxiv.org/abs/2302.13036"/>
    <id>http://arxiv.org/abs/2302.13036</id>
    <updated>2023-02-28T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Guo_M/0/1/0/all/0/1&quot;&gt;Mingyu Guo&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Li_J/0/1/0/all/0/1&quot;&gt;Jialiang Li&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Neumann_A/0/1/0/all/0/1&quot;&gt;Aneta Neumann&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Neumann_F/0/1/0/all/0/1&quot;&gt;Frank Neumann&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Nguyen_H/0/1/0/all/0/1&quot;&gt;Hung Nguyen&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We propose a combinatorial optimisation model called Limited Query Graph
Connectivity Test. We consider a graph whose edges have two possible states
(on/off). The edges&#39; states are hidden initially. We could query an edge to
reveal its state. Given a source s and a destination t, we aim to test s-t
connectivity by identifying either a path (consisting of only on edges) or a
cut (consisting of only off edges). We are limited to B queries, after which we
stop regardless of whether graph connectivity is established. We aim to design
a query policy that minimizes the expected number of queries.
&lt;/p&gt;
&lt;p&gt;If we remove the query limit B (i.e., by setting B to the total number of
edges), then our problem becomes a special case of (monotone) Stochastic
Boolean Function Evaluation (SBFE). There are two existing exact algorithms
that are prohibitively expensive. They have best known upper bounds of O(3^m)
and O(2^{2^k}) respectively, where m is the number of edges and k is the number
of paths/cuts. These algorithms do not scale well in practice.
&lt;/p&gt;
&lt;p&gt;We propose a significantly more scalable exact algorithm. Our exact algorithm
works by iteratively improving the performance lower bound until the lower
bound becomes achievable. Even when our exact algorithm does not scale, it can
be used as an anytime algorithm for calculating lower bound.
&lt;/p&gt;
&lt;p&gt;We experiment on a wide range of practical graphs. We observe that even for
large graphs (i.e., tens of thousands of edges), it mostly takes only a few
queries to reach conclusion, which is the practical motivation behind the query
limit B. B is also an algorithm parameter that controls scalability. For small
B, our exact algorithm scales well. For large B, our exact algorithm can be
converted to a heuristic (i.e., always pretend that there are only 5 queries
left). Our heuristic outperforms all existing heuristics ported from SBFE and
related literature.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: On the Cost of Demographic Parity in Influence Maximization</title>
    <link href="http://arxiv.org/abs/2302.13110"/>
    <id>http://arxiv.org/abs/2302.13110</id>
    <updated>2023-02-28T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Becker_R/0/1/0/all/0/1&quot;&gt;Ruben Becker&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+DAngelo_G/0/1/0/all/0/1&quot;&gt;Gianlorenzo D&amp;#x27;Angelo&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Ghobadi_S/0/1/0/all/0/1&quot;&gt;Sajjad Ghobadi&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Modeling and shaping how information spreads through a network is a major
research topic in network analysis. While initially the focus has been mostly
on efficiency, recently fairness criteria have been taken into account in this
setting. Most work has focused on the maximin criteria however, and thus still
different groups can receive very different shares of information. In this work
we propose to consider fairness as a notion to be guaranteed by an algorithm
rather than as a criterion to be maximized. To this end, we propose three
optimization problems that aim at maximizing the overall spread while enforcing
strict levels of demographic parity fairness via constraints (either ex-post or
ex-ante). The level of fairness hence becomes a user choice rather than a
property to be observed upon output. We study this setting from various
perspectives. First, we prove that the cost of introducing demographic parity
can be high in terms of both overall spread and computational complexity, i.e.,
the price of fairness may be unbounded for all three problems and optimal
solutions are hard to compute, in some case even approximately or when fairness
constraints may be violated. For one of our problems, we still design an
algorithm with both constant approximation factor and fairness violation. We
also give two heuristics that allow the user to choose the tolerated fairness
violation. By means of an extensive experimental study, we show that our
algorithms perform well in practice, that is, they achieve the best demographic
parity fairness values. For certain instances we additionally even obtain an
overall spread comparable to the most efficient algorithms that come without
any fairness guarantee, indicating that the empirical price of fairness may
actually be small when using our algorithms.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Improving Fairness in Information Exposure by Adding Links</title>
    <link href="http://arxiv.org/abs/2302.13112"/>
    <id>http://arxiv.org/abs/2302.13112</id>
    <updated>2023-02-28T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Becker_R/0/1/0/all/0/1&quot;&gt;Ruben Becker&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+DAngelo_G/0/1/0/all/0/1&quot;&gt;Gianlorenzo D&amp;#x27;Angelo&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Ghobadi_S/0/1/0/all/0/1&quot;&gt;Sajjad Ghobadi&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Fairness in influence maximization has been a very active research topic
recently. Most works in this context study the question of how to find seeding
strategies (deterministic or probabilistic) such that nodes or communities in
the network get their fair share of coverage. Different fairness criteria have
been used in this context. All these works assume that the entity that is
spreading the information has an inherent interest in spreading the information
fairly, otherwise why would they want to use the developed fair algorithms?
This assumption may however be flawed in reality -- the spreading entity may be
purely \emph{efficiency-oriented}. In this paper we propose to study two
optimization problems with the goal to modify the network structure by adding
links in such a way that efficiency-oriented information spreading becomes
\emph{automatically fair}. We study the proposed optimization problems both
from a theoretical and experimental perspective, that is, we give several
hardness and hardness of approximation results, provide efficient algorithms
for some special cases, and more importantly provide heuristics for solving one
of the problems in practice. In our experimental study we then first compare
the proposed heuristics against each other and establish the most successful
one. In a second experiment, we then show that our approach can be very
successful in practice. That is, we show that already after adding a few edges
to the networks the greedy algorithm that purely maximizes spread surpasses all
fairness-tailored algorithms in terms of ex-post fairness. Maybe surprisingly,
we even show that our approach achieves ex-post fairness values that are
comparable or even better than the ex-ante fairness values of the currently
most efficient algorithms that optimize ex-ante fairness.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Toward Self-Adjusting k-ary Search Tree Networks</title>
    <link href="http://arxiv.org/abs/2302.13113"/>
    <id>http://arxiv.org/abs/2302.13113</id>
    <updated>2023-02-28T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Feder_E/0/1/0/all/0/1&quot;&gt;Evgenii Feder&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Paramonov_A/0/1/0/all/0/1&quot;&gt;Anton Paramonov&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Salem_I/0/1/0/all/0/1&quot;&gt;Iosif Salem&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Schmid_S/0/1/0/all/0/1&quot;&gt;Stefan Schmid&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Aksenov_V/0/1/0/all/0/1&quot;&gt;Vitaly Aksenov&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Datacenter networks are becoming increasingly flexible with the incorporation
of new networking technologies, such as optical circuit switches. These
technologies allow for programmable network topologies that can be reconfigured
to better serve network traffic, thus enabling a trade-off between the benefits
(i.e., shorter routes) and costs of reconfigurations (i.e., overhead).
Self-Adjusting Networks (SANs) aim at addressing this trade-off by exploiting
patterns in network traffic, both when it is revealed piecewise (online dynamic
topologies) or known in advance (offline static topologies). In this paper, we
take the first steps toward Self-Adjusting k-ary tree networks. These are more
powerful generalizations of existing binary search tree networks (like
SplayNets), which have been at the core of SAN designs. k-ary search tree
networks are a natural generalization offering nodes of higher degrees, reduced
route lengths for a fixed number of nodes, and local routing in spite of
reconfigurations. We first compute an offline (optimal) static network for
arbitrary traffic patterns in $O(n^3 \cdot k)$ time via dynamic programming,
and also improve the bound to $O(n^2 \cdot k)$ for the special case of
uniformly distributed traffic. Then, we present a centroid-based topology of
the network that can be used both in the offline static and the online setting.
In the offline uniform-workload case, we construct this quasi-optimal network
in linear time $O(n)$ and, finally, we present online self-adjusting k-ary
search tree versions of SplayNet. We evaluate experimentally our new structure
for $k=2$ (allowing for a comparison with existing SplayNets) on real and
synthetic network traces. Our results show that this approach works better than
SplayNet in most of the real network traces and in average to low locality
synthetic traces, and is only little inferior to SplayNet in all remaining
traces.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: The Effect of Points Dispersion on the $k$-nn Search in Random Projection Forests</title>
    <link href="http://arxiv.org/abs/2302.13160"/>
    <id>http://arxiv.org/abs/2302.13160</id>
    <updated>2023-02-28T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Alshammari_M/0/1/0/all/0/1&quot;&gt;Mashaan Alshammari&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Stavrakakis_J/0/1/0/all/0/1&quot;&gt;John Stavrakakis&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Ahmed_A/0/1/0/all/0/1&quot;&gt;Adel F. Ahmed&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Takatsuka_M/0/1/0/all/0/1&quot;&gt;Masahiro Takatsuka&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Partitioning trees are efficient data structures for $k$-nearest neighbor
search. Machine learning libraries commonly use a special type of partitioning
trees called $k$d-trees to perform $k$-nn search. Unfortunately, $k$d-trees can
be ineffective in high dimensions because they need more tree levels to
decrease the vector quantization (VQ) error. Random projection trees rpTrees
solve this scalability problem by using random directions to split the data. A
collection of rpTrees is called rpForest. $k$-nn search in an rpForest is
influenced by two factors: 1) the dispersion of points along the random
direction and 2) the number of rpTrees in the rpForest. In this study, we
investigate how these two factors affect the $k$-nn search with varying $k$
values and different datasets. We found that with larger number of trees, the
dispersion of points has a very limited effect on the $k$-nn search. One should
use the original rpTree algorithm by picking a random direction regardless of
the dispersion of points.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">Computational Complexity: I wish we had less students in a Class. Demographics says I may get my wish.</title>
    <link href="https://blog.computationalcomplexity.org/2023/02/i-wish-we-had-less-students-in-class.html"/>
    <id>tag:blogger.com,1999:blog-3722233.post-4886994334648303687</id>
    <updated>2023-02-27T15:10:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;&amp;nbsp;According to&amp;nbsp;&lt;a href=&quot;https://www.vox.com/the-highlight/23428166/college-enrollment-population-education-crash&quot;&gt;this&lt;/a&gt;&amp;nbsp;article, in the near future LESS people will be going to college. There is even a name for this upcoming shift: &lt;i&gt;The Enrollment Cliff. &lt;/i&gt;Why?&lt;/p&gt;&lt;p&gt;Is it Covid-related?&amp;nbsp; Is it that College has gotten to expensive? To liberal? To much cancel culture?&amp;nbsp; To many dead white males in the core? The core is to multicultural? Online learning is stealing our students?&amp;nbsp;&lt;/p&gt;&lt;p&gt;No. The reason is actually very boring and does not serve anyone&#39;s political agenda. (thats not quite right).&amp;nbsp; Or any agenda. And you can probably guess the cause from the title of this blog post.&lt;/p&gt;&lt;p&gt;For some years up until 2007 the birth rate was slowly dropping. Then there was a large drop in the birth rate after the recession of 2007, and the birth rate has never really recovered. And the recession might not have that much to do with it-- the long term move from an agricultural society (where kids are an economic gain) to an industrial one (where, after child labor laws and the expense of college, kids are an economic loss- though that can be debated) has resulted in a very long term decline in births.&amp;nbsp;&lt;/p&gt;&lt;p&gt;And from personal experience, I know (a) very few people who have 4 or more kids, (b) there is NO stigma about having 0 kids as there once was.&amp;nbsp; Of course the sample size of people I know may be skewed.&amp;nbsp;&lt;/p&gt;&lt;p&gt;ANYWAY, what will this mean for colleges?&amp;nbsp;&lt;/p&gt;&lt;p&gt;a) Harvard, Yale, etc will not be affected. Plenty of people will still apply. Note that they draw from all of American and also internationally.&amp;nbsp;&lt;/p&gt;&lt;p&gt;b) Colleges that draw from a local area may be affected a lot since they depend on locals, and that population may be shrinking.&amp;nbsp;&lt;/p&gt;&lt;p&gt;c) Schools in between Harvard and Small colleges- hard to say.&amp;nbsp;&lt;/p&gt;&lt;p&gt;d) The sports betting places paying schools to allow them to promote on campus (and in some cases helping them promote it) may find far less students to sucker into this loser&#39;s game. See my blog on this topic&amp;nbsp;&lt;a href=&quot;https://blog.computationalcomplexity.org/2023/02/it-is-more-important-than-ever-to-teach.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Univ of MD has around 4000 Computer Science majors (depending on who tells you this its either a brag or a complaint). In the Spring of 2023 there are three lectures of Discrete math of sizes 240, 270, and 90. Each of those also has recitations of&amp;nbsp; 30 (or so) each. If the decline is gradual (either from demographics or from the CS majors bubble finally bursting, or from the other reasons above) then I am sure we can handle it. If it declines very suddenly we may have a problem adjusting.&amp;nbsp;&lt;/p&gt;&lt;p&gt;One caveat to this that I&#39;ve heard is that immigration will save us. Maybe. But America is politically going in the opposite direction. The counterargument of &lt;i&gt;without immigration there will be less students&lt;/i&gt; &lt;i&gt;going to college &lt;/i&gt;is not that compelling to most Americans. There are other more intelligent and compelling pro-immigration arguments. However, American politics is no longer interested in compelling and logical arguments. (The notion that it once was may be nostalgia for a time that never was.)&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p class=&quot;authors&quot;&gt;By gasarch&lt;/p&gt;
  </content>
    <author>
      <name>Computational Complexity</name>
      <uri>http://blog.computationalcomplexity.org/</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">ECCC Papers: TR23-017 |  Near-Optimal Set-Multilinear Formula Lower Bounds | 

	Deepanshu Kush, 

	Shubhangi Saraf</title>
    <link href="https://eccc.weizmann.ac.il/report/2023/017"/>
    <id>https://eccc.weizmann.ac.il/report/2023/017</id>
    <updated>2023-02-27T15:04:14+00:00</updated>
    <content type="html" xml:lang="en">
    The seminal work of Raz (J. ACM 2013) as well as the recent breakthrough results by Limaye, Srinivasan, and Tavenas (FOCS 2021, STOC 2022) have demonstrated a potential avenue for obtaining lower bounds for general algebraic formulas, via strong enough lower bounds for set-multilinear formulas.

In this paper, we make progress along this direction by proving near-optimal lower bounds against low-depth as well
as unbounded-depth set-multilinear formulas.
More precisely, we show that over any field of characteristic zero, there is a polynomial $f$ computed by a polynomial-sized set-multilinear branching program (i.e., $f$ is in set-multilinear VBP) defined over $\Theta(n^2)$ variables and of degree $\Theta(n)$, such that any product-depth $\Delta$ set-multilinear formula computing $f$ has size at
least $n^{\Omega( n^{1/\Delta}/\Delta)}$. Moreover, we show that any unbounded-depth set-multilinear formula computing $f$ has size at least $n^{\Omega(\log n)}$.


If such strong lower bounds are proven for the iterated matrix multiplication (IMM) polynomial or rather, any polynomial
that is computed by an ordered set-multilinear branching program (i.e., a further restriction of set-multilinear VBP), then this would have dramatic consequences as it would imply super-polynomial lower bounds 
for general algebraic formulas (Raz, J. ACM 2013; Tavenas, Limaye, and Srinivasan, STOC 2022).

Prior to our work, either only weaker lower bounds were known for the IMM polynomial (Tavenas, Limaye, and Srinivasan, STOC 2022), or similar strong lower bounds were known but for a
hard polynomial not known to be even in set-multilinear VP (Kush and Saraf, CCC 2022; Raz, J. ACM 2009).

By known depth-reduction results, our lower bounds are essentially tight
for $f$ and in general, for any hard polynomial that is in set-multilinear VBP or set-multilinear VP.
Any asymptotic improvement in the lower bound (for a hard polynomial, say, in VNP) would imply super-polynomial lower bounds for general set-multilinear circuits.
  </content>
    <author>
      <name>ECCC Papers</name>
      <uri>https://eccc.weizmann.ac.il/</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Geometry: Revisiting Graph Persistence for Updates and Efficiency</title>
    <link href="http://arxiv.org/abs/2302.12796"/>
    <id>http://arxiv.org/abs/2302.12796</id>
    <updated>2023-02-27T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Dey_T/0/1/0/all/0/1&quot;&gt;Tamal K. Dey&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Hou_T/0/1/0/all/0/1&quot;&gt;Tao Hou&lt;/a&gt;&lt;/p&gt;&lt;p&gt;It is well known that ordinary persistence on graphs can be computed more
efficiently than the general persistence. Recently, it has also been shown that
zigzag persistence on graphs also exhibits similar behavior. Motivated by these
results, we revisit graph persistence and propose efficient algorithms
especially for local updates on filtrations, similar to what is done in
ordinary persistence for computing the vineyard. We show that, for a filtration
of length $m$ (i) switches (transpositions) in ordinary graph persistence can
be done in $O(\log^4 m)$ amortized time; (ii) zigzag persistence on graphs can
be computed in $O(m\log m)$ time, which improves a recent $O(m\log^4n)$ time
algorithm assuming $n$, the size of the union of all graphs in the filtration,
satisfies $n\in\Omega({m^\varepsilon})$ for any fixed $0&amp;lt;\varepsilon&amp;lt;1$; (iii)
open-closed, closed-open, and closed-closed bars in dimension $0$ for graph
zigzag persistence can be updated in $O(\log^4m)$ amortized time, whereas the
open-open bars in dimension $0$ and closed-closed bars in dimension $1$ can be
done in $O(m)$ time.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Geometry</name>
      <uri>https://arxiv.org/list/cs.CG/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Generative Models of Huge Objects</title>
    <link href="http://arxiv.org/abs/2302.12823"/>
    <id>http://arxiv.org/abs/2302.12823</id>
    <updated>2023-02-27T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Hu_L/0/1/0/all/0/1&quot;&gt;Lunjia Hu&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Livni_Navon_I/0/1/0/all/0/1&quot;&gt;Inbal Livni-Navon&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Reingold_O/0/1/0/all/0/1&quot;&gt;Omer Reingold&lt;/a&gt;&lt;/p&gt;&lt;p&gt;This work initiates the systematic study of explicit distributions that are
indistinguishable from a single exponential-size combinatorial object. In this
we extend the work of Goldreich, Goldwasser and Nussboim (SICOMP 2010) that
focused on the implementation of huge objects that are indistinguishable from
the uniform distribution, satisfying some global properties (which they coined
truthfulness). Indistinguishability from a single object is motivated by the
study of generative models in learning theory and regularity lemmas in graph
theory. Problems that are well understood in the setting of pseudorandomness
present significant challenges and at times are impossible when considering
generative models of huge objects.
&lt;/p&gt;
&lt;p&gt;We demonstrate the versatility of this study by providing a learning
algorithm for huge indistinguishable objects in several natural settings
including: dense functions and graphs with a truthfulness requirement on the
number of ones in the function or edges in the graphs, and a version of the
weak regularity lemma for sparse graphs that satisfy some global properties.
These and other results generalize basic pseudorandom objects as well as
notions introduced in algorithmic fairness. The results rely on notions and
techniques from a variety of areas including learning theory, complexity
theory, cryptography, and game theory.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: $k$-Center Clustering with Outliers in the MPC and Streaming Model</title>
    <link href="http://arxiv.org/abs/2302.12811"/>
    <id>http://arxiv.org/abs/2302.12811</id>
    <updated>2023-02-27T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Berg_M/0/1/0/all/0/1&quot;&gt;Mark de Berg&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Biabani_L/0/1/0/all/0/1&quot;&gt;Leyla Biabani&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Monemizadeh_M/0/1/0/all/0/1&quot;&gt;Morteza Monemizadeh&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Given a point set $P \subseteq X$ of size $n$ in a metric space $(X,dist)$ of
doubling dimension $d$ and two parameters $k \in N$ and $z \in N$, the
$k$-center problem with $z$ outliers asks to return a set $C^\ast \subseteq X$
of $k$ centers such that the maximum distance of all but $z$ points of $P$ to
their nearest center in $C^\ast$ is minimized. An $(\epsilon,k,z)$-coreset for
this problem is a weighted point set $P^*$ such that an optimal solution for
the $k$-center problem with $z$ outliers on $P^*$ gives a
$(1\pm\epsilon)$-approximation for the $k$-center problem with $z$ outliers on
$P$. We study the construction of such coresets in the Massively Parallel
Computing (MPC) model, and in the insertion-only as well as the fully dynamic
streaming model. We obtain the following results, for any given $0 &amp;lt; \epsilon
\le 1$: In all cases, the size of the computed coreset is $O(k/\epsilon^d+z)$.
&lt;/p&gt;
&lt;p&gt;- In the MPC model, we present a deterministic $2$-round and a randomized
$1$-round algorithm. Additionally, we provide a deterministic algorithm that
obtains a trade-off between the number of rounds, $R$, and the storage per
machine.
&lt;/p&gt;
&lt;p&gt;- For the insertion-only streaming model, we present an algorithm and a tight
lower bound to support it.
&lt;/p&gt;
&lt;p&gt;- We also discuss the dynamic streaming model, which allows both insertions
and deletions in the data stream. In this model, we present the first algorithm
and a lower bound.
&lt;/p&gt;
&lt;p&gt;- Finally, we consider the sliding window model, where we are interested in
maintaining an $(\epsilon,k,z)$-coreset for the last $W$ points in the stream,
we present a tight lower bound that confirms the optimality of the previous
work by De Berg, Monemizadeh, and Zhong (ESA2020).
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Beyond Moments: Robustly Learning Affine Transformations with Asymptotically Optimal Error</title>
    <link href="http://arxiv.org/abs/2302.12289"/>
    <id>http://arxiv.org/abs/2302.12289</id>
    <updated>2023-02-27T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Jia_H/0/1/0/all/0/1&quot;&gt;He Jia&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kothari_P/0/1/0/all/0/1&quot;&gt;Pravesh K . Kothari&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Vempala_S/0/1/0/all/0/1&quot;&gt;Santosh S. Vempala&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We present a polynomial-time algorithm for robustly learning an unknown
affine transformation of the standard hypercube from samples, an important and
well-studied setting for independent component analysis (ICA). Specifically,
given an $\epsilon$-corrupted sample from a distribution $D$ obtained by
applying an unknown affine transformation $x \rightarrow Ax+s$ to the uniform
distribution on a $d$-dimensional hypercube $[-1,1]^d$, our algorithm
constructs $\hat{A}, \hat{s}$ such that the total variation distance of the
distribution $\hat{D}$ from $D$ is $O(\epsilon)$ using poly$(d)$ time and
samples. Total variation distance is the information-theoretically strongest
possible notion of distance in our setting and our recovery guarantees in this
distance are optimal up to the absolute constant factor multiplying $\epsilon$.
In particular, if the columns of $A$ are normalized to be unit length, our
total variation distance guarantee implies a bound on the sum of the $\ell_2$
distances between the column vectors of $A$ and $A&#39;$, $\sum_{i =1}^d
\|a_i-\hat{a}_i\|_2 = O(\epsilon)$. In contrast, the strongest known prior
results only yield a $\epsilon^{O(1)}$ (relative) bound on the distance between
individual $a_i$&#39;s and their estimates and translate into an $O(d\epsilon)$
bound on the total variation distance. Our key innovation is a new approach to
ICA (even to outlier-free ICA) that circumvents the difficulties in the
classical method of moments and instead relies on a new geometric certificate
of correctness of an affine transformation. Our algorithm is based on a new
method that iteratively improves an estimate of the unknown affine
transformation whenever the requirements of the certificate are not met.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Optimal Bounds for Noisy Sorting</title>
    <link href="http://arxiv.org/abs/2302.12440"/>
    <id>http://arxiv.org/abs/2302.12440</id>
    <updated>2023-02-27T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Gu_Y/0/1/0/all/0/1&quot;&gt;Yuzhou Gu&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Xu_Y/0/1/0/all/0/1&quot;&gt;Yinzhan Xu&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Sorting is a fundamental problem in computer science. In the classical
setting, it is well-known that $(1\pm o(1)) n\log_2 n$ comparisons are both
necessary and sufficient to sort a list of $n$ elements. In this paper, we
study the Noisy Sorting problem, where each comparison result is flipped
independently with probability $p$ for some fixed $p\in (0, \frac 12)$. As our
main result, we show that $$(1\pm o(1)) \left( \frac{1}{I(p)} + \frac{1}{(1-2p)
\log_2 \left(\frac{1-p}p\right)} \right) n\log_2 n$$ noisy comparisons are both
necessary and sufficient to sort $n$ elements with error probability $o(1)$
using noisy comparisons, where $I(p)=1 + p\log_2 p+(1-p)\log_2 (1-p)$ is
capacity of BSC channel with crossover probability $p$. This simultaneously
improves the previous best lower and upper bounds (Wang, Ghaddar and Wang, ISIT
2022) for this problem.
&lt;/p&gt;
&lt;p&gt;For the related Noisy Binary Search problem, we show that $$
&lt;/p&gt;
&lt;p&gt;(1\pm o(1)) \left((1-\delta)\frac{\log_2(n)}{I(p)} + \frac{2 \log_2
\left(\frac 1\delta\right)}{(1-2p)\log_2\left(\frac {1-p}p\right)}\right) $$
noisy comparisons are both necessary and sufficient to find the predecessor of
an element among $n$ sorted elements with error probability $\delta$. This
extends the previous bounds of (Burnashev and Zigangirov, 1974), which are only
tight for $\delta = 1/n^{o(1)}$.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: The number of descendants in a random directed acyclic graph</title>
    <link href="http://arxiv.org/abs/2302.12467"/>
    <id>http://arxiv.org/abs/2302.12467</id>
    <updated>2023-02-27T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Janson_S/0/1/0/all/0/1&quot;&gt;Svante Janson&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We consider a well known model of random directed acyclic graphs of order
$n$, obtained by recursively adding vertices, where each new vertex has a fixed
outdegree $d\ge2$ and the endpoints of the $d$ edges from it are chosen
uniformly at random among previously existing vertices.
&lt;/p&gt;
&lt;p&gt;Our main results concern the number $X$ of vertices that are descendants of
$n$. We show that $X/\sqrt n$ converges in distribution; the limit distribution
is, up to a constant factor, given by the $d$th root of a Gamma distributed
variable. $\Gamma(d/(d-1))$. When $d=2$, the limit distribution can also be
described as a chi distribution $\chi(4)$. We also show convergence of moments,
and find thus the asymptotics of the mean and higher moments.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">Hung Le: Halperin-Zwick Algorithm for Spanners</title>
    <link href="https://minorfree.github.io/hz-spanner/"/>
    <id>https://minorfree.github.io/hz-spanner</id>
    <updated>2023-02-26T00:00:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;This post describes a simple linear time algorithm by Halperin-Zwick [6] for constructing a \((2k-1)\)-spanner of unweighted graphs for any given integer \(k\geq 1\). The spanner  has \(O(n^{1+1/k})\) edges and hence is sparse. When \(k = \log n\), it only has \(O(n)\) edges.  This sparsity makes spanners an important object in many applications.&lt;/p&gt;

&lt;p&gt;This post was inspired by my past attempt to track down the detail of the Halperin-Zwick algorithm. Halperin and Zwick never published their algorithm, and all papers I am aware of cite their unpublished manuscript [6]. The algorithm by Halperin-Zwick is a simple modification of an earlier algorithm by Pelege and Schäffer [8], which, according to Uri Zwick, is the reason why they did not publish their result. The spanner by Pelege and Schäffer [8] has stretch \(4k-3\) for the same sparsity. The idea of Halperin-Zwick algorithm was given as Exercise 3 in Chapter 16 of  the book by Peleg [7].&lt;/p&gt;

&lt;p&gt;First, let’s define spanners. Graphs in this post are connected.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;\(t\)-Spanner&lt;/strong&gt;: Given a graph \(G\), a \(t\)-spanner is a subgraph of \(G\), denoted by \(H\),  such that for every two vertices \(u,v\in V(G)\):&lt;/p&gt;

\[d_H(u,v)\leq t\cdot d_G(u,v)\]

&lt;hr /&gt;

&lt;p&gt;Here \(d_H\) and \(d_G\) denote the graph distances in \(H\) and in \(G\), respectively. Graph \(G\) could be weighted or unweighted; we only consider unweighted graphs in this post. The distance constraint on \(H\) implies that \(H\) is connected and spanning.&lt;/p&gt;

&lt;p&gt;Parameter \(t\) is called the &lt;em&gt;stretch&lt;/em&gt; of the spanner. We often construct a spanner with an odd stretch: \(t = 2k-1\) for some integer \(k\geq 1\). Why not even stretches? Short answer: there is no gain in terms of the worst case bounds for even stretch [1].&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Theorem&lt;/strong&gt; (Halperin-Zwick): Let \(G\) be an unweighted graph with \(n\) vertices and \(m\) edges. Let \(k\geq 1\) be any given integer. There is an algorithm that runs in time \(O(m)\) and constructs a \((2k-1)\)-spanner of \(G\) with \(O(n^{1+1/k})\) edges.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;It is often instructive to think about \(k=2\), i.e, constructing a \(3\)-spanner. And this is where we start.&lt;/p&gt;

&lt;h1 id=&quot;stretch-3&quot;&gt;Stretch 3&lt;/h1&gt;

&lt;p&gt;Here we seek a \(3\)-spanner with \(O(n^{3/2})\) edges. There are two steps: clustering and connecting the clusters. Let’s focus on clustering first. The idea is to: construct a set of radius-1 clusters (a set of stars) that have at least \(\sqrt{n}\) vertices each. This implies that the number of clusters is \(O(\sqrt{n})\) and hence we can afford to add one edge from each vertex to each cluster. The remaining vertices induce a graph of at most \(O(n^{3/2})\); we can add all the edges.&lt;/p&gt;

&lt;p&gt;The cluster can be constructed greedily; the pseudocode of the algorithm is given below. We use \(N_G(v)\) to denote neighbors of \(v\) in a graph \(G\).&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;span style=&quot;font-variant: small-caps&quot;&gt;Clustering&lt;/span&gt;\((G)\)&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;\(1.\) \({\mathcal C} \leftarrow \emptyset, \quad G_1\leftarrow G\)&lt;br /&gt;
\(2.\) while \(G_i \not= \emptyset\)&lt;br /&gt;
\(3.\)      \(x\leftarrow\) an arbitrary vertex in \(G_i\)&lt;br /&gt;
\(4.\)      \(C_x\leftarrow {x}\)&lt;br /&gt;
\(5.\)      if \(\lvert N_{G_i}(x)\rvert  \geq \sqrt{n}\)&lt;br /&gt;
\(6.\)            \(C_v\leftarrow C_v\cup N_{G_i}(x)\)&lt;br /&gt;
\(7.\)      \({\mathcal C} \leftarrow {\mathcal C}\cup {C_x}\) &lt;br /&gt;
\(8.\)       \(G_{i+1}\leftarrow G_i\setminus C_v, \quad i\leftarrow i+1\)&lt;br /&gt;
\(9.\) return \({\mathcal C}\)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;p&gt;We call the vertex \(v\) in the cluster \(C_v\) in line 4 the &lt;em&gt;center&lt;/em&gt; of the cluster. We use \(E(C_v)\) to the edges of \(G\) connecting \(v\) to other vertices in \(C_v\).&lt;/p&gt;

&lt;p&gt;Observe  that every cluster \(C\in {\mathcal C}\) has radius at most \(1\) and it has either at least \(\sqrt{n}\) vertices or  exactly one vertex. We call \(C\) a &lt;em&gt;heavy cluster&lt;/em&gt; if \(\lvert C \rvert\geq \sqrt{n}\), and a &lt;em&gt;light cluster&lt;/em&gt; otherwise.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Observation 1&lt;/strong&gt;: The number of heavy clusters in \({\mathcal C}\) is at most \(\sqrt{n}\).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;To get a 3-spanner of \(G\), we simply add an edge from every vertex to each heavy cluster of \({\mathcal C}\), and an edge between every pair of light clusters. (Light clusters are singletons.) 
***
 &lt;span style=&quot;font-variant: small-caps&quot;&gt;3Spanner&lt;/span&gt;\((G)\)&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;\(1.\) \({\mathcal C} \leftarrow\)&lt;span style=&quot;font-variant: small-caps&quot;&gt;Clustering&lt;/span&gt;\((G)\)&lt;br /&gt;
\(2.\) \(H\leftarrow (V,\emptyset)\)&lt;br /&gt;
\(3.\) for each heavy cluster \(C\in {\mathcal C}\)&lt;br /&gt;
\(4.\)      add \(E(C)\) to \(H\)&lt;br /&gt;
\(5\).      for each vertex \(v \in N_G(C)\)&lt;br /&gt;
\(6.\)            \((v,u)\leftarrow\) an arbitrary edge from \(v\) to \(C\)&lt;br /&gt;
\(7.\)            add \((u,v)\) to \(H\)&lt;br /&gt;
\(8.\) add to \(H\) all edges between light clusters&lt;br /&gt;
\(9.\) return \(H\)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;In line 5, we use \(N_G(C)\) to denote the set of neighbors of \(C\), which are vertices are not in \(C\) and having at least one edge to \(C\).  The running time is clearly \(O(m)\).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sparsity analysis.&lt;/strong&gt; Note that \(E(C)\leq \lvert C \rvert-1\). Thus, the total number of edges added to \(H\) in line 4 over all iterations is at most \(n-1\). Furthermore, the number of edges added to \(H\) in the loop in line 5 is at most \(n\) and hence by Observation 1, the total number of edges added in lines 3-7 is \(O(n\sqrt{n}) = O(n^{3/2})\).&lt;/p&gt;

&lt;p&gt;To bound the number of edges added in line 8, observe that, if we order light clusters by the order it is added to \({\mathcal C}\) in line 7 of algorithm &lt;span style=&quot;font-variant: small-caps&quot;&gt;Clustering&lt;/span&gt;, then each light cluster is incident to at most \(\sqrt{n}\) light clusters following it in the order. It follows that the total number of edges added in line 8 is \(O(n\sqrt{n}) = O(n^{3/2})\).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stretch analysis.&lt;/strong&gt; We show that \(d_G(u,v)\leq 3 d_H(u,v)\). By the triangle inequality, it suffices to show the inequality for every edge \((u,v)\) of \(G\). This means we have to show that \(d_H(u,v)\leq 3\).  This inequality holds if \((u,v)\in E(H)\), and hence we only need to consider the case where at least one of \(u\) and \(v\) is in a heavy cluster.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/figs/clusters.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figure 1: (a) stretch-3 path for edge \((u,v)\) and (b) stretch-\((2k-1)\) path for edge \((u,v)\)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If \(u\) and \(v\) are in the same heavy cluster \(C\), then \(d_H(u,v)\leq 2\) and the stretch guarantee holds. Otherwise, let \(C_x\) be the heavy cluster centered at \(x\) containing \(v\), say. As \((u,v)\not\in H\), there must be another vertex \(w\in C_x\) such that \((u,w)\in H\) by the construction in line 6. Thus, the path \(u\rightarrow w\rightarrow x\rightarrow v\) is a path of length 3 in \(H\) between \(u\) and \(v\), as desired. See Figure 1(a).&lt;/p&gt;

&lt;h1 id=&quot;larger-stretches&quot;&gt;Larger Stretches&lt;/h1&gt;

&lt;p&gt;The algorithm for constructing a \((2k-1)\)-spanner with \(O(n^{1+1/k})\) edges is somewhat similar to the stretch-3 case, but we will need a finer analysis. A key observation, which we also use in the 3-spanner construction, is that if we have a cluster, say \(C\), of radius \(k\), and a vertex \(v\in N_G(C)\), it suffices to keep only one edge from \(v\) to \(C\). Thus, as long as \(N_G(C)\) has at most \(n^{1/k}\lvert C \rvert\) vertices, we can add an edge from \(v\) to \(C\) for each \(v\in N_G(C)\); the &lt;em&gt;average number of edges added per vertex&lt;/em&gt; of \(C\) is \(n^{1/k}\).&lt;/p&gt;

&lt;p&gt;What if \(\lvert N_G(C) \rvert \geq n^{1/k}\lvert C \rvert\)? In this case, we simply grow \(C\) by adding all of its neighbors. How many times will it grow? At most \(k-1\) times, as every time \(C\) grows, its size increases by a factor of strictly larger than \(n^{1/k}\), and there are only \(n\) vertices in the graph.&lt;/p&gt;

&lt;p&gt;The pseudocode of the algorithm is given below. The set \(A\) holds the edges between \(C\) and its neighbors described above. The rest is essentially the same as the clustering for stretch 3.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;span style=&quot;font-variant: small-caps&quot;&gt;Clustering&lt;/span&gt;\((G,k)\)&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;\(1.\) \({\mathcal C} \leftarrow \emptyset, \quad A\leftarrow \emptyset, \quad G_1\leftarrow G\)&lt;br /&gt;
\(2.\) while \(G_i \not= \emptyset\)&lt;br /&gt;
\(3.\)      \(x\leftarrow\) an arbitrary vertex in \(G_i\)&lt;br /&gt;
\(4.\)      \(C_x\leftarrow {x}\)&lt;br /&gt;
\(5.\)      while \(\lvert N_{G_i}(C_x)\rvert \geq n^{1/k} \lvert C_{x} \rvert\)&lt;br /&gt;
\(6.\)            \(C_v\leftarrow C_x\cup N_{G_i}(C_x)\)&lt;br /&gt;
\(7.\)      for each \(v \in N_{G_i}(C_x)\)&lt;br /&gt;
\(8.\)            \((v,u)\leftarrow\) an arbitrary edge from \(v\) to \(C\)&lt;br /&gt;
\(9.\)            add \((v,u)\) to \(A\)&lt;br /&gt;
\(10.\)      \({\mathcal C} \leftarrow {\mathcal C}\cup {C_v}\) &lt;br /&gt;
\(11.\)       \(G_{i+1}\leftarrow G_i\setminus C_v, \quad i\leftarrow i+1\)&lt;br /&gt;
\(12.\) return \(({\mathcal C},A)\)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;Once we perform clustering, we only need to add the set \(A\) and the edges inside each cluster to the spanner.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;span style=&quot;font-variant: small-caps&quot;&gt;Spanner&lt;/span&gt;\((G,k)\)&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;\(1.\) \(H\leftarrow (V,\emptyset)\)&lt;br /&gt;
\(2.\) \(({\mathcal C},A) \leftarrow\)&lt;span style=&quot;font-variant: small-caps&quot;&gt;Clustering&lt;/span&gt;\((G,k)\)&lt;br /&gt;
\(3.\) add \(A\) to \(H\)&lt;br /&gt;
\(4.\) for each cluster \(C\in {\mathcal C}\)&lt;br /&gt;
\(5.\)      add \(E(C)\) to \(H\)&lt;br /&gt;
\(6.\) return \(H\)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Sparsity analysis.&lt;/strong&gt; The number of edges added in the loop in line 4 is at most \(n-1\). Observe that for each cluster \(C_x\) added to \({\mathcal C}\) in line 6 of &lt;span style=&quot;font-variant: small-caps&quot;&gt;Clustering&lt;/span&gt;, the number of edges added to \(A\) in the loop in line 7 is at most \(n^{1/k}\lvert C_{x} \rvert\). Thus, \(\lvert A \rvert\leq n^{1/k}\sum_{C}\lvert C \rvert \leq n^{1+1/k}\). This implies that \(\lvert E(H) \rvert = O(n^{1+1/k})\).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stretch analysis.&lt;/strong&gt; Let \((u,v)\) be any edge of \(G\) such that \((u,v)\not\in H\). We need to show that \(d_H(u,v)\leq 2k-1\). Observe that:&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Observation 2&lt;/strong&gt;: Every cluster \(C_x\in {\mathcal C}\) has radius at most \(k-1\).&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Proof: Every time the radius of \(C_x\) increases by \(1\), the size of \(C_x\) increases by a factor of strictly larger than \(n^{1/k}\) by the construction. Thus, after \(t\) rounds, \(n\geq \lvert C_{x} \rvert &amp;gt; n^{t/k}\), which gives \(t\leq k-1\).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Let \(C_x\) be the cluster containing \(v\). If \(u\in C_x\), then \(d_G(u,v)\leq 2\cdot (k-1)\). Otherwise, suppose w.l.o.g, that \(v\) is clustered before \(u\). Observe that \(u\in N_{G_{i}}(C_x)\) and hence an edge \((u,w)\) is added to \(A\), which is eventually added to \(H\). See Figure 1(b). Thus, the path consisting of an edge \((u,w)\), the shortest path from \(w\) to \(x\), and the shortest path from \(x\) to \(v\), is a path of length at most \(2(k-1)+1 = 2k-1\) between \(u\) and \(v\) in \(H\), as desired.&lt;/p&gt;

&lt;h1 id=&quot;optimality-the-girth-conjecture&quot;&gt;Optimality: The Girth Conjecture&lt;/h1&gt;

&lt;p&gt;It is not hard to construct a class of graphs such that for any graph \(G\) of size \(n\) in the class, the Halperin-Zwick algorithm produces a \((2k-1)\)-spanner for \(G\) that has \(\Omega(n^{1+1/k})\) edges. Could we go below the bound \(\Theta(n^{1+1/k})\) on the number of edges (by a different algorithm, say)? The consensus seems to be no, though currently we do not have a definite answer.&lt;/p&gt;

&lt;p&gt;Spanners have a tight connection to the girth of graphs; a graph has girth \(g\) if the shortest simple cycle in the graph has length \(g\).&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Observation 3&lt;/strong&gt;: Let \(H\) be a graph of girth \(2k+1\). Then any \((2k-1)\)-spanner of \(H\) must contain every edge of \(H\).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Observation 3 essentially says that any \((2k-1)\)-spanner of \(H\) must be itself. Thus, the question of the optimality of spanners reduces to: is there any graph with \(o(n^{1+1/k})\) edges and girth \((2k+1)\)? The Erdős’ Girth Conjecture implies that the answer is no.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Erdős’ Girth Conjecture [5]&lt;/strong&gt;: For any \(n \geq 1\) and \(k\geq 1\), there exists a graph with \(n\) vertices of girth \((2k+1)\) that has \(\Omega(n^{1+1/k})\) edges.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Erdős stated a lower bound \(c_k\cdot n^{1+1/k}\) on the number of edges in the conjecture [5]; that is, the constant is allowed to degrade as \(k\) increases.  The spanner literature often cites the stronger version above, where the constant remains the same for every \(k\). The Erdős’ Girth Conjecture is known to hold for a few small values of \(k\).&lt;/p&gt;

&lt;p&gt;While Erdős’ Girth Conjecture remains wide open, we could ask: is it possible to construct a \((2k-1)\)-spanner that has girth at least \(2k+1\)? If yes, then the output spanner is (existentially) optimal regardless of the truth of Erdős’ Girth Conjecture.&lt;/p&gt;

&lt;p&gt;It turns out that the following simple greedy algorithm, formally described in [2] and attributed to Marshall Bern, does the job: consider edges in increasing weight order and add an edge \(e\) to the current spanner if the distance between its endpoints in the spanner is larger than \((2k-1)w(e)\). The algorithm works for weighted graphs as well. It is an instructive exercise to show that the output graph is a \((2k-1)\)-spanner and has girth at least \(2k+1\).&lt;/p&gt;

&lt;p&gt;The major downsize of the greedy algorithm is its running time: the current best known implemtation takes \(O(mn^{1+1/k})\) time. Even in unweighted graphs, to the best of my knowledge, the following problem remains open:&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Open Problem&lt;/strong&gt;: Construct a maximal subgraph of girth at least \((2k+1)\) in nearly linear time.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;For an unweighted graph, a maximal subgraph of girth at least \((2k+1)\) is a \((2k-1)\)-spanner.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;We have mentioned two algorithms for constructing a spanner. Another beautiful algorithm that I hope to cover in a future post is the randomized construction by Baswana and Sen [4]. A notable feature of the Baswana-Sen algorithm is that it can be implemented efficiently in both parallel and distributed models. The recent survey paper [1] contains almost all known algorithms for spanners and its sibling problems.&lt;/p&gt;

&lt;h1 id=&quot;bibliographical-notes&quot;&gt;Bibliographical Notes&lt;/h1&gt;

&lt;p&gt;The concept of a spanner was formally introduced by Peleg and Schaffer [8], though its conception was much earlier. Peleg and Schaffer constructed a \((4k-3)\)-spanner with \(O(n^{1+1/k})\) edges by connecting every pair of clusters in the output of &lt;span style=&quot;font-variant: small-caps&quot;&gt;Clustering&lt;/span&gt;\((G,k)\) by an edge. This clustering procedure was due to Awerbuch [2].&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;p&gt;[1] Ahmed, R., Bodwin, G., Sahneh, F. D., Hamm, K., Jebelli, M. J. L., Kobourov, S., and Spence, R. (2020). Graph spanners: A tutorial review. Computer Science Review, 37, 100253.&lt;/p&gt;

&lt;p&gt;[2] Althöfer, I., Das, G., Dobkin, D., Joseph, D., and Soares, J. (1993). On sparse spanners of weighted graphs. Discrete \&amp;amp; Computational Geometry, 9(1), 81-100.&lt;/p&gt;

&lt;p&gt;[3] Awerbuch, B. (1985). Complexity of network synchronization. Journal of the ACM (JACM), 32(4), 804-823.&lt;/p&gt;

&lt;p&gt;[4] Baswana, S., and Sen, S. (2007). A simple and linear time randomized algorithm for computing sparse spanners in weighted graphs. Random Structures &amp;amp; Algorithms, 30(4), 532-563.&lt;/p&gt;

&lt;p&gt;[5] Erdős, P. (1965). Extremal problems in graph theory. In Proceedings of the Symposium on Theory of Graphs and its Applications, page 29-36, 1963.&lt;/p&gt;

&lt;p&gt;[6] Halperin, S., and Zwick, U. (1996). Unpublished manuscript.&lt;/p&gt;

&lt;p&gt;[7] Peleg, D. (2000). Distributed computing: a locality-sensitive approach. Society for Industrial and Applied Mathematics.&lt;/p&gt;

&lt;p&gt;[8] Peleg, D., and Schäffer, A. A. (1989). Graph spanners. Journal of graph theory, 13(1), 99-116.&lt;/p&gt;&lt;p class=&quot;authors&quot;&gt;By Hung Le&lt;/p&gt;
  </content>
    <author>
      <name>Hung Le</name>
      <uri>https://minorfree.github.io</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">Richard Lipton: STOC 2023</title>
    <link href="https://rjlipton.wpcomstaging.com/2023/02/25/stoc-2023/"/>
    <id>https://rjlipton.wpcomstaging.com/?p=21165</id>
    <updated>2023-02-25T23:40:51+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;
&lt;a href=&quot;http://acm-stoc.org/stoc2023/&quot;&gt;STOC 2023&lt;/a&gt; is the 55th Annual ACM Symposium on Theory of Computing. It will be held on June 20-23, 2023 in Orlando, Florida. &lt;/p&gt;
&lt;p&gt;
Perhaps the best paper ever at STOC was by Stephen Cook. His 1971 STOC paper &lt;a href=&quot;https://dl.acm.org/doi/10.1145/800157.805047&quot;&gt;The Complexity of Theorem Proving Procedures&lt;/a&gt; formalized the notions of polynomial-time and started the search to prove &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{P}&quot; class=&quot;latex&quot; /&gt; is not equal to &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{NP}&quot; class=&quot;latex&quot; /&gt;. &lt;/p&gt;
&lt;p&gt;
&lt;a href=&quot;https://rjlipton.wpcomstaging.com/2023/02/25/stoc-2023/cook/&quot; rel=&quot;attachment wp-att-21168&quot;&gt;&lt;img data-attachment-id=&quot;21168&quot; data-permalink=&quot;https://rjlipton.wpcomstaging.com/2023/02/25/stoc-2023/cook/&quot; data-orig-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/cook.jpeg?fit=290%2C174&amp;amp;ssl=1&quot; data-orig-size=&quot;290,174&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;cook&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/cook.jpeg?fit=290%2C174&amp;amp;ssl=1&quot; data-large-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/cook.jpeg?fit=290%2C174&amp;amp;ssl=1&quot; decoding=&quot;async&quot; loading=&quot;lazy&quot; src=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/cook.jpeg?resize=290%2C174&amp;#038;ssl=1&quot; alt=&quot;&quot; width=&quot;290&quot; height=&quot;174&quot; class=&quot;aligncenter size-full wp-image-21168&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
See &lt;a href=&quot;https://en.wikipedia.org/wiki/Symposium_on_Theory_of_Computing&quot;&gt;this&lt;/a&gt; for more. &lt;/p&gt;
&lt;p&gt;
&lt;p&gt;&lt;H2&gt; Papers with Pointers &lt;/H2&gt;&lt;/p&gt;
&lt;p&gt;&lt;p&gt;
Many web sites on STOC 2023 list the accepted papers but not with pointers. We planned to create these links ourself but we discovered this site that already has them:&lt;/p&gt;
&lt;p&gt;
&lt;a href=&quot;https://www.conference-publishing.com/list.php?Event=STOC23&quot;&gt;List of papers&lt;/a&gt; with pointers. &lt;/p&gt;
&lt;p&gt;
This saved us having to create the pointers. Try them&amp;#8212;fun to see the accepted papers.&lt;/p&gt;
&lt;p&gt;
&lt;p&gt;&lt;H2&gt; The Program Committee &lt;/H2&gt;&lt;/p&gt;
&lt;p&gt;&lt;p&gt;
Thanks to the program committee for working so hard on putting together such a terrific program. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
Amir Abboud (Weizmann Institute of Science) &lt;/p&gt;
&lt;li&gt;
Josh Alman (Columbia University) &lt;/p&gt;
&lt;li&gt;
Andris Ambainis (University of Latvia) &lt;/p&gt;
&lt;li&gt;
Nima Anari (Stanford University) &lt;/p&gt;
&lt;li&gt;
Srinivasan Arunachalam (IBM Thomas J. Watson Research Center) &lt;/p&gt;
&lt;li&gt;
Petra Berenbrink (Universitat Hamburg) &lt;/p&gt;
&lt;li&gt;
Aaron Bernstein (Rutgers University) &lt;/p&gt;
&lt;li&gt;
Aditya Bhaskara (University of Utah) &lt;/p&gt;
&lt;li&gt;
Sayan Bhattacharya (University of Warwick) &lt;/p&gt;
&lt;li&gt;
Eric Blais (University of Waterloo) &lt;/p&gt;
&lt;li&gt;
Hans Bodlaender (Utrecht University) &lt;/p&gt;
&lt;li&gt;
Adam Bouland (Stanford University) &lt;/p&gt;
&lt;li&gt;
Anne Broadbent (University of Ottawa) &lt;/p&gt;
&lt;li&gt;
Mark Bun (Boston University) &lt;/p&gt;
&lt;li&gt;
Keren Censor-Hillel (Technion) &lt;/p&gt;
&lt;li&gt;
Timothy Chan (University of Illinois at Urbana-Champaign) &lt;/p&gt;
&lt;li&gt;
Arkadev Chattopadhyay (Tata Institute of Fundamental Research) &lt;/p&gt;
&lt;li&gt;
Chandra Chekuri (University of Illinois at Urbana-Champaign) &lt;/p&gt;
&lt;li&gt;
Xue Chen (University of Science and Technology of China) &lt;/p&gt;
&lt;li&gt;
Gil Cohen (Tel Aviv University) &lt;/p&gt;
&lt;li&gt;
Dana Dachman-Soled (University of Maryland College Park) &lt;/p&gt;
&lt;li&gt;
Anindya De (University of Pennsylvania) &lt;/p&gt;
&lt;li&gt;
Shahar Dobzhinski (Weizmann Institute of Science) &lt;/p&gt;
&lt;li&gt;
Shaddin Dughmi (University of Southern California) &lt;/p&gt;
&lt;li&gt;
Vida Dujmovic (University of Ottawa) &lt;/p&gt;
&lt;li&gt;
Yuval Filmus (Technion) &lt;/p&gt;
&lt;li&gt;
Sumegha Garg (Stanford University) &lt;/p&gt;
&lt;li&gt;
Rong Ge (Duke University) &lt;/p&gt;
&lt;li&gt;
Elena Grigorescu (Purdue University) &lt;/p&gt;
&lt;li&gt;
Shuichi Hirahara (National Institute of Informatics, Japan) &lt;/p&gt;
&lt;li&gt;
Zhiyi Huang (University of Hong Kong) &lt;/p&gt;
&lt;li&gt;
Sungjin Im (University of California, Merced) &lt;/p&gt;
&lt;li&gt;
Giuseppe Italiano (LUISS University) &lt;/p&gt;
&lt;li&gt;
Ken-ichi Kawarabayashi (National Institute of Informatics, Japan) &lt;/p&gt;
&lt;li&gt;
Sanjeev Khanna (University of Pennsylvania) &lt;/p&gt;
&lt;li&gt;
Robin Kothari (Google Research) &lt;/p&gt;
&lt;li&gt;
Marvin Kunnemann (TU Kaiserslautern) &lt;/p&gt;
&lt;li&gt;
Rasmus Kyng (ETH Zurich) &lt;/p&gt;
&lt;li&gt;
Sophie Laplante (Universite Paris Cite) &lt;/p&gt;
&lt;li&gt;
Hung Le (University of Massachusetts, Amherst) &lt;/p&gt;
&lt;li&gt;
Daniel Lokshtanov (University of California, Santa Barbara) &lt;/p&gt;
&lt;li&gt;
Sepideh Mahabadi (Microsoft Research) &lt;/p&gt;
&lt;li&gt;
Nicole Megow (Universitat Bremen) &lt;/p&gt;
&lt;li&gt;
Slobodan Mitrovic (University of California, Davis) &lt;/p&gt;
&lt;li&gt;
Ankur Moitra (Massachusetts Institute of Technology) &lt;/p&gt;
&lt;li&gt;
Shay Moran (Technion and Google Research) &lt;/p&gt;
&lt;li&gt;
Christopher Musco (New York University) &lt;/p&gt;
&lt;li&gt;
Krzysztof Onak (Boston University) &lt;/p&gt;
&lt;li&gt;
Rotem Oshman (Tel Aviv University) &lt;/p&gt;
&lt;li&gt;
Prasad Raghavendra (University of California, Berkeley) &lt;/p&gt;
&lt;li&gt;
Susanna Rezende (Lund University) &lt;/p&gt;
&lt;li&gt;
Robert Robere (McGill University) &lt;/p&gt;
&lt;li&gt;
Alon Rosen (Bocconi University and Reichman University) &lt;/p&gt;
&lt;li&gt;
Ron Rothblum (Technion) &lt;/p&gt;
&lt;li&gt;
Alex Russell (University of Connecticut) &lt;/p&gt;
&lt;li&gt;
Laura Sanita (Bocconi University) &lt;/p&gt;
&lt;li&gt;
Thatchaphol Saranurak (University of Michigan) &lt;/p&gt;
&lt;li&gt;
Tselil Schramm (Stanford University) &lt;/p&gt;
&lt;li&gt;
Rocco Servedio (Columbia University), Chair &lt;/p&gt;
&lt;li&gt;
Tasos Sidiropoulos (University of Illinois at Chicago) &lt;/p&gt;
&lt;li&gt;
Alex Slivkins (Microsoft Research) &lt;/p&gt;
&lt;li&gt;
Srikanth Srinivasan (Aarhus University) &lt;/p&gt;
&lt;li&gt;
David Steurer (ETH Zurich) &lt;/p&gt;
&lt;li&gt;
Ola Svensson (EPFL) &lt;/p&gt;
&lt;li&gt;
Chaitanya Swamy (University of Waterloo) &lt;/p&gt;
&lt;li&gt;
Madhur Tulsiani (Toyota Technological Institute at Chicago) &lt;/p&gt;
&lt;li&gt;
Christos Tzamos (University of Wisconsin-Madison) &lt;/p&gt;
&lt;li&gt;
Muthu Venkitasubramaniam (Georgetown University) &lt;/p&gt;
&lt;li&gt;
Ben Lee Volk (Reichman University) &lt;/p&gt;
&lt;li&gt;
Andreas Wiese (Technical University of Munich) &lt;/p&gt;
&lt;li&gt;
Mary Wootters (Stanford University) &lt;/p&gt;
&lt;li&gt;
Yuichi Yoshida (National Institute of Informatics, Japan) &lt;/p&gt;
&lt;li&gt;
Huacheng Yu (Princeton University)
&lt;/ul&gt;
&lt;p&gt;
&lt;p&gt;&lt;H2&gt; Open Problems &lt;/H2&gt;&lt;/p&gt;
&lt;p&gt;&lt;p&gt;
I hope having the list of accepted papers with links is of some value. Cook&amp;#8217;s paper might be the best ever, but it did not get the award for best paper at the time. Here are some of the more recent &lt;a href=&quot;https://www.sigact.org/prizes/best_paper.html&quot;&gt;best papers&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;
2020	&lt;a href=&quot;https://arxiv.org/abs/1908.08483&quot;&gt;Improved Bounds for The Sunflower Lemma&lt;/a&gt; &lt;br /&gt;
2019	&lt;a href=&quot;https://arxiv.org/abs/1809.07115&quot;&gt;The Reachability Problem for Petri Nets is Not Elementary&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;
I like the second one above for personal reasons that I expounded long ago &lt;a href=&quot;https://rjlipton.wpcomstaging.com/2009/04/08/an-expspace-lower-bound/&quot;&gt;here&lt;/a&gt;, and which Ken expanded on &lt;a href=&quot;https://rjlipton.wpcomstaging.com/2015/07/12/the-long-reach-of-reachability/&quot;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
&lt;p class=&quot;authors&quot;&gt;By rjlipton&lt;/p&gt;
  </content>
    <author>
      <name>Richard Lipton</name>
      <uri>https://rjlipton.wpcomstaging.com</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">David Eppstein: Isohedral Delaunay complexes</title>
    <link href="https://11011110.github.io/blog/2023/02/25/isohedral-delaunay-complexes.html"/>
    <id>https://11011110.github.io/blog/2023/02/25/isohedral-delaunay-complexes</id>
    <updated>2023-02-25T09:19:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;The Delaunay complex of a set of points in the Euclidean plane partitions the convex hull of the points into polygonal cells. Each cell is the convex hull of a co-circular subset of the points whose circle does not contain any more points. It’s often called a &lt;a href=&quot;https://en.wikipedia.org/wiki/Delaunay_triangulation&quot;&gt;Delaunay triangulation&lt;/a&gt;, because for points in &lt;a href=&quot;General position&quot;&gt;general position&lt;/a&gt; the cells are all triangles, but I do not want to assume general position here. It is &lt;a href=&quot;https://en.wikipedia.org/wiki/Isohedral_figure&quot;&gt;isohedral&lt;/a&gt; when all of the cells are symmetric to each other (maybe a little more strong than asking for them all to have the same shape). For example, the familiar tilings of the plane by squares or regular hexagons are both isohedral and Delaunay. Another example is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Deltoidal_trihexagonal_tiling&quot;&gt;tiling of the plane by 60°–90°–120° kites&lt;/a&gt;:&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;/blog/assets/2023/tetrille-delaunay.svg&quot; alt=&quot;Tiling of the plane by 60°–90°–120° kites, with shading showing that the circumcircles of each site are empty of other tiling vertices&quot; style=&quot;width:100%;max-width:720px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some other tilings, even very symmetric ones, might not be Delaunay. For instance, it is impossible to make a Delaunay version of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Cairo_pentagonal_tiling&quot;&gt;Cairo pentagonal tiling&lt;/a&gt; because its tiles have two complementary angles or two right angles, impossible for a co-circular pentagon.&lt;/p&gt;

&lt;p&gt;In these cases, the symmetries are of the familiar kind, translations and rotations of the plane. But translation symmetry forces us to use infinitely many points. Can finite Delaunay complexes be isohedral? Sort of, maybe, but with a different kind of symmetry.
You can translate between Delaunay complexes on the plane and on a sphere by &lt;a href=&quot;https://en.wikipedia.org/wiki/Stereographic_projection&quot;&gt;stereographic projection&lt;/a&gt;, and translations, rotations, and scaling in the plane become Möbius transformations on the sphere. So the projection onto the sphere of a square grid becomes a spherical Delaunay complex that is symmetric under Möbius transformations.&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;/blog/assets/2023/stereographic-square-tiling.svg&quot; alt=&quot;Stereographic projection of a square grid from the plane to a sphere&quot; title=&quot;CC-BY-SA 4.0 image https://commons.wikimedia.org/wiki/File:Stereogr-proj-netz.svg by Ag2gaeh from Wikimedia commons&quot; style=&quot;width:100%;max-width:720px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Rotations of the sphere are also a very special case of Möbius transformations, so we can look for Delaunay complexes with rotational symmetries. Suppose you have a polyhedron all of whose vertices lie on a sphere, and all of whose faces are symmetric to each other by rotations of the sphere. Then the intersection of the sphere with any face plane of the polyhedron is a circle through the vertices of a face that does not contain any other vertices, the defining property of a Delaunay cell. So these polyhedra are isohedral spherical Delaunay complexes. This is true, for instance, for the Platonic solids and for the two infinite families of &lt;a href=&quot;https://en.wikipedia.org/wiki/Bipyramid&quot;&gt;bipyramids&lt;/a&gt; and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Trapezohedron&quot;&gt;trapezohedra&lt;/a&gt; but false for some other isohedral polyhedra like the &lt;a href=&quot;https://en.wikipedia.org/wiki/Rhombic_dodecahedron&quot;&gt;rhombic dodecahedron&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Triakis_tetrahedron&quot;&gt;triakis tetrahedron&lt;/a&gt; whose vertices cannot all be placed on a sphere.&lt;/p&gt;

&lt;p&gt;You can map these spherical Delaunay complexes back onto the plane by stereographic projection again. You might think that the result is always a planar Delaunay complex in which all faces are symmetric to each other under Möbius transformation, but there’s a catch. The projection preserves circles, but it turns inside out the ones that contain the pole of the projection. If they were empty on the sphere, they instead turn into circles in the plane that contain every other point. These inside-out circles correspond to Delaunay cells on the sphere that do not map to Delaunay cells in the plane. For instance, projecting the cube vertices back down to the plane with the pole at the midpoint of a cube edge produces a Delaunay complex with only four quadrilaterals; the other two faces of the cube come from inside-out circles and do not become Delaunay cells.&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;/blog/assets/2023/cube-edge-projection.svg&quot; alt=&quot;Delaunay complex of a cube, stereographically projected onto the plane with its pole at an edge midpoint&quot; style=&quot;width:100%;max-width:720px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All of this generalizes directly to 3d Delaunay triangulations, and to isohedral 4d polytopes with cospherical vertices, but less is known about what shapes are possible. The regular 4-polytopes, certainly, have symmetric facets and cospherical vertices, but there are other possibilities as well. The &lt;a href=&quot;http://www.polytope.net/hedrondude/dice4.htm&quot;&gt;isohedral 4-polytopes with up to 20 sides&lt;/a&gt; have been classified, but I don’t know which of these can have cospherical vertices.&lt;/p&gt;

&lt;p&gt;There are, at least, three different infinite families of isohedral 4d polytopes with cospherical vertices, analogous to the bipyramids and trapezohedra. To describe this, it helps to think of four-dimensional Euclidean space as having two complex numbers \(\alpha\) and \(\beta\) as coordinates, and the unit sphere as the points for which \(\vert\alpha\vert^2+\vert\beta\vert^2=1\). These are the state vectors of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Qubit&quot;&gt;qubit&lt;/a&gt;, so we can write these points on the sphere using &lt;a href=&quot;https://en.wikipedia.org/wiki/Bra%E2%80%93ket_notation&quot;&gt;quantum notation&lt;/a&gt; as \(\alpha\,\vert0\rangle+\beta\,\vert1\rangle\), where \(\vert0\rangle\) and \(\vert1\rangle\) are just the two basis vectors for the two-complex-number coordinate system. In this notation, consider the following three sets of points, all on the unit sphere, for integer parameters \(n\) and \(m\):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Let \(X\) be the set of \(n\) points \(e^{2\pi i/n}\,\vert0\rangle\), for the integers \(i\) with \(0\le i\lt n\). These form a regular \(n\)-gon in the plane \(\beta=0\).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Let \(Y\) be the set of \(m\) points \(e^{2\pi j/m}\,\vert1\rangle\), for the integers \(j\) with \(0\le j\lt n\). These form a regular \(m\)-gon, in the perpendicular plane \(\alpha=0\).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Let \(Z\) be the set of \(mn\) points&lt;/p&gt;

\[\frac{1}{\sqrt 2}e^{2\pi i/n}\,\vert0\rangle + \frac{1}{\sqrt 2}e^{2\pi j/m}\,\vert1\rangle,\]

    &lt;p&gt;for the same ranges of \(i\) and \(j\). These lie on a &lt;a href=&quot;https://en.wikipedia.org/wiki/Flat_torus&quot;&gt;flat torus&lt;/a&gt;, the Cartesian product of two circles, and form the vertices of a tiling of the torus by rectangles.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then the convex hull of \(X\cup Y\) has as its facets \(mn\) congruent tetrahedra, each formed as the convex hull of an edge of the \(X\)-polygon and an edge of the \(Y\)-polygon. The convex hull of \(Z\) is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Duoprism&quot;&gt;duoprism&lt;/a&gt; whose facets are two kinds of prisms: the Cartesian product of an edge of the \(X\)-polygon with the whole \(Y\)-polygon, and vice versa. When \(n=m\) these two prisms are congruent and the resulting duoprism is isohedral, and dual to the convex hull of \(X\cup Y\). Here is a stereographic projection for \(n=m=18\), taken from the &lt;a href=&quot;https://www.math.cmu.edu/~fho/jenn/polytopes/index.html&quot;&gt;Jenn 3d website&lt;/a&gt;:&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;/blog/assets/2023/18x18-torus.png&quot; alt=&quot;Stereographic projection into 3d of a 4-dimensional polytope, the (18,18)-duoprism, appearing as a torus tiled with squares&quot; title=&quot;Public domain image https://www.math.cmu.edu/~fho/jenn/polytopes/18x18-torus.png&quot; style=&quot;width:100%;max-width:720px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this image, the most prominent feature is the tiling by squares of the torus containing \(Z\). If you follow sequences of edges of this square grid, through opposite edges at each vertex, you will also see many 18-gons. Some of the 18-gons slice the “inside” of the torus radially into distorted prisms; these are Delaunay cells. Many of the perpendicular 18-gons slice across the “donut hole” of the torus, forming more Delaunay cells. But some of the remaining 18-gons lie on the convex hull of the shape, and cannot be used as slices for the projected set. The missing slices cause the Delaunay triangulation of the stereographic projection to miss some cells, and that can only happen because the spheres for these cells were inverted by the projection.&lt;/p&gt;

&lt;p&gt;You can also take the convex hull of \(X\cup Y\cup Z\). This has two triangular-prism facets for each tetrahedron of \(X\cup Y\), meeting at one of the squares of \(Z\). The reason I’m interested in this example comes from &lt;a href=&quot;/blog/2023/02/20/geometric-graphs-unbounded.html&quot;&gt;my most recent post, on flip-width of geometric graphs&lt;/a&gt;. If you take an induced subgraph of this polytope, consisting only of the points in \(X\cup Y\cup Z\) whose coefficients \(i\) and \(j\) are both even, the result is a subdivided complete bipartite graph \(K_{n,n}\), where by “subdivided” I mean that each edge of \(K_{n,n}\) has been replaced by a two-edge path. This isn’t an interchange, in the sense of the previous post, but it has unbounded flip-width, because it is a sparse graph that does not have bounded expansion.&lt;/p&gt;

&lt;p&gt;What I really want, though, is a 3d Euclidean Delaunay triangulation with unbounded flip-width, not a non-triangulation complex and not a 4-polytope (I already had one of those in my previous post). To get this, use a stereographic projection whose pole is on the central torus, in the middle of one of the squares (or really on the corresponding point of the unit sphere), and note that the Delaunay spheres of the polytope faces will intersect this torus in Delaunay circles of the squares. But for a square grid, the center of each square belongs only to the circumcircle of that square, not to any of the other circumcircles. So the pole of the projection will only belong to two of the Delaunay spheres, the two sharing the chosen square. The two prisms for these two spheres will be missing from the Delaunay complex (instead, their union, some sort of &lt;a href=&quot;https://en.wikipedia.org/wiki/Gyrobifastigium&quot;&gt;gyrobifastifium&lt;/a&gt;, will form the convex hull of the points), but all the other prisms will still be present. They contain all the edges of the graph, so it still contains a large induced subdivided biclique. Perturbing the points slightly to get a triangulation rather than a complex doesn’t change this.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://mathstodon.xyz/@11011110/109926574982696332&quot;&gt;Discuss on Mastodon&lt;/a&gt;)&lt;/p&gt;&lt;p class=&quot;authors&quot;&gt;By David Eppstein&lt;/p&gt;
  </content>
    <author>
      <name>David Eppstein</name>
      <uri>https://11011110.github.io/blog/</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">CCI: jobs: postdoc at TU Eindhoven, University of Amsterdam, Leiden University, CWI (apply by March 31, 2023)</title>
    <link href="https://cstheory-jobs.org/2023/02/24/postdoc-at-tu-eindhoven-university-of-amsterdam-leiden-university-cwi-apply-by-march-31-2023/"/>
    <id>http://cstheory-jobs.org/2023/02/24/postdoc-at-tu-eindhoven-university-of-amsterdam-leiden-university-cwi-apply-by-march-31-2023/</id>
    <updated>2023-02-24T12:53:26+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;Postdoc Positions in Algorithmics and Stochastics, in the NETWORKS project (the Netherlands).&lt;/p&gt;
&lt;p&gt;The NETWORKS project is a collaboration of researchers from four institutions in The Netherlands: TU Eindhoven, University of Amsterdam, Leiden University and the Centrum Wiskunde &amp;amp; Informatica (CWI). NETWORKS has openings for postdocs working on algorithmics or stochastics for network problems.&lt;/p&gt;
&lt;p&gt;Website: &lt;a href=&quot;https://www.thenetworkcenter.nl/Open-Positions/openposition/30/8-Postdoctoral-fellows-in-Stochastics-and-Algorithmics-COFUND-&quot;&gt;https://www.thenetworkcenter.nl/Open-Positions/openposition/30/8-Postdoctoral-fellows-in-Stochastics-and-Algorithmics-COFUND-&lt;/a&gt;&lt;br /&gt;
Email: info@thenetworkcenter.nl&lt;/p&gt;
&lt;p class=&quot;authors&quot;&gt;By shacharlovett&lt;/p&gt;
  </content>
    <author>
      <name>CCI: jobs</name>
      <uri>https://cstheory-jobs.org</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Guidable Local Hamiltonian Problems with Implications to Heuristic Ans\&quot;atze State Preparation and the Quantum PCP Conjecture</title>
    <link href="http://arxiv.org/abs/2302.11578"/>
    <id>http://arxiv.org/abs/2302.11578</id>
    <updated>2023-02-24T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/quant-ph/1/au:+Weggemans_J/0/1/0/all/0/1&quot;&gt;Jordi Weggemans&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/quant-ph/1/au:+Folkertsma_M/0/1/0/all/0/1&quot;&gt;Marten Folkertsma&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/quant-ph/1/au:+Cade_C/0/1/0/all/0/1&quot;&gt;Chris Cade&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We introduce &#39;Merlinized&#39; versions of the recently defined Guided Local
Hamiltonian problem, which we call &#39;Guidable Local Hamiltonian&#39; problems.
Unlike their guided counterparts, these problems do not have a guiding state
provided as a part of the input, but merely come with the promise that one
exists and that it satisfies certain constraints. We consider in particular two
classes of guiding states: those that can be prepared efficiently by a quantum
circuit; and those belonging to a class of quantum states we call classically
evaluatable, which have a short classical description from which it is possible
to efficiently compute expectation values of local observables classically. We
show that guidable local Hamiltonian problems for both classes of guiding
states are $\mathsf{QCMA}$-complete in the inverse-polynomial precision
setting, but lie within $\mathsf{NP}$ (or $\mathsf{NqP}$) in certain parameter
regimes when the guiding state is classically evaluatable.
&lt;/p&gt;
&lt;p&gt;We discuss the implications of these results to heuristic ans\&quot;atze state
preparation and the quantum PCP conjecture. Our completeness results show that,
from a complexity-theoretic perspective, classical ans\&quot;atze prepared by
classical heuristics are just as powerful as quantum ans\&quot;atze prepared by
quantum heuristics, so long as one has access to quantum phase estimation. In
relation to the quantum PCP conjecture, we (i) define a PCP for $\mathsf{QCMA}$
and show that it is equal to $\mathsf{NP}$ under quantum reductions; (ii) show
several no-go results for the existence of quantum gap amplification procedures
that preserve certain ground state properties; and (iii) propose two
conjectures that can be viewed as stronger versions of the NLTS theorem.
Finally, we show that many of our results can be directly modified to obtain
similar results for the class $\mathsf{MA}$.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Cutting Barnette graphs perfectly is hard</title>
    <link href="http://arxiv.org/abs/2302.11667"/>
    <id>http://arxiv.org/abs/2302.11667</id>
    <updated>2023-02-24T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Bonnet_E/0/1/0/all/0/1&quot;&gt;&amp;#xc9;douard Bonnet&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Chakraborty_D/0/1/0/all/0/1&quot;&gt;Dibyayan Chakraborty&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Duron_J/0/1/0/all/0/1&quot;&gt;Julien Duron&lt;/a&gt;&lt;/p&gt;&lt;p&gt;A perfect matching cut is a perfect matching that is also a cutset, or
equivalently a perfect matching containing an even number of edges on every
cycle. The corresponding algorithmic problem, Perfect Matching Cut, is known to
be NP-complete in subcubic bipartite graphs [Le &amp;amp; Telle, TCS &#39;22] but its
complexity was open in planar graphs and in cubic graphs. We settle both
questions at once by showing that Perfect Matching Cut is NP-complete in
3-connected cubic bipartite planar graphs or Barnette graphs. Prior to our
work, among problems whose input is solely an undirected graph, only Distance-2
4-Coloring was known NP-complete in Barnette graphs. Notably, Hamiltonian Cycle
would only join this private club if Barnette&#39;s conjecture were refuted.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Geometry: Hitting Sets when the Shallow Cell Complexity is Small</title>
    <link href="http://arxiv.org/abs/2302.11637"/>
    <id>http://arxiv.org/abs/2302.11637</id>
    <updated>2023-02-24T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Aarts_S/0/1/0/all/0/1&quot;&gt;Sander Aarts&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Shmoys_D/0/1/0/all/0/1&quot;&gt;David B. Shmoys&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The hitting set problem is a well-known NP-hard optimization problem in
which, given a set of elements and a collection of subsets, the goal is to find
the smallest selection of elements, such that each subset contains at least one
element in the selection. Many geometric set systems enjoy improved
approximation ratios, which have recently been shown to be tight with respect
to the shallow cell complexity of the set system. The algorithms that exploit
the cell complexity, however, tend to be involved and computationally
intensive. This paper shows that comparable approximation ratios for the
hitting set problem can be attained using a much simpler algorithm: solve the
linear programming relaxation, take one initial random sample from the set of
elements with probabilities proportional to the LP-solution, and, while there
is an unhit set, take an additional sample from it proportional to the
LP-solution. Our algorithm is based on a generalization of the elegant
net-finder algorithm of Nabil Mustafa. To analyze this algorithm for the
hitting set problem, we generalize the classic Packing Lemma, and the more
recent Shallow-Packing Lemma, to the setting of weighted epsilon nets.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Geometry</name>
      <uri>https://arxiv.org/list/cs.CG/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Geometry: Adaptive Approximate Implicitization of Planar Parametric Curves via Weak Gradient Constraints</title>
    <link href="http://arxiv.org/abs/2302.11767"/>
    <id>http://arxiv.org/abs/2302.11767</id>
    <updated>2023-02-24T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Guo_M/0/1/0/all/0/1&quot;&gt;Minghao Guo&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Gao_Y/0/1/0/all/0/1&quot;&gt;Yan Gao&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Pan_Z/0/1/0/all/0/1&quot;&gt;Zheng Pan&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Converting a parametric curve into the implicit form, which is called
implicitization, has always been a popular but challenging problem in geometric
modeling and related applications. However, the existing methods mostly suffer
from the problems of maintaining geometric features and choosing a reasonable
implicit degree. The present paper has two contributions. We first introduce a
new regularization constraint(called the weak gradient constraint) for both
polynomial and non-polynomial curves, which efficiently possesses shape
preserving. We then propose two adaptive algorithms of approximate
implicitization for polynomial and non-polynomial curves respectively, which
find the ``optimal&#39;&#39; implicit degree based on the behavior of the weak gradient
constraint. More precisely, the idea is gradually increasing the implicit
degree, until there is no obvious improvement in the weak gradient loss of the
outputs. Experimental results have shown the effectiveness and high quality of
our proposed methods.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Geometry</name>
      <uri>https://arxiv.org/list/cs.CG/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Geometry: Translation of &quot;Simplizialzerlegungen von Beschrankter Flachheit&#39;&#39; by Hans Freudenthal, Annals of Mathematics, Second Series, Volume 43, Number 3, July 1942, Pages 580-583</title>
    <link href="http://arxiv.org/abs/2302.11922"/>
    <id>http://arxiv.org/abs/2302.11922</id>
    <updated>2023-02-24T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Wintraecken_M/0/1/0/all/0/1&quot;&gt;Mathijs Wintraecken&lt;/a&gt; (translator)&lt;/p&gt;&lt;p&gt;Translation of the paper ``Simplizialzerlegungen von Beschrankter Flachheit&#39;&#39;
by Hans Freudenthal (https://doi.org/10.2307/1968813), in which Freudenthal
answers ``a question by Brouwer about the construction of an infinite series of
subdivisions of a polytope, such that the next element in the sequence is a
subdivision of the previous one and such that the subsimplices that arise do
not become arbitrarily flat.&#39;&#39;
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Geometry</name>
      <uri>https://arxiv.org/list/cs.CG/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Geometry: Certified Polyhedral Decompositions of Collision-Free Configuration Space</title>
    <link href="http://arxiv.org/abs/2302.12219"/>
    <id>http://arxiv.org/abs/2302.12219</id>
    <updated>2023-02-24T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Dai_H/0/1/0/all/0/1&quot;&gt;Hongkai Dai&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Amice_A/0/1/0/all/0/1&quot;&gt;Alexandre Amice&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Werner_P/0/1/0/all/0/1&quot;&gt;Peter Werner&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Zhang_A/0/1/0/all/0/1&quot;&gt;Annan Zhang&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Tedrake_R/0/1/0/all/0/1&quot;&gt;Russ Tedrake&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Understanding the geometry of collision-free configuration space (C-free) in
the presence of task-space obstacles is an essential ingredient for
collision-free motion planning. While it is possible to check for collisions at
a point using standard algorithms, to date no practical method exists for
computing C-free regions with rigorous certificates due to the complexity of
mapping task-space obstacles through the kinematics. In this work, we present
the first to our knowledge rigorous method for approximately decomposing a
rational parametrization of C-free into certified polyhedral regions. Our
method, called C-IRIS (C-space Iterative Regional Inflation by Semidefinite
programming), generates large, convex polytopes in a rational parameterization
of the configuration space which are rigorously certified to be collision-free.
Such regions have been shown to be useful for both optimization-based and
randomized motion planning. Based on convex optimization, our method works in
arbitrary dimensions, only makes assumptions about the convexity of the
obstacles in the task space, and is fast enough to scale to realistic problems
in manipulation. We demonstrate our algorithm&#39;s ability to fill a non-trivial
amount of collision-free C-space in several 2-DOF examples where the C-space
can be visualized, as well as the scalability of our algorithm on a 7-DOF KUKA
iiwa, a 6-DOF UR3e and 12-DOF bimanual manipulators. An implementation of our
algorithm is open-sourced in Drake. We furthermore provide examples of our
algorithm in interactive Python notebooks.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Geometry</name>
      <uri>https://arxiv.org/list/cs.CG/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Storage in Computational Geometry</title>
    <link href="http://arxiv.org/abs/2302.11821"/>
    <id>http://arxiv.org/abs/2302.11821</id>
    <updated>2023-02-24T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Han_Y/0/1/0/all/0/1&quot;&gt;Yijie Han&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Saxena_S/0/1/0/all/0/1&quot;&gt;Sanjeev Saxena&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We show that $n$ real numbers can be stored in a constant number of real
numbers such that each original real number can be fetched in $O(\log n)$ time.
&lt;/p&gt;
&lt;p&gt;Although our result has implications for many computational geometry
problems, we show here, combined with Han&#39;s $O(n\sqrt{\log n})$ time real
number sorting algorithm [3, &lt;a href=&quot;/abs/1801.00776&quot;&gt;arXiv:1801.00776&lt;/a&gt;], we can improve the complexity
of Kirkpatrick&#39;s point location algorithm [8] to $O(n\sqrt{\log n})$
preprocessing time, a constant number of real numbers for storage and $O(\log
n)$ point location time. Kirkpatrick&#39;s algorithm uses $O(n\log n)$
preprocessing time, $O(n)$ storage and $O(\log n)$ point location time. The
complexity results in Kirkpatrick&#39;s algorithm was the previous best result.
Although Lipton and Tarjan&#39;s algorithm [10] predates Kirkpatrick&#39;s algorithm
and has the same complexity, Kirkpatrick&#39;s algorithm is simpler and has a
better structure.
&lt;/p&gt;
&lt;p&gt;This paper can be viewed as a companion paper of paper [3, &lt;a href=&quot;/abs/1801.00776&quot;&gt;arXiv:1801.00776&lt;/a&gt;].
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Pattern detection in ordered graphs</title>
    <link href="http://arxiv.org/abs/2302.11619"/>
    <id>http://arxiv.org/abs/2302.11619</id>
    <updated>2023-02-24T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Ducoffe_G/0/1/0/all/0/1&quot;&gt;Guillaume Ducoffe&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Feuilloley_L/0/1/0/all/0/1&quot;&gt;Laurent Feuilloley&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Habib_M/0/1/0/all/0/1&quot;&gt;Michel Habib&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Pitois_F/0/1/0/all/0/1&quot;&gt;Fran&amp;#xe7;ois Pitois&lt;/a&gt;&lt;/p&gt;&lt;p&gt;A popular way to define or characterize graph classes is via forbidden
subgraphs or forbidden minors. These characterizations play a key role in graph
theory, but they rarely lead to efficient algorithms to recognize these
classes. In contrast, many essential graph classes can be recognized
efficiently thanks to characterizations of the following form: there must exist
an ordering of the vertices such that some ordered pattern does not appear,
where a pattern is basically an ordered subgraph. These pattern
characterizations have been studied for decades, but there have been recent
efforts to better understand them systematically. In this paper, we focus on a
simple problem at the core of this topic: given an ordered graph of size $n$,
how fast can we detect whether a fixed pattern of size $k$ is present?
&lt;/p&gt;
&lt;p&gt;Following the literature on graph classes recognition, we first look for
patterns that can be detected in linear time. We prove, among other results,
that almost all patterns on three vertices (which capture many interesting
classes, such as interval, chordal, split, bipartite, and comparability graphs)
fall in this category. Then, in a finer-grained complexity perspective, we
prove conditional lower bounds for this problem. In particular we show that for
a large family of patterns on four vertices it is unlikely that subquadratic
algorithm exist. Finally, we define a parameter for patterns, the merge-width,
and prove that for patterns of merge-width $t$, one can solve the problem in
$O(n^{ct})$ for some constant~$c$. As a corollary, we get that detecting
outerplanar patterns and other classes of patterns can be done in time
independent of the size of the pattern.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Finding a Small Vertex Cut on Distributed Networks</title>
    <link href="http://arxiv.org/abs/2302.11651"/>
    <id>http://arxiv.org/abs/2302.11651</id>
    <updated>2023-02-24T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Jiang_Y/0/1/0/all/0/1&quot;&gt;Yonggang Jiang&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Mukhopadhyay_S/0/1/0/all/0/1&quot;&gt;Sagnik Mukhopadhyay&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We present an algorithm for distributed networks to efficiently find a small
vertex cut in the CONGEST model. Given a positive integer $\kappa$, our
algorithm can, with high probability, either find $\kappa$ vertices whose
removal disconnects the network or return that such $\kappa$ vertices do not
exist. Our algorithm takes $\kappa^3\cdot \tilde{O}(D+\sqrt{n})$ rounds, where
$n$ is the number of vertices in the network and $D$ denotes the network&#39;s
diameter. This implies $\tilde{O}(D+\sqrt{n})$ round complexity whenever
$\kappa=\text{polylog}(n)$.
&lt;/p&gt;
&lt;p&gt;Prior to our result, a bound of $\tilde{O}(D)$ is known only when
$\kappa=1,2$ [Parter, Petruschka DISC&#39;22]. For $\kappa\geq 3$, this bound can
be obtained only by an $O(\log n)$-approximation algorithm [Censor-Hillel,
Ghaffari, Kuhn PODC&#39;14], and the only known exact algorithm takes
$O\left((\kappa\Delta D)^{O(\kappa)}\right)$ rounds, where $\Delta$ is the
maximum degree [Parter DISC&#39;19]. Our result answers an open problem by
Nanongkai, Saranurak, and Yingchareonthawornchai [STOC&#39;19].
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Learning to Manipulate a Commitment Optimizer</title>
    <link href="http://arxiv.org/abs/2302.11829"/>
    <id>http://arxiv.org/abs/2302.11829</id>
    <updated>2023-02-24T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Chen_Y/0/1/0/all/0/1&quot;&gt;Yurong Chen&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Deng_X/0/1/0/all/0/1&quot;&gt;Xiaotie Deng&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Gan_J/0/1/0/all/0/1&quot;&gt;Jiarui Gan&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Li_Y/0/1/0/all/0/1&quot;&gt;Yuhao Li&lt;/a&gt;&lt;/p&gt;&lt;p&gt;It is shown in recent studies that in a Stackelberg game the follower can
manipulate the leader by deviating from their true best-response behavior. Such
manipulations are computationally tractable and can be highly beneficial for
the follower. Meanwhile, they may result in significant payoff losses for the
leader, sometimes completely defeating their first-mover advantage. A warning
to commitment optimizers, the risk these findings indicate appears to be
alleviated to some extent by a strict information advantage the manipulations
rely on. That is, the follower knows the full information about both players&#39;
payoffs whereas the leader only knows their own payoffs. In this paper, we
study the manipulation problem with this information advantage relaxed. We
consider the scenario where the follower is not given any information about the
leader&#39;s payoffs to begin with but has to learn to manipulate by interacting
with the leader. The follower can gather necessary information by querying the
leader&#39;s optimal commitments against contrived best-response behaviors. Our
results indicate that the information advantage is not entirely indispensable
to the follower&#39;s manipulations: the follower can learn the optimal way to
manipulate in polynomial time with polynomially many queries of the leader&#39;s
optimal commitment.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Minimum-Entropy Coupling Approximation Guarantees Beyond the Majorization Barrier</title>
    <link href="http://arxiv.org/abs/2302.11838"/>
    <id>http://arxiv.org/abs/2302.11838</id>
    <updated>2023-02-24T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Compton_S/0/1/0/all/0/1&quot;&gt;Spencer Compton&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Katz_D/0/1/0/all/0/1&quot;&gt;Dmitriy Katz&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Qi_B/0/1/0/all/0/1&quot;&gt;Benjamin Qi&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Greenewald_K/0/1/0/all/0/1&quot;&gt;Kristjan Greenewald&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kocaoglu_M/0/1/0/all/0/1&quot;&gt;Murat Kocaoglu&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Given a set of discrete probability distributions, the minimum entropy
coupling is the minimum entropy joint distribution that has the input
distributions as its marginals. This has immediate relevance to tasks such as
entropic causal inference for causal graph discovery and bounding mutual
information between variables that we observe separately. Since finding the
minimum entropy coupling is NP-Hard, various works have studied approximation
algorithms. The work of [Compton, ISIT 2022] shows that the greedy coupling
algorithm of [Kocaoglu et al., AAAI 2017] is always within $log_2(e) \approx
1.44$ bits of the optimal coupling. Moreover, they show that it is impossible
to obtain a better approximation guarantee using the majorization lower-bound
that all prior works have used: thus establishing a majorization barrier. In
this work, we break the majorization barrier by designing a stronger
lower-bound that we call the profile method. Using this profile method, we are
able to show that the greedy algorithm is always within $log_2(e)/e \approx
0.53$ bits of optimal for coupling two distributions (previous best-known bound
is within 1 bit), and within $(1 + log_2(e))/2 \approx 1.22$ bits for coupling
any number of distributions (previous best-known bound is within 1.44 bits). We
also examine a generalization of the minimum entropy coupling problem: Concave
Minimum-Cost Couplings. We are able to obtain similar guarantees for this
generalization in terms of the concave cost function. Additionally, we make
progress on the open problem of [Kova\v{c}evi\&#39;c et al., Inf. Comput. 2015]
regarding NP membership of the minimum entropy coupling problem by showing that
any hardness of minimum entropy coupling beyond NP comes from the difficulty of
computing arithmetic in the complexity class NP. Finally, we present
exponential-time algorithms for computing the exactly optimal solution.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: On price-induced minmax matchings</title>
    <link href="http://arxiv.org/abs/2302.11902"/>
    <id>http://arxiv.org/abs/2302.11902</id>
    <updated>2023-02-24T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Durr_C/0/1/0/all/0/1&quot;&gt;Christoph D&amp;#xfc;rr&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Mari_M/0/1/0/all/0/1&quot;&gt;Mathieu Mari&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Schmidt_Kraepelin_U/0/1/0/all/0/1&quot;&gt;Ulrike Schmidt-Kraepelin&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We study a natural combinatorial pricing problem for sequentially arriving
buyers with equal budgets. Each buyer is interested in exactly one pair of
items and purchases this pair if and only if, upon arrival, both items are
still available and the sum of the item prices does not exceed the budget. The
goal of the seller is to set prices to the items such that the number of
transactions is maximized when buyers arrive in adversarial order.
&lt;/p&gt;
&lt;p&gt;Formally, we are given an undirected graph where vertices represent items and
edges represent buyers. Once prices are set to the vertices, edges with a total
price exceeding the buyers&#39; budgets are evicted. Any arrival order of the
buyers leads to a set of transactions that forms a maximal matching in this
subgraph, and an adversarial arrival order results in a minimum maximal
matching. In order to measure the performance of a pricing strategy, we compare
the size of such a matching to the size of a maximum matching in the original
graph. It was shown by Correa et al. [IPCO 2022] that the best ratio any
pricing strategy can guarantee lies within $[1/2, 2/3]$. Our contribution to
the problem is two-fold: First, we provide several characterizations of
subgraphs that may result from pricing schemes. Second, building upon these, we
show an improved upper bound of $3/5$ and a lower bound of $1/2 + 2/n$, where
$n$ is the number of items.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Simultaneous Drawing of Layered Trees</title>
    <link href="http://arxiv.org/abs/2302.11952"/>
    <id>http://arxiv.org/abs/2302.11952</id>
    <updated>2023-02-24T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Katheder_J/0/1/0/all/0/1&quot;&gt;Julia Katheder&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kobourov_S/0/1/0/all/0/1&quot;&gt;Stephen G. Kobourov&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kuckuk_A/0/1/0/all/0/1&quot;&gt;Axel Kuckuk&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Pfister_M/0/1/0/all/0/1&quot;&gt;Maximilian Pfister&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Zink_J/0/1/0/all/0/1&quot;&gt;Johannes Zink&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We study the crossing minimization problem in a layered graph drawing of
rooted trees whose leaves have a given fixed order on the first layer. The task
is to permute the vertices on the other layers to minimize the number of
crossings. While this problem is known to be NP-hard for multiple trees even on
just two layers, we give a polynomial-time algorithm for the restricted case of
two trees. On the other hand, when restricting the number of layers to three,
we describe an XP-algorithm in the number of trees.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Efficiently handling constraints with Metropolis-adjusted Langevin algorithm</title>
    <link href="http://arxiv.org/abs/2302.11971"/>
    <id>http://arxiv.org/abs/2302.11971</id>
    <updated>2023-02-24T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/stat/1/au:+Chang_J/0/1/0/all/0/1&quot;&gt;Jinyuan Chang&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/stat/1/au:+Tang_C/0/1/0/all/0/1&quot;&gt;Cheng Yong Tang&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/stat/1/au:+Zhu_Y/0/1/0/all/0/1&quot;&gt;Yuanzheng Zhu&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In this study, we investigate the performance of the Metropolis-adjusted
Langevin algorithm in a setting with constraints on the support of the target
distribution. We provide a rigorous analysis of the resulting Markov chain,
establishing its convergence and deriving an upper bound for its mixing time.
Our results demonstrate that the Metropolis-adjusted Langevin algorithm is
highly effective in handling this challenging situation: the mixing time bound
we obtain is superior to the best known bounds for competing algorithms without
an accept-reject step. Our numerical experiments support these theoretical
findings, indicating that the Metropolis-adjusted Langevin algorithm shows
promising performance when dealing with constraints on the support of the
target distribution.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Online Minimum Spanning Trees with Weight Predictions</title>
    <link href="http://arxiv.org/abs/2302.12029"/>
    <id>http://arxiv.org/abs/2302.12029</id>
    <updated>2023-02-24T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Berg_M/0/1/0/all/0/1&quot;&gt;Magnus Berg&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Boyar_J/0/1/0/all/0/1&quot;&gt;Joan Boyar&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Favrholdt_L/0/1/0/all/0/1&quot;&gt;Lene M. Favrholdt&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Larsen_K/0/1/0/all/0/1&quot;&gt;Kim S. Larsen&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We consider the minimum spanning tree problem with predictions, using the
weight-arrival model, i.e., the graph is given, together with predictions for
the weights of all edges. Then the actual weights arrive one at a time and an
irrevocable decision must be made regarding whether or not the edge should be
included into the spanning tree. In order to assess the quality of our
algorithms, we define an appropriate error measure and analyze the performance
of the algorithms as a function of the error. We prove that, according to
competitive analysis, the simplest algorithm, Follow-the-Predictions, is
optimal. However, intuitively, one should be able to do better, and we present
a greedy variant of Follow-the-Predictions. In analyzing that algorithm, we
believe we present the first random order analysis of a non-trivial online
algorithm with predictions, by which we obtain an algorithmic separation. This
may be useful for distinguishing between algorithms for other problems when
Follow-the-Predictions is optimal according to competitive analysis.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: A simple division-free algorithm for computing Pfaffians</title>
    <link href="http://arxiv.org/abs/2302.12081"/>
    <id>http://arxiv.org/abs/2302.12081</id>
    <updated>2023-02-24T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Przezdziecki_A/0/1/0/all/0/1&quot;&gt;Adam J. Przezdziecki&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We present a very simple algorithm for computing Pfaffians which uses no
division operations. Essentially, it amounts to iterating matrix multiplication
and truncation. Its complexity, for a $2n\times 2n$ matrix, is $O(nM(n))$,
where $M(n)$ is the cost of matrix multiplication. In case of a sparse matrix,
$M(n)$ is the cost of the dense-sparse matrix multiplication.
&lt;/p&gt;
&lt;p&gt;The algorithm is an adaptation of the Bird algorithm for determinants. We
show how to extract, with practically no additional work, the characteristic
polynomial and the Pfaffian characteristic polynomial from these algorithms.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Warehouse Problem with Bounds, Fixed Costs and Complementarity Constraints</title>
    <link href="http://arxiv.org/abs/2302.12136"/>
    <id>http://arxiv.org/abs/2302.12136</id>
    <updated>2023-02-24T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Bansal_I/0/1/0/all/0/1&quot;&gt;Ishan Bansal&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Gunluk_O/0/1/0/all/0/1&quot;&gt;Oktay G&amp;#xfc;nl&amp;#xfc;k&lt;/a&gt;&lt;/p&gt;&lt;p&gt;This paper studies an open question in the warehouse problem where a merchant
trading a commodity tries to find an optimal inventory-trading policy to decide
on purchase and sale quantities during a fixed time horizon in order to
maximize their total pay-off, making use of fluctuations in sale and cost
prices. We provide the first known polynomial-time algorithms for the case when
there are fixed costs for purchases and sales, optional complementarity
constraints that prohibit purchasing and selling during the same time period,
and bounds on purchase and sales quantities. We do so by providing an exact
characterization of the extreme points of the feasible region and using this to
construct a suitable network where a min-cost flow computation provides an
optimal solution. We are also able to provide polynomial extended linear
formulations for the original feasible regions. Our methods build on the work
by Wolsey and Yaman (Discrete Optimization 2018). We also consider the problem
without fixed costs and provide a fully polynomial time approximation scheme in
a setting with time-dependent bounds.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Dynamic Averaging Load Balancing on Arbitrary Graphs</title>
    <link href="http://arxiv.org/abs/2302.12201"/>
    <id>http://arxiv.org/abs/2302.12201</id>
    <updated>2023-02-24T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Berenbrink_P/0/1/0/all/0/1&quot;&gt;Petra Berenbrink&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Hintze_L/0/1/0/all/0/1&quot;&gt;Lukas Hintze&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Hosseinpour_H/0/1/0/all/0/1&quot;&gt;Hamed Hosseinpour&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kaaser_D/0/1/0/all/0/1&quot;&gt;Dominik Kaaser&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Rau_M/0/1/0/all/0/1&quot;&gt;Malin Rau&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In this paper we study dynamic averaging load balancing on general graphs. We
consider infinite time and dynamic processes, where in every step new load
items are assigned to randomly chosen nodes. A matching is chosen, and the load
is averaged over the edges of that matching. We analyze the discrete case where
load items are indivisible, moreover our results also carry over to the
continuous case where load items can be split arbitrarily. For the choice of
the matchings we consider three different models, random matchings of linear
size, random matchings containing only single edges, and deterministic
sequences of matchings covering the whole graph. We bound the discrepancy,
which is defined as the difference between the maximum and the minimum load.
Our results cover a broad range of graph classes and, to the best of our
knowledge, our analysis is the first result for discrete and dynamic averaging
load balancing processes. As our main technical contribution we develop a drift
result that allows us to apply techniques based on the effective resistance in
an electrical network to the setting of dynamic load balancing.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Using Colors and Sketches to Count Subgraphs in a Streaming Graph</title>
    <link href="http://arxiv.org/abs/2302.12210"/>
    <id>http://arxiv.org/abs/2302.12210</id>
    <updated>2023-02-24T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Handjani_S/0/1/0/all/0/1&quot;&gt;Shirin Handjani&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Jungreis_D/0/1/0/all/0/1&quot;&gt;Douglas Jungreis&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Tiefenbruck_M/0/1/0/all/0/1&quot;&gt;Mark Tiefenbruck&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Suppose we wish to estimate $\#H$, the number of copies of some small graph
$H$ in a large streaming graph $G$. There are many algorithms for this task
when $H$ is a triangle, but just a few that apply to arbitrary $H$. Here we
focus on one such algorithm, which was introduced by Kane, Mehlhorn, Sauerwald,
and Sun. The storage and update time per edge for their algorithm are both
$O(m^k/(\#H)^2)$, where $m$ is the number of edges in $G$, and $k$ is the
number of edges in $H$. Here, we propose three modifications to their algorithm
that can dramatically reduce both the storage and update time. Suppose that $H$
has no leaves and that $G$ has maximum degree $\leq m^{1/2 - \alpha}$, where
$\alpha &amp;gt; 0$. Define $C = \min(m^{2\alpha},m^{1/3})$. Then in our version of
the algorithm, the update time per edge is $O(1)$, and the storage is
approximately reduced by a factor of $C^{2k-t-2}$, where $t$ is the number of
vertices in $H$; in particular, the storage is $O(C^2 + m^k/(C^{2k-t-2}
(\#H)^2))$.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">Emanuele Viola: Mathematics of the impossible: Computational Complexity, Chapter 5, Completeness: Reducing arbitrary computation</title>
    <link href="https://emanueleviola.wordpress.com/2023/02/23/mathematics-of-the-impossible-computational-complexity-chapter-5-completeness-reducing-arbitrary-computation/"/>
    <id>http://emanueleviola.wordpress.com/?p=1208</id>
    <updated>2023-02-23T19:33:28+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p style=&quot;text-align:justify&quot;&gt;In this chapter we show how to reduce arbitrary computation to 3Sat (and hence to the other problems in section&amp;nbsp;º&lt;a href=&quot;#x1-500004.3&quot;&gt;4.3&lt;!--tex4ht:ref: sec:Reductions-from-3Sat --&gt;&lt;/a&gt;). What powers everything is the following landmark and, in hindsight, simple result which reduces circuit computation to 3Sat.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-56001r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 5.1.  &lt;/span&gt; Given a circuit &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C:&amp;#92;{0,1&amp;#92;} ^{n}&amp;#92;to &amp;#92;{0,1&amp;#92;} &quot; class=&quot;latex&quot; /&gt; with &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&quot; class=&quot;latex&quot; /&gt; gates we can compute in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {P}&quot; class=&quot;latex&quot; /&gt; a 3CNF formula &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f_%7BC%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f_%7BC%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f_%7BC%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f_{C}&quot; class=&quot;latex&quot; /&gt; in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%2Bs&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%2Bs&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%2Bs&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n+s&quot; class=&quot;latex&quot; /&gt; variables such that for every &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&amp;#92;in &amp;#92;{0,1&amp;#92;} ^{n}&quot; class=&quot;latex&quot; /&gt;:&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+C%28x%29%3D1%5CLeftrightarrow+%5Cexists+y%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bs%7D%3Af_%7BC%7D%28x%2Cy%29%3D1.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+C%28x%29%3D1%5CLeftrightarrow+%5Cexists+y%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bs%7D%3Af_%7BC%7D%28x%2Cy%29%3D1.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+C%28x%29%3D1%5CLeftrightarrow+%5Cexists+y%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bs%7D%3Af_%7BC%7D%28x%2Cy%29%3D1.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} C(x)=1&amp;#92;Leftrightarrow &amp;#92;exists y&amp;#92;in &amp;#92;{0,1&amp;#92;} ^{s}:f_{C}(x,y)=1. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The key idea to &lt;em&gt;guess computation and check it efficiently, using that computation is local.&lt;/em&gt; The additional &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&quot; class=&quot;latex&quot; /&gt; variables one introduces contain the values of the gates during the computation of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C&quot; class=&quot;latex&quot; /&gt; on &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt;. We simply have to check that they all correspond to a valid computation, and this can be written as 3CNF because each gate depends on at most two other gates.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;    &lt;b&gt;Proof&lt;/b&gt;.&amp;nbsp;&lt;/span&gt;Introduce a variable &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y_{i}&quot; class=&quot;latex&quot; /&gt; for each non-input gate &lt;img src=&quot;https://s0.wp.com/latex.php?latex=g_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=g_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=g_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;g_{i}&quot; class=&quot;latex&quot; /&gt; in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C&quot; class=&quot;latex&quot; /&gt;. The value of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y_{i}&quot; class=&quot;latex&quot; /&gt; is intended to be the value of gate &lt;img src=&quot;https://s0.wp.com/latex.php?latex=g_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=g_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=g_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;g_{i}&quot; class=&quot;latex&quot; /&gt; during the computation. Whether the value of a gate &lt;img src=&quot;https://s0.wp.com/latex.php?latex=g_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=g_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=g_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;g_{i}&quot; class=&quot;latex&quot; /&gt; is correct is a function of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=3&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=3&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=3&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;3&quot; class=&quot;latex&quot; /&gt; variables: &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y_{i}&quot; class=&quot;latex&quot; /&gt; and the &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le 2&quot; class=&quot;latex&quot; /&gt; gates that input &lt;img src=&quot;https://s0.wp.com/latex.php?latex=g_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=g_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=g_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;g_{i}&quot; class=&quot;latex&quot; /&gt;, some of which could be input variables. This can be written as a 3CNF by Theorem &lt;a href=&quot;#x1-25003r3&quot;&gt;2.3&lt;!--tex4ht:ref: thm:every-function-ckt-Lupanov --&gt;&lt;/a&gt;. Take an And of all these 3CNFs. Finally, add clause &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y_%7Bo%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y_%7Bo%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y_%7Bo%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y_{o}&quot; class=&quot;latex&quot; /&gt; for the output gate &lt;img src=&quot;https://s0.wp.com/latex.php?latex=g_%7Bo%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=g_%7Bo%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=g_%7Bo%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;g_{o}&quot; class=&quot;latex&quot; /&gt;. &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-56002r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 5.1.  &lt;/span&gt;Write down the 3CNF for the circuit in figure&amp;nbsp;&lt;a href=&quot;#x1-240062&quot;&gt;2.2&lt;!--tex4ht:ref: fig:Ckt --&gt;&lt;/a&gt;, as given by the proof of Theorem &lt;a href=&quot;#x1-56001r1&quot;&gt;5.1&lt;!--tex4ht:ref: thm:redux-ckt-2-3sat --&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Theorem &lt;a href=&quot;#x1-56001r1&quot;&gt;5.1&lt;!--tex4ht:ref: thm:redux-ckt-2-3sat --&gt;&lt;/a&gt; is &lt;em&gt;a depth-reduction&lt;/em&gt; result. Indeed, note that a 3CNF can be written as a circuit of depth &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c%5Clog+s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c%5Clog+s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c%5Clog+s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c&amp;#92;log s&quot; class=&quot;latex&quot; /&gt;, whereas the original circuit may have any depth. This is helpful for example if you don’t have the depth to run the circuit yourself. You can let someone else produce the computation, and you can check it in small depth.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   We can combine Theorem &lt;a href=&quot;#x1-56001r1&quot;&gt;5.1&lt;!--tex4ht:ref: thm:redux-ckt-2-3sat --&gt;&lt;/a&gt; with the simulations in Chapter &lt;a href=&quot;#x1-180002&quot;&gt;2&lt;!--tex4ht:ref: chap:The-alphabet-of --&gt;&lt;/a&gt; to reduce computation in other models to 3SAT. In particular, we can reduce MTMs running in time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt; to 3Sat of size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%5Clog+%5E%7Bc%7Dt&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%5Clog+%5E%7Bc%7Dt&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%5Clog+%5E%7Bc%7Dt&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&amp;#92;log ^{c}t&quot; class=&quot;latex&quot; /&gt;. To obtain such parameters we need the quasilinear simulation of MTMs by circuits, Theorem &lt;a href=&quot;#x1-25007r5&quot;&gt;2.5&lt;!--tex4ht:ref: thm:simu-TMs-by-CKTs-quasi-linear --&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   However, recall that a quasilinear simulation of RAMs by circuits is not known. Only a power simulation is (which is obtained by combining the power simulation of RAMs by MTMs, Theorem &lt;a href=&quot;#x1-26003r6&quot;&gt;2.6&lt;!--tex4ht:ref: thm:simu-RAM-by-TM --&gt;&lt;/a&gt;, with a simulation of MTMs by circuits). This would reduce RAM computation running in time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt; to 3CNFs of size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t^{c}&quot; class=&quot;latex&quot; /&gt;. We content ourselves with this power loss for the beginning of this chapter. Later in section&amp;nbsp;º&lt;a href=&quot;#x1-610005.3&quot;&gt;5.3&lt;!--tex4ht:ref: sec:RAM-to-SAT-quasilinear --&gt;&lt;/a&gt; we will obtain a quasi-linear simulation using an enjoyable argument which also bypasses Theorem &lt;a href=&quot;#x1-25007r5&quot;&gt;2.5&lt;!--tex4ht:ref: thm:simu-TMs-by-CKTs-quasi-linear --&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   In fact, these simulations apply to a more general, &lt;em&gt;non-deterministic&lt;/em&gt;, model of computation. We define this model next, and then present the simulation with power loss in &lt;a href=&quot;#x1-60003r2&quot;&gt;5.2&lt;!--tex4ht:ref: thm:-3Sat-is-NP-complete --&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class=&quot;sectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;5.1   &lt;/span&gt; &lt;a id=&quot;x1-570005.1&quot;&gt;&lt;/a&gt;Nondeterministic computation&lt;/h3&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;In the concluding equation in Theorem &lt;a href=&quot;#x1-56001r1&quot;&gt;5.1&lt;!--tex4ht:ref: thm:redux-ckt-2-3sat --&gt;&lt;/a&gt; there is an &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cexists+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cexists+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cexists+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;exists &quot; class=&quot;latex&quot; /&gt; quantifier on the right-hand side, but there isn’t one on the left, next to the circuit. However, because the simulation works for every input, we can “stick” a quantifier on the left and have the same result. The resulting circuit computation &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C(x,y)&quot; class=&quot;latex&quot; /&gt; has two inputs, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y&quot; class=&quot;latex&quot; /&gt;. We can think of it as a &lt;em&gt;non-deterministic&lt;/em&gt; circuit, which on input &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt; outputs &lt;img src=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;1&quot; class=&quot;latex&quot; /&gt; iff &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cexists+y%3AC%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cexists+y%3AC%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cexists+y%3AC%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;exists y:C(x,y)&quot; class=&quot;latex&quot; /&gt;. Following the discussion before, we could do the same for other models like TMs, MTMs, and RAMs. The message here is that – if we allow for an &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cexists+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cexists+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cexists+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;exists &quot; class=&quot;latex&quot; /&gt; quantifier, or in other words consider nondeterministic computation – efficient computation is &lt;em&gt;equivalent&lt;/em&gt; to 3CNF! This is one motivation for formally introducing a &lt;em&gt;nondeterministic &lt;/em&gt;computational model.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-57001r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Definition&lt;/b&gt; 5.1.  &lt;/span&gt;NTime&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%28t%28n%29%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%28t%28n%29%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28t%28n%29%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;(t(n))&quot; class=&quot;latex&quot; /&gt; is the set of functions &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3AX%5Csubseteq+%5C%7B0%2C1%5C%7D%5E%2A+%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3AX%5Csubseteq+%5C%7B0%2C1%5C%7D%5E%2A+%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3AX%5Csubseteq+%5C%7B0%2C1%5C%7D%5E%2A+%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:X&amp;#92;subseteq &amp;#92;{0,1&amp;#92;}^* &amp;#92;to &amp;#92;{0,1&amp;#92;} &quot; class=&quot;latex&quot; /&gt; for which there is a RAM &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M&quot; class=&quot;latex&quot; /&gt; such that:&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &amp;#8211; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%28x%29%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%28x%29%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%28x%29%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f(x)=1&quot; class=&quot;latex&quot; /&gt; iff &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cexists+y%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bt%28%7Cx%7C%29%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cexists+y%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bt%28%7Cx%7C%29%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cexists+y%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bt%28%7Cx%7C%29%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;exists y&amp;#92;in &amp;#92;{0,1&amp;#92;} ^{t(|x|)}&quot; class=&quot;latex&quot; /&gt; such that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M%28x%2Cy%29%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M%28x%2Cy%29%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M%28x%2Cy%29%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M(x,y)=1&quot; class=&quot;latex&quot; /&gt;, and&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &amp;#8211; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M(x,y)&quot; class=&quot;latex&quot; /&gt; stops within &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%28%7Cx%7C%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%28%7Cx%7C%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%28%7Cx%7C%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t(|x|)&quot; class=&quot;latex&quot; /&gt; steps on every input &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;(x,y)&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   We also define&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Ctext+%7BNP%7D%3A%3D+%26+%5Cbigcup+_%7Bd%5Cge+1%7D%5Ctext+%7BNTime%7D%28n%5E%7Bd%7D%29%2C%5C%5C+%5Ctext+%7BNExp%7D%3A%3D+%26+%5Cbigcup+_%7Bd%5Cge+1%7D%5Ctext+%7BNTime%7D%282%5E%7Bn%5E%7Bd%7D%7D%29.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Ctext+%7BNP%7D%3A%3D+%26+%5Cbigcup+_%7Bd%5Cge+1%7D%5Ctext+%7BNTime%7D%28n%5E%7Bd%7D%29%2C%5C%5C+%5Ctext+%7BNExp%7D%3A%3D+%26+%5Cbigcup+_%7Bd%5Cge+1%7D%5Ctext+%7BNTime%7D%282%5E%7Bn%5E%7Bd%7D%7D%29.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Ctext+%7BNP%7D%3A%3D+%26+%5Cbigcup+_%7Bd%5Cge+1%7D%5Ctext+%7BNTime%7D%28n%5E%7Bd%7D%29%2C%5C%5C+%5Ctext+%7BNExp%7D%3A%3D+%26+%5Cbigcup+_%7Bd%5Cge+1%7D%5Ctext+%7BNTime%7D%282%5E%7Bn%5E%7Bd%7D%7D%29.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} &amp;#92;text {NP}:= &amp;amp; &amp;#92;bigcup _{d&amp;#92;ge 1}&amp;#92;text {NTime}(n^{d}),&amp;#92;&amp;#92; &amp;#92;text {NExp}:= &amp;amp; &amp;#92;bigcup _{d&amp;#92;ge 1}&amp;#92;text {NTime}(2^{n^{d}}). &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Note that the running time of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M&quot; class=&quot;latex&quot; /&gt; is a function of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7Cx%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7Cx%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7Cx%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;|x|&quot; class=&quot;latex&quot; /&gt;, not &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7C%28x%2Cy%29%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7C%28x%2Cy%29%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7C%28x%2Cy%29%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;|(x,y)|&quot; class=&quot;latex&quot; /&gt;. This difference is inconsequential for NP, since the composition of two powers is another power. But it is important for a more fine-grained analysis. We refer to a RAM machine as in Definition &lt;a href=&quot;#x1-57001r1&quot;&gt;5.1&lt;!--tex4ht:ref: def:NTime --&gt;&lt;/a&gt; as a &lt;em&gt;nondeterministic machine&lt;/em&gt;, and to the &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y&quot; class=&quot;latex&quot; /&gt; in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M(x,y)&quot; class=&quot;latex&quot; /&gt; as the &lt;em&gt;nondeterministic choices,&lt;/em&gt; or &lt;em&gt;guesses, &lt;/em&gt;of the machine on input &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   We can also define NTime in a way that is similar to BPTime, Definition &lt;a href=&quot;#x1-27001r7&quot;&gt;2.7&lt;!--tex4ht:ref: def:BPTime-BPP --&gt;&lt;/a&gt;. The two definitions are essentially equivalent. Our choice for BPTime is motivated by the identification of BPTime with computation that is actually run. For example, in a programming language one uses an instruction like Rand to obtain random values; one does not think of the                                                                                                                                                                                     randomness as being part of the input. By contrast, NTime is a more abstract model, and the definition with the nondeterministic guesses explicitly laid out is closer in spirit to a 3CNF.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   All the problems we studied in section&amp;nbsp;º&lt;a href=&quot;#x1-500004.3&quot;&gt;4.3&lt;!--tex4ht:ref: sec:Reductions-from-3Sat --&gt;&lt;/a&gt; are in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {NP}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-57002r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Fact&lt;/b&gt; 5.1.  &lt;/span&gt;3Sat, Clique, Cover-by-vertexes, SubsetSum, and 3Color are in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {NP}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;    &lt;b&gt;Proof&lt;/b&gt;.&amp;nbsp;&lt;/span&gt;For a 3Sat instance &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt;, the variables &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y&quot; class=&quot;latex&quot; /&gt; correspond to an assignment. Checking if the assignment satisfies &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; is in P. This shows that 3Sat is in NP. &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-57003r2&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 5.2.  &lt;/span&gt;Finish the proof by ad&lt;br /&gt;
dressing the other problems in Fact &lt;a href=&quot;#x1-57002r1&quot;&gt;5.1&lt;!--tex4ht:ref: fact:3Sa-etc-in-NP --&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h5 class=&quot;likesubsubsectionHead&quot;&gt;&lt;a id=&quot;x1-580005.1&quot;&gt;&lt;/a&gt;How to think of NP&lt;/h5&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;We can think of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {NP}&quot; class=&quot;latex&quot; /&gt; as the problems which admit a solution that can be verified efficiently, namely in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {P}&quot; class=&quot;latex&quot; /&gt;. For example for 3Sat it is easy to verify if an assignment satisfies the clauses, for 3Color it is easy to verify if a coloring is such that any edge has endpoints of different colors, for SubsetSum it is easy to verify if a subset has a sum equal to a target, and so on. However, as we saw above this verification step can be cast in a restricted model, namely a 3CNF. So we don’t have to think of the verification step as using the full power of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {P}&quot; class=&quot;latex&quot; /&gt; computation.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Here’s a vivid illustration of NP. Suppose I claim that the following matrix contains a &lt;img src=&quot;https://s0.wp.com/latex.php?latex=9&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=9&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=9&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;9&quot; class=&quot;latex&quot; /&gt;:&lt;/p&gt;
&lt;div style=&quot;text-align:center&quot;&gt;
&lt;div class=&quot;fbox&quot;&gt;
&lt;div class=&quot;minipage&quot;&gt;56788565634705634705637480563476&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;70156137805167840132838202386421&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;85720582340570372307580234576423&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;80275880237505788075075802346518&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;78502378564067807582348057285428&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;05723748754543650350562378804337&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;52305723485008160234723884077764&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;86543234567865435674567836738063&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;45463788486754345743457483460040&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;73273873486574375464584895741832&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;85075783485634856237847287422112&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;83748874883753485745788788223201&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   How can you tell, without tediously examining the whole matrix? However, if I tell you that it’s in row 10, 8 digits from the right, you can quickly check that I am right. I won’t be able to cheat, since you can check my claims. On the other hand I can provide a proof that’s easy to verify.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h5 class=&quot;likesubsubsectionHead&quot;&gt;&lt;a id=&quot;x1-590005.1&quot;&gt;&lt;/a&gt;P vs.&amp;nbsp;NP&lt;/h5&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;The flagship question of complexity theory is whether &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D%3D%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D%3D%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D%3D%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {P}=&amp;#92;text {NP}&quot; class=&quot;latex&quot; /&gt; or not. This is a young, prominent special case of the grand challenge we introduced in Chapter &lt;a href=&quot;#x1-370003&quot;&gt;3&lt;!--tex4ht:ref: chap:The-grand-challenge --&gt;&lt;/a&gt;. Contrary to the analogous question for &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {BPP}&quot; class=&quot;latex&quot; /&gt;, cf.&amp;nbsp;section&amp;nbsp;&lt;a href=&quot;#x1-290002.5.2&quot;&gt;2.5.2&lt;!--tex4ht:ref: subsec:BPTime-vs-time --&gt;&lt;/a&gt;, the general belief seems to be that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D%5Cne+%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D%5Cne+%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D%5Cne+%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {P}&amp;#92;ne &amp;#92;text {NP}&quot; class=&quot;latex&quot; /&gt;. Similarly to BPP, cf.&amp;nbsp;Theorem &lt;a href=&quot;#x1-29001r9&quot;&gt;2.9&lt;!--tex4ht:ref: thm:Time-vs-BPTime --&gt;&lt;/a&gt;, the best deterministic simulation of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {NP}&quot; class=&quot;latex&quot; /&gt; runs in exponential time by trying all nondeterministic guesses. This gives the middle inclusion in the following fact; the other two are by definition.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-59001r2&quot;&gt;&lt;/a&gt; &lt;b&gt;Fact&lt;/b&gt; 5.2.  &lt;/span&gt;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D%5Csubseteq+%5Ctext+%7BNP%7D%5Csubseteq+%5Ctext+%7BExp+%5Censuremath+%7B%5Csubseteq+%5Ctext+%7BNExp%7D%7D%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D%5Csubseteq+%5Ctext+%7BNP%7D%5Csubseteq+%5Ctext+%7BExp+%5Censuremath+%7B%5Csubseteq+%5Ctext+%7BNExp%7D%7D%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D%5Csubseteq+%5Ctext+%7BNP%7D%5Csubseteq+%5Ctext+%7BExp+%5Censuremath+%7B%5Csubseteq+%5Ctext+%7BNExp%7D%7D%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {P}&amp;#92;subseteq &amp;#92;text {NP}&amp;#92;subseteq &amp;#92;text {Exp &amp;#92;ensuremath {&amp;#92;subseteq &amp;#92;text {NExp}}}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   A consequence of the Time Hierarchy Theorem &lt;a href=&quot;#x1-40003r4&quot;&gt;3.4&lt;!--tex4ht:ref: thm:TIME-hierarchy-TM --&gt;&lt;/a&gt; is that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D%5Cne+%5Ctext+%7BExp%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D%5Cne+%5Ctext+%7BExp%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D%5Cne+%5Ctext+%7BExp%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {P}&amp;#92;ne &amp;#92;text {Exp}&quot; class=&quot;latex&quot; /&gt;. From the inclusions above it follows that&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Ctext+%7BP%7D%5Cne+%5Ctext+%7BNP%7D%5Ctext+%7B+or+NP%7D%5Cne+%5Ctext+%7BExp%2C+possibly+both%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Ctext+%7BP%7D%5Cne+%5Ctext+%7BNP%7D%5Ctext+%7B+or+NP%7D%5Cne+%5Ctext+%7BExp%2C+possibly+both%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Ctext+%7BP%7D%5Cne+%5Ctext+%7BNP%7D%5Ctext+%7B+or+NP%7D%5Cne+%5Ctext+%7BExp%2C+possibly+both%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} &amp;#92;text {P}&amp;#92;ne &amp;#92;text {NP}&amp;#92;text { or NP}&amp;#92;ne &amp;#92;text {Exp, possibly both}. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;Thus, we are not completely clueless, and we know that at least one important separation is lurking somewhere. Most people appear to think that &lt;em&gt;both&lt;/em&gt; separations hold, but we are unable to prove &lt;em&gt;either&lt;/em&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   For multi-tape machines, a separation between deterministic and non-deterministic linear time is in &lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#XPPST83&quot;&gt;24&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;conf/coco/Santhanam01&quot;&gt;27&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h3 class=&quot;sectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;5.2   &lt;/span&gt; &lt;a id=&quot;x1-600005.2&quot;&gt;&lt;/a&gt;NP-completeness&lt;/h3&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;We now go back to the question at the beginning of this chapter about reducing arbitrary computation to 3Sat. We shall reduce all of NP to 3Sat in Theorem &lt;a href=&quot;#x1-60003r2&quot;&gt;5.2&lt;!--tex4ht:ref: thm:-3Sat-is-NP-complete --&gt;&lt;/a&gt;. Problems like 3Sat admitting such reductions deserve a definition.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-60001r2&quot;&gt;&lt;/a&gt; &lt;b&gt;Definition&lt;/b&gt; 5.2.  &lt;/span&gt;We call a problem &lt;img src=&quot;https://s0.wp.com/latex.php?latex=L&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=L&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=L&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;L&quot; class=&quot;latex&quot; /&gt;:&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   NP-hard if every problem in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {NP}&quot; class=&quot;latex&quot; /&gt; reduces to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=L&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=L&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=L&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;L&quot; class=&quot;latex&quot; /&gt; in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {P}&quot; class=&quot;latex&quot; /&gt;;&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   NP-complete if it is NP-hard and in NP.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   One can define &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {NP}&quot; class=&quot;latex&quot; /&gt;-hard (and hence NP-complete) w.r.t.&amp;nbsp;different reductions, cf.&amp;nbsp;Chapter &lt;a href=&quot;#x1-450004&quot;&gt;4&lt;!--tex4ht:ref: chap:Reductions --&gt;&lt;/a&gt;, and we will do so later. But the simple choice above suffices for now.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Complete problems are the “hardest problems” in the class, as formalized in the following fact.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-60002r3&quot;&gt;&lt;/a&gt; &lt;b&gt;Fact&lt;/b&gt; 5.3.  &lt;/span&gt;Suppose &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BL%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BL%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BL%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {L}&quot; class=&quot;latex&quot; /&gt; is NP-complete. Then &lt;img src=&quot;https://s0.wp.com/latex.php?latex=L%5Cin+%5Ctext+%7BP%7D%5CLeftrightarrow+%5Ctext+%7BP%7D%3D%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=L%5Cin+%5Ctext+%7BP%7D%5CLeftrightarrow+%5Ctext+%7BP%7D%3D%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=L%5Cin+%5Ctext+%7BP%7D%5CLeftrightarrow+%5Ctext+%7BP%7D%3D%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;L&amp;#92;in &amp;#92;text {P}&amp;#92;Leftrightarrow &amp;#92;text {P}=&amp;#92;text {NP}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;    &lt;b&gt;Proof&lt;/b&gt;.&amp;nbsp;&lt;/span&gt;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%28%5CLeftarrow+%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%28%5CLeftarrow+%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28%5CLeftarrow+%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;(&amp;#92;Leftarrow )&quot; class=&quot;latex&quot; /&gt; This is because &lt;img src=&quot;https://s0.wp.com/latex.php?latex=L%5Cin+%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=L%5Cin+%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=L%5Cin+%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;L&amp;#92;in &amp;#92;text {NP}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   (&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5CRightarrow+%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5CRightarrow+%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CRightarrow+%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;Rightarrow )&quot; class=&quot;latex&quot; /&gt; Let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=L%27%5Cin+%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=L%27%5Cin+%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=L%27%5Cin+%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;L&amp;#039;&amp;#92;in &amp;#92;text {NP}&quot; class=&quot;latex&quot; /&gt;. Because &lt;img src=&quot;https://s0.wp.com/latex.php?latex=L&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=L&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=L&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;L&quot; class=&quot;latex&quot; /&gt; is NP-hard we know that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=L%5Cin+%5Ctext+%7BP%5Censuremath+%7B%5CRightarrow+L%27%5Cin+%5Ctext+%7BP%7D%7D.%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=L%5Cin+%5Ctext+%7BP%5Censuremath+%7B%5CRightarrow+L%27%5Cin+%5Ctext+%7BP%7D%7D.%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=L%5Cin+%5Ctext+%7BP%5Censuremath+%7B%5CRightarrow+L%27%5Cin+%5Ctext+%7BP%7D%7D.%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;L&amp;#92;in &amp;#92;text {P&amp;#92;ensuremath {&amp;#92;Rightarrow L&amp;#039;&amp;#92;in &amp;#92;text {P}}.}&quot; class=&quot;latex&quot; /&gt; &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Fact &lt;a href=&quot;#x1-60002r3&quot;&gt;5.3&lt;!--tex4ht:ref: fact:np-complete-in-P-iff-p=00003Dnp --&gt;&lt;/a&gt; points to an important interplay between problems and complexity classes. We can study complexity classes by studying their complete problems, and vice versa.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The central result in the theory of NP completeness is the following.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-60003r2&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 5.2.  &lt;/span&gt;&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#XCook73&quot;&gt;7&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;#XLevin73&quot;&gt;20&lt;/a&gt;]&lt;/span&gt; 3Sat is NP-complete.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;    &lt;b&gt;Proof&lt;/b&gt;.&amp;nbsp;&lt;/span&gt;3Sat is in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {NP}&quot; class=&quot;latex&quot; /&gt; by Fact &lt;a href=&quot;#x1-57002r1&quot;&gt;5.1&lt;!--tex4ht:ref: fact:3Sa-etc-in-NP --&gt;&lt;/a&gt;. Next we prove NP-hardness. The main idea is Theorem &lt;a href=&quot;#x1-56001r1&quot;&gt;5.1&lt;!--tex4ht:ref: thm:redux-ckt-2-3sat --&gt;&lt;/a&gt;, while the rest of the proof mostly amounts to opening up definitions and using some previous simulations. Let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=L%5Cin+%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=L%5Cin+%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=L%5Cin+%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;L&amp;#92;in &amp;#92;text {NP}&quot; class=&quot;latex&quot; /&gt; and let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M&quot; class=&quot;latex&quot; /&gt; be the corresponding TM which runs in time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n^{d}&quot; class=&quot;latex&quot; /&gt; on inputs &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;(x,y)&quot; class=&quot;latex&quot; /&gt; where &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7Cx%7C%3Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7Cx%7C%3Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7Cx%7C%3Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;|x|=n&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7Cy%7C%3Dn%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7Cy%7C%3Dn%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7Cy%7C%3Dn%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;|y|=n^{d}&quot; class=&quot;latex&quot; /&gt;, for some constant &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt;. We can work with TMs instead of RAMs since they are equivalent up to a power loss, as we saw in Theorem &lt;a href=&quot;#x1-26003r6&quot;&gt;2.6&lt;!--tex4ht:ref: thm:simu-RAM-by-TM --&gt;&lt;/a&gt;. We can construct in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BP+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {P }&quot; class=&quot;latex&quot; /&gt;a circuit &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C(x,y)&quot; class=&quot;latex&quot; /&gt; of size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c_%7BM%7Dn%5E%7Bc_%7Bd%7D%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c_%7BM%7Dn%5E%7Bc_%7Bd%7D%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c_%7BM%7Dn%5E%7Bc_%7Bd%7D%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c_{M}n^{c_{d}}&quot; class=&quot;latex&quot; /&gt; such that for any &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x%2Cy&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x%2Cy&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x%2Cy&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x,y&quot; class=&quot;latex&quot; /&gt; we have &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M%28x%2Cy%29%3D1%5CLeftrightarrow+C%28x%2Cy%29%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M%28x%2Cy%29%3D1%5CLeftrightarrow+C%28x%2Cy%29%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M%28x%2Cy%29%3D1%5CLeftrightarrow+C%28x%2Cy%29%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M(x,y)=1&amp;#92;Leftrightarrow C(x,y)=1&quot; class=&quot;latex&quot; /&gt; by Theorem &lt;a href=&quot;#x1-25006r4&quot;&gt;2.4&lt;!--tex4ht:ref: thm:simu-tm-by-ckts-simple --&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Now, suppose we are given an input &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w&quot; class=&quot;latex&quot; /&gt; for which we are trying to decide membership in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=L&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=L&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=L&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;L&quot; class=&quot;latex&quot; /&gt;. This is equivalent to deciding if &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cexists+y%3AC%28w%2Cy%29%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cexists+y%3AC%28w%2Cy%29%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cexists+y%3AC%28w%2Cy%29%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;exists y:C(w,y)=1&quot; class=&quot;latex&quot; /&gt; by what we just said. We can “hard-wire” &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w&quot; class=&quot;latex&quot; /&gt; into &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C&quot; class=&quot;latex&quot; /&gt; to obtain the circuit &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C_%7Bw%7D%28y%29%3A%3DC%28w%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C_%7Bw%7D%28y%29%3A%3DC%28w%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C_%7Bw%7D%28y%29%3A%3DC%28w%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C_{w}(y):=C(w,y)&quot; class=&quot;latex&quot; /&gt; only on the variables &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y&quot; class=&quot;latex&quot; /&gt;, with no loss in size. Here by “hard-wise” se mean replacing the input gates &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt; with the bits of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w&quot; class=&quot;latex&quot; /&gt;. Now we can apply Theorem &lt;a href=&quot;#x1-56001r1&quot;&gt;5.1&lt;!--tex4ht:ref: thm:redux-ckt-2-3sat --&gt;&lt;/a&gt; to this new circuit to produce a 3CNF &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f_%7Bw%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f_%7Bw%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f_%7Bw%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f_{w}&quot; class=&quot;latex&quot; /&gt; on variables &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y&quot; class=&quot;latex&quot; /&gt; and new variables &lt;img src=&quot;https://s0.wp.com/latex.php?latex=z&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=z&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=z&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;z&quot; class=&quot;latex&quot; /&gt; such that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C_%7Bw%7D%28y%29%3D1%5CLeftrightarrow+%5Cexists+z%3Af%28y%2Cz%29%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C_%7Bw%7D%28y%29%3D1%5CLeftrightarrow+%5Cexists+z%3Af%28y%2Cz%29%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C_%7Bw%7D%28y%29%3D1%5CLeftrightarrow+%5Cexists+z%3Af%28y%2Cz%29%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C_{w}(y)=1&amp;#92;Leftrightarrow &amp;#92;exists z:f(y,z)=1&quot; class=&quot;latex&quot; /&gt;, for any &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y&quot; class=&quot;latex&quot; /&gt;. The size of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f_%7Bw%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f_%7Bw%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f_%7Bw%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f_{w}&quot; class=&quot;latex&quot; /&gt; and the number of variables &lt;img src=&quot;https://s0.wp.com/latex.php?latex=z&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=z&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=z&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;z&quot; class=&quot;latex&quot; /&gt; is power in the size of the circuit.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   We have obtained:&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+w%5Cin+L%5CLeftrightarrow+%5Cexists+y%3AM%28w%2Cy%29%3D1%5CLeftrightarrow+%5Cexists+y%3AC_%7Bw%7D%28y%29%3D1%5CLeftrightarrow+%5Cexists+y%2Cz%3Af_%7Bw%7D%28y%2Cz%29%3D1%5CLeftrightarrow+f_%7Bw%7D%5Cin+%5Ctext+%7B3Sat%2C%7D+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+w%5Cin+L%5CLeftrightarrow+%5Cexists+y%3AM%28w%2Cy%29%3D1%5CLeftrightarrow+%5Cexists+y%3AC_%7Bw%7D%28y%29%3D1%5CLeftrightarrow+%5Cexists+y%2Cz%3Af_%7Bw%7D%28y%2Cz%29%3D1%5CLeftrightarrow+f_%7Bw%7D%5Cin+%5Ctext+%7B3Sat%2C%7D+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+w%5Cin+L%5CLeftrightarrow+%5Cexists+y%3AM%28w%2Cy%29%3D1%5CLeftrightarrow+%5Cexists+y%3AC_%7Bw%7D%28y%29%3D1%5CLeftrightarrow+%5Cexists+y%2Cz%3Af_%7Bw%7D%28y%2Cz%29%3D1%5CLeftrightarrow+f_%7Bw%7D%5Cin+%5Ctext+%7B3Sat%2C%7D+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} w&amp;#92;in L&amp;#92;Leftrightarrow &amp;#92;exists y:M(w,y)=1&amp;#92;Leftrightarrow &amp;#92;exists y:C_{w}(y)=1&amp;#92;Leftrightarrow &amp;#92;exists y,z:f_{w}(y,z)=1&amp;#92;Leftrightarrow f_{w}&amp;#92;in &amp;#92;text {3Sat,} &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;as desired. &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   In section&amp;nbsp;º&lt;a href=&quot;#x1-500004.3&quot;&gt;4.3&lt;!--tex4ht:ref: sec:Reductions-from-3Sat --&gt;&lt;/a&gt; we reduced 3Sat to other problems which are also in NP by Fact &lt;a href=&quot;#x1-57002r1&quot;&gt;5.1&lt;!--tex4ht:ref: fact:3Sa-etc-in-NP --&gt;&lt;/a&gt;. This implies that all these problems are NP-complete. Here we use that if problem &lt;img src=&quot;https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;A&quot; class=&quot;latex&quot; /&gt; reduces to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B&quot; class=&quot;latex&quot; /&gt; in P, and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B&quot; class=&quot;latex&quot; /&gt; reduces to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C&quot; class=&quot;latex&quot; /&gt;, then also &lt;img src=&quot;https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;A&quot; class=&quot;latex&quot; /&gt; reduces to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C&quot; class=&quot;latex&quot; /&gt;. This is because if &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C&amp;#92;in &amp;#92;text {P}&quot; class=&quot;latex&quot; /&gt; then &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B&amp;#92;in &amp;#92;text {P}&quot; class=&quot;latex&quot; /&gt;, and so &lt;img src=&quot;https://s0.wp.com/latex.php?latex=A%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=A%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=A%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;A&amp;#92;in &amp;#92;text {P}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-60004r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Corollary&lt;/b&gt; 5.1.  &lt;/span&gt; Clique, Cover-by-vertexes, Subset-sum, and 3Color are NP-complete.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   It is important to note that there is nothing special about the &lt;em&gt;existence&lt;/em&gt; of NP-complete problems. The following is a simple such problem that does not require any of the machinery in this section.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-60005r3&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 5.3.  &lt;/span&gt;Consider the problem, given a RAM &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M&quot; class=&quot;latex&quot; /&gt;, an input &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt;, and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%5Cin+%5Cmathbb+%7BN%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%5Cin+%5Cmathbb+%7BN%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%5Cin+%5Cmathbb+%7BN%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&amp;#92;in &amp;#92;mathbb {N}&quot; class=&quot;latex&quot; /&gt;, where &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt; is written in unary, decide if there is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y&amp;#92;in &amp;#92;{0,1&amp;#92;} ^{t}&quot; class=&quot;latex&quot; /&gt; such that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M%28x%2Cy%29%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M%28x%2Cy%29%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M%28x%2Cy%29%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M(x,y)=1&quot; class=&quot;latex&quot; /&gt;. Prove that this is NP-complete.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   What if &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt; is written in binary?&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The interesting aspect of NP-complete problems such as 3Sat and those in Corollary &lt;a href=&quot;#x1-60004r1&quot;&gt;5.1&lt;!--tex4ht:ref: cor:all-probs-NP-complete --&gt;&lt;/a&gt; is that they are very simple and structured, and don’t refer to computational models. This makes them suitable for reductions, and for inferring properties of the complexity class which are not evident from a machine-based definition.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h3 class=&quot;sectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;5.3   &lt;/span&gt; &lt;a id=&quot;x1-610005.3&quot;&gt;&lt;/a&gt;From RAM to 3SAT in quasi-linear time&lt;/h3&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;The framework in the previous section is useful to relate membership in P of different problems in NP, but it is not suitable for a more fine-grained analysis. For example, under the assumption that 3Sat is in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BTime%7D%28cn%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BTime%7D%28cn%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BTime%7D%28cn%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {Time}(cn)&quot; class=&quot;latex&quot; /&gt; we cannot immediately conclude that other problems in NP are solvable in this time or in about this time. We can only conclude that they are in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {P}&quot; class=&quot;latex&quot; /&gt;. In particular, the complexity of 3Sat cannot be related to that of other central conjectures, such as whether 3Sum is in subquadratic time, Conjecture &lt;a href=&quot;#x1-49003r1&quot;&gt;4.1&lt;!--tex4ht:ref: conj:3sum --&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The culprit is the power loss in reducing RAM computation to circuits, mentioned at the beginning of the chapter. We now remedy this situation and present a quasi-linear reduction. As we did before, cf.&amp;nbsp;Theorem &lt;a href=&quot;#x1-56001r1&quot;&gt;5.1&lt;!--tex4ht:ref: thm:redux-ckt-2-3sat --&gt;&lt;/a&gt; and Theorem &lt;a href=&quot;#x1-60003r2&quot;&gt;5.2&lt;!--tex4ht:ref: thm:-3Sat-is-NP-complete --&gt;&lt;/a&gt;, we first state a version of the simulation for (deterministic) computation which contains all the main ideas, and then we note that a completeness result follows.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-61001r3&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 5.3.  &lt;/span&gt;Given an input length &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%5Cin+%5Cmathbb+%7BN%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%5Cin+%5Cmathbb+%7BN%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%5Cin+%5Cmathbb+%7BN%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&amp;#92;in &amp;#92;mathbb {N}&quot; class=&quot;latex&quot; /&gt;, a time bound &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%5Cin+%5Cmathbb+%7BN%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%5Cin+%5Cmathbb+%7BN%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%5Cin+%5Cmathbb+%7BN%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&amp;#92;in &amp;#92;mathbb {N}&quot; class=&quot;latex&quot; /&gt;, and a RAM &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M&quot; class=&quot;latex&quot; /&gt; that runs in time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt; on inputs of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt; bits, we can compute in time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%27%3A%3Dc_%7BM%7Dt%28%5Clog+t%29%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%27%3A%3Dc_%7BM%7Dt%28%5Clog+t%29%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%27%3A%3Dc_%7BM%7Dt%28%5Clog+t%29%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&amp;#039;:=c_{M}t(&amp;#92;log t)^{c}&quot; class=&quot;latex&quot; /&gt; a 3CNF &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; on variables &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;(x,y)&quot; class=&quot;latex&quot; /&gt; where &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7Cy%7C%5Cle+t%27&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7Cy%7C%5Cle+t%27&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7Cy%7C%5Cle+t%27&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;|y|&amp;#92;le t&amp;#039;&quot; class=&quot;latex&quot; /&gt; such that for every &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&amp;#92;in &amp;#92;{0,1&amp;#92;} ^{n}&quot; class=&quot;latex&quot; /&gt;:&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+M%28x%29%3D1%5Ciff+%5Cexists+y%3Af%28x%2Cy%29%3D1.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+M%28x%29%3D1%5Ciff+%5Cexists+y%3Af%28x%2Cy%29%3D1.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+M%28x%29%3D1%5Ciff+%5Cexists+y%3Af%28x%2Cy%29%3D1.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} M(x)=1&amp;#92;iff &amp;#92;exists y:f(x,y)=1. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   We now present the proof of this amazing result; you may want to refer back to Definition &lt;a href=&quot;#x1-26001r5&quot;&gt;2.5&lt;!--tex4ht:ref: def:RAM --&gt;&lt;/a&gt; of a RAM. A key concept in the proof is the following “snapshot” of the RAM computation.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-61002r3&quot;&gt;&lt;/a&gt; &lt;b&gt;Definition&lt;/b&gt; 5.3.  &lt;/span&gt;The &lt;em&gt;internal configuration, &lt;/em&gt;abbreviated IC&lt;em&gt;, &lt;/em&gt;of a RAM specifies:&lt;/p&gt;
&lt;ul class=&quot;itemize1&quot;&gt;
&lt;li class=&quot;itemize&quot;&gt;its registers,&lt;/li&gt;
&lt;li class=&quot;itemize&quot;&gt;the program counter,&lt;/li&gt;
&lt;li class=&quot;itemize&quot;&gt;the word length &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w&quot; class=&quot;latex&quot; /&gt;, and&lt;/li&gt;
&lt;li class=&quot;itemize&quot;&gt;if the current instruction is a Read &lt;img src=&quot;https://s0.wp.com/latex.php?latex=r_%7Bi%7D%3A%3D%5Cmu+%5Br_%7Bj%7D%5D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=r_%7Bi%7D%3A%3D%5Cmu+%5Br_%7Bj%7D%5D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=r_%7Bi%7D%3A%3D%5Cmu+%5Br_%7Bj%7D%5D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;r_{i}:=&amp;#92;mu [r_{j}]&quot; class=&quot;latex&quot; /&gt; or Write &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cmu+%5Br_%7Bj%7D%5D%3A%3Dr_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cmu+%5Br_%7Bj%7D%5D%3A%3Dr_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmu+%5Br_%7Bj%7D%5D%3A%3Dr_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;mu [r_{j}]:=r_{i}&quot; class=&quot;latex&quot; /&gt; then the IC includes the content &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cmu+%5Br_%7Bj%7D%5D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cmu+%5Br_%7Bj%7D%5D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmu+%5Br_%7Bj%7D%5D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;mu [r_{j}]&quot; class=&quot;latex&quot; /&gt; of the       memory cell indexed by &lt;img src=&quot;https://s0.wp.com/latex.php?latex=r_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=r_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=r_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;r_{j}&quot; class=&quot;latex&quot; /&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Note that at most one memory cell is included in one IC. By contrast, the configuration of a TM (Definition &lt;a href=&quot;#x1-19001r1&quot;&gt;2.1&lt;!--tex4ht:ref: def:TM --&gt;&lt;/a&gt;) includes all its tape cells. Also note that an IC has length &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+c_%7BM%7D%2Bc%5Clog+t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+c_%7BM%7D%2Bc%5Clog+t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+c_%7BM%7D%2Bc%5Clog+t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le c_{M}+c&amp;#92;log t&quot; class=&quot;latex&quot; /&gt; bits, where the &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c_{M}&quot; class=&quot;latex&quot; /&gt; is for the program counter, and the &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c%5Clog+t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c%5Clog+t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c%5Clog+t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c&amp;#92;log t&quot; class=&quot;latex&quot; /&gt; is for the rest, using that the maximum word length of a machine running in time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%5Cge+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%5Cge+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%5Cge+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&amp;#92;ge n&quot; class=&quot;latex&quot; /&gt; is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c%5Clog+t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c%5Clog+t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c%5Clog+t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c&amp;#92;log t&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;paragraphHead&quot;&gt;&lt;a id=&quot;x1-620005.3&quot;&gt;&lt;/a&gt;The key idea in the proof.&lt;/span&gt;    At the high level, the approach is, like in Theorem &lt;a href=&quot;#x1-56001r1&quot;&gt;5.1&lt;!--tex4ht:ref: thm:redux-ckt-2-3sat --&gt;&lt;/a&gt;, to guess computation and check it efficiently. We are going to &lt;em&gt;guess &lt;/em&gt;the sequence of ICs, and we need additional ideas to check them efficiently by a circuit. This is not immediate, since, again, the RAM can use direct access to read and write in memory at arbitrary locations, something which is not easy to do with a circuit.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The key idea is to check operations involving memory &lt;em&gt;independently &lt;/em&gt;from the operations involving registers but not memory. If both checks pass, then the computation is correct. More precisely, a sequence of internal configurations &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s_%7B1%7D%2Cs_%7B2%7D%2C%5Cldots+%2Cs_%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s_%7B1%7D%2Cs_%7B2%7D%2C%5Cldots+%2Cs_%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s_%7B1%7D%2Cs_%7B2%7D%2C%5Cldots+%2Cs_%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s_{1},s_{2},&amp;#92;ldots ,s_{t}&quot; class=&quot;latex&quot; /&gt; corresponds to the computation of the RAM on input &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt; iff for every &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i%3Ct&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i%3Ct&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i%3Ct&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&amp;lt;t&quot; class=&quot;latex&quot; /&gt;:
&lt;/p&gt;
&lt;ol class=&quot;enumerate1&quot;&gt;
&lt;li class=&quot;enumerate&quot; id=&quot;x1-62002x1&quot;&gt;If &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s_{i}&quot; class=&quot;latex&quot; /&gt; does not access memory, then &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s_%7Bi%2B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s_%7Bi%2B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s_%7Bi%2B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s_{i+1}&quot; class=&quot;latex&quot; /&gt; has its registers, program counter, and word length       updated according to the instruction executed in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s_{i}&quot; class=&quot;latex&quot; /&gt;,&lt;/li&gt;
&lt;li class=&quot;enumerate&quot; id=&quot;x1-62004x2&quot;&gt;If &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s_{i}&quot; class=&quot;latex&quot; /&gt; is computing a read operation &lt;img src=&quot;https://s0.wp.com/latex.php?latex=r_%7Bi%7D%3A%3D%5Ctext+%7B%5Censuremath+%7B%5Cmu+%5Br_%7Bj%7D%5D%7D%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=r_%7Bi%7D%3A%3D%5Ctext+%7B%5Censuremath+%7B%5Cmu+%5Br_%7Bj%7D%5D%7D%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=r_%7Bi%7D%3A%3D%5Ctext+%7B%5Censuremath+%7B%5Cmu+%5Br_%7Bj%7D%5D%7D%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;r_{i}:=&amp;#92;text {&amp;#92;ensuremath {&amp;#92;mu [r_{j}]}}&quot; class=&quot;latex&quot; /&gt; then in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s_%7Bi%2B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s_%7Bi%2B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s_%7Bi%2B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s_{i+1}&quot; class=&quot;latex&quot; /&gt; register &lt;img src=&quot;https://s0.wp.com/latex.php?latex=r_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=r_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=r_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;r_{j}&quot; class=&quot;latex&quot; /&gt; contains &lt;em&gt;the most recent value       written in memory cell &lt;img src=&quot;https://s0.wp.com/latex.php?latex=r_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=r_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=r_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;r_{j}&quot; class=&quot;latex&quot; /&gt;&lt;/em&gt;. In case this cell was never written, then &lt;img src=&quot;https://s0.wp.com/latex.php?latex=r_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=r_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=r_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;r_{j}&quot; class=&quot;latex&quot; /&gt; should contain &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x_{j}&quot; class=&quot;latex&quot; /&gt; if &lt;img src=&quot;https://s0.wp.com/latex.php?latex=j%5Cin+%5C%7B1%2C2%2C%5Cldots+%2Cn%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=j%5Cin+%5C%7B1%2C2%2C%5Cldots+%2Cn%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=j%5Cin+%5C%7B1%2C2%2C%5Cldots+%2Cn%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;j&amp;#92;in &amp;#92;{1,2,&amp;#92;ldots ,n&amp;#92;}&quot; class=&quot;latex&quot; /&gt;, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt;       if &lt;img src=&quot;https://s0.wp.com/latex.php?latex=j%3D0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=j%3D0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=j%3D0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;j=0&quot; class=&quot;latex&quot; /&gt;, and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;0&quot; class=&quot;latex&quot; /&gt; otherwise. The program counter in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s_%7Bi%2B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s_%7Bi%2B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s_%7Bi%2B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s_{i+1}&quot; class=&quot;latex&quot; /&gt; also points to the next instruction.&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;Rather than directly constructing a 3CNF that implements these checks, we construct a circuit and then appeal to Theorem &lt;a href=&quot;#x1-56001r1&quot;&gt;5.1&lt;!--tex4ht:ref: thm:redux-ckt-2-3sat --&gt;&lt;/a&gt;. It is easy to construct a circuit of quasi-linear size implementing Check 1, since the circuit only has to check adjacent pairs of ICs. As remarked before, these ICs have length &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+c_%7BM%7D%2Bc%5Clog+t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+c_%7BM%7D%2Bc%5Clog+t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+c_%7BM%7D%2Bc%5Clog+t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le c_{M}+c&amp;#92;log t&quot; class=&quot;latex&quot; /&gt;. For fixed &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i%2C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i%2C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i%2C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i,&quot; class=&quot;latex&quot; /&gt; Check 1 can be implemented by a circuit which depends on the RAM and has size power in the length of an IC. Taking an And of these circuits over the choices of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&quot; class=&quot;latex&quot; /&gt; gives a circuit of the desired size for Check 1.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The difficulty lies in Check 2, because the circuit needs to find “the most recent value written.” The solution is to &lt;em&gt;sort&lt;/em&gt; the ICs by memory addresses. After sorting, we can implement Check (2) as easily as Check (1), since we just need to check adjacent pairs of ICs.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The emergence of sorting in the theory of NP-completeness cements the pivotal role this operation plays in computer science.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   To implement this idea we need to be able to sort with a quasi-linear size circuit. Standard sorting algorithms like Mergesort, Heapsort, or Radixsort run in quasi-linear time on a RAM, but rely on direct addressing (cf.&amp;nbsp;section&amp;nbsp;º&lt;a href=&quot;#x1-260002.4&quot;&gt;2.4&lt;!--tex4ht:ref: sec:RAMs --&gt;&lt;/a&gt;) and for this reason cannot be easily implemented by a circuit of quasi-linear size. However other algorithms have been developed that do have such an implementation, for example a variant of Mergesort called Odd-Even-Mergesort &lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#XBatcher68&quot;&gt;6&lt;/a&gt;]&lt;/span&gt;, see also &lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#XViolaNEU-ram2sat-neu-author&quot;&gt;22&lt;/a&gt;]&lt;/span&gt;. This gives the following lemma.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-62005r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Lemma&lt;/b&gt; 5.1.  &lt;/span&gt;Given &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;m&quot; class=&quot;latex&quot; /&gt; we can compute in time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%27%3A%3Dt%5Ccdot+%28m%5Clog+t%29%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%27%3A%3Dt%5Ccdot+%28m%5Clog+t%29%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%27%3A%3Dt%5Ccdot+%28m%5Clog+t%29%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&amp;#039;:=t&amp;#92;cdot (m&amp;#92;log t)^{c}&quot; class=&quot;latex&quot; /&gt; a circuit (of size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+t%27&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+t%27&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+t%27&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le t&amp;#039;&quot; class=&quot;latex&quot; /&gt;) that sorts &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt; integers of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;m&quot; class=&quot;latex&quot; /&gt; bits.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   We summarize the key steps in the proof.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;    &lt;b&gt;Proof of Theorem &lt;a href=&quot;#x1-61001r3&quot;&gt;5.3&lt;!--tex4ht:ref: thm:redux-RAM-2-3cnf-quasilinear --&gt;&lt;/a&gt;&lt;/b&gt;.&amp;nbsp;&lt;/span&gt; We construct a circuit &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C_{M}&quot; class=&quot;latex&quot; /&gt; and then appeal to Theorem &lt;a href=&quot;#x1-56001r1&quot;&gt;5.1&lt;!--tex4ht:ref: thm:redux-ckt-2-3sat --&gt;&lt;/a&gt;. The extra variables &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y&quot; class=&quot;latex&quot; /&gt; correspond to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt; ICs &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s_%7B1%7D%2Cs_%7B2%7D%2C%5Cldots+%2Cs_%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s_%7B1%7D%2Cs_%7B2%7D%2C%5Cldots+%2Cs_%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s_%7B1%7D%2Cs_%7B2%7D%2C%5Cldots+%2Cs_%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s_{1},s_{2},&amp;#92;ldots ,s_{t}&quot; class=&quot;latex&quot; /&gt;. An IC takes &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c_%7BM%7D%2Bc%5Clog+t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c_%7BM%7D%2Bc%5Clog+t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c_%7BM%7D%2Bc%5Clog+t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c_{M}+c&amp;#92;log t&quot; class=&quot;latex&quot; /&gt; bits to specify, so we need &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+c_%7BM%7Dt%5Clog+t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+c_%7BM%7Dt%5Clog+t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+c_%7BM%7Dt%5Clog+t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le c_{M}t&amp;#92;log t&quot; class=&quot;latex&quot; /&gt; variables &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y&quot; class=&quot;latex&quot; /&gt;. The circuit &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C_{M}&quot; class=&quot;latex&quot; /&gt; first performs Check (1) above for each adjacent pair &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%28s_%7Bi%7D%2Cs_%7Bi%2B1%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%28s_%7Bi%7D%2Cs_%7Bi%2B1%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28s_%7Bi%7D%2Cs_%7Bi%2B1%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;(s_{i},s_{i+1})&quot; class=&quot;latex&quot; /&gt; of ICs. This takes size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c_%7BM%7D%5Clog+%5E%7Bc%7Dt&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c_%7BM%7D%5Clog+%5E%7Bc%7Dt&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c_%7BM%7D%5Clog+%5E%7Bc%7Dt&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c_{M}&amp;#92;log ^{c}t&quot; class=&quot;latex&quot; /&gt; for each pair, and so size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c_%7BM%7Dt%5Clog+%5E%7Bc%7Dt&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c_%7BM%7Dt%5Clog+%5E%7Bc%7Dt&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c_%7BM%7Dt%5Clog+%5E%7Bc%7Dt&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c_{M}t&amp;#92;log ^{c}t&quot; class=&quot;latex&quot; /&gt; overall.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Then &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C_{M}&quot; class=&quot;latex&quot; /&gt; sorts the ICs by memory addresses, producing sorted ICs &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s%27_%7B1%7D%2Cs%27_%7B2%7D%2C%5Cldots+%2Cs%27_%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s%27_%7B1%7D%2Cs%27_%7B2%7D%2C%5Cldots+%2Cs%27_%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s%27_%7B1%7D%2Cs%27_%7B2%7D%2C%5Cldots+%2Cs%27_%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&amp;#039;_{1},s&amp;#039;_{2},&amp;#92;ldots ,s&amp;#039;_{t}&quot; class=&quot;latex&quot; /&gt;. This takes size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%5Ccdot+%5Clog+%5E%7Bc%7Dt&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%5Ccdot+%5Clog+%5E%7Bc%7Dt&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%5Ccdot+%5Clog+%5E%7Bc%7Dt&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&amp;#92;cdot &amp;#92;log ^{c}t&quot; class=&quot;latex&quot; /&gt; by Lemma &lt;a href=&quot;#x1-62005r1&quot;&gt;5.1&lt;!--tex4ht:ref: lem:sorting-ckt-quasilinear --&gt;&lt;/a&gt;, using that the memory addresses have &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+c%5Clog+t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+c%5Clog+t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+c%5Clog+t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le c&amp;#92;log t&quot; class=&quot;latex&quot; /&gt; bits. Then the circuit performs Check (2) for each adjacent pair &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%28s%27_%7Bi%7D%2Cs%27_%7Bi%2B1%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%28s%27_%7Bi%7D%2Cs%27_%7Bi%2B1%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28s%27_%7Bi%7D%2Cs%27_%7Bi%2B1%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;(s&amp;#039;_{i},s&amp;#039;_{i+1})&quot; class=&quot;latex&quot; /&gt; of ICs. The circuit size required for this is no more than for Check (1).&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Finally, the circuit takes an And of the results of the two checks, and also checks that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s_%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s_%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s_%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s_{t}&quot; class=&quot;latex&quot; /&gt; is accepting. &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   We can now prove completeness in a manner similar to Theorem &lt;a href=&quot;#x1-60003r2&quot;&gt;5.2&lt;!--tex4ht:ref: thm:-3Sat-is-NP-complete --&gt;&lt;/a&gt;, with a relatively simple extension of Theorem &lt;a href=&quot;#x1-61001r3&quot;&gt;5.3&lt;!--tex4ht:ref: thm:redux-RAM-2-3cnf-quasilinear --&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-62006r4&quot;&gt;&lt;/a&gt;                                                                                                                                                                                     &lt;b&gt;Theorem&lt;/b&gt; 5.4.  &lt;/span&gt;Every problem &lt;img src=&quot;https://s0.wp.com/latex.php?latex=L&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=L&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=L&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;L&quot; class=&quot;latex&quot; /&gt; in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNTime%7D%28t%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNTime%7D%28t%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BNTime%7D%28t%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {NTime}(t)&quot; class=&quot;latex&quot; /&gt; map reduces to 3Sat in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BTime%7D%28c_%7BL%2Ct%7Dt%5Clog+%5E%7Bc%7Dt%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BTime%7D%28c_%7BL%2Ct%7Dt%5Clog+%5E%7Bc%7Dt%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BTime%7D%28c_%7BL%2Ct%7Dt%5Clog+%5E%7Bc%7Dt%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {Time}(c_{L,t}t&amp;#92;log ^{c}t)&quot; class=&quot;latex&quot; /&gt;, for every function &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%5Cge+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%5Cge+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%5Cge+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&amp;#92;ge n&quot; class=&quot;latex&quot; /&gt; such that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t(x)&quot; class=&quot;latex&quot; /&gt; is computable in time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t(x)&quot; class=&quot;latex&quot; /&gt; given &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The assumption on &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt; is similar to that in the hierarchy Theorem &lt;a href=&quot;#x1-40003r4&quot;&gt;3.4&lt;!--tex4ht:ref: thm:TIME-hierarchy-TM --&gt;&lt;/a&gt;, and is satisfied by all standard functions including all those in this book – cf.&amp;nbsp;discussion after Theorem &lt;a href=&quot;#x1-40003r4&quot;&gt;3.4&lt;!--tex4ht:ref: thm:TIME-hierarchy-TM --&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;    &lt;b&gt;Proof&lt;/b&gt;.&amp;nbsp;&lt;/span&gt;Let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M&quot; class=&quot;latex&quot; /&gt; be a RAM computing &lt;img src=&quot;https://s0.wp.com/latex.php?latex=L&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=L&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=L&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;L&quot; class=&quot;latex&quot; /&gt; in the assumed time. Given an input &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w&quot; class=&quot;latex&quot; /&gt; of length &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt; we have to efficiently compute a 3CNF &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; such that&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cexists+y%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bt%28n%29%7D%3AM%28w%2Cy%29%3D1%5Ciff+%5Cexists+y%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bc_%7BL%2Ct%7Dt%28n%29%5Clog+%5E%7Bc%7Dt%28n%29%7D%3Af%28y%29%3D1.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cexists+y%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bt%28n%29%7D%3AM%28w%2Cy%29%3D1%5Ciff+%5Cexists+y%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bc_%7BL%2Ct%7Dt%28n%29%5Clog+%5E%7Bc%7Dt%28n%29%7D%3Af%28y%29%3D1.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cexists+y%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bt%28n%29%7D%3AM%28w%2Cy%29%3D1%5Ciff+%5Cexists+y%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bc_%7BL%2Ct%7Dt%28n%29%5Clog+%5E%7Bc%7Dt%28n%29%7D%3Af%28y%29%3D1.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} &amp;#92;exists y&amp;#92;in &amp;#92;{0,1&amp;#92;} ^{t(n)}:M(w,y)=1&amp;#92;iff &amp;#92;exists y&amp;#92;in &amp;#92;{0,1&amp;#92;} ^{c_{L,t}t(n)&amp;#92;log ^{c}t(n)}:f(y)=1. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   First we compute &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%28n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%28n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%28n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t(n)&quot; class=&quot;latex&quot; /&gt;, using the assumption. We now apply Theorem &lt;a href=&quot;#x1-61001r3&quot;&gt;5.3&lt;!--tex4ht:ref: thm:redux-RAM-2-3cnf-quasilinear --&gt;&lt;/a&gt;, but on a new input length &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%27%3A%3Dc%28n%2Bt%29%5Cle+ct&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%27%3A%3Dc%28n%2Bt%29%5Cle+ct&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%27%3A%3Dc%28n%2Bt%29%5Cle+ct&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&amp;#039;:=c(n+t)&amp;#92;le ct&quot; class=&quot;latex&quot; /&gt;, to accommodate for inputs of the form &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;(x,y)&quot; class=&quot;latex&quot; /&gt;. This produces a formula &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; of size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c_%7BL%2Ct%7Dt%28%5Clog+t%29%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c_%7BL%2Ct%7Dt%28%5Clog+t%29%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c_%7BL%2Ct%7Dt%28%5Clog+t%29%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c_{L,t}t(&amp;#92;log t)^{c}&quot; class=&quot;latex&quot; /&gt; in variables &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;(x,y)&quot; class=&quot;latex&quot; /&gt; and new variables &lt;img src=&quot;https://s0.wp.com/latex.php?latex=z&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=z&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=z&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;z&quot; class=&quot;latex&quot; /&gt;. We can now set &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt; to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w&quot; class=&quot;latex&quot; /&gt; and conclude the proof. &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   With these sharper results we can now study hardness and completenss within time bounds such as &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%5E%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%5E%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%5E%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n^{2}&quot; class=&quot;latex&quot; /&gt;, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%5Clog+%5E%7B3%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%5Clog+%5E%7B3%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%5Clog+%5E%7B3%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&amp;#92;log ^{3}n&quot; class=&quot;latex&quot; /&gt; etc. We work out an example in the next section.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h4 class=&quot;subsectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;5.3.1   &lt;/span&gt; &lt;a id=&quot;x1-630005.3.1&quot;&gt;&lt;/a&gt;Quasilinear-time completeness&lt;/h4&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;In this section we use the machinery we just developed to study completeness in quasi-linear time, instead of power time.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-63001r4&quot;&gt;&lt;/a&gt; &lt;b&gt;Definition&lt;/b&gt; 5.4.  &lt;/span&gt;We define the quasi-linear time complexity classes&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Ctext+%7BQLin-Time%7D%3A%3D+%26+%5Cbigcup+_%7Bd%5Cin+%5Cmathbb+%7BN%7D%7D%5Ctext+%7BTime%7D%28n%5Clog+%5E%7Bd%7Dn%29%5Ctext+%7B+and%7D%5C%5C+%5Ctext+%7BQLin-NTime%7D%3A%3D+%26+%5Cbigcup+_%7Bd%5Cin+%5Cmathbb+%7BN%7D%7D%5Ctext+%7BNTime%7D%28n%5Clog+%5E%7Bd%7Dn%29.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Ctext+%7BQLin-Time%7D%3A%3D+%26+%5Cbigcup+_%7Bd%5Cin+%5Cmathbb+%7BN%7D%7D%5Ctext+%7BTime%7D%28n%5Clog+%5E%7Bd%7Dn%29%5Ctext+%7B+and%7D%5C%5C+%5Ctext+%7BQLin-NTime%7D%3A%3D+%26+%5Cbigcup+_%7Bd%5Cin+%5Cmathbb+%7BN%7D%7D%5Ctext+%7BNTime%7D%28n%5Clog+%5E%7Bd%7Dn%29.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Ctext+%7BQLin-Time%7D%3A%3D+%26+%5Cbigcup+_%7Bd%5Cin+%5Cmathbb+%7BN%7D%7D%5Ctext+%7BTime%7D%28n%5Clog+%5E%7Bd%7Dn%29%5Ctext+%7B+and%7D%5C%5C+%5Ctext+%7BQLin-NTime%7D%3A%3D+%26+%5Cbigcup+_%7Bd%5Cin+%5Cmathbb+%7BN%7D%7D%5Ctext+%7BNTime%7D%28n%5Clog+%5E%7Bd%7Dn%29.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} &amp;#92;text {QLin-Time}:= &amp;amp; &amp;#92;bigcup _{d&amp;#92;in &amp;#92;mathbb {N}}&amp;#92;text {Time}(n&amp;#92;log ^{d}n)&amp;#92;text { and}&amp;#92;&amp;#92; &amp;#92;text {QLin-NTime}:= &amp;amp; &amp;#92;bigcup _{d&amp;#92;in &amp;#92;mathbb {N}}&amp;#92;text {NTime}(n&amp;#92;log ^{d}n). &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-63002r5&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 5.5.  &lt;/span&gt;3Sat is complete for QLin-NTime with respect to mapping reductions in QLin-Time. That is:&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &amp;#8211; 3Sat is in QLin-NTime, and&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &amp;#8211; every problem in QLin-NTime map reduces to 3Sat in QLin-Time.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;    &lt;b&gt;Proof&lt;/b&gt;.&amp;nbsp;&lt;/span&gt;To show that 3Sat is in QLin-NTime, consider a 3CNF instance &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; of length &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt;. This instance has at most &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt; variables, and we can guess an assignment &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y&quot; class=&quot;latex&quot; /&gt; to them within our budget of non-deterministic guesses. There remains to verify that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y&quot; class=&quot;latex&quot; /&gt; satisfies &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt;. For this, we can do one pass over the clauses. For each clause, we access the bits in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y&quot; class=&quot;latex&quot; /&gt; corresponding to the 3 variables in the clause, and check if the clause is satisfied. This takes constant time per clause, and so time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=cn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=cn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=cn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;cn&quot; class=&quot;latex&quot; /&gt; overall.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The second part follows from Theorem &lt;a href=&quot;#x1-62006r4&quot;&gt;5.4&lt;!--tex4ht:ref: thm:redux-NTime-3Sat --&gt;&lt;/a&gt;, using the fact that the composition of two quasilinear functions is also quasilinear (similarly to the fact that the composition of two power functions is also a power). &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Note that the proof that 3Sat is in QLin-NTime relies on our computational model being a RAM, because we use direct access to fetch the values for the variables in a clause.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   We can now give the following quasi-linear version of Fact &lt;a href=&quot;#x1-60002r3&quot;&gt;5.3&lt;!--tex4ht:ref: fact:np-complete-in-P-iff-p=00003Dnp --&gt;&lt;/a&gt;. The only extra observation for the proof is again that the composition of two quasi-linear functions is quasi-linear.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-63003r2&quot;&gt;&lt;/a&gt; &lt;b&gt;Corollary&lt;/b&gt; 5.2.  &lt;/span&gt;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7B3Sat%7D%5Cin+%5Ctext+%7BQLin-NTime%7D%5CLeftrightarrow+%5Ctext+%7BQLin-NTime%7D%3D%5Ctext+%7BQLin-Time.%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7B3Sat%7D%5Cin+%5Ctext+%7BQLin-NTime%7D%5CLeftrightarrow+%5Ctext+%7BQLin-NTime%7D%3D%5Ctext+%7BQLin-Time.%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7B3Sat%7D%5Cin+%5Ctext+%7BQLin-NTime%7D%5CLeftrightarrow+%5Ctext+%7BQLin-NTime%7D%3D%5Ctext+%7BQLin-Time.%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {3Sat}&amp;#92;in &amp;#92;text {QLin-NTime}&amp;#92;Leftrightarrow &amp;#92;text {QLin-NTime}=&amp;#92;text {QLin-Time.}&quot; class=&quot;latex&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-63004r4&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 5.4.  &lt;/span&gt;Prove that Theorem &lt;a href=&quot;#x1-63002r5&quot;&gt;5.5&lt;!--tex4ht:ref: thm:3Sat-is-complete-quasilinear --&gt;&lt;/a&gt; holds with 3Color instead of 3Sat. What about Clique and Subset-sum?&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-63005r5&quot;&gt;&lt;/a&gt;                                                                                                                                                                                     &lt;b&gt;Exercise&lt;/b&gt; 5.5.  &lt;/span&gt;Prove that 3Sum reduces to 3Sat in Subquadratic time. That is: &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7B3Sat%7D%5Cin+%5Ctext+%7BSubquadraticTime%5Censuremath+%7B%5CRightarrow+%5Ctext+%7B3Sum%7D%5Cin+%5Ctext+%7BSubquadraticTime%7D%7D+%28i.e.%2C+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7B3Sat%7D%5Cin+%5Ctext+%7BSubquadraticTime%5Censuremath+%7B%5CRightarrow+%5Ctext+%7B3Sum%7D%5Cin+%5Ctext+%7BSubquadraticTime%7D%7D+%28i.e.%2C+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7B3Sat%7D%5Cin+%5Ctext+%7BSubquadraticTime%5Censuremath+%7B%5CRightarrow+%5Ctext+%7B3Sum%7D%5Cin+%5Ctext+%7BSubquadraticTime%7D%7D+%28i.e.%2C+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {3Sat}&amp;#92;in &amp;#92;text {SubquadraticTime&amp;#92;ensuremath {&amp;#92;Rightarrow &amp;#92;text {3Sum}&amp;#92;in &amp;#92;text {SubquadraticTime}} (i.e., }&quot; class=&quot;latex&quot; /&gt;Conjecture &lt;a href=&quot;#x1-49003r1&quot;&gt;4.1&lt;!--tex4ht:ref: conj:3sum --&gt;&lt;/a&gt; is false).&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h3 class=&quot;sectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;5.4   &lt;/span&gt; &lt;a id=&quot;x1-640005.4&quot;&gt;&lt;/a&gt;Completeness in other classes&lt;/h3&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;The completeness phenomenon is not special to NP but enjoyed by many other classes. In this section we begin to explore completeness for NExp and Exp. One needs to be careful how hardness (and hence completeness) is defined, since these classes are known to be different from &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {P}&quot; class=&quot;latex&quot; /&gt; by the hierarchy Theorem &lt;a href=&quot;#x1-40003r4&quot;&gt;3.4&lt;!--tex4ht:ref: thm:TIME-hierarchy-TM --&gt;&lt;/a&gt;. So defining a problem &lt;img src=&quot;https://s0.wp.com/latex.php?latex=L&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=L&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=L&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;L&quot; class=&quot;latex&quot; /&gt; to be NExp-hard if &lt;img src=&quot;https://s0.wp.com/latex.php?latex=L%5Cin+%5Ctext+%7BP%7D%5CRightarrow+%5Ctext+%7BNExp%7D%3D%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=L%5Cin+%5Ctext+%7BP%7D%5CRightarrow+%5Ctext+%7BNExp%7D%3D%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=L%5Cin+%5Ctext+%7BP%7D%5CRightarrow+%5Ctext+%7BNExp%7D%3D%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;L&amp;#92;in &amp;#92;text {P}&amp;#92;Rightarrow &amp;#92;text {NExp}=&amp;#92;text {P}&quot; class=&quot;latex&quot; /&gt; would mean simply that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=L%5Cnot+%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=L%5Cnot+%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=L%5Cnot+%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;L&amp;#92;not &amp;#92;in &amp;#92;text {P}&quot; class=&quot;latex&quot; /&gt;. To avoid this in this section hardness (hence completeness) is defined w.r.t.&amp;nbsp;mapping reductions, cf.&amp;nbsp;Chapter &lt;a href=&quot;#x1-450004&quot;&gt;4&lt;!--tex4ht:ref: chap:Reductions --&gt;&lt;/a&gt;. (Another option would be to replace &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {P}&quot; class=&quot;latex&quot; /&gt; with say &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {BPP}&quot; class=&quot;latex&quot; /&gt;, since it is not known if &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BBPP%7D%3D%5Ctext+%7BNExp%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BBPP%7D%3D%5Ctext+%7BNExp%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BBPP%7D%3D%5Ctext+%7BNExp%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {BPP}=&amp;#92;text {NExp}&quot; class=&quot;latex&quot; /&gt;.)&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h4 class=&quot;subsectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;5.4.1   &lt;/span&gt; &lt;a id=&quot;x1-650005.4.1&quot;&gt;&lt;/a&gt;NExp completeness&lt;/h4&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;Complete problems for NExp include &lt;em&gt;succinct&lt;/em&gt; versions of problems complete for NExp. Here succinct means that rather than giving the input &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt; to the problem in standard format, the input consists instead of a circuit &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C%3A%5C%7B0%2C1%5C%7D+%5E%7Bm%7D%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C%3A%5C%7B0%2C1%5C%7D+%5E%7Bm%7D%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C%3A%5C%7B0%2C1%5C%7D+%5E%7Bm%7D%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C:&amp;#92;{0,1&amp;#92;} ^{m}&amp;#92;to &amp;#92;{0,1&amp;#92;} &quot; class=&quot;latex&quot; /&gt; encoding &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt;, for example &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C(i)&quot; class=&quot;latex&quot; /&gt; equals bit &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&quot; class=&quot;latex&quot; /&gt; of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt;, for every &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-65001r5&quot;&gt;&lt;/a&gt; &lt;b&gt;Definition&lt;/b&gt; 5.5.  &lt;/span&gt;The Succinct-3Sat problem: Given a circuit &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C&quot; class=&quot;latex&quot; /&gt; encoding a 3CNF &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f_%7BC%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f_%7BC%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f_%7BC%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f_{C}&quot; class=&quot;latex&quot; /&gt;, does &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f_%7BC%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f_%7BC%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f_%7BC%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f_{C}&quot; class=&quot;latex&quot; /&gt; have a satisfying assignment?&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-65002r6&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 5.6.  &lt;/span&gt;Succinct-3Sat  is  NExp  complete  with  respect  to  power-time  mapping reductions.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;    &lt;b&gt;Proof sketch.&lt;/b&gt;.&amp;nbsp;&lt;/span&gt; Let us first show that Succinct-3Sat is in NExp. Given a circuit &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C&quot; class=&quot;latex&quot; /&gt; of length &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt;, we can run it on every possible input (of length &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le n&quot; class=&quot;latex&quot; /&gt;) and write down the formula &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f_%7BC%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f_%7BC%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f_%7BC%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f_{C}&quot; class=&quot;latex&quot; /&gt; encoded by &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C&quot; class=&quot;latex&quot; /&gt;. This formula has size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+2%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+2%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+2%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le 2^{n}&quot; class=&quot;latex&quot; /&gt;. We can then use the fact that 3Sat is in NP to decide satisfiability of this formula in non-deterministic power time in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=2%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=2%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=2%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;2^{n}&quot; class=&quot;latex&quot; /&gt;, that is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNTime%7D%282%5E%7Bcn%7D%29%5Csubseteq+%5Ctext+%7BNExp%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNTime%7D%282%5E%7Bcn%7D%29%5Csubseteq+%5Ctext+%7BNExp%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BNTime%7D%282%5E%7Bcn%7D%29%5Csubseteq+%5Ctext+%7BNExp%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {NTime}(2^{cn})&amp;#92;subseteq &amp;#92;text {NExp}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   To prove NExp hardness it is convenient to work with TMs rather than RAMs. The main observation is that in the simulation of a TM &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M&quot; class=&quot;latex&quot; /&gt; on an input &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt; by a circuit &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C_{M}&quot; class=&quot;latex&quot; /&gt;, Theorem &lt;a href=&quot;#x1-25006r4&quot;&gt;2.4&lt;!--tex4ht:ref: thm:simu-tm-by-ckts-simple --&gt;&lt;/a&gt;, the circuit is very regular, in the sense that we can construct another circuit &lt;img src=&quot;https://s0.wp.com/latex.php?latex=S_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=S_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=S_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;S_{M}&quot; class=&quot;latex&quot; /&gt; which is a succinct encoding of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C_{M}&quot; class=&quot;latex&quot; /&gt;. The circuit &lt;img src=&quot;https://s0.wp.com/latex.php?latex=S_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=S_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=S_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;S_{M}&quot; class=&quot;latex&quot; /&gt; is given as input indexes to gates in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C_{M}&quot; class=&quot;latex&quot; /&gt; and outputs the type of the gate and its wires. The size of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=S_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=S_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=S_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;S_{M}&quot; class=&quot;latex&quot; /&gt; is power in the index length and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M&quot; class=&quot;latex&quot; /&gt;. Thus, if &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C_{M}&quot; class=&quot;latex&quot; /&gt; has size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t^{c}&quot; class=&quot;latex&quot; /&gt;, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=S_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=S_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=S_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;S_{M}&quot; class=&quot;latex&quot; /&gt; only needs size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Clog+%5E%7Bc%7Dt&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Clog+%5E%7Bc%7Dt&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Clog+%5E%7Bc%7Dt&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;log ^{c}t&quot; class=&quot;latex&quot; /&gt;. If &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%3D2%5E%7Bn%5E%7Bd%7D%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%3D2%5E%7Bn%5E%7Bd%7D%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%3D2%5E%7Bn%5E%7Bd%7D%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t=2^{n^{d}}&quot; class=&quot;latex&quot; /&gt;, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=S_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=S_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=S_%7BM%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;S_{M}&quot; class=&quot;latex&quot; /&gt; has size power in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt;, as desired. The transformation from circuit to 3CNF in Theorem &lt;a href=&quot;#x1-56001r1&quot;&gt;5.1&lt;!--tex4ht:ref: thm:redux-ckt-2-3sat --&gt;&lt;/a&gt; is also regular and can be done succinctly. &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   As a consequence, we obtain the following “concrete” problem not in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {P}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-65003r3&quot;&gt;&lt;/a&gt; &lt;b&gt;Corollary&lt;/b&gt; 5.3.  &lt;/span&gt;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BSuccinct-3Sat%7D%5Cnot+%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BSuccinct-3Sat%7D%5Cnot+%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BSuccinct-3Sat%7D%5Cnot+%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {Succinct-3Sat}&amp;#92;not &amp;#92;in &amp;#92;text {P}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h4 class=&quot;subsectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;5.4.2   &lt;/span&gt; &lt;a id=&quot;x1-660005.4.2&quot;&gt;&lt;/a&gt;Exp-completeness&lt;/h4&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;Exp-complete problems include several two-player games. The important feature for completeness is that the game may last for an exponential number of steps (otherwise it would belong to a class believed to be stricter which we will investigate in Chapter ??). These games include (generalized versions of) Chess &lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;journals/jct/FraenkelL81&quot;&gt;8&lt;/a&gt;]&lt;/span&gt; and Checkers &lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;journals/siamcomp/Robson84&quot;&gt;26&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h3 class=&quot;sectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;5.5   &lt;/span&gt; &lt;a id=&quot;x1-670005.5&quot;&gt;&lt;/a&gt;Power from completeness&lt;/h3&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;The realization that arbitrary computation can be reduced to 3Sat and other problems is powerful and liberating. In particular it allows us to significantly widen the net of reductions.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h4 class=&quot;subsectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;5.5.1   &lt;/span&gt; &lt;a id=&quot;x1-680005.5.1&quot;&gt;&lt;/a&gt;Optimization problems&lt;/h4&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;As observed in section&amp;nbsp;º&lt;a href=&quot;#x1-540004.6&quot;&gt;4.6&lt;!--tex4ht:ref: sec:Gap-SAT:-The-PCP --&gt;&lt;/a&gt;, 3Sat trivially reduces to Max-3Sat. The converse will be shown next.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-68001r7&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 5.7.  &lt;/span&gt;Max-3Sat reduces to 3Sat in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {P}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;    &lt;b&gt;Proof&lt;/b&gt;.&amp;nbsp;&lt;/span&gt;Consider the problem Atleast-3Sat: Given a 3CNF formula and an integer &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt;, is there an assignment that satisfies at least &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt; clauses? This is in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {NP}&quot; class=&quot;latex&quot; /&gt; and so can be reduced to 3Sat in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {P}&quot; class=&quot;latex&quot; /&gt;. This is the step that’s not easy without “thinking completeness:” given an algorithm for 3Sat it isn’t clear how to use it directly to solve Atleast-3Sat.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Hence, if 3Sat is in P so is Atleast-3Sat. On input a 3CNF &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt;, using binary search and the fact that Atleast-3Sat is in P, we can find in P the largest &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt; s.t.&amp;nbsp;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%28f%2Ct%29%5Cin+%5Ctext+%7BAtleast-3Sat%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%28f%2Ct%29%5Cin+%5Ctext+%7BAtleast-3Sat%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28f%2Ct%29%5Cin+%5Ctext+%7BAtleast-3Sat%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;(f,t)&amp;#92;in &amp;#92;text {Atleast-3Sat}&quot; class=&quot;latex&quot; /&gt;. Having found this &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt;, there remains to construct an assignment satisfying the clauses. This can be done fixing one variable at the time as in Theorem &lt;a href=&quot;#x1-52002r5&quot;&gt;4.5&lt;!--tex4ht:ref: thm:Search-3Sat-power-time-reduces --&gt;&lt;/a&gt;. &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h4 class=&quot;subsectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;5.5.2   &lt;/span&gt; &lt;a id=&quot;x1-690005.5.2&quot;&gt;&lt;/a&gt;NP is as easy as detecting unique solutions&lt;/h4&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;A satisfiable 3CNF can have multiple satisfying assignments. On the other hand some problems and puzzles have unique solutions. In this section we relate these two scenarios.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-69001r6&quot;&gt;&lt;/a&gt;                                                                                                                                                                                     &lt;b&gt;Definition&lt;/b&gt; 5.6.  &lt;/span&gt;Unique-CktSat is the problem: Given a circuit &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C&quot; class=&quot;latex&quot; /&gt; s.t.&amp;nbsp;there is at most one input &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt; for which &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C%28x%29%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C%28x%29%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C%28x%29%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C(x)=1&quot; class=&quot;latex&quot; /&gt;, decide if such an input exists.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Unique-3Sat is the Unique-CktSat problem restricted to 3CNF circuits.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-69002r8&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 5.8.  &lt;/span&gt; &lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;journals/tcs/ValiantV86&quot;&gt;33&lt;/a&gt;]&lt;/span&gt; 3Sat reduces to Unique-3Sat in BPP.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   We in fact reduce 3Sat to Unique-CktSat. Then Unique-CktSat can be reduced to Unique-3Sat observing that the reduction in Theorem &lt;a href=&quot;#x1-56001r1&quot;&gt;5.1&lt;!--tex4ht:ref: thm:redux-ckt-2-3sat --&gt;&lt;/a&gt; preserves uniqueness.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The beautiful proof uses a powerful and general technique in randomized computation: &lt;em&gt;pairwise uniformity&lt;/em&gt;, sometimes more generically referred to as &lt;em&gt;hashing. &lt;/em&gt;We first define such functions and give efficient constructions. Then we show how to use them to “isolate” assignments.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-69003r7&quot;&gt;&lt;/a&gt; &lt;b&gt;Definition&lt;/b&gt; 5.7.  &lt;/span&gt;A distribution &lt;img src=&quot;https://s0.wp.com/latex.php?latex=H&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=H&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=H&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;H&quot; class=&quot;latex&quot; /&gt; on functions mapping &lt;img src=&quot;https://s0.wp.com/latex.php?latex=S%5Cto+T&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=S%5Cto+T&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=S%5Cto+T&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;S&amp;#92;to T&quot; class=&quot;latex&quot; /&gt; is called &lt;em&gt;pairwise uniform&lt;/em&gt; if for every &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x%2Cx%27%5Cin+S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x%2Cx%27%5Cin+S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x%2Cx%27%5Cin+S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x,x&amp;#039;&amp;#92;in S&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y%2Cy%27%5Cin+T&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y%2Cy%27%5Cin+T&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y%2Cy%27%5Cin+T&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y,y&amp;#039;&amp;#92;in T&quot; class=&quot;latex&quot; /&gt; one has&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb+%7BP%7D_%7BH%7D%5BH%28x%29%3Dy%5Cwedge+H%28x%27%29%3Dy%27%5D%3D1%2F%7CT%7C%5E%7B2%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb+%7BP%7D_%7BH%7D%5BH%28x%29%3Dy%5Cwedge+H%28x%27%29%3Dy%27%5D%3D1%2F%7CT%7C%5E%7B2%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb+%7BP%7D_%7BH%7D%5BH%28x%29%3Dy%5Cwedge+H%28x%27%29%3Dy%27%5D%3D1%2F%7CT%7C%5E%7B2%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} &amp;#92;mathbb {P}_{H}[H(x)=y&amp;#92;wedge H(x&amp;#039;)=y&amp;#039;]=1/|T|^{2}. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   This is saying that on every pair of inputs &lt;img src=&quot;https://s0.wp.com/latex.php?latex=H&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=H&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=H&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;H&quot; class=&quot;latex&quot; /&gt; is behaving as a completely uniform function. Yet unlike completely uniform functions, the next lemma shows that pairwise uniform functions can have a short description, which makes them suitable for use in algorithms.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-69004r6&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 5.6.  &lt;/span&gt;Let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D_%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D_%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D_%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;mathbb {F}_{q}&quot; class=&quot;latex&quot; /&gt; be a finite field. Define the random function &lt;img src=&quot;https://s0.wp.com/latex.php?latex=H%3A%5Cmathbb+%7BF%7D_%7Bq%7D%5Cto+%5Cmathbb+%7BF%7D_%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=H%3A%5Cmathbb+%7BF%7D_%7Bq%7D%5Cto+%5Cmathbb+%7BF%7D_%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=H%3A%5Cmathbb+%7BF%7D_%7Bq%7D%5Cto+%5Cmathbb+%7BF%7D_%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;H:&amp;#92;mathbb {F}_{q}&amp;#92;to &amp;#92;mathbb {F}_{q}&quot; class=&quot;latex&quot; /&gt; as &lt;img src=&quot;https://s0.wp.com/latex.php?latex=H%28x%29%3A%3DAx%2BB&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=H%28x%29%3A%3DAx%2BB&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=H%28x%29%3A%3DAx%2BB&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;H(x):=Ax+B&quot; class=&quot;latex&quot; /&gt; where &lt;img src=&quot;https://s0.wp.com/latex.php?latex=A%2CB&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=A%2CB&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=A%2CB&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;A,B&quot; class=&quot;latex&quot; /&gt; are uniform in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D_%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D_%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D_%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;mathbb {F}_{q}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Prove that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=H&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=H&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=H&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;H&quot; class=&quot;latex&quot; /&gt; is pairwise uniform.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Explain how to use &lt;img src=&quot;https://s0.wp.com/latex.php?latex=H&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=H&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=H&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;H&quot; class=&quot;latex&quot; /&gt; to obtain a pairwise uniform function from &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;{0,1&amp;#92;} ^{n}&quot; class=&quot;latex&quot; /&gt; to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;{0,1&amp;#92;} ^{t}&quot; class=&quot;latex&quot; /&gt; for any given &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%5Cle+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%5Cle+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%5Cle+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&amp;#92;le n&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-69005r7&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 5.7.  &lt;/span&gt;Define the random function &lt;img src=&quot;https://s0.wp.com/latex.php?latex=H_%7B1%7D%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=H_%7B1%7D%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=H_%7B1%7D%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;H_{1}:&amp;#92;{0,1&amp;#92;} ^{n}&amp;#92;to &amp;#92;{0,1&amp;#92;} &quot; class=&quot;latex&quot; /&gt; as &lt;img src=&quot;https://s0.wp.com/latex.php?latex=H%28x%29%3A%3D%5Csum+_%7Bi%5Cle+n%7DA_%7Bi%7Dx_%7Bi%7D%2BB&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=H%28x%29%3A%3D%5Csum+_%7Bi%5Cle+n%7DA_%7Bi%7Dx_%7Bi%7D%2BB&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=H%28x%29%3A%3D%5Csum+_%7Bi%5Cle+n%7DA_%7Bi%7Dx_%7Bi%7D%2BB&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;H(x):=&amp;#92;sum _{i&amp;#92;le n}A_{i}x_{i}+B&quot; class=&quot;latex&quot; /&gt; where &lt;img src=&quot;https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;A&quot; class=&quot;latex&quot; /&gt; is uniform in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;{0,1&amp;#92;} ^{n}&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B&quot; class=&quot;latex&quot; /&gt; is uniform in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;{0,1&amp;#92;} &quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Prove that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=H_%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=H_%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=H_%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;H_{1}&quot; class=&quot;latex&quot; /&gt; is pairwise uniform.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Explain how to use &lt;img src=&quot;https://s0.wp.com/latex.php?latex=H&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=H&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=H&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;H&quot; class=&quot;latex&quot; /&gt; to obtain a pairwise uniform function from &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;{0,1&amp;#92;} ^{n}&quot; class=&quot;latex&quot; /&gt; to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;{0,1&amp;#92;} ^{t}&quot; class=&quot;latex&quot; /&gt; for any given &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%5Cle+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%5Cle+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%5Cle+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&amp;#92;le n&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   We can now state the lemma that we use to isolate assignments.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-69006r2&quot;&gt;&lt;/a&gt; &lt;b&gt;Lemma&lt;/b&gt; 5.2.  &lt;/span&gt;Let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=H&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=H&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=H&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;H&quot; class=&quot;latex&quot; /&gt; be a pairwise uniform function mapping &lt;img src=&quot;https://s0.wp.com/latex.php?latex=S%5Cto+T&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=S%5Cto+T&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=S%5Cto+T&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;S&amp;#92;to T&quot; class=&quot;latex&quot; /&gt;, and let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=1%5Cin+T&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=1%5Cin+T&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=1%5Cin+T&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;1&amp;#92;in T&quot; class=&quot;latex&quot; /&gt;. The probability that there is a unique element &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s%5Cin+S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s%5Cin+S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s%5Cin+S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&amp;#92;in S&quot; class=&quot;latex&quot; /&gt; such that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=H%28s%29%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=H%28s%29%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=H%28s%29%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;H(s)=1&quot; class=&quot;latex&quot; /&gt; is&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cge+%5Cfrac+%7B%7CS%7C%7D%7B%7CT%7C%7D-%5Cfrac+%7B%7CS%7C%5E%7B2%7D%7D%7B%7CT%7C%5E%7B2%7D%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cge+%5Cfrac+%7B%7CS%7C%7D%7B%7CT%7C%7D-%5Cfrac+%7B%7CS%7C%5E%7B2%7D%7D%7B%7CT%7C%5E%7B2%7D%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cge+%5Cfrac+%7B%7CS%7C%7D%7B%7CT%7C%7D-%5Cfrac+%7B%7CS%7C%5E%7B2%7D%7D%7B%7CT%7C%5E%7B2%7D%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} &amp;#92;ge &amp;#92;frac {|S|}{|T|}-&amp;#92;frac {|S|^{2}}{|T|^{2}}. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   In particular, if &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7CT%7C%2F8%5Cle+%7CS%7C%5Cle+%7CT%7C%2F4&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7CT%7C%2F8%5Cle+%7CS%7C%5Cle+%7CT%7C%2F4&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7CT%7C%2F8%5Cle+%7CS%7C%5Cle+%7CT%7C%2F4&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;|T|/8&amp;#92;le |S|&amp;#92;le |T|/4&quot; class=&quot;latex&quot; /&gt; this prob.&amp;nbsp;is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cge+%5Cfrac+%7B1%7D%7B8%7D-%5Cfrac+%7B1%7D%7B16%7D%5Cge+1%2F8&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cge+%5Cfrac+%7B1%7D%7B8%7D-%5Cfrac+%7B1%7D%7B16%7D%5Cge+1%2F8&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cge+%5Cfrac+%7B1%7D%7B8%7D-%5Cfrac+%7B1%7D%7B16%7D%5Cge+1%2F8&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;ge &amp;#92;frac {1}{8}-&amp;#92;frac {1}{16}&amp;#92;ge 1/8&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;    &lt;b&gt;Proof&lt;/b&gt;.&amp;nbsp;&lt;/span&gt;For fixed &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s%5Cin+S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s%5Cin+S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s%5Cin+S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&amp;#92;in S&quot; class=&quot;latex&quot; /&gt;, the probability &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&quot; class=&quot;latex&quot; /&gt; is the unique element mapped to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;1&quot; class=&quot;latex&quot; /&gt; is at least the prob.&amp;nbsp;that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&quot; class=&quot;latex&quot; /&gt; is mapped to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;1&quot; class=&quot;latex&quot; /&gt; minus the prob.&amp;nbsp;that both &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&quot; class=&quot;latex&quot; /&gt; and some other &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s%27%5Cne+s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s%27%5Cne+s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s%27%5Cne+s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&amp;#039;&amp;#92;ne s&quot; class=&quot;latex&quot; /&gt; are mapped to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;1&quot; class=&quot;latex&quot; /&gt;. This is&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cge+%5Cfrac+%7B1%7D%7B%7CT%7C%7D-%5Cfrac+%7B%7CS%7C-1%7D%7B%7CT%7C%5E%7B2%7D%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cge+%5Cfrac+%7B1%7D%7B%7CT%7C%7D-%5Cfrac+%7B%7CS%7C-1%7D%7B%7CT%7C%5E%7B2%7D%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cge+%5Cfrac+%7B1%7D%7B%7CT%7C%7D-%5Cfrac+%7B%7CS%7C-1%7D%7B%7CT%7C%5E%7B2%7D%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} &amp;#92;ge &amp;#92;frac {1}{|T|}-&amp;#92;frac {|S|-1}{|T|^{2}}. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   These events for different &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s%5Cin+S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s%5Cin+S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s%5Cin+S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&amp;#92;in S&quot; class=&quot;latex&quot; /&gt; are disjoint; so the target probability is at least the sum of the above over &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s%5Cin+S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s%5Cin+S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s%5Cin+S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&amp;#92;in S&quot; class=&quot;latex&quot; /&gt;. &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;    &lt;b&gt;Proof of Theorem &lt;a href=&quot;#x1-69002r8&quot;&gt;5.8&lt;!--tex4ht:ref: thm:3Sat-reduces-to-unique --&gt;&lt;/a&gt;&lt;/b&gt;.&amp;nbsp;&lt;/span&gt; Given a 3Sat instance &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;phi &quot; class=&quot;latex&quot; /&gt; with &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le n&quot; class=&quot;latex&quot; /&gt; variables &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt;, we pick a random &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&quot; class=&quot;latex&quot; /&gt; from &lt;img src=&quot;https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;0&quot; class=&quot;latex&quot; /&gt; to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%2Bc&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%2Bc&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%2Bc&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n+c&quot; class=&quot;latex&quot; /&gt;. We then pick a pairwise uniform function mapping &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;{0,1&amp;#92;} ^{n}&quot; class=&quot;latex&quot; /&gt; to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;{0,1&amp;#92;} ^{i}&quot; class=&quot;latex&quot; /&gt;, and consider the circuit&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+C%3A%3D%5Cphi+%28x%29%5Cwedge+H%28x%29%3D0%5E%7Bi%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+C%3A%3D%5Cphi+%28x%29%5Cwedge+H%28x%29%3D0%5E%7Bi%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+C%3A%3D%5Cphi+%28x%29%5Cwedge+H%28x%29%3D0%5E%7Bi%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} C:=&amp;#92;phi (x)&amp;#92;wedge H(x)=0^{i}. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;This circuit has size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n^{c}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   If &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;phi &quot; class=&quot;latex&quot; /&gt; is not satisfiable, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C&quot; class=&quot;latex&quot; /&gt; is not satisfiable, for any random choices.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Now suppose that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;phi &quot; class=&quot;latex&quot; /&gt; has &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s%5Cge+1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s%5Cge+1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s%5Cge+1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&amp;#92;ge 1&quot; class=&quot;latex&quot; /&gt; satisfying assignment. With prob.&amp;nbsp;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cge+1%2Fn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cge+1%2Fn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cge+1%2Fn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;ge 1/n&quot; class=&quot;latex&quot; /&gt; we will have &lt;img src=&quot;https://s0.wp.com/latex.php?latex=2%5E%7Bi-3%7D%5Cle+s%5Cle+2%5E%7Bi-2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=2%5E%7Bi-3%7D%5Cle+s%5Cle+2%5E%7Bi-2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=2%5E%7Bi-3%7D%5Cle+s%5Cle+2%5E%7Bi-2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;2^{i-3}&amp;#92;le s&amp;#92;le 2^{i-2}&quot; class=&quot;latex&quot; /&gt;, in which case Lemma &lt;a href=&quot;#x1-69006r2&quot;&gt;5.2&lt;!--tex4ht:ref: lem:pairwise-uniform-unique --&gt;&lt;/a&gt; guarantees that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C&quot; class=&quot;latex&quot; /&gt; has a unique satisfying assignment with prob.&amp;nbsp;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;ge c&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Overall, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C&quot; class=&quot;latex&quot; /&gt; has a unique satisfying assignment with prob.&amp;nbsp;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cge+c%2Fn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cge+c%2Fn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cge+c%2Fn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;ge c/n&quot; class=&quot;latex&quot; /&gt;. Hence the Unique-3Sat algorithm on &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C&quot; class=&quot;latex&quot; /&gt; outputs &lt;img src=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;1&quot; class=&quot;latex&quot; /&gt; with prob.&amp;nbsp;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cge+c%2Fn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cge+c%2Fn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cge+c%2Fn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;ge c/n&quot; class=&quot;latex&quot; /&gt;. If we repeat this process &lt;img src=&quot;https://s0.wp.com/latex.php?latex=cn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=cn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=cn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;cn&quot; class=&quot;latex&quot; /&gt; times, with independent random choices, the Or of the outcomes gives the correct answer with prob.&amp;nbsp;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cge+2%2F3&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cge+2%2F3&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cge+2%2F3&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;ge 2/3&quot; class=&quot;latex&quot; /&gt;. &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h3 class=&quot;sectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;5.6   &lt;/span&gt; &lt;a id=&quot;x1-700005.6&quot;&gt;&lt;/a&gt;Problems&lt;/h3&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-70001r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Problem&lt;/b&gt; 5.1.  &lt;/span&gt;In Theorem &lt;a href=&quot;#x1-52002r5&quot;&gt;4.5&lt;!--tex4ht:ref: thm:Search-3Sat-power-time-reduces --&gt;&lt;/a&gt; we reduced Search-3Sat to 3Sat.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &amp;#8211; Suppose 3Sat is computable by circuits of depth &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c&amp;#92;log n&quot; class=&quot;latex&quot; /&gt;. What would be the depth of the circuits for Search-3Sat given by the reduction?&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &amp;#8211; Reduce Search-3Sat to 3Sat in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7B%5Censuremath+%7B%5Cbigcup+_%7Ba%3E0%7D%7D%7D%5Ctext+%7BDepth%7D%28a%5Clog+n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7B%5Censuremath+%7B%5Cbigcup+_%7Ba%3E0%7D%7D%7D%5Ctext+%7BDepth%7D%28a%5Clog+n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7B%5Censuremath+%7B%5Cbigcup+_%7Ba%3E0%7D%7D%7D%5Ctext+%7BDepth%7D%28a%5Clog+n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {&amp;#92;ensuremath {&amp;#92;bigcup _{a&amp;gt;0}}}&amp;#92;text {Depth}(a&amp;#92;log n)&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Hint: First work with randomized circuits. Use ideas in proof of Theorem &lt;a href=&quot;#x1-52002r5&quot;&gt;4.5&lt;!--tex4ht:ref: thm:Search-3Sat-power-time-reduces --&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h3 class=&quot;likesectionHead&quot;&gt;&lt;a id=&quot;x1-710005.6&quot;&gt;&lt;/a&gt;References&lt;/h3&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;thebibliography&quot;&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [1]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:conf/focs/AbboudBW15&quot;&gt;&lt;/a&gt;Amir Abboud, Arturs Backurs, and Virginia&amp;nbsp;Vassilevska Williams. Tight hardness      results for LCS and other sequence similarity measures.  In Venkatesan Guruswami,      editor, IEEE 56th Annual Symposium on Foundations of Computer Science, FOCS      2015, Berkeley, CA, USA, 17-20 October, 2015, pages 59–78. IEEE Computer Society,      2015.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [2]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAdleman78&quot;&gt;&lt;/a&gt;Leonard  Adleman.   Two  theorems  on  random  polynomial  time.   In  19th IEEE      Symp.&amp;nbsp;on Foundations of Computer Science (FOCS), pages 75–83. 1978.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [3]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/jcss/AngluinV79&quot;&gt;&lt;/a&gt;Dana Angluin and Leslie&amp;nbsp;G. Valiant. Fast probabilistic algorithms for hamiltonian      circuits and matchings. J. Comput. Syst. Sci., 18(2):155–193, 1979.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [4]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAroraLuMoSuSz98&quot;&gt;&lt;/a&gt;Sanjeev Arora, Carsten Lund, Rajeev Motwani, Madhu Sudan, and Mario Szegedy.      Proof  verification  and  the  hardness  of  approximation  problems.    J.&amp;nbsp;of  the  ACM,      45(3):501–555, May 1998.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [5]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/siamcomp/BackursI18&quot;&gt;&lt;/a&gt;Arturs Backurs and Piotr Indyk.  Edit distance cannot be computed in strongly      subquadratic time (unless SETH is false). SIAM J. Comput., 47(3):1087–1097, 2018.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [6]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XBatcher68&quot;&gt;&lt;/a&gt;Kenneth&amp;nbsp;E. Batcher.  Sorting networks and their applications.  In AFIPS Spring      Joint Computing Conference, volume&amp;nbsp;32, pages 307–314, 1968.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [7]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XCook73&quot;&gt;&lt;/a&gt;Stephen&amp;nbsp;A. Cook. A hierarchy for nondeterministic time complexity. J.&amp;nbsp;of Computer      and System Sciences, 7(4):343–353, 1973.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [8]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/jct/FraenkelL81&quot;&gt;&lt;/a&gt;Aviezri&amp;nbsp;S. Fraenkel and David Lichtenstein. Computing a perfect strategy for n x n      chess requires time exponential in n. J. Comb. Theory, Ser. A, 31(2):199–214, 1981.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [9]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XGajentaanO95&quot;&gt;&lt;/a&gt;Anka Gajentaan and Mark&amp;nbsp;H. Overmars. On a class of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7BO%7D%28n%5E2%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7BO%7D%28n%5E2%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7BO%7D%28n%5E2%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;{O}(n^2)&quot; class=&quot;latex&quot; /&gt; problems in computational      geometry. Comput. Geom., 5:165–185, 1995.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [10]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XGareyJ79&quot;&gt;&lt;/a&gt;M.&amp;nbsp;R. Garey and David&amp;nbsp;S. Johnson. Computers and Intractability: A Guide to the      Theory of NP-Completeness. W. H. Freeman, 1979.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [11]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XMR1549939&quot;&gt;&lt;/a&gt;K.&amp;nbsp;G÷del.   ▄ber  formal  unentscheidbare  sΣtze  der  Principia  Mathematica  und      verwandter systeme I. Monatsh. Math. Phys., 38, 1931.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [12]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XGoldreich08Complexity&quot;&gt;&lt;/a&gt;Oded Goldreich. Computational Complexity: A Conceptual Perspective. Cambridge      University Press, 2008.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [13]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;X10.4007/annals.2021.193.2.4&quot;&gt;&lt;/a&gt;David Harvey and Joris van&amp;nbsp;der Hoeven. Integer multiplication in time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=O%28n%5Cmathrm+%7Blog%7D%5C%2C+n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=O%28n%5Cmathrm+%7Blog%7D%5C%2C+n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=O%28n%5Cmathrm+%7Blog%7D%5C%2C+n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;O(n&amp;#92;mathrm {log}&amp;#92;, n)&quot; class=&quot;latex&quot; /&gt;. Annals of      Mathematics, 193(2):563 – 617, 2021.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [14]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/iandc/Hennie65&quot;&gt;&lt;/a&gt;F.&amp;nbsp;C. Hennie.  One-tape, off-line turing machine computations.  Information and      Control, 8(6):553–578, 1965.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [15]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XHennieS66&quot;&gt;&lt;/a&gt;Fred  Hennie  and  Richard  Stearns.    Two-tape  simulation  of  multitape  turing      machines. J.&amp;nbsp;of the ACM, 13:533–546, October 1966.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [16]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XIP99&quot;&gt;&lt;/a&gt;Russell Impagliazzo and Ramamohan Paturi.   The complexity of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;k&quot; class=&quot;latex&quot; /&gt;-sat.   In IEEE      Conf.&amp;nbsp;on Computational Complexity (CCC), pages 237–, 1999.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [17]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XIPZ01&quot;&gt;&lt;/a&gt;Russell Impagliazzo, Ramamohan Paturi, and Francis Zane.  Which problems have      strongly exponential complexity? J. Computer &amp;amp; Systems Sciences, 63(4):512–530, Dec      2001.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [18]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XImW97&quot;&gt;&lt;/a&gt;Russell  Impagliazzo  and  Avi  Wigderson.    &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cmathit+%7BP%7D+%3D+%5Cmathit+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cmathit+%7BP%7D+%3D+%5Cmathit+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathit+%7BP%7D+%3D+%5Cmathit+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;mathit {P} = &amp;#92;mathit {BPP}&quot; class=&quot;latex&quot; /&gt;  if  &lt;img src=&quot;https://s0.wp.com/latex.php?latex=E&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=E&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=E&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;E&quot; class=&quot;latex&quot; /&gt;  requires  exponential  circuits:      Derandomizing the XOR lemma.  In 29th ACM Symp.&amp;nbsp;on the Theory of Computing      (STOC), pages 220–229. ACM, 1997.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [19]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XKobayashi1985OnTS&quot;&gt;&lt;/a&gt;Kojiro Kobayashi.  On the structure of one-tape nondeterministic turing machine      time hierarchy. Theor. Comput. Sci., 40:175–193, 1985.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [20]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XLevin73&quot;&gt;&lt;/a&gt;Leonid&amp;nbsp;A.  Levin.    Universal  sequential  search  problems.    Problemy  Peredachi      Informatsii, 9(3):115–116, 1973.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [21]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XLupanov58&quot;&gt;&lt;/a&gt;O.&amp;nbsp;B. Lupanov. A method of circuit synthesis. Izv. VUZ Radiofiz., 1:120–140, 1958.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [22]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XViolaNEU-ram2sat-neu-author&quot;&gt;&lt;/a&gt;NEU. From RAM to SAT. Available at &lt;a href=&quot;http://www.ccs.neu.edu/home/viola/&quot; rel=&quot;nofollow&quot;&gt;http://www.ccs.neu.edu/home/viola/&lt;/a&gt;, 2012.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [23]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/jcss/PapadimitriouY91&quot;&gt;&lt;/a&gt;Christos&amp;nbsp;H. Papadimitriou and Mihalis Yannakakis. Optimization, approximation,                                                                                                                                                                                          and complexity classes. J. Comput. Syst. Sci., 43(3):425–440, 1991.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [24]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XPPST83&quot;&gt;&lt;/a&gt;Wolfgang&amp;nbsp;J. Paul, Nicholas Pippenger, Endre SzemerΘdi, and William&amp;nbsp;T. Trotter.      On determinism versus non-determinism and related problems (preliminary version). In      IEEE Symp.&amp;nbsp;on Foundations of Computer Science (FOCS), pages 429–438, 1983.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [25]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XPippengerF79&quot;&gt;&lt;/a&gt;Nicholas Pippenger and Michael&amp;nbsp;J. Fischer. Relations among complexity measures.      J.&amp;nbsp;of the ACM, 26(2):361–381, 1979.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [26]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/siamcomp/Robson84&quot;&gt;&lt;/a&gt;J.&amp;nbsp;M.  Robson.    N  by  N  checkers  is  exptime  complete.    SIAM  J.  Comput.,      13(2):252–267, 1984.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [27]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:conf/coco/Santhanam01&quot;&gt;&lt;/a&gt;Rahul Santhanam.   On separators, segregators and time versus space.   In IEEE      Conf.&amp;nbsp;on Computational Complexity (CCC), pages 286–294, 2001.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [28]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/siamcomp/Schonhage80&quot;&gt;&lt;/a&gt;Arnold Sch÷nhage. Storage modification machines. SIAM J. Comput., 9(3):490–508,      1980.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [29]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XMR29860&quot;&gt;&lt;/a&gt;Claude&amp;nbsp;E. Shannon. The synthesis of two-terminal switching circuits. Bell System      Tech. J., 28:59–98, 1949.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [30]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XSho90&quot;&gt;&lt;/a&gt;Victor Shoup. New algorithms for finding irreducible polynomials over finite fields.      Mathematics of Computation, 54(189):435–447, 1990.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [31]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XMR2145856&quot;&gt;&lt;/a&gt;Larry Stockmeyer and Albert&amp;nbsp;R. Meyer.  Cosmological lower bound on the circuit      complexity of a small problem in logic. J. ACM, 49(6):753–784, 2002.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [32]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/x/Turing37&quot;&gt;&lt;/a&gt;Alan&amp;nbsp;M.   Turing.      On   computable   numbers,   with   an   application   to   the      entscheidungsproblem. Proc. London Math. Soc., s2-42(1):230–265, 1937.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [33]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/tcs/ValiantV86&quot;&gt;&lt;/a&gt;Leslie&amp;nbsp;G. Valiant and Vijay&amp;nbsp;V. Vazirani. NP is as easy as detecting unique solutions.      Theor. Comput. Sci., 47(3):85–93, 1986.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [34]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XViola-xxx&quot;&gt;&lt;/a&gt;Emanuele Viola.  Reducing 3XOR to listing triangles, an exposition.  Available at      &lt;a href=&quot;http://www.ccs.neu.edu/home/viola/&quot; rel=&quot;nofollow&quot;&gt;http://www.ccs.neu.edu/home/viola/&lt;/a&gt;, 2011.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [35]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;Xviola-tm&quot;&gt;&lt;/a&gt;Emanuele  Viola.   Pseudorandom  bits  and  lower  bounds  for  randomized  turing      machines. Theory of Computing, 18(10):1–12, 2022.&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&quot;authors&quot;&gt;By Manu&lt;/p&gt;
  </content>
    <author>
      <name>Emanuele Viola</name>
      <uri>https://emanueleviola.wordpress.com</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">Computational Complexity: The Virtual Grad Student</title>
    <link href="https://blog.computationalcomplexity.org/2023/02/the-virtual-grad-student.html"/>
    <id>tag:blogger.com,1999:blog-3722233.post-4166072551581462222</id>
    <updated>2023-02-23T15:02:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;Martin Haug, who is working on a LaTeX alternative &lt;a href=&quot;https://typst.app/&quot;&gt;Typst&lt;/a&gt;, asked me if I had updates on a &lt;a href=&quot;https://blog.computationalcomplexity.org/2011/07/problems-of-latex.html&quot;&gt;LaTeX rant&lt;/a&gt; from 2011. I haven&#39;t seen any new serious backward compatibility problems. We have easier collaboration through on-line editors like &lt;a href=&quot;https://blog.computationalcomplexity.org/2011/07/problems-of-latex.html&quot;&gt;Overleaf&lt;/a&gt;. We have got closer to WSYWIG thanks to quick compiling but still not at the level of Word or Google Docs. The big problem of user friendliness remains. There&#39;s a reason LaTeX has its own &lt;a href=&quot;https://tex.stackexchange.com/&quot;&gt;Stack Exchange&lt;/a&gt;.&amp;nbsp;&lt;/p&gt;&lt;p&gt;But we live in a new machine learning world. Can we use generative AI to make LaTeX easier to use?&lt;/p&gt;&lt;p&gt;&lt;b&gt;Mandatory Disclaimer&lt;/b&gt;: Generative AI can sometimes create inaccurate, inappropriate or previously-published material. You are ultimately responsible for the contents of your paper no matter how you produced it.&lt;/p&gt;&lt;p&gt;Since I sometimes think of LaTeX as a programming language for papers, I &lt;a href=&quot;https://twitter.com/fortnow/status/1626576896132542464&quot;&gt;tweeted&lt;/a&gt;&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Can we have GitHub co-pilot for LaTeX?&lt;/p&gt;— Lance Fortnow (@fortnow) &lt;a href=&quot;https://twitter.com/fortnow/status/1626576896132542464?ref_src=twsrc%5Etfw&quot;&gt;February 17, 2023&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;Thanks for the responses. The answer to the question is yes, &lt;a href=&quot;https://github.com/features/copilot&quot;&gt;GitHub Copilot&lt;/a&gt;&amp;nbsp;works for LaTeX if you edit LaTeX in a programming environment like &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VS Code&lt;/a&gt;, &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Neovim&lt;/a&gt; or &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Jet Brains&lt;/a&gt;. It helps with formatting of formulas and pictures, less so on the text itself. I made a &lt;a href=&quot;https://www.youtube.com/watch?v=bt0BNdujIy8&quot;&gt;video&lt;/a&gt; so you can see how it works.&lt;/p&gt;
&lt;div style=&quot;text-align: center;&quot;&gt;&lt;iframe allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; allowfullscreen=&quot;&quot; frameborder=&quot;0&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/bt0BNdujIy8&quot; title=&quot;YouTube video player&quot; width=&quot;560&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&quot;https://www.latextai.com/&quot;&gt;Latext AI&lt;/a&gt; offers a chrome extension that will let you generate text via GPT in Overleaf based on a prompt or previous text, though Latext requires a subscription after a one-week trial. You can also just cut and paste between any text editor and ChatGPT.&lt;/p&gt;&lt;p&gt;ChatGPT notoriously makes up references if you ask for them. Can we have a good system that finds relevant articles to cite and adds them automatically into your bibliography?&lt;/p&gt;&lt;p&gt;Ideally all these should work together seamlessly, suggestions that happen as you type. A true co-pilot for research papers.&lt;/p&gt;&lt;p&gt;There are many more tools out there, feel free to add them to the comments. I expect the integration to improve over time as we develop new APIs and models.&lt;/p&gt;&lt;p&gt;I look forward to the days of a virtual grad student: Here&#39;s a research goal and an idea to get there. Now go figure out the details and write the paper.&amp;nbsp;&lt;/p&gt;&lt;p&gt;It will be a long wait.&lt;/p&gt; &lt;script async=&quot;&quot; charset=&quot;utf-8&quot; src=&quot;https://platform.twitter.com/widgets.js&quot;&gt;&lt;/script&gt;&lt;p class=&quot;authors&quot;&gt;By Lance Fortnow&lt;/p&gt;
  </content>
    <author>
      <name>Computational Complexity</name>
      <uri>http://blog.computationalcomplexity.org/</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Complexity of Maker-Breaker Games on Edge Sets of Graphs</title>
    <link href="http://arxiv.org/abs/2302.10972"/>
    <id>http://arxiv.org/abs/2302.10972</id>
    <updated>2023-02-23T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Duchene_E/0/1/0/all/0/1&quot;&gt;Eric Duch&amp;#xea;ne&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Gledel_V/0/1/0/all/0/1&quot;&gt;Valentin Gledel&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Inerney_F/0/1/0/all/0/1&quot;&gt;Fionn Mc Inerney&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Nisse_N/0/1/0/all/0/1&quot;&gt;Nicolas Nisse&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Oijid_N/0/1/0/all/0/1&quot;&gt;Nacim Oijid&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Parreau_A/0/1/0/all/0/1&quot;&gt;Aline Parreau&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Stojakovic_M/0/1/0/all/0/1&quot;&gt;Milo&amp;#x161; Stojakovi&amp;#x107;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We initiate the study of the algorithmic complexity of Maker-Breaker games
played on edge sets of graphs for general graphs. We mainly consider three of
the big four such games: the connectivity game, perfect matching game, and
$H$-game. Maker wins if she claims the edges of a spanning tree in the first, a
perfect matching in the second, and a copy of a fixed graph $H$ in the third.
We prove that deciding who wins the perfect matching game and the $H$-game is
PSPACE-complete, even for the latter in graphs of small diameter if $H$ is a
tree. Seeking to find the smallest graph $H$ such that the $H$-game is
PSPACE-complete, we also prove that there exists such an $H$ of order 51 and
size 57.
&lt;/p&gt;
&lt;p&gt;On the positive side, we show that the connectivity game and arboricity-$k$
game are polynomial-time solvable. We then give several positive results for
the $H$-game, first giving a structural characterization for Breaker to win the
$P_4$-game, which gives a linear-time algorithm for the $P_4$-game. We provide
a structural characterization for Maker to win the $K_{1,\ell}$-game in trees,
which implies a linear-time algorithm for the $K_{1,\ell}$-game in trees.
Lastly, we prove that the $K_{1,\ell}$-game in any graph, and the $H$-game in
trees are both FPT parameterized by the length of the game. We leave the
complexity of the last of the big four games, the Hamiltonicity game, as an
open question.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Logical Equivalences, Homomorphism Indistinguishability, and Forbidden Minors</title>
    <link href="http://arxiv.org/abs/2302.11290"/>
    <id>http://arxiv.org/abs/2302.11290</id>
    <updated>2023-02-23T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Seppelt_T/0/1/0/all/0/1&quot;&gt;Tim Seppelt&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Two graphs $G$ and $H$ are homomorphism indistinguishable over a class of
graphs $\mathcal{F}$ if for all graphs $F \in \mathcal{F}$ the number of
homomorphisms from $F$ to $G$ equals the number of homomorphisms from $F$ to
$H$. Many natural equivalence relations comparing graphs such as (quantum)
isomorphism, spectral, and logical equivalences can be characterised as
homomorphism indistinguishability relations over certain graph classes.
&lt;/p&gt;
&lt;p&gt;In this article, the interplay of the properties of a graph class and its
homomorphism indistinguishability relation are studied. As an application,
self-complementarity, a property of logics on graphs satisfied by many
well-studied logics, is identified. It is proven that the equivalence over a
self-complementary logic admitting a characterisation as homomorphism
indistinguishability relation can be characterised by homomorphism
indistinguishability over a minor-closed graph class. Thereby, first evidences
are provided for a possible connection between minors and homomorphism
indistinguishability as conjectured by Roberson (2022).
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Hitting the Romans</title>
    <link href="http://arxiv.org/abs/2302.11417"/>
    <id>http://arxiv.org/abs/2302.11417</id>
    <updated>2023-02-23T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Fernau_H/0/1/0/all/0/1&quot;&gt;Henning Fernau&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Mann_K/0/1/0/all/0/1&quot;&gt;Kevin Mann&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Roman domination is one of few examples where the related extension problem
is polynomial-time solvable even if the original decision problem is
NP-complete. This is interesting, as it allows to establish polynomial-delay
enumeration algorithms for finding minimal Roman dominating functions, while it
is open for more than four decades if all minimal dominating sets of a graph or
if all hitting sets of a hypergraph can be enumerated with polynomial delay. To
find the reason why this is the case, we combine the idea of hitting set with
the idea of Roman domination. We hence obtain and study two new problems,
called Roman Hitting Function and Roman Hitting Set, both generalizing Roman
Domination. This allows us to delineate the borderline of polynomial-delay
enumerability. Here, we assume what we call the Hitting Set Transversal Thesis,
claiming that it is impossible to enumerate all minimal hitting sets of a
hypergraph with polynomial delay. Our first focus is on the extension versions
of these problems. While doing this, we find some conditions under which the
Extension Roman Hitting Function problem is NP-complete. We then use
parameterized complexity to get a better understanding of why Extension Roman
Hitting Function behaves in this way. Furthermore, we analyze the parameterized
and approximation complexity of the underlying optimization problems. We also
discuss consequences for Roman variants of other problems like Vertex Cover.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Quantum complexity of the Kronecker coefficients</title>
    <link href="http://arxiv.org/abs/2302.11454"/>
    <id>http://arxiv.org/abs/2302.11454</id>
    <updated>2023-02-23T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/quant-ph/1/au:+Bravyi_S/0/1/0/all/0/1&quot;&gt;Sergey Bravyi&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/quant-ph/1/au:+Chowdhury_A/0/1/0/all/0/1&quot;&gt;Anirban Chowdhury&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/quant-ph/1/au:+Gosset_D/0/1/0/all/0/1&quot;&gt;David Gosset&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/quant-ph/1/au:+Havlicek_V/0/1/0/all/0/1&quot;&gt;Vojtech Havlicek&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/quant-ph/1/au:+Zhu_G/0/1/0/all/0/1&quot;&gt;Guanyu Zhu&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Whether or not the Kronecker coefficients of the symmetric group count some
set of combinatorial objects is a longstanding open question. In this work we
show that a given Kronecker coefficient is proportional to the rank of a
projector that can be measured efficiently using a quantum computer. In other
words a Kronecker coefficient counts the dimension of the vector space spanned
by the accepting witnesses of a QMA verifier, where QMA is the quantum analogue
of NP. This implies that approximating the Kronecker coefficients to within a
given relative error is not harder than a certain natural class of quantum
approximate counting problems that captures the complexity of estimating
thermal properties of quantum many-body systems. A second consequence is that
deciding positivity of Kronecker coefficients is contained in QMA,
complementing a recent NP-hardness result of Ikenmeyer, Mulmuley and Walter. We
obtain similar results for the related problem of approximating row sums of the
character table of the symmetric group. Finally, we discuss an efficient
quantum algorithm that approximates normalized Kronecker coefficients to
inverse-polynomial additive error.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Matrix Multiplication and Number On the Forehead Communication</title>
    <link href="http://arxiv.org/abs/2302.11476"/>
    <id>http://arxiv.org/abs/2302.11476</id>
    <updated>2023-02-23T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Alman_J/0/1/0/all/0/1&quot;&gt;Josh Alman&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Blasiok_J/0/1/0/all/0/1&quot;&gt;Jaros&amp;#x142;aw B&amp;#x142;asiok&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Three-player Number On the Forehead communication may be thought of as a
three-player Number In the Hand promise model, in which each player is given
the inputs that are supposedly on the other two players&#39; heads, and promised
that they are consistent with the inputs of of the other players. The set of
all allowed inputs under this promise may be thought of as an order-3 tensor.
We surprisingly observe that this tensor is exactly the matrix multiplication
tensor, which is widely studied in the design of fast matrix multiplication
algorithms.
&lt;/p&gt;
&lt;p&gt;Using this connection, we prove a number of results about both Number On the
Forehead communication and matrix multiplication, each by using known results
or techniques about the other. For example, we show how the Laser method, a key
technique used to design the best matrix multiplication algorithms, can also be
used to design communication protocols for a variety of problems. We also show
how known lower bounds for Number On the Forehead communication can be used to
bound properties of the matrix multiplication tensor such as its zeroing out
subrank. Finally, we substantially generalize known methods based on slice-rank
for studying communication, and show how they directly relate to the matrix
multiplication exponent $\omega$.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Geometry: Lower Bounds for Intersection Reporting among Flat Objects</title>
    <link href="http://arxiv.org/abs/2302.11433"/>
    <id>http://arxiv.org/abs/2302.11433</id>
    <updated>2023-02-23T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Afshani_P/0/1/0/all/0/1&quot;&gt;Peyman Afshani&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Cheng_P/0/1/0/all/0/1&quot;&gt;Pingan Cheng&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Recently, Ezra and Sharir [ES22a] showed an $O(n^{3/2+\sigma})$ space and
$O(n^{1/2+\sigma})$ query time data structure for ray shooting among triangles
in $\mathbb{R}^3$. This improves the upper bound given by the classical
$S(n)Q(n)^4=O(n^{4+\sigma})$ space-time tradeoff for the first time in almost
25 years and in fact lies on the tradeoff curve of
$S(n)Q(n)^3=O(n^{3+\sigma})$. However, it seems difficult to apply their
techniques beyond this specific space and time combination. This pheonomenon
appears persistently in almost all recent advances of flat object intersection
searching, e.g., line-tetrahedron intersection in $\mathbb{R}^4$ [ES22b],
triangle-triangle intersection in $\mathbb{R}^4$ [ES22b], or even among flat
semialgebraic objects [AAEKS22].
&lt;/p&gt;
&lt;p&gt;We give a timely explanation to this phenomenon from a lower bound
perspective. We prove that given a set $\mathcal{S}$ of $(d-1)$-dimensional
simplicies in $\mathbb{R}^d$, any data structure that can report all
intersections with small ($n^{o(1)}$) query time must use
$\Omega(n^{2(d-1)-o(1)})$ space. This dashes the hope of any significant
improvement to the tradeoff curves for small query time and almost matches the
classical upper bound. We also obtain an almost matching space lower bound of
$\Omega(n^{6-o(1)})$ for triangle-triangle intersection reporting in
$\mathbb{R}^4$ when the query time is small. Along the way, we further develop
the previous lower bound techniques by Afshani and Cheng [AC21, AC22].
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Geometry</name>
      <uri>https://arxiv.org/list/cs.CG/recent</uri>
    </author>
  </entry>


</feed>
