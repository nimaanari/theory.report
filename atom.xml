<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Theory of Computing Report</title>
  <link rel="self" href=""/>
  <link href=""/>
  <id></id>
  <updated></updated>
  <generator uri="http://feedreader.github.io/">Pluto 1.6.2 on Ruby 3.0.6 (2023-03-30) [x86_64-linux]</generator>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">Emanuele Viola: Mathematics of the impossible, Chapter 12, Data structures</title>
    <link href="https://emanueleviola.wordpress.com/2023/05/14/mathematics-of-the-impossible-chapter-12-data-structures/"/>
    <id>http://emanueleviola.wordpress.com/?p=1254</id>
    <updated>2023-05-14T13:48:09+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;And as promised, here&amp;#8217;s a chapter on data structures&amp;#8230; in a complexity theory course!&lt;br /&gt;
&amp;#8212;&lt;br /&gt;
Data structures aim to maintain data in memory so as to be able to support various operations, such as answering queries about the data, and updating the data. The study of data structures is fundamental and extensive. We distinguish and study in turn two types of data structure problems: &lt;em&gt;static&lt;/em&gt; and &lt;em&gt;dynamic&lt;/em&gt;. In the former the input is given once and cannot modified by the queries. In the latter queries can modify the input; this includes classical problems such as supporting insert, search, and delete of keys.&lt;/p&gt;
&lt;h3 class=&quot;sectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;12.1   &lt;/span&gt; &lt;a id=&quot;x1-12100012.1&quot;&gt;&lt;/a&gt;Static data structures&lt;/h3&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-121001r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Definition&lt;/b&gt; 12.1.  &lt;/span&gt;A static data-structure problem is simply a function &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D%5En+%5Cto+%5Bq%5D%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D%5En+%5Cto+%5Bq%5D%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D%5En+%5Cto+%5Bq%5D%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:&amp;#92;{0,1&amp;#92;}^n &amp;#92;to [q]^{m}&quot; class=&quot;latex&quot; /&gt;. A data structure for &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; with space &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&quot; class=&quot;latex&quot; /&gt;, word size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w&quot; class=&quot;latex&quot; /&gt; and time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt; is a way to write &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; as&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+f%28x%29%3Dh%28g%28x%29%29+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+f%28x%29%3Dh%28g%28x%29%29+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+f%28x%29%3Dh%28g%28x%29%29+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} f(x)=h(g(x)) &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;where &lt;img src=&quot;https://s0.wp.com/latex.php?latex=g%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5B2%5E%7Bw%7D%5D%5E%7Bs%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=g%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5B2%5E%7Bw%7D%5D%5E%7Bs%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=g%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5B2%5E%7Bw%7D%5D%5E%7Bs%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;g:&amp;#92;{0,1&amp;#92;} ^{n}&amp;#92;to [2^{w}]^{s}&quot; class=&quot;latex&quot; /&gt;, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=h%3A%5B2%5E%7Bw%7D%5D%5E%7Bs%7D%5Cto+%5Bq%5D%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=h%3A%5B2%5E%7Bw%7D%5D%5E%7Bs%7D%5Cto+%5Bq%5D%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=h%3A%5B2%5E%7Bw%7D%5D%5E%7Bs%7D%5Cto+%5Bq%5D%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;h:[2^{w}]^{s}&amp;#92;to [q]^{m}&quot; class=&quot;latex&quot; /&gt;, and each output bit of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=h&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=h&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=h&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;h&quot; class=&quot;latex&quot; /&gt; depends on &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le t&quot; class=&quot;latex&quot; /&gt; input words (we think of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&quot; class=&quot;latex&quot; /&gt; as divided into words of length &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w&quot; class=&quot;latex&quot; /&gt;).&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;Here we have &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt; bits of input data about which we would like to answer &lt;img src=&quot;https://s0.wp.com/latex.php?latex=m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;m&quot; class=&quot;latex&quot; /&gt; queries. Often the queries and or the word size are boolean, i.e., &lt;img src=&quot;https://s0.wp.com/latex.php?latex=2%5E%7Bw%7D%3Dq%3D2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=2%5E%7Bw%7D%3Dq%3D2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=2%5E%7Bw%7D%3Dq%3D2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;2^{w}=q=2&quot; class=&quot;latex&quot; /&gt;. Another typical setting is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=q%3D2%5E%7Bw%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=q%3D2%5E%7Bw%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=q%3D2%5E%7Bw%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;q=2^{w}&quot; class=&quot;latex&quot; /&gt;. The data structure aims to accomplish this by storing the input into &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&quot; class=&quot;latex&quot; /&gt; bits of memory. This map is arbitrary, with no bound on resources. But after that, each query can be answered very fast, by reading only &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt; words. In general, these words can be read adaptively. But for simplicity we focus on the case in which the locations are fixed by the data structure and the same for every input &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&amp;#92;in &amp;#92;{0,1&amp;#92;} ^{n}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-121002r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 12.1.  &lt;/span&gt;Consider the data structure problem &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:&amp;#92;{0,1&amp;#92;} ^{n}&amp;#92;to &amp;#92;{0,1&amp;#92;} ^{m}&quot; class=&quot;latex&quot; /&gt; where &lt;img src=&quot;https://s0.wp.com/latex.php?latex=m%3Dn%5E%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=m%3Dn%5E%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=m%3Dn%5E%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;m=n^{2}&quot; class=&quot;latex&quot; /&gt; and query &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%28i%2Cj%29%5Cin+%5C%7B1%2C2%2C%5Cldots+%2Cn%5C%7D%5E%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%28i%2Cj%29%5Cin+%5C%7B1%2C2%2C%5Cldots+%2Cn%5C%7D%5E%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28i%2Cj%29%5Cin+%5C%7B1%2C2%2C%5Cldots+%2Cn%5C%7D%5E%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;(i,j)&amp;#92;in &amp;#92;{1,2,&amp;#92;ldots ,n&amp;#92;}^{2}&quot; class=&quot;latex&quot; /&gt; is the parity of the input bits from &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&quot; class=&quot;latex&quot; /&gt; to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=j&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=j&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=j&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;j&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Give a data structure for this problem with &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s%3Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s%3Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s%3Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s=n&quot; class=&quot;latex&quot; /&gt;, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w=1&quot; class=&quot;latex&quot; /&gt;, and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%3D2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%3D2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%3D2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t=2&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-121003r2&quot;&gt;&lt;/a&gt;                                                                                                                                                                                     &lt;b&gt;Exercise&lt;/b&gt; 12.2.  &lt;/span&gt;Show that any data-structure problem &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:&amp;#92;{0,1&amp;#92;} ^{n}&amp;#92;to &amp;#92;{0,1&amp;#92;} ^{m}&quot; class=&quot;latex&quot; /&gt; has a data structure with &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w=1&quot; class=&quot;latex&quot; /&gt; and the following parameters:&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   (1) &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s%3Dm&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s%3Dm&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s%3Dm&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s=m&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t=1&quot; class=&quot;latex&quot; /&gt;, and&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   (2) &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s%3Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s%3Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s%3Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s=n&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%3Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%3Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%3Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t=n&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-121004r3&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 12.3.  &lt;/span&gt;Prove that for every &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=m%5Cle+2%5E%7Bn%2F2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=m%5Cle+2%5E%7Bn%2F2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=m%5Cle+2%5E%7Bn%2F2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;m&amp;#92;le 2^{n/2}&quot; class=&quot;latex&quot; /&gt; there exist functions &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:&amp;#92;{0,1&amp;#92;} ^{n}&amp;#92;to &amp;#92;{0,1&amp;#92;} ^{m}&quot; class=&quot;latex&quot; /&gt; s.t.&amp;nbsp;any data structure with space &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s%3Dm%2F2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s%3Dm%2F2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s%3Dm%2F2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s=m/2&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w=1&quot; class=&quot;latex&quot; /&gt; requires time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%5Cge+n-c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%5Cge+n-c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%5Cge+n-c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&amp;#92;ge n-c&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   By contrast, next we present the the best known impossibility result.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-121005r2&quot;&gt;&lt;/a&gt; &lt;b&gt;Definition&lt;/b&gt; 12.2.  &lt;/span&gt;A function &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3A%5B2%5D%5E%7Bn%7D%5Cto+%5Bq%5D%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3A%5B2%5D%5E%7Bn%7D%5Cto+%5Bq%5D%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3A%5B2%5D%5E%7Bn%7D%5Cto+%5Bq%5D%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:[2]^{n}&amp;#92;to [q]^{m}&quot; class=&quot;latex&quot; /&gt; is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt;-wise uniform if any &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt; output coordinates are uniform when the input to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; is uniform.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-121006r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 12.1.  &lt;/span&gt;&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#XSiegel04&quot;&gt;65&lt;/a&gt;]&lt;/span&gt; Let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3A%5Bq%5D%5E%7Bd%7D%5Cto+%5Bq%5D%5E%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3A%5Bq%5D%5E%7Bd%7D%5Cto+%5Bq%5D%5E%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3A%5Bq%5D%5E%7Bd%7D%5Cto+%5Bq%5D%5E%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:[q]^{d}&amp;#92;to [q]^{q}&quot; class=&quot;latex&quot; /&gt; be &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt;-wise uniform. Let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;q&quot; class=&quot;latex&quot; /&gt; be a power of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;2&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c%5Clog+q%5Cle+d%5Cle+q%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c%5Clog+q%5Cle+d%5Cle+q%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c%5Clog+q%5Cle+d%5Cle+q%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c&amp;#92;log q&amp;#92;le d&amp;#92;le q^{c}&quot; class=&quot;latex&quot; /&gt;. Then any data structure with &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w%3D%5Clog+q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w%3D%5Clog+q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w%3D%5Clog+q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w=&amp;#92;log q&quot; class=&quot;latex&quot; /&gt; using space &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&quot; class=&quot;latex&quot; /&gt; (which recall is measured in words of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w&quot; class=&quot;latex&quot; /&gt; bits) and time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt; has:&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+t%5Cgeq+c%5Cfrac+%7B%5Clog+q%7D%7B%5Clog+%28s%2Fd%29%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+t%5Cgeq+c%5Cfrac+%7B%5Clog+q%7D%7B%5Clog+%28s%2Fd%29%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+t%5Cgeq+c%5Cfrac+%7B%5Clog+q%7D%7B%5Clog+%28s%2Fd%29%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} t&amp;#92;geq c&amp;#92;frac {&amp;#92;log q}{&amp;#92;log (s/d)}. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Interpreting the input as coefficients of a degree &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d-1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d-1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d-1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d-1&quot; class=&quot;latex&quot; /&gt; univariate polynomial over &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D_%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D_%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D_%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;mathbb {F}_{q}&quot; class=&quot;latex&quot; /&gt; and outputting its evaluations shows that such functions exists, and are in P. Below we give a surprising data structure that nearly matches the theorem.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   To match previous parameters note that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%3Dd%5Clog+q%3Ddw&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%3Dd%5Clog+q%3Ddw&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%3Dd%5Clog+q%3Ddw&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n=d&amp;#92;log q=dw&quot; class=&quot;latex&quot; /&gt;, and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=m%3D%5Clog+q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=m%3D%5Clog+q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=m%3D%5Clog+q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;m=&amp;#92;log q&quot; class=&quot;latex&quot; /&gt;. Hence the bound is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%5Cge+c%28%5Clog+m%29%2F%5Clog+%28sw%2Fn%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%5Cge+c%28%5Clog+m%29%2F%5Clog+%28sw%2Fn%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%5Cge+c%28%5Clog+m%29%2F%5Clog+%28sw%2Fn%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&amp;#92;ge c(&amp;#92;log m)/&amp;#92;log (sw/n)&quot; class=&quot;latex&quot; /&gt;. Note that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=sw&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=sw&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=sw&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;sw&quot; class=&quot;latex&quot; /&gt; is the space of the data structure measured in bits. It follows that if &lt;img src=&quot;https://s0.wp.com/latex.php?latex=sw&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=sw&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=sw&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;sw&quot; class=&quot;latex&quot; /&gt; is linear in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt; then &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%5Cge+c%5Clog+m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%5Cge+c%5Clog+m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%5Cge+c%5Clog+m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&amp;#92;ge c&amp;#92;log m&quot; class=&quot;latex&quot; /&gt;. This result remains non-trivial for &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&quot; class=&quot;latex&quot; /&gt; slightly super-linear. But remarkably, if &lt;img src=&quot;https://s0.wp.com/latex.php?latex=sw%3Dn%5E%7B1%2Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=sw%3Dn%5E%7B1%2Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=sw%3Dn%5E%7B1%2Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;sw=n^{1+c}&quot; class=&quot;latex&quot; /&gt; then nothing is known (for &lt;img src=&quot;https://s0.wp.com/latex.php?latex=m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;m&quot; class=&quot;latex&quot; /&gt; power in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt; one only gets &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&amp;#92;ge c&quot; class=&quot;latex&quot; /&gt;).&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;    &lt;b&gt;Proof&lt;/b&gt;.&amp;nbsp;&lt;/span&gt;The idea in the proof is to find a subset &lt;img src=&quot;https://s0.wp.com/latex.php?latex=S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;S&quot; class=&quot;latex&quot; /&gt; of less than &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt; memory cells that still allows us to answer &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cge+d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cge+d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cge+d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;ge d&quot; class=&quot;latex&quot; /&gt; queries. This is impossible, since we can’t generate &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt; uniform outputs from less than &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt; memory cells.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=p%3A%3D1%2Fq%5E%7B1%2F4t%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=p%3A%3D1%2Fq%5E%7B1%2F4t%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=p%3A%3D1%2Fq%5E%7B1%2F4t%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;p:=1/q^{1/4t}&quot; class=&quot;latex&quot; /&gt;. Include each memory bit in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;S&quot; class=&quot;latex&quot; /&gt; with probability &lt;img src=&quot;https://s0.wp.com/latex.php?latex=p&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=p&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=p&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;p&quot; class=&quot;latex&quot; /&gt;, independently. By Theorem &lt;a href=&quot;#x1-30001r7&quot;&gt;2.7&lt;!--tex4ht:ref: thm:tail-bound --&gt;&lt;/a&gt;, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BP%7D%5B%7CS%7C%5Cge+cps%5D%5Cle+2%5E%7B-cps%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BP%7D%5B%7CS%7C%5Cge+cps%5D%5Cle+2%5E%7B-cps%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BP%7D%5B%7CS%7C%5Cge+cps%5D%5Cle+2%5E%7B-cps%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;mathbb {P}[|S|&amp;#92;ge cps]&amp;#92;le 2^{-cps}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   We are still able to answer a query if all of its memory bits fall in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;S&quot; class=&quot;latex&quot; /&gt;. The probability that this happens is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=p%5E%7Bt%7D%3D1%2Fq%5E%7B1%2F4%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=p%5E%7Bt%7D%3D1%2Fq%5E%7B1%2F4%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=p%5E%7Bt%7D%3D1%2Fq%5E%7B1%2F4%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;p^{t}=1/q^{1/4}&quot; class=&quot;latex&quot; /&gt;. We now claim that with probability &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cge+1%2Fq%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cge+1%2Fq%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cge+1%2Fq%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;ge 1/q^{c}&quot; class=&quot;latex&quot; /&gt;, we can still answer &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Csqrt+%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Csqrt+%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Csqrt+%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;sqrt {q}&quot; class=&quot;latex&quot; /&gt; queries. Indeed, let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B&quot; class=&quot;latex&quot; /&gt; be the number of queries we cannot answer. We have &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BE%7D%5B%7CB%7C%5D%5Cle+q%281-q%5E%7B1%2F4%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BE%7D%5B%7CB%7C%5D%5Cle+q%281-q%5E%7B1%2F4%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BE%7D%5B%7CB%7C%5D%5Cle+q%281-q%5E%7B1%2F4%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;mathbb {E}[|B|]&amp;#92;le q(1-q^{1/4})&quot; class=&quot;latex&quot; /&gt;. And so&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb+%7BP%7D%5BB%5Cge+q%281-1%2F%5Csqrt+%7Bq%7D%29%5D%5Cle+%5Cfrac+%7B1-q%5E%7B1%2F4%7D%7D%7B1-%5Csqrt+%7Bq%7D%7D%5Cle+1-q%5E%7Bc%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb+%7BP%7D%5BB%5Cge+q%281-1%2F%5Csqrt+%7Bq%7D%29%5D%5Cle+%5Cfrac+%7B1-q%5E%7B1%2F4%7D%7D%7B1-%5Csqrt+%7Bq%7D%7D%5Cle+1-q%5E%7Bc%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb+%7BP%7D%5BB%5Cge+q%281-1%2F%5Csqrt+%7Bq%7D%29%5D%5Cle+%5Cfrac+%7B1-q%5E%7B1%2F4%7D%7D%7B1-%5Csqrt+%7Bq%7D%7D%5Cle+1-q%5E%7Bc%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} &amp;#92;mathbb {P}[B&amp;#92;ge q(1-1/&amp;#92;sqrt {q})]&amp;#92;le &amp;#92;frac {1-q^{1/4}}{1-&amp;#92;sqrt {q}}&amp;#92;le 1-q^{c}. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Thus, if the inequality &lt;img src=&quot;https://s0.wp.com/latex.php?latex=2%5E%7B-cps%7D%5Cleq+1%2Fq%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=2%5E%7B-cps%7D%5Cleq+1%2Fq%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=2%5E%7B-cps%7D%5Cleq+1%2Fq%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;2^{-cps}&amp;#92;leq 1/q^{c}&quot; class=&quot;latex&quot; /&gt; holds then there exists a set &lt;img src=&quot;https://s0.wp.com/latex.php?latex=S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;S&quot; class=&quot;latex&quot; /&gt; of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=cps&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=cps&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=cps&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;cps&quot; class=&quot;latex&quot; /&gt; bits with which we can answer &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cge+%5Csqrt+%7Bq%7D%3Ed&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cge+%5Csqrt+%7Bq%7D%3Ed&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cge+%5Csqrt+%7Bq%7D%3Ed&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;ge &amp;#92;sqrt {q}&amp;gt;d&quot; class=&quot;latex&quot; /&gt; queries. Hence we reach a contradiction if&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+c%5Clog+q%5Cle+cps%3Cd.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+c%5Clog+q%5Cle+cps%3Cd.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+c%5Clog+q%5Cle+cps%3Cd.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} c&amp;#92;log q&amp;#92;le cps&amp;lt;d. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;=&amp;quot;&amp;quot;  Because &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d%3Ec%5Clog+q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d%3Ec%5Clog+q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d%3Ec%5Clog+q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&amp;gt;c&amp;#92;log q&quot; class=&quot;latex&quot; /&gt; by assumption, and increasing &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&quot; class=&quot;latex&quot; /&gt; only make the problem easier, we reach a contradiction if &lt;img src=&quot;https://s0.wp.com/latex.php?latex=cps%3Cd&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=cps%3Cd&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=cps%3Cd&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;cps&amp;lt;d&quot; class=&quot;latex&quot; /&gt;, and=&amp;quot;&amp;quot; the=&amp;quot;&amp;quot; result=&amp;quot;&amp;quot; follows.=&amp;quot;&amp;quot; &lt;b&gt;QED    &lt;/p&gt;
&lt;p&gt;&lt;/b&gt;&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Next we show a conceptually simple data structure which nearly matches the lower bound. For simplicity we focus on data structures which use space &lt;img src=&quot;https://s0.wp.com/latex.php?latex=q%5E%7B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=q%5E%7B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=q%5E%7B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;q^{&amp;#92;epsilon }&quot; class=&quot;latex&quot; /&gt; – recall in this case the previous result does not give anything. We will show this is for good reasons, there are data structures where the time is constant. We will only show &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c_%7B%5Cepsilon+%7Dd&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c_%7B%5Cepsilon+%7Dd&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c_%7B%5Cepsilon+%7Dd&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c_{&amp;#92;epsilon }d&quot; class=&quot;latex&quot; /&gt;-wise independence, as opposed to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt;-wise, but the proof techniques next and above generalize to other settings of parameters.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-121007r2&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 12.2.  &lt;/span&gt;There is a map &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3A%5Bq%5D%5E%7Bd%7D%5Cto+%5Bq%5D%5E%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3A%5Bq%5D%5E%7Bd%7D%5Cto+%5Bq%5D%5E%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3A%5Bq%5D%5E%7Bd%7D%5Cto+%5Bq%5D%5E%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:[q]^{d}&amp;#92;to [q]^{q}&quot; class=&quot;latex&quot; /&gt; which is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c_%7B%5Cepsilon+%7Dd&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c_%7B%5Cepsilon+%7Dd&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c_%7B%5Cepsilon+%7Dd&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c_{&amp;#92;epsilon }d&quot; class=&quot;latex&quot; /&gt;-wise uniform and has a data structure with &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w%3D%5Clog+q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w%3D%5Clog+q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w%3D%5Clog+q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w=&amp;#92;log q&quot; class=&quot;latex&quot; /&gt; space &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s%3Ddq%5E%7B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s%3Ddq%5E%7B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s%3Ddq%5E%7B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s=dq^{&amp;#92;epsilon }&quot; class=&quot;latex&quot; /&gt; and time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c_%7B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c_%7B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c_%7B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c_{&amp;#92;epsilon }&quot; class=&quot;latex&quot; /&gt;, for any &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cepsilon+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cepsilon+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cepsilon+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;epsilon &quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;q&quot; class=&quot;latex&quot; /&gt; which is a power of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;2&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   To give a sense of the parameters, let for example &lt;img src=&quot;https://s0.wp.com/latex.php?latex=q%3Dd%5E%7B10%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=q%3Dd%5E%7B10%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=q%3Dd%5E%7B10%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;q=d^{10}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;    &lt;b&gt;Proof&lt;/b&gt;.&amp;nbsp;&lt;/span&gt;We fill the memory with &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&quot; class=&quot;latex&quot; /&gt; evaluations of the input polynomial. Then we pick a random bipartite graph with &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&quot; class=&quot;latex&quot; /&gt; nodes on the left and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;q&quot; class=&quot;latex&quot; /&gt; nodes on the right. Every node on the right side has degree &lt;img src=&quot;https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;g&quot; class=&quot;latex&quot; /&gt;. We answer each query by summing the corresponding cells in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&quot; class=&quot;latex&quot; /&gt;. Let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d%27%3A%3Dd%2Fg&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d%27%3A%3Dd%2Fg&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d%27%3A%3Dd%2Fg&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&amp;#039;:=d/g&quot; class=&quot;latex&quot; /&gt;. To show &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d%27&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d%27&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d%27&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&amp;#039;&quot; class=&quot;latex&quot; /&gt;-wise uniformity it suffices to show that for any subset &lt;img src=&quot;https://s0.wp.com/latex.php?latex=R%5Csubseteq+%5Bq%5D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=R%5Csubseteq+%5Bq%5D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=R%5Csubseteq+%5Bq%5D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;R&amp;#92;subseteq [q]&quot; class=&quot;latex&quot; /&gt; on the right-hand side of size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d%27&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d%27&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d%27&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&amp;#039;&quot; class=&quot;latex&quot; /&gt;, the sum of the corresponding memory cells is uniform in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D_%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D_%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D_%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;mathbb {F}_{q}&quot; class=&quot;latex&quot; /&gt;. For this in turn it suffices that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=R&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=R&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=R&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;R&quot; class=&quot;latex&quot; /&gt; has a unique neighbor. And for that, finally, it suffices that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=R&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=R&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=R&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;R&quot; class=&quot;latex&quot; /&gt; has a neighborhood of size greater than &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cfrac+%7Bg%7CR%7C%7D%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cfrac+%7Bg%7CR%7C%7D%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cfrac+%7Bg%7CR%7C%7D%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;frac {g|R|}{2}&quot; class=&quot;latex&quot; /&gt; (because if every element in the neighborhood of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=R&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=R&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=R&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;R&quot; class=&quot;latex&quot; /&gt; has two neighbors in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=R&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=R&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=R&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;R&quot; class=&quot;latex&quot; /&gt; then &lt;img src=&quot;https://s0.wp.com/latex.php?latex=R&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=R&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=R&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;R&quot; class=&quot;latex&quot; /&gt; has a neighborhood of size less than &lt;img src=&quot;https://s0.wp.com/latex.php?latex=g%7Cr%7C+2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=g%7Cr%7C+2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=g%7Cr%7C+2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;g|r| 2&quot; class=&quot;latex&quot; /&gt;).&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Note here we are using that the neighborhood has size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+gd%27%3Dd&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+gd%27%3Dd&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+gd%27%3Dd&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le gd&amp;#039;=d&quot; class=&quot;latex&quot; /&gt;, and so the memory is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt;-wise uniform.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   We pick the graph at random and show that it has the latter property with non-zero probability.&lt;br /&gt;
[Standard calculations follow that wordpress has trouble displaying&amp;#8230; wait for the book draft, I guess.]&lt;br /&gt;
&lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h4 class=&quot;subsectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;12.1.1   &lt;/span&gt; &lt;a id=&quot;x1-12200012.1.1&quot;&gt;&lt;/a&gt;Succinct data structures&lt;/h4&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;Succinct data structures are those where the space is close to the minimum, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt;. Specifically, we let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s%3Dn%2Br&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s%3Dn%2Br&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s%3Dn%2Br&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s=n+r&quot; class=&quot;latex&quot; /&gt; for some &lt;img src=&quot;https://s0.wp.com/latex.php?latex=r%3Do%28n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=r%3Do%28n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=r%3Do%28n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;r=o(n)&quot; class=&quot;latex&quot; /&gt; called &lt;em&gt;redundancy. &lt;/em&gt;Unsurprisingly, stronger bounds can be probed in this setting. But, surprisingly, again these stronger bounds were shown to be tight. Moreover, it was shown that improving the bounds would imply stronger circuit lower bounds.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   To illustrate, consider the ECC problem &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:&amp;#92;{0,1&amp;#92;} ^{n}&amp;#92;to &amp;#92;{0,1&amp;#92;} ^{m}&quot; class=&quot;latex&quot; /&gt; where &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; is an error-correcting code (with constant relative distance) and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;m&quot; class=&quot;latex&quot; /&gt; is linear in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-122001r3&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 12.3.  &lt;/span&gt;&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#XGalMiltersen07&quot;&gt;26&lt;/a&gt;]&lt;/span&gt; Any data-structure for the ECC problem with &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w=1&quot; class=&quot;latex&quot; /&gt; using space &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%2Br&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%2Br&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%2Br&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n+r&quot; class=&quot;latex&quot; /&gt; requires time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cge+cn%2Fr&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cge+cn%2Fr&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cge+cn%2Fr&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;ge cn/r&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   This is nearly matched by the following result.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-122002r4&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 12.4.  &lt;/span&gt;&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#Xviola-datastructurelb-implies-cclb&quot;&gt;81&lt;/a&gt;]&lt;/span&gt; There is an ECC problem s.t.&amp;nbsp;for any &lt;img src=&quot;https://s0.wp.com/latex.php?latex=r&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=r&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=r&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;r&quot; class=&quot;latex&quot; /&gt; it has a data structure with &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w=1&quot; class=&quot;latex&quot; /&gt;, space &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%2Br&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%2Br&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%2Br&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n+r&quot; class=&quot;latex&quot; /&gt;, and time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c%28n%2Fr%29%5Clog+%5E%7B3%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c%28n%2Fr%29%5Clog+%5E%7B3%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c%28n%2Fr%29%5Clog+%5E%7B3%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c(n/r)&amp;#92;log ^{3}n&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Moreover, it was shown that proving a time lower bound of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%28n%2Fr%29%5Clog+%5E%7Bc%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%28n%2Fr%29%5Clog+%5E%7Bc%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28n%2Fr%29%5Clog+%5E%7Bc%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;(n/r)&amp;#92;log ^{c}n&quot; class=&quot;latex&quot; /&gt; would imply new circuit lower bounds. The latter result refers to bounds on the number of wires in circuits with arbitrary gates. But the following connection with the standard circuit model is also known.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-122003r5&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 12.5.  &lt;/span&gt;&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#Xviola-datastructurelb-implies-cclb&quot;&gt;81&lt;/a&gt;]&lt;/span&gt; Let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bam%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bam%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bam%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:&amp;#92;{0,1&amp;#92;} ^{n}&amp;#92;to &amp;#92;{0,1&amp;#92;} ^{am}&quot; class=&quot;latex&quot; /&gt; be a function computable by bounded fan-in circuits with &lt;img src=&quot;https://s0.wp.com/latex.php?latex=bm&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=bm&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=bm&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;bm&quot; class=&quot;latex&quot; /&gt; wires and depth &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b%5Clog+m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b%5Clog+m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b%5Clog+m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b&amp;#92;log m&quot; class=&quot;latex&quot; /&gt;, for constants &lt;img src=&quot;https://s0.wp.com/latex.php?latex=a%2Cb&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=a%2Cb&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=a%2Cb&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;a,b&quot; class=&quot;latex&quot; /&gt;. Then &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; has a data structure with space &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%2Bo%28n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%2Bo%28n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%2Bo%28n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n+o(n)&quot; class=&quot;latex&quot; /&gt; and time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%5E%7Bo%281%29%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%5E%7Bo%281%29%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%5E%7Bo%281%29%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n^{o(1)}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Hence, proving &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%5E%7B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%5E%7B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%5E%7B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n^{&amp;#92;epsilon }&quot; class=&quot;latex&quot; /&gt; time lower bounds for succinct data structures would give functions that cannot be computed by linear-size log-depth circuits, cf.&amp;nbsp;&lt;a href=&quot;#x1-1100009.3&quot;&gt;9.3&lt;!--tex4ht:ref: sec:Linear-size-log-depth --&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h4 class=&quot;subsectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;12.1.2   &lt;/span&gt; &lt;a id=&quot;x1-12300012.1.2&quot;&gt;&lt;/a&gt;Succincter: The trits problem&lt;/h4&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;In this section we present a cute and fundamental data-structure problem with a shocking and counterintuitive solution. The trits problem is to compute &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3A%5B3%5D%5E%7Bn%7D%5Cto+%28%5C%7B0%2C1%5C%7D+%5E%7B2%7D%29%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3A%5B3%5D%5E%7Bn%7D%5Cto+%28%5C%7B0%2C1%5C%7D+%5E%7B2%7D%29%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3A%5B3%5D%5E%7Bn%7D%5Cto+%28%5C%7B0%2C1%5C%7D+%5E%7B2%7D%29%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:[3]^{n}&amp;#92;to (&amp;#92;{0,1&amp;#92;} ^{2})^{n}&quot; class=&quot;latex&quot; /&gt; where on input &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt; “trits” (i.e., ternary elements) &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%28t_%7B1%7D%2Ct_%7B2%7D%2C%5Cldots+%2Ct_%7Bn%7D%29%5Cin+%5B3%5D%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%28t_%7B1%7D%2Ct_%7B2%7D%2C%5Cldots+%2Ct_%7Bn%7D%29%5Cin+%5B3%5D%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28t_%7B1%7D%2Ct_%7B2%7D%2C%5Cldots+%2Ct_%7Bn%7D%29%5Cin+%5B3%5D%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;(t_{1},t_{2},&amp;#92;ldots ,t_{n})&amp;#92;in [3]^{n}&quot; class=&quot;latex&quot; /&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; outputs their representations using two bits per trit.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-123001r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Example&lt;/b&gt; 12.1.  &lt;/span&gt;For &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n=1&quot; class=&quot;latex&quot; /&gt;, we have &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%280%29%3D00%2Cf%281%29%3D01%2Cf%282%29%3D10&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%280%29%3D00%2Cf%281%29%3D01%2Cf%282%29%3D10&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%280%29%3D00%2Cf%281%29%3D01%2Cf%282%29%3D10&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f(0)=00,f(1)=01,f(2)=10&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Note that the input ranges over &lt;img src=&quot;https://s0.wp.com/latex.php?latex=3%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=3%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=3%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;3^{n}&quot; class=&quot;latex&quot; /&gt; elements, and so the minimum space of the data structure is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s%3D%5Clceil+%5Clog+_%7B2%7D3%5E%7Bn%7D%5Crceil+%3D%5Clceil+n%5Clog+_%7B2%7D3%5Crceil+%5Capprox+n%5Ccdot+1.584%5Cldots+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s%3D%5Clceil+%5Clog+_%7B2%7D3%5E%7Bn%7D%5Crceil+%3D%5Clceil+n%5Clog+_%7B2%7D3%5Crceil+%5Capprox+n%5Ccdot+1.584%5Cldots+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s%3D%5Clceil+%5Clog+_%7B2%7D3%5E%7Bn%7D%5Crceil+%3D%5Clceil+n%5Clog+_%7B2%7D3%5Crceil+%5Capprox+n%5Ccdot+1.584%5Cldots+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s=&amp;#92;lceil &amp;#92;log _{2}3^{n}&amp;#92;rceil =&amp;#92;lceil n&amp;#92;log _{2}3&amp;#92;rceil &amp;#92;approx n&amp;#92;cdot 1.584&amp;#92;ldots &quot; class=&quot;latex&quot; /&gt; This will be our benchmark for space. One can encode the input to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; as before using bits without loss of generality, but the current choice simplifies the exposition.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h5 class=&quot;likesubsubsectionHead&quot;&gt;&lt;a id=&quot;x1-12400012.1.2&quot;&gt;&lt;/a&gt;Simple solutions:&lt;/h5&gt;
&lt;ul class=&quot;itemize1&quot;&gt;
&lt;li class=&quot;itemize&quot;&gt;The simplest solution (cf.&amp;nbsp;&lt;a href=&quot;#x1-121003r2&quot;&gt;12.2&lt;!--tex4ht:ref: xca:static-ds-trivial-sols --&gt;&lt;/a&gt;) to this problem is to use &lt;img src=&quot;https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;2&quot; class=&quot;latex&quot; /&gt; bits per &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t_{i}&quot; class=&quot;latex&quot; /&gt;. With such an encoding we can retrieve each &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t_%7Bi%7D%5Cin+%5B3%5D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t_%7Bi%7D%5Cin+%5B3%5D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t_%7Bi%7D%5Cin+%5B3%5D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t_{i}&amp;#92;in [3]&quot; class=&quot;latex&quot; /&gt; by reading just &lt;img src=&quot;https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;2&quot; class=&quot;latex&quot; /&gt; bits (which is optimal). The space used is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s%3D2n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s%3D2n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s%3D2n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s=2n&quot; class=&quot;latex&quot; /&gt; and we have linear redundancy.&lt;/li&gt;
&lt;li class=&quot;itemize&quot;&gt;Another solution (cf.&amp;nbsp;again &lt;a href=&quot;#x1-121003r2&quot;&gt;12.2&lt;!--tex4ht:ref: xca:static-ds-trivial-sols --&gt;&lt;/a&gt;) to this problem is what is called &lt;em&gt;arithmetic coding&lt;/em&gt;: we think of the concatenated elements as forming a ternary number between &lt;img src=&quot;https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;0&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=3%5E%7Bn%7D-1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=3%5E%7Bn%7D-1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=3%5E%7Bn%7D-1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;3^{n}-1&quot; class=&quot;latex&quot; /&gt;, and we write down its binary representation. To retrieve &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t_{i}&quot; class=&quot;latex&quot; /&gt; it seems we need to read all the input bits, but the space needed is optimal.&lt;/li&gt;
&lt;li class=&quot;itemize&quot;&gt;For this and other problems, we can trade between these two extreme as follows. Group the &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t_{i}&quot; class=&quot;latex&quot; /&gt;’s into blocks of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt;. Encode each block with arithmetic coding. The retrieval time will be &lt;img src=&quot;https://s0.wp.com/latex.php?latex=ct&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=ct&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=ct&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;ct&quot; class=&quot;latex&quot; /&gt; bits and the needed space will be &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%28n%2Ft%29%5Clceil+t%5Clog+_%7B2%7D3%5Crceil+%5Cleq+n%5Clog+_%7B2%7D3%2Bn%2Ft&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%28n%2Ft%29%5Clceil+t%5Clog+_%7B2%7D3%5Crceil+%5Cleq+n%5Clog+_%7B2%7D3%2Bn%2Ft&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28n%2Ft%29%5Clceil+t%5Clog+_%7B2%7D3%5Crceil+%5Cleq+n%5Clog+_%7B2%7D3%2Bn%2Ft&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;(n/t)&amp;#92;lceil t&amp;#92;log _{2}3&amp;#92;rceil &amp;#92;leq n&amp;#92;log _{2}3+n/t&quot; class=&quot;latex&quot; /&gt; (assuming &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt; divides &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt;). This is block-wise arithmetic coding. It provides a &lt;em&gt;power&lt;/em&gt; trade-off between retrieval time and redundancy. (Using number-theoretic results on logarithmic forms, one can show &lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#Xviola-triz&quot;&gt;80&lt;/a&gt;]&lt;/span&gt; that this last inequality is tight up to changing &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%2Ft&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%2Ft&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%2Ft&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n/t&quot; class=&quot;latex&quot; /&gt; into &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%2Ft%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%2Ft%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%2Ft%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n/t^{c}&quot; class=&quot;latex&quot; /&gt;.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h5 class=&quot;likesubsubsectionHead&quot;&gt;&lt;a id=&quot;x1-12500012.1.2&quot;&gt;&lt;/a&gt;The shocking solution: An exponential (!) trade-off&lt;/h5&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;We now present an &lt;em&gt;exponential&lt;/em&gt; trade-off: retrieval time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=ct&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=ct&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=ct&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;ct&quot; class=&quot;latex&quot; /&gt; bits and redundancy &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%2F2%5E%7Bt%7D%2Bc&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%2F2%5E%7Bt%7D%2Bc&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%2F2%5E%7Bt%7D%2Bc&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n/2^{t}+c&quot; class=&quot;latex&quot; /&gt;. In particular, if we set &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%3Dc%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%3Dc%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%3Dc%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t=c&amp;#92;log n&quot; class=&quot;latex&quot; /&gt;, we get retrieval time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=O%28%5Clog+n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=O%28%5Clog+n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=O%28%5Clog+n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;O(&amp;#92;log n)&quot; class=&quot;latex&quot; /&gt; and redundancy &lt;img src=&quot;https://s0.wp.com/latex.php?latex=O%281%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=O%281%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=O%281%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;O(1)&quot; class=&quot;latex&quot; /&gt;. Moreover, the bits read are all consecutive, so with word size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w%3D%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w%3D%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w%3D%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w=&amp;#92;log n&quot; class=&quot;latex&quot; /&gt; this can be implemented in constant time. To repeat, we can encode the trits with constant redundancy and retrieve each in constant time. This solution can also be made dynamic.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-125001r6&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 12.6.  &lt;/span&gt;&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#XPatrascu08Succincter&quot;&gt;53&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;#XDodisPT10&quot;&gt;21&lt;/a&gt;]&lt;/span&gt; The trits problem has a data structure with space &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%5Clog+_%7B2%7D3%2Bn%2F2%5E%7Bt%7D%2Bc&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%5Clog+_%7B2%7D3%2Bn%2F2%5E%7Bt%7D%2Bc&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%5Clog+_%7B2%7D3%2Bn%2F2%5E%7Bt%7D%2Bc&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&amp;#92;log _{2}3+n/2^{t}+c&quot; class=&quot;latex&quot; /&gt; (i.e., redundancy &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%2F2%5E%7Bt%7D%2Bc&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%2F2%5E%7Bt%7D%2Bc&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%2F2%5E%7Bt%7D%2Bc&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n/2^{t}+c&quot; class=&quot;latex&quot; /&gt;) and time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=ct&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=ct&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=ct&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;ct&quot; class=&quot;latex&quot; /&gt;, for any &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt; and with word size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w=1&quot; class=&quot;latex&quot; /&gt;. For word wise &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w%3D%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w%3D%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w%3D%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w=&amp;#92;log n&quot; class=&quot;latex&quot; /&gt; the time is constant.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Next we present the proof.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-125002r3&quot;&gt;&lt;/a&gt; &lt;b&gt;Definition&lt;/b&gt; 12.3 (Encoding and redundancy).  &lt;/span&gt;An  encoding  of  a  set  &lt;img src=&quot;https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;A&quot; class=&quot;latex&quot; /&gt;  into  a  set  &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B&quot; class=&quot;latex&quot; /&gt;  is  a one-to-one (a.k.a.&amp;nbsp;injective) map &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3AA%5Cto+B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3AA%5Cto+B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3AA%5Cto+B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:A&amp;#92;to B&quot; class=&quot;latex&quot; /&gt;. The &lt;em&gt;redundancy&lt;/em&gt; of the encoding &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Clog+_%7B2%7D%7CB%7C-%5Clog+_%7B2%7D%7CA&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Clog+_%7B2%7D%7CB%7C-%5Clog+_%7B2%7D%7CA&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Clog+_%7B2%7D%7CB%7C-%5Clog+_%7B2%7D%7CA&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;log _{2}|B|-&amp;#92;log _{2}|A&quot; class=&quot;latex&quot; /&gt;|.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The following lemma gives the building-block encoding we will use.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-125003r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Lemma&lt;/b&gt; 12.1.  &lt;/span&gt; For all sets &lt;img src=&quot;https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;X&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;Y&quot; class=&quot;latex&quot; /&gt;, there is an integer &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b&quot; class=&quot;latex&quot; /&gt;, a set &lt;img src=&quot;https://s0.wp.com/latex.php?latex=K&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=K&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=K&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;K&quot; class=&quot;latex&quot; /&gt; and an encoding&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+f%3A%5Cleft+%28X%5Ctimes+Y%5Cright+%29%5Crightarrow+%5Cleft+%28%5C%7B0%2C1%5C%7D+%5E%7Bb%7D%5Ctimes+K%5Cright+%29+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+f%3A%5Cleft+%28X%5Ctimes+Y%5Cright+%29%5Crightarrow+%5Cleft+%28%5C%7B0%2C1%5C%7D+%5E%7Bb%7D%5Ctimes+K%5Cright+%29+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+f%3A%5Cleft+%28X%5Ctimes+Y%5Cright+%29%5Crightarrow+%5Cleft+%28%5C%7B0%2C1%5C%7D+%5E%7Bb%7D%5Ctimes+K%5Cright+%29+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} f:&amp;#92;left (X&amp;#92;times Y&amp;#92;right )&amp;#92;rightarrow &amp;#92;left (&amp;#92;{0,1&amp;#92;} ^{b}&amp;#92;times K&amp;#92;right ) &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;such that (1) &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; has redundancy &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+c%2F%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+c%2F%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+c%2F%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le c/&amp;#92;sqrt {|Y|}&quot; class=&quot;latex&quot; /&gt;, and (2) &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x%5Cin+X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x%5Cin+X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x%5Cin+X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&amp;#92;in X&quot; class=&quot;latex&quot; /&gt; can be recovered just by reading the &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b&quot; class=&quot;latex&quot; /&gt; bits in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f(x,y)&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;Note that (1) says that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b%2B%5Clog+%7CK%7C-%5Clog+%7CX%7C-%5Clog+%7CY%7C%5Cle+c%2F%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b%2B%5Clog+%7CK%7C-%5Clog+%7CX%7C-%5Clog+%7CY%7C%5Cle+c%2F%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b%2B%5Clog+%7CK%7C-%5Clog+%7CX%7C-%5Clog+%7CY%7C%5Cle+c%2F%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b+&amp;#92;log |K|-&amp;#92;log |X|-&amp;#92;log |Y|&amp;#92;le c/&amp;#92;sqrt {|Y|}&quot; class=&quot;latex&quot; /&gt;. For (2) to hold we must have &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b%5Cge+%5Clog+%7CX%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b%5Cge+%5Clog+%7CX%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b%5Cge+%5Clog+%7CX%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b&amp;#92;ge &amp;#92;log |X|&quot; class=&quot;latex&quot; /&gt;. Combining this with the previous expression we obtain &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Clog+%7CK%7C-%5Clog+%7CY%7C%5Cle+c%2F%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Clog+%7CK%7C-%5Clog+%7CY%7C%5Cle+c%2F%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Clog+%7CK%7C-%5Clog+%7CY%7C%5Cle+c%2F%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;log |K|-&amp;#92;log |Y|&amp;#92;le c/&amp;#92;sqrt {|Y|}&quot; class=&quot;latex&quot; /&gt;. In particular we get that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7CK%7C%5Cle+2%5E%7Bc%7D%5Ccdot+%7CY%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7CK%7C%5Cle+2%5E%7Bc%7D%5Ccdot+%7CY%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7CK%7C%5Cle+2%5E%7Bc%7D%5Ccdot+%7CY%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;|K|&amp;#92;le 2^{c}&amp;#92;cdot |Y|&quot; class=&quot;latex&quot; /&gt; (in fact it will be the case that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7CK%7C%5Cle+c%5Ccdot+%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7CK%7C%5Cle+c%5Ccdot+%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7CK%7C%5Cle+c%5Ccdot+%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;|K|&amp;#92;le c&amp;#92;cdot &amp;#92;sqrt {|Y|}&quot; class=&quot;latex&quot; /&gt;, but the looser bound is sufficient).&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The basic idea for proving the lemma is to break &lt;img src=&quot;https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;Y&quot; class=&quot;latex&quot; /&gt; into &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C%5Ctimes+K&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C%5Ctimes+K&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C%5Ctimes+K&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C&amp;#92;times K&quot; class=&quot;latex&quot; /&gt; and then encode &lt;img src=&quot;https://s0.wp.com/latex.php?latex=X%5Ctimes+C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=X%5Ctimes+C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=X%5Ctimes+C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;X&amp;#92;times C&quot; class=&quot;latex&quot; /&gt; by using &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b&quot; class=&quot;latex&quot; /&gt; bits:&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+X%5Ctimes+Y%5Crightarrow+X%5Ctimes+C%5Ctimes+K%5Crightarrow+%5C%7B0%2C1%5C%7D+%5E%7Bb%7D%5Ctimes+K.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+X%5Ctimes+Y%5Crightarrow+X%5Ctimes+C%5Ctimes+K%5Crightarrow+%5C%7B0%2C1%5C%7D+%5E%7Bb%7D%5Ctimes+K.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+X%5Ctimes+Y%5Crightarrow+X%5Ctimes+C%5Ctimes+K%5Crightarrow+%5C%7B0%2C1%5C%7D+%5E%7Bb%7D%5Ctimes+K.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} X&amp;#92;times Y&amp;#92;rightarrow X&amp;#92;times C&amp;#92;times K&amp;#92;rightarrow &amp;#92;{0,1&amp;#92;} ^{b}&amp;#92;times K. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;There is however a subtle point. If we insist on always having &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7CC%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7CC%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7CC%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;|C|&quot; class=&quot;latex&quot; /&gt; equal to, say, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;sqrt {|Y|}&quot; class=&quot;latex&quot; /&gt; or some other quantity, then one can cook up sets that make us waste a lot (i.e., almost one bit) of space. The same of course happens in the more basic approach that just sets &lt;img src=&quot;https://s0.wp.com/latex.php?latex=Y%3DK&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=Y%3DK&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=Y%3DK&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;Y=K&quot; class=&quot;latex&quot; /&gt; and encodes all of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;X&quot; class=&quot;latex&quot; /&gt; with &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b&quot; class=&quot;latex&quot; /&gt; bits. The main idea will be to “reason backwards,” i.e., we will first pick &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b&quot; class=&quot;latex&quot; /&gt; and then try to stuff as much as possible inside &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bb%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bb%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bb%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;{0,1&amp;#92;} ^{b}&quot; class=&quot;latex&quot; /&gt;. Still, our choice of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b&quot; class=&quot;latex&quot; /&gt; will make &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7CC%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7CC%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7CC%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;|C|&quot; class=&quot;latex&quot; /&gt; about &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;sqrt {|Y|}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;    &lt;b&gt;Proof&lt;/b&gt;.&amp;nbsp;&lt;/span&gt;Pick any two sets &lt;img src=&quot;https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;X&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;Y&quot; class=&quot;latex&quot; /&gt;, where &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7CY%7C%3E1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7CY%7C%3E1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7CY%7C%3E1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;|Y|&amp;gt;1&quot; class=&quot;latex&quot; /&gt; without loss of generality. Define &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b%3A%3D%5Cleft+%5Clceil+%5Clog+_%7B2%7D%5Cleft+%28%7CX%7C%5Ccdot+%5Csqrt+%7B%7CY%7C%7D%5Cright+%29%5Cright+%5Crceil+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b%3A%3D%5Cleft+%5Clceil+%5Clog+_%7B2%7D%5Cleft+%28%7CX%7C%5Ccdot+%5Csqrt+%7B%7CY%7C%7D%5Cright+%29%5Cright+%5Crceil+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b%3A%3D%5Cleft+%5Clceil+%5Clog+_%7B2%7D%5Cleft+%28%7CX%7C%5Ccdot+%5Csqrt+%7B%7CY%7C%7D%5Cright+%29%5Cright+%5Crceil+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b:=&amp;#92;left &amp;#92;lceil &amp;#92;log _{2}&amp;#92;left (|X|&amp;#92;cdot &amp;#92;sqrt {|Y|}&amp;#92;right )&amp;#92;right &amp;#92;rceil &quot; class=&quot;latex&quot; /&gt;, and let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B%3A%3D%5C%7B0%2C1%5C%7D+%5E%7Bb%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B%3A%3D%5C%7B0%2C1%5C%7D+%5E%7Bb%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B%3A%3D%5C%7B0%2C1%5C%7D+%5E%7Bb%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B:=&amp;#92;{0,1&amp;#92;} ^{b}&quot; class=&quot;latex&quot; /&gt;. To simplify notation, define &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d%3A%3D2%5E%7Bb%7D%2F%7CX%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d%3A%3D2%5E%7Bb%7D%2F%7CX%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d%3A%3D2%5E%7Bb%7D%2F%7CX%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d:=2^{b}/|X|&quot; class=&quot;latex&quot; /&gt;. Note &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c%5Csqrt+%7B%7CY%7C%7D%5Cle+d%5Cle+c%5Csqrt+%7B%7CY%7C%7D.&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c%5Csqrt+%7B%7CY%7C%7D%5Cle+d%5Cle+c%5Csqrt+%7B%7CY%7C%7D.&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c%5Csqrt+%7B%7CY%7C%7D%5Cle+d%5Cle+c%5Csqrt+%7B%7CY%7C%7D.&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c&amp;#92;sqrt {|Y|}&amp;#92;le d&amp;#92;le c&amp;#92;sqrt {|Y|}.&quot; class=&quot;latex&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   How much can we stuff into &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B&quot; class=&quot;latex&quot; /&gt;? For a set &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C&quot; class=&quot;latex&quot; /&gt; of size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7CC%7C%3D%5Cleft+%5Clfloor+%7CB%7C%2F%7CX%7C%5Cright+%5Crfloor+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7CC%7C%3D%5Cleft+%5Clfloor+%7CB%7C%2F%7CX%7C%5Cright+%5Crfloor+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7CC%7C%3D%5Cleft+%5Clfloor+%7CB%7C%2F%7CX%7C%5Cright+%5Crfloor+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;|C|=&amp;#92;left &amp;#92;lfloor |B|/|X|&amp;#92;right &amp;#92;rfloor &quot; class=&quot;latex&quot; /&gt;, we can encode elements from &lt;img src=&quot;https://s0.wp.com/latex.php?latex=X%5Ctimes+C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=X%5Ctimes+C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=X%5Ctimes+C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;X&amp;#92;times C&quot; class=&quot;latex&quot; /&gt; in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B&quot; class=&quot;latex&quot; /&gt;. The redundancy of such an encoding can be bounded as follows:&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   To calculate the total redundancy, we still need to examine the encoding from &lt;img src=&quot;https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;Y&quot; class=&quot;latex&quot; /&gt; to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C%5Ctimes+K&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C%5Ctimes+K&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C%5Ctimes+K&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C&amp;#92;times K&quot; class=&quot;latex&quot; /&gt;. Choose &lt;img src=&quot;https://s0.wp.com/latex.php?latex=K&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=K&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=K&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;K&quot; class=&quot;latex&quot; /&gt; of size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7CK%7C%3D%5Cleft+%5Clceil+%7CY%7C%2F%7CC%7C%5Cright+%5Crceil+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7CK%7C%3D%5Cleft+%5Clceil+%7CY%7C%2F%7CC%7C%5Cright+%5Crceil+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7CK%7C%3D%5Cleft+%5Clceil+%7CY%7C%2F%7CC%7C%5Cright+%5Crceil+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;|K|=&amp;#92;left &amp;#92;lceil |Y|/|C|&amp;#92;right &amp;#92;rceil &quot; class=&quot;latex&quot; /&gt;, so that this encoding is possible. With a calculation similar to the previous one, we see that the redundancy is:&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The total redundancy is then &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c%2F%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c%2F%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c%2F%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c/&amp;#92;sqrt {|Y|}&quot; class=&quot;latex&quot; /&gt;, which gives (1).&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   For (2), it is clear from the construction that any &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x%5Cin+X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x%5Cin+X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x%5Cin+X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&amp;#92;in X&quot; class=&quot;latex&quot; /&gt; can be recovered from the element of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B&quot; class=&quot;latex&quot; /&gt; only. &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;    &lt;b&gt;Proof of Theorem &lt;a href=&quot;#x1-125001r6&quot;&gt;12.6&lt;!--tex4ht:ref: thm:triz --&gt;&lt;/a&gt;&lt;/b&gt;.&amp;nbsp;&lt;/span&gt; Break the ternary elements into blocks of size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt;: &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%28t%27_%7B1%7D%2Ct%27_%7B2%7D%2C%5Cldots+%2Ct%27_%7Bn%2Ft%7D%29%5Cin+T_%7B1%7D%5Ctimes+T_%7B2%7D%5Ctimes+%5Cldots+%5Ctimes+T_%7Bn%2Ft%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%28t%27_%7B1%7D%2Ct%27_%7B2%7D%2C%5Cldots+%2Ct%27_%7Bn%2Ft%7D%29%5Cin+T_%7B1%7D%5Ctimes+T_%7B2%7D%5Ctimes+%5Cldots+%5Ctimes+T_%7Bn%2Ft%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28t%27_%7B1%7D%2Ct%27_%7B2%7D%2C%5Cldots+%2Ct%27_%7Bn%2Ft%7D%29%5Cin+T_%7B1%7D%5Ctimes+T_%7B2%7D%5Ctimes+%5Cldots+%5Ctimes+T_%7Bn%2Ft%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;(t&amp;#039;_{1},t&amp;#039;_{2},&amp;#92;ldots ,t&amp;#039;_{n/t})&amp;#92;in T_{1}&amp;#92;times T_{2}&amp;#92;times &amp;#92;ldots &amp;#92;times T_{n/t}&quot; class=&quot;latex&quot; /&gt;, where &lt;img src=&quot;https://s0.wp.com/latex.php?latex=T_%7Bi%7D%3D%5B3%5D%5E%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=T_%7Bi%7D%3D%5B3%5D%5E%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=T_%7Bi%7D%3D%5B3%5D%5E%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;T_{i}=[3]^{t}&quot; class=&quot;latex&quot; /&gt; for all &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&quot; class=&quot;latex&quot; /&gt;. The encoding, illustrated in Figure 1, is constructed as follows, where we use &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f_%7BL%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f_%7BL%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f_%7BL%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f_{L}&quot; class=&quot;latex&quot; /&gt; to refer to the encoding guaranteed by Lemma&amp;nbsp;Lemma &lt;a href=&quot;#x1-125003r1&quot;&gt;12.1&lt;!--tex4ht:ref: lem:triz-buildblock --&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Compute &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f_%7BL%7D%28t%27_%7B1%7D%2Ct%27_%7B2%7D%29%3D%28b_%7B1%7D%2Ck_%7B1%7D%29%5Cin+B_%7B1%7D%5Ctimes+K_%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f_%7BL%7D%28t%27_%7B1%7D%2Ct%27_%7B2%7D%29%3D%28b_%7B1%7D%2Ck_%7B1%7D%29%5Cin+B_%7B1%7D%5Ctimes+K_%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f_%7BL%7D%28t%27_%7B1%7D%2Ct%27_%7B2%7D%29%3D%28b_%7B1%7D%2Ck_%7B1%7D%29%5Cin+B_%7B1%7D%5Ctimes+K_%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f_{L}(t&amp;#039;_{1},t&amp;#039;_{2})=(b_{1},k_{1})&amp;#92;in B_{1}&amp;#92;times K_{1}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   For &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i%3D2%2C%5Cldots+%2Cn%2Ft-1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i%3D2%2C%5Cldots+%2Cn%2Ft-1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i%3D2%2C%5Cldots+%2Cn%2Ft-1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i=2,&amp;#92;ldots ,n/t-1&quot; class=&quot;latex&quot; /&gt; compute &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f_%7BL%7D%28k_%7Bi-1%7D%2Ct%27_%7Bi%2B1%7D%29%3A%3D%28b_%7Bi%7D%2Ck_%7Bi%7D%29%5Cin+B_%7Bi%7D%5Ctimes+K_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f_%7BL%7D%28k_%7Bi-1%7D%2Ct%27_%7Bi%2B1%7D%29%3A%3D%28b_%7Bi%7D%2Ck_%7Bi%7D%29%5Cin+B_%7Bi%7D%5Ctimes+K_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f_%7BL%7D%28k_%7Bi-1%7D%2Ct%27_%7Bi%2B1%7D%29%3A%3D%28b_%7Bi%7D%2Ck_%7Bi%7D%29%5Cin+B_%7Bi%7D%5Ctimes+K_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f_{L}(k_{i-1},t&amp;#039;_{i+1}):=(b_{i},k_{i})&amp;#92;in B_{i}&amp;#92;times K_{i}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Encode &lt;img src=&quot;https://s0.wp.com/latex.php?latex=k_%7Bn%2Ft-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=k_%7Bn%2Ft-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=k_%7Bn%2Ft-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;k_{n/t-1}&quot; class=&quot;latex&quot; /&gt; in binary as &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b_%7Bn%2Ft%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b_%7Bn%2Ft%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b_%7Bn%2Ft%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b_{n/t}&quot; class=&quot;latex&quot; /&gt; using arithmetic coding.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;The final encoding is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%28b_%7B1%7D%2Cb_%7B2%7D%2C%5Cldots+%2Cb_%7Bn%2Ft%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%28b_%7B1%7D%2Cb_%7B2%7D%2C%5Cldots+%2Cb_%7Bn%2Ft%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28b_%7B1%7D%2Cb_%7B2%7D%2C%5Cldots+%2Cb_%7Bn%2Ft%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;(b_{1},b_{2},&amp;#92;ldots ,b_{n/t})&quot; class=&quot;latex&quot; /&gt;. We now compute the redundancy and retrieval time.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;em&gt;Redundancy:&lt;/em&gt; From (1) in Lemma&amp;nbsp;&lt;a href=&quot;#x1-125003r1&quot;&gt;12.1&lt;!--tex4ht:ref: lem:triz-buildblock --&gt;&lt;/a&gt;, the first &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%2Ft-1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%2Ft-1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%2Ft-1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n/t-1&quot; class=&quot;latex&quot; /&gt; encodings have redundancy &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c3%5E%7B-t%2F2%7D%5Cle+1%2F2%5E%7Bct%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c3%5E%7B-t%2F2%7D%5Cle+1%2F2%5E%7Bct%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c3%5E%7B-t%2F2%7D%5Cle+1%2F2%5E%7Bct%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c3^{-t/2}&amp;#92;le 1/2^{ct}&quot; class=&quot;latex&quot; /&gt;. For the last (arithmetic) encoding, the redundancy is at most &lt;img src=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;1&quot; class=&quot;latex&quot; /&gt;. So the total redundancy is at most &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Cleft+%28%5Cfrac+%7Bn%7D%7Bt%7D-1%5Cright+%29%5Ccdot+%5Cfrac+%7B1%7D%7B2%5E%7Bct%7D%7D%2B1%3D%5Cfrac+%7Bn%7D%7B2%5E%7Bct%7D%7D%2Bc&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Cleft+%28%5Cfrac+%7Bn%7D%7Bt%7D-1%5Cright+%29%5Ccdot+%5Cfrac+%7B1%7D%7B2%5E%7Bct%7D%7D%2B1%3D%5Cfrac+%7Bn%7D%7B2%5E%7Bct%7D%7D%2Bc&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Cleft+%28%5Cfrac+%7Bn%7D%7Bt%7D-1%5Cright+%29%5Ccdot+%5Cfrac+%7B1%7D%7B2%5E%7Bct%7D%7D%2B1%3D%5Cfrac+%7Bn%7D%7B2%5E%7Bct%7D%7D%2Bc&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;displaystyle &amp;#92;left (&amp;#92;frac {n}{t}-1&amp;#92;right )&amp;#92;cdot &amp;#92;frac {1}{2^{ct}}+1=&amp;#92;frac {n}{2^{ct}}+c&quot; class=&quot;latex&quot; /&gt;. One can visualize this as a “hybrid argument” transforming a product of blocks of ternary elements into a product of blocks of binary elements, one block at the time.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;em&gt;Retrieval Time:&lt;/em&gt; Say that we want to recover some &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t_{j}&quot; class=&quot;latex&quot; /&gt; which is in block &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%27_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%27_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%27_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&amp;#039;_{i}&quot; class=&quot;latex&quot; /&gt;. To recover block &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%27_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%27_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%27_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&amp;#039;_{i}&quot; class=&quot;latex&quot; /&gt;, Lemma &lt;a href=&quot;#x1-125003r1&quot;&gt;12.1&lt;!--tex4ht:ref: lem:triz-buildblock --&gt;&lt;/a&gt; guarantees that we only need to look at &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b_%7Bi-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b_%7Bi-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b_%7Bi-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b_{i-1}&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b_{i}&quot; class=&quot;latex&quot; /&gt;. This is because &lt;img src=&quot;https://s0.wp.com/latex.php?latex=k_%7Bi-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=k_%7Bi-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=k_%7Bi-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;k_{i-1}&quot; class=&quot;latex&quot; /&gt; can be recovered by reading only &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b_{i}&quot; class=&quot;latex&quot; /&gt;, and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%27_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%27_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%27_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&amp;#039;_{i}&quot; class=&quot;latex&quot; /&gt; can be recovered by reading &lt;img src=&quot;https://s0.wp.com/latex.php?latex=k_%7Bi-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=k_%7Bi-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=k_%7Bi-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;k_{i-1}&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b_%7Bi-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b_%7Bi-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b_%7Bi-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b_{i-1}&quot; class=&quot;latex&quot; /&gt;. Thus to complete the proof it suffices to show that each &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b_{i}&quot; class=&quot;latex&quot; /&gt; has length &lt;img src=&quot;https://s0.wp.com/latex.php?latex=ct&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=ct&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=ct&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;ct&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   This is not completely obvious because one might have thought that the &lt;img src=&quot;https://s0.wp.com/latex.php?latex=K_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=K_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=K_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;K_{i}&quot; class=&quot;latex&quot; /&gt; become larger and larger, and so we apply the lemma to larger and larger inputs and the &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B_{i}&quot; class=&quot;latex&quot; /&gt; get large too. However, recall that each &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7CK_%7Bi%7D%7C%5Cle+c%7CT_%7Bi%7D%7C%3Dc3%5E%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7CK_%7Bi%7D%7C%5Cle+c%7CT_%7Bi%7D%7C%3Dc3%5E%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7CK_%7Bi%7D%7C%5Cle+c%7CT_%7Bi%7D%7C%3Dc3%5E%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;|K_{i}|&amp;#92;le c|T_{i}|=c3^{t}&quot; class=&quot;latex&quot; /&gt; from the comment after the statement of Lemma &lt;a href=&quot;#x1-125003r1&quot;&gt;12.1&lt;!--tex4ht:ref: lem:triz-buildblock --&gt;&lt;/a&gt;. Hence, every time we apply the lemma on an input of size at most &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s%5Cle+3%5E%7Bct%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s%5Cle+3%5E%7Bct%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s%5Cle+3%5E%7Bct%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&amp;#92;le 3^{ct}&quot; class=&quot;latex&quot; /&gt;. Since the lemma wastes little entropy (by (1) in Lemma &lt;a href=&quot;#x1-125003r1&quot;&gt;12.1&lt;!--tex4ht:ref: lem:triz-buildblock --&gt;&lt;/a&gt;), none of its outputs can be much larger than its input, and so &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7CB_%7Bi%7D%7C%3D2%5E%7Bct%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7CB_%7Bi%7D%7C%3D2%5E%7Bct%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7CB_%7Bi%7D%7C%3D2%5E%7Bct%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;|B_{i}|=2^{ct}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;hr class=&quot;figure&quot;/&gt;
&lt;div class=&quot;figure&quot;&gt;&lt;a id=&quot;x1-1250041&quot;&gt;&lt;/a&gt;  &lt;img src=&quot;../../classes/gems/lectures/le23-24pic1.png&quot; alt=&quot;PIC&quot; width=&quot;248&quot; height=&quot;240&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;caption&quot;&gt;&lt;span class=&quot;id&quot;&gt;Figure&amp;nbsp;12.1: &lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Succinct Encoding&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;!--tex4ht:label?: x1-1250041 --&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr class=&quot;endfigure&quot;/&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h3 class=&quot;sectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;12.2   &lt;/span&gt; &lt;a id=&quot;x1-12600012.2&quot;&gt;&lt;/a&gt;Dynamic data structures&lt;/h3&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;We now study dynamic data structures. As we mentioned, here the input is not fixed but can be modified by the queries.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-126001r4&quot;&gt;&lt;/a&gt; &lt;b&gt;Definition&lt;/b&gt; 12.4.  &lt;/span&gt;Fix an error-correcting code &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BECC%7D%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BECC%7D%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BECC%7D%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {ECC}:&amp;#92;{0,1&amp;#92;} ^{n}&amp;#92;to &amp;#92;{0,1&amp;#92;} ^{m}&quot; class=&quot;latex&quot; /&gt; where &lt;img src=&quot;https://s0.wp.com/latex.php?latex=m%5Cle+cn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=m%5Cle+cn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=m%5Cle+cn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;m&amp;#92;le cn&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5CDelta+%28%5Ctext+%7BECC%7D%28x%29%2C%5Ctext+%7BECC%7D%28y%29%29%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5CDelta+%28%5Ctext+%7BECC%7D%28x%29%2C%5Ctext+%7BECC%7D%28y%29%29%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CDelta+%28%5Ctext+%7BECC%7D%28x%29%2C%5Ctext+%7BECC%7D%28y%29%29%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;Delta (&amp;#92;text {ECC}(x),&amp;#92;text {ECC}(y))&amp;#92;ge c&quot; class=&quot;latex&quot; /&gt; for any &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x%5Cne+y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x%5Cne+y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x%5Cne+y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&amp;#92;ne y&quot; class=&quot;latex&quot; /&gt; in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;{0,1&amp;#92;} ^{n}&quot; class=&quot;latex&quot; /&gt;. Here &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5CDelta+%28u%2Cv%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5CDelta+%28u%2Cv%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CDelta+%28u%2Cv%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;Delta (u,v)&quot; class=&quot;latex&quot; /&gt; is the relative distance, the fraction of bit positions where &lt;img src=&quot;https://s0.wp.com/latex.php?latex=u&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=u&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=u&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;u&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=v&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=v&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=v&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;v&quot; class=&quot;latex&quot; /&gt; differ.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BECC%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BECC%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BECC%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {ECC}&quot; class=&quot;latex&quot; /&gt; problem asks to support operations, starting with the all-zero message:&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M%28i%2Cb%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M%28i%2Cb%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M%28i%2Cb%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M(i,b)&quot; class=&quot;latex&quot; /&gt; for &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i%5Cin+%5C%7B1%2C2%2C%5Cldots+%2Cn%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i%5Cin+%5C%7B1%2C2%2C%5Cldots+%2Cn%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i%5Cin+%5C%7B1%2C2%2C%5Cldots+%2Cn%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&amp;#92;in &amp;#92;{1,2,&amp;#92;ldots ,n&amp;#92;}&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b%5Cin+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b%5Cin+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b%5Cin+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b&amp;#92;in &amp;#92;{0,1&amp;#92;} &quot; class=&quot;latex&quot; /&gt; which sets bit &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&quot; class=&quot;latex&quot; /&gt; of the message to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b&quot; class=&quot;latex&quot; /&gt;, and&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C(i)&quot; class=&quot;latex&quot; /&gt; for &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i%5Cin+%5C%7B1%2C2%2C%5Cldots+%2Cm%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i%5Cin+%5C%7B1%2C2%2C%5Cldots+%2Cm%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i%5Cin+%5C%7B1%2C2%2C%5Cldots+%2Cm%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&amp;#92;in &amp;#92;{1,2,&amp;#92;ldots ,m&amp;#92;}&quot; class=&quot;latex&quot; /&gt; which returns bit &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&quot; class=&quot;latex&quot; /&gt; of the codeword corresponding to the current message.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The time of a dynamic data structure is the maximum number of read/write operations in memory cells required to support an operation.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-126002r7&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 12.7.  &lt;/span&gt; The &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BECC%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BECC%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BECC%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {ECC}&quot; class=&quot;latex&quot; /&gt; problem requires time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%5Cge+c%5Clog+_%7Bw%7Dn%5Cge+%28c%5Clog+n%29%2F%5Clog+%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%5Cge+c%5Clog+_%7Bw%7Dn%5Cge+%28c%5Clog+n%29%2F%5Clog+%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%5Cge+c%5Clog+_%7Bw%7Dn%5Cge+%28c%5Clog+n%29%2F%5Clog+%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&amp;#92;ge c&amp;#92;log _{w}n&amp;#92;ge (c&amp;#92;log n)/&amp;#92;log &amp;#92;log n&quot; class=&quot;latex&quot; /&gt; for cell size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w%3A%3D%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w%3A%3D%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w%3A%3D%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w:=&amp;#92;log n&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   One might wonder if stronger bounds can be shown for this problem. But in fact there exist codes for which the bounds are nearly tight.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-126003r8&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 12.8.  &lt;/span&gt;&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#Xviola-datastructurelb-implies-cclb&quot;&gt;81&lt;/a&gt;]&lt;/span&gt;There exists codes for which the ECC problem can be solved in time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c%5Clog+%5E%7B2%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c%5Clog+%5E%7B2%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c%5Clog+%5E%7B2%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c&amp;#92;log ^{2}n&quot; class=&quot;latex&quot; /&gt; with cell size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w=1&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The technique in the proof of Theorem &lt;a href=&quot;#x1-126002r7&quot;&gt;12.7&lt;!--tex4ht:ref: thm:ECC-data-structure-lower-bound --&gt;&lt;/a&gt; is from &lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#XFredmanS89&quot;&gt;24&lt;/a&gt;]&lt;/span&gt; and can be applied to many other natural problems, leading to tight results in several cases, see Exercise ??. It is not far from the state-of-the art in this area, which is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Clog+%5E%7B1%2Bc%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Clog+%5E%7B1%2Bc%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Clog+%5E%7B1%2Bc%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;log ^{1+c}n&quot; class=&quot;latex&quot; /&gt; &lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;journals/siamcomp/LarsenWY20&quot;&gt;42&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;    &lt;b&gt;Proof of Theorem &lt;a href=&quot;#x1-126002r7&quot;&gt;12.7&lt;!--tex4ht:ref: thm:ECC-data-structure-lower-bound --&gt;&lt;/a&gt;&lt;/b&gt;.&amp;nbsp;&lt;/span&gt; Pick &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&amp;#92;in &amp;#92;{0,1&amp;#92;} ^{n}&quot; class=&quot;latex&quot; /&gt; uniformly and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i%5Cin+%5C%7B1%2C2%2C%5Cldots+%2Cm%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i%5Cin+%5C%7B1%2C2%2C%5Cldots+%2Cm%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i%5Cin+%5C%7B1%2C2%2C%5Cldots+%2Cm%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&amp;#92;in &amp;#92;{1,2,&amp;#92;ldots ,m&amp;#92;}&quot; class=&quot;latex&quot; /&gt; uniformly, and consider the sequence of operations&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+M%281%2Cx_%7B1%7D%29%2CM%282%2Cx_%7B2%7D%29%2C%5Cldots+%2CM%28n%2Cx_%7Bn%7D%29%2CC%28i%29.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+M%281%2Cx_%7B1%7D%29%2CM%282%2Cx_%7B2%7D%29%2C%5Cldots+%2CM%28n%2Cx_%7Bn%7D%29%2CC%28i%29.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+M%281%2Cx_%7B1%7D%29%2CM%282%2Cx_%7B2%7D%29%2C%5Cldots+%2CM%28n%2Cx_%7Bn%7D%29%2CC%28i%29.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} M(1,x_{1}),M(2,x_{2}),&amp;#92;ldots ,M(n,x_{n}),C(i). &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;That is, we set the message to a uniform &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt; one bit at a time, and then ask for a uniformly selected bit of the codeword &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BECC%7D%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BECC%7D%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BECC%7D%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {ECC}(x)&quot; class=&quot;latex&quot; /&gt;, which we also denote by &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%3DC_%7Bx%7D%281%29%2CC_%7Bx%7D%282%29%2C%5Cldots+%2CC_%7Bx%7D%28n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%3DC_%7Bx%7D%281%29%2CC_%7Bx%7D%282%29%2C%5Cldots+%2CC_%7Bx%7D%28n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C_%7Bx%7D%3DC_%7Bx%7D%281%29%2CC_%7Bx%7D%282%29%2C%5Cldots+%2CC_%7Bx%7D%28n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C_{x}=C_{x}(1),C_{x}(2),&amp;#92;ldots ,C_{x}(n)&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   We divide the &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt; operations &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M%28i%2Cx_%7Bi%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M%28i%2Cx_%7Bi%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M%28i%2Cx_%7Bi%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M(i,x_{i})&quot; class=&quot;latex&quot; /&gt; into consecutive blocks, called &lt;em&gt;epochs&lt;/em&gt;. Epoch &lt;img src=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;e&quot; class=&quot;latex&quot; /&gt; consists of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%2Fw%5E%7B3e%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%2Fw%5E%7B3e%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%2Fw%5E%7B3e%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n/w^{3e}&quot; class=&quot;latex&quot; /&gt; operations. Hence we can have at least &lt;img src=&quot;https://s0.wp.com/latex.php?latex=E%3A%3Dc%5Clog+_%7Bw%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=E%3A%3Dc%5Clog+_%7Bw%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=E%3A%3Dc%5Clog+_%7Bw%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;E:=c&amp;#92;log _{w}n&quot; class=&quot;latex&quot; /&gt; epochs, and we can assume that we have exactly this many epochs (by discarding some bits of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt; if necessary).&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The geometrically decaying size of epochs is chosen so that the number of message bits set during an epoch &lt;img src=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;e&quot; class=&quot;latex&quot; /&gt; is much more than all the cells written by the data structure in future epochs.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   A key idea of the proof is to see what happens when the cells written during a certain epoch are ignored, or reverted to their contents right before the epoch. Specifically, after the execution of the &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M&quot; class=&quot;latex&quot; /&gt; operations, we can associate to each memory cell the last epoch during which this cell was written. Let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=D%5E%7Be%7D%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=D%5E%7Be%7D%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=D%5E%7Be%7D%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;D^{e}(x)&quot; class=&quot;latex&quot; /&gt; denote the memory cells of the data structure after the first &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt; operations &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M&quot; class=&quot;latex&quot; /&gt;, but with the change that the cells that were written last during epoch &lt;img src=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;e&quot; class=&quot;latex&quot; /&gt; are replaced with their contents right before epoch &lt;img src=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;e&quot; class=&quot;latex&quot; /&gt;. Define &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C_{x}^{e}(i)&quot; class=&quot;latex&quot; /&gt; to be the result of the data structure algorithm for &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C(i)&quot; class=&quot;latex&quot; /&gt; on &lt;img src=&quot;https://s0.wp.com/latex.php?latex=D%5E%7Be%7D%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=D%5E%7Be%7D%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=D%5E%7Be%7D%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;D^{e}(x)&quot; class=&quot;latex&quot; /&gt;, and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D%3DC_%7Bx%7D%5E%7Be%7D%281%29%2CC_%7Bx%7D%5E%7Be%7D%282%29%2C%5Cldots+%2CC_%7Bx%7D%5E%7Be%7D%28n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D%3DC_%7Bx%7D%5E%7Be%7D%281%29%2CC_%7Bx%7D%5E%7Be%7D%282%29%2C%5Cldots+%2CC_%7Bx%7D%5E%7Be%7D%28n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D%3DC_%7Bx%7D%5E%7Be%7D%281%29%2CC_%7Bx%7D%5E%7Be%7D%282%29%2C%5Cldots+%2CC_%7Bx%7D%5E%7Be%7D%28n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C_{x}^{e}=C_{x}^{e}(1),C_{x}^{e}(2),&amp;#92;ldots ,C_{x}^{e}(n)&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%28x%2Ci%2Ce%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%28x%2Ci%2Ce%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%28x%2Ci%2Ce%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t(x,i,e)&quot; class=&quot;latex&quot; /&gt; equal &lt;img src=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;1&quot; class=&quot;latex&quot; /&gt; if &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C(i)&quot; class=&quot;latex&quot; /&gt;, executed after the first &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt; operations &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M&quot; class=&quot;latex&quot; /&gt;, reads a cell that was last written in epoch &lt;img src=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;e&quot; class=&quot;latex&quot; /&gt;, and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;0&quot; class=&quot;latex&quot; /&gt; otherwise. We have&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+t%5Cge+%5Cmax+_%7Bx%2Ci%7D%5Csum+_%7Be%7Dt%28x%2Ci%2Ce%29%5Cge+%5Cmathbb+%7BE%7D_%7Bx%2Ci%7D%5Csum+_%7Be%7Dt%28x%2Ci%2Ce%29%3D%5Csum+_%7Be%7D%5Cmathbb+%7BE%7D_%7Bx%2Ci%7Dt%28x%2Ci%2Ce%29%5Cge+%5Csum+_%7Be%7D%5Cmathbb+%7BE%7D_%7Bx%7D%5CDelta+%28C_%7Bx%7D%2CC_%7Bx%7D%5E%7Be%7D%29%2C%7E%7E%7E%7E%2812.1%29+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+t%5Cge+%5Cmax+_%7Bx%2Ci%7D%5Csum+_%7Be%7Dt%28x%2Ci%2Ce%29%5Cge+%5Cmathbb+%7BE%7D_%7Bx%2Ci%7D%5Csum+_%7Be%7Dt%28x%2Ci%2Ce%29%3D%5Csum+_%7Be%7D%5Cmathbb+%7BE%7D_%7Bx%2Ci%7Dt%28x%2Ci%2Ce%29%5Cge+%5Csum+_%7Be%7D%5Cmathbb+%7BE%7D_%7Bx%7D%5CDelta+%28C_%7Bx%7D%2CC_%7Bx%7D%5E%7Be%7D%29%2C%7E%7E%7E%7E%2812.1%29+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+t%5Cge+%5Cmax+_%7Bx%2Ci%7D%5Csum+_%7Be%7Dt%28x%2Ci%2Ce%29%5Cge+%5Cmathbb+%7BE%7D_%7Bx%2Ci%7D%5Csum+_%7Be%7Dt%28x%2Ci%2Ce%29%3D%5Csum+_%7Be%7D%5Cmathbb+%7BE%7D_%7Bx%2Ci%7Dt%28x%2Ci%2Ce%29%5Cge+%5Csum+_%7Be%7D%5Cmathbb+%7BE%7D_%7Bx%7D%5CDelta+%28C_%7Bx%7D%2CC_%7Bx%7D%5E%7Be%7D%29%2C%7E%7E%7E%7E%2812.1%29+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} t&amp;#92;ge &amp;#92;max _{x,i}&amp;#92;sum _{e}t(x,i,e)&amp;#92;ge &amp;#92;mathbb {E}_{x,i}&amp;#92;sum _{e}t(x,i,e)=&amp;#92;sum _{e}&amp;#92;mathbb {E}_{x,i}t(x,i,e)&amp;#92;ge &amp;#92;sum _{e}&amp;#92;mathbb {E}_{x}&amp;#92;Delta (C_{x},C_{x}^{e}),~~~~(12.1) &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;where the last inequality holds because &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D%28i%29%5Cne+C_%7Bx%7D%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D%28i%29%5Cne+C_%7Bx%7D%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D%28i%29%5Cne+C_%7Bx%7D%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C_{x}^{e}(i)&amp;#92;ne C_{x}(i)&quot; class=&quot;latex&quot; /&gt; implies &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%28x%2Ci%2Ce%29%5Cge+1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%28x%2Ci%2Ce%29%5Cge+1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%28x%2Ci%2Ce%29%5Cge+1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t(x,i,e)&amp;#92;ge 1&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   We now claim that if &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%5Cle+w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%5Cle+w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%5Cle+w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&amp;#92;le w&quot; class=&quot;latex&quot; /&gt; then &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BE%7D_%7Bx%7D%5CDelta+%28C_%7Bx%7D%2CC_%7Bx%7D%5E%7Be%7D%29%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BE%7D_%7Bx%7D%5CDelta+%28C_%7Bx%7D%2CC_%7Bx%7D%5E%7Be%7D%29%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BE%7D_%7Bx%7D%5CDelta+%28C_%7Bx%7D%2CC_%7Bx%7D%5E%7Be%7D%29%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;mathbb {E}_{x}&amp;#92;Delta (C_{x},C_{x}^{e})&amp;#92;ge c&quot; class=&quot;latex&quot; /&gt; for every &lt;img src=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;e&quot; class=&quot;latex&quot; /&gt;. This concludes the proof.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   In the remainder we justify the claim. Fix arbitrarily the bits of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt; set before Epoch &lt;img src=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;e&quot; class=&quot;latex&quot; /&gt;. For a uniform setting of the remaining bits of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt;, note that the message ranges over at least&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+2%5E%7Bn%2Fw%5E%7B3e%7D%7D+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+2%5E%7Bn%2Fw%5E%7B3e%7D%7D+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+2%5E%7Bn%2Fw%5E%7B3e%7D%7D+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} 2^{n/w^{3e}} &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;codewords. On the other hand, we claim that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C_{x}^{e}&quot; class=&quot;latex&quot; /&gt; ranges over much fewer strings. Indeed, the total number of cells written in all epochs after &lt;img src=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;e&quot; class=&quot;latex&quot; /&gt; is at most&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+t%5Csum+_%7Bi%5Cge+e%2B1%7Dn%2Fw%5E%7B3i%7D%5Cle+ctn%2Fw%5E%7B3%28e%2B1%29%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+t%5Csum+_%7Bi%5Cge+e%2B1%7Dn%2Fw%5E%7B3i%7D%5Cle+ctn%2Fw%5E%7B3%28e%2B1%29%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+t%5Csum+_%7Bi%5Cge+e%2B1%7Dn%2Fw%5E%7B3i%7D%5Cle+ctn%2Fw%5E%7B3%28e%2B1%29%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} t&amp;#92;sum _{i&amp;#92;ge e+1}n/w^{3i}&amp;#92;le ctn/w^{3(e+1)}. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;We can describe all these cells by writing down their indices and contents using &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B%3A%3Dctn%2Fw%5E%7B3e%2B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B%3A%3Dctn%2Fw%5E%7B3e%2B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B%3A%3Dctn%2Fw%5E%7B3e%2B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B:=ctn/w^{3e+2}&quot; class=&quot;latex&quot; /&gt; bits. Note that this information can depend on the operations performed during Epoch &lt;img src=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;e&quot; class=&quot;latex&quot; /&gt;, but the point is that it takes few possible values overall. Since the cells last changed during Epoch &lt;img src=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;e&quot; class=&quot;latex&quot; /&gt; are reverted to their contents before Epoch &lt;img src=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;e&quot; class=&quot;latex&quot; /&gt;, this information suffices to describe &lt;img src=&quot;https://s0.wp.com/latex.php?latex=D%5E%7Be%7D%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=D%5E%7Be%7D%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=D%5E%7Be%7D%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;D^{e}(x)&quot; class=&quot;latex&quot; /&gt;, and hence &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C_{x}^{e}&quot; class=&quot;latex&quot; /&gt;. Therefore, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C_{x}^{e}&quot; class=&quot;latex&quot; /&gt; ranges over &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+2%5E%7BB%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+2%5E%7BB%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+2%5E%7BB%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le 2^{B}&quot; class=&quot;latex&quot; /&gt; strings.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   For each string in the range of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C_{x}^{e}&quot; class=&quot;latex&quot; /&gt; at most two codewords can have relative distance &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le c&quot; class=&quot;latex&quot; /&gt;, for else you’d have two codewords at distance &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+2c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+2c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+2c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le 2c&quot; class=&quot;latex&quot; /&gt;, violating the distance of the code.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Hence except with probability &lt;img src=&quot;https://s0.wp.com/latex.php?latex=2%5Ccdot+2%5E%7BB%7D%2F2%5E%7Bn%2Fw%5E%7B3e%7D%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=2%5Ccdot+2%5E%7BB%7D%2F2%5E%7Bn%2Fw%5E%7B3e%7D%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=2%5Ccdot+2%5E%7BB%7D%2F2%5E%7Bn%2Fw%5E%7B3e%7D%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;2&amp;#92;cdot 2^{B}/2^{n/w^{3e}}&quot; class=&quot;latex&quot; /&gt; over &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt;, we have &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5CDelta+%28C_%7Bx%7D%2CC_%7Bx%7D%5E%7Be%7D%29%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5CDelta+%28C_%7Bx%7D%2CC_%7Bx%7D%5E%7Be%7D%29%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CDelta+%28C_%7Bx%7D%2CC_%7Bx%7D%5E%7Be%7D%29%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;Delta (C_{x},C_{x}^{e})&amp;#92;ge c&quot; class=&quot;latex&quot; /&gt;. If &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t_%7BM%7D%5Cle+w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t_%7BM%7D%5Cle+w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t_%7BM%7D%5Cle+w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t_{M}&amp;#92;le w&quot; class=&quot;latex&quot; /&gt; then the first probability is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+0.1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+0.1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+0.1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le 0.1&quot; class=&quot;latex&quot; /&gt;, and so &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BE%7D_%7Bx%7D%5CDelta+%28C_%7Bx%7D%2CC_%7Bx%7D%5E%7Be%7D%29%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BE%7D_%7Bx%7D%5CDelta+%28C_%7Bx%7D%2CC_%7Bx%7D%5E%7Be%7D%29%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BE%7D_%7Bx%7D%5CDelta+%28C_%7Bx%7D%2CC_%7Bx%7D%5E%7Be%7D%29%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;mathbb {E}_{x}&amp;#92;Delta (C_{x},C_{x}^{e})&amp;#92;ge c&quot; class=&quot;latex&quot; /&gt;, proving the claim. &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-126004r4&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 12.4.  &lt;/span&gt;Explain how to conclude the proof given the claim.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h3 class=&quot;sectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;12.3   &lt;/span&gt; &lt;a id=&quot;x1-12700012.3&quot;&gt;&lt;/a&gt;Notes&lt;/h3&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;The exposition of the trits problem is from &lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#Xviola-gems09&quot;&gt;76&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h3 class=&quot;likesectionHead&quot;&gt;&lt;a id=&quot;x1-12800012.3&quot;&gt;&lt;/a&gt;References&lt;/h3&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;thebibliography&quot;&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [1]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:conf/focs/AbboudBW15&quot;&gt;&lt;/a&gt;Amir Abboud, Arturs Backurs, and Virginia&amp;nbsp;Vassilevska Williams. Tight hardness      results for LCS and other sequence similarity measures.  In Venkatesan Guruswami,      editor, IEEE 56th Annual Symposium on Foundations of Computer Science, FOCS      2015, Berkeley, CA, USA, 17-20 October, 2015, pages 59–78. IEEE Computer Society,      2015.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [2]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAdleman78&quot;&gt;&lt;/a&gt;Leonard  Adleman.   Two  theorems  on  random  polynomial  time.   In  19th IEEE      Symp.&amp;nbsp;on Foundations of Computer Science (FOCS), pages 75–83. 1978.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [3]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAjt83&quot;&gt;&lt;/a&gt;Mikl�s Ajtai.  &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5CSigma+%5Csp+%7B1%7D%5Csb+%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5CSigma+%5Csp+%7B1%7D%5Csb+%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CSigma+%5Csp+%7B1%7D%5Csb+%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;Sigma &amp;#92;sp {1}&amp;#92;sb {1}&quot; class=&quot;latex&quot; /&gt;-formulae on finite structures.  Annals of Pure and Applied Logic,      24(1):1–48, 1983.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [4]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAjtai05&quot;&gt;&lt;/a&gt;Mikl�s Ajtai. A non-linear time lower bound for boolean branching programs. Theory      of Computing, 1(1):149–176, 2005.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [5]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAll89&quot;&gt;&lt;/a&gt;Eric  Allender.   A  note  on  the  power  of  threshold  circuits.   In  30th Symposium      on Foundations of Computer Science, pages 580–584, Research Triangle Park, North      Carolina, 30 October–1 November 1989. IEEE.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [6]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAllender01&quot;&gt;&lt;/a&gt;Eric Allender. The division breakthroughs. Bulletin of the EATCS, 74:61–77, 2001.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [7]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAllenderK10&quot;&gt;&lt;/a&gt;Eric  Allender  and  Michal  Koucký.     Amplifying  lower  bounds  by  means  of      self-reducibility. J.&amp;nbsp;of the ACM, 57(3), 2010.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [8]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAGHP92&quot;&gt;&lt;/a&gt;Noga Alon, Oded Goldreich, Johan H�stad, and Ren� Peralta. Simple constructions      of  almost  &lt;img src=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;k&quot; class=&quot;latex&quot; /&gt;-wise  independent  random  variables.   Random  Structures  &amp;amp;  Algorithms,      3(3):289–304, 1992.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [9]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/jcss/AngluinV79&quot;&gt;&lt;/a&gt;Dana Angluin and Leslie&amp;nbsp;G. Valiant. Fast probabilistic algorithms for hamiltonian      circuits and matchings. J. Comput. Syst. Sci., 18(2):155–193, 1979.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [10]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAroraLuMoSuSz98&quot;&gt;&lt;/a&gt;Sanjeev Arora, Carsten Lund, Rajeev Motwani, Madhu Sudan, and Mario Szegedy.                                                                                                                                                                                          Proof  verification  and  the  hardness  of  approximation  problems.    J.&amp;nbsp;of  the  ACM,      45(3):501–555, May 1998.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [11]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/siamcomp/BackursI18&quot;&gt;&lt;/a&gt;Arturs Backurs and Piotr Indyk.  Edit distance cannot be computed in strongly      subquadratic time (unless SETH is false). SIAM J. Comput., 47(3):1087–1097, 2018.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [12]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XBatcher68&quot;&gt;&lt;/a&gt;Kenneth&amp;nbsp;E. Batcher.  Sorting networks and their applications.  In AFIPS Spring      Joint Computing Conference, volume&amp;nbsp;32, pages 307–314, 1968.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [13]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XBeameCH86&quot;&gt;&lt;/a&gt;Paul  Beame,  Stephen&amp;nbsp;A.  Cook,  and  H.&amp;nbsp;James  Hoover.   Log  depth  circuits  for      division and related problems. SIAM J. Comput., 15(4):994–1003, 1986.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [14]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XBSSV03&quot;&gt;&lt;/a&gt;Paul Beame, Michael Saks, Xiaodong Sun, and Erik Vee.   Time-space trade-off      lower  bounds  for  randomized  computation  of  decision  problems.   J.&amp;nbsp;of  the  ACM,      50(2):154–195, 2003.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [15]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XBen-OrC92&quot;&gt;&lt;/a&gt;Michael Ben-Or and Richard Cleve. Computing algebraic formulas using a constant      number of registers. SIAM J.&amp;nbsp;on Computing, 21(1):54–58, 1992.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [16]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/cc/BussW15&quot;&gt;&lt;/a&gt;Samuel&amp;nbsp;R.  Buss  and  Ryan  Williams.   Limits  on  alternation  trading  proofs  for      time-space lower bounds. Comput. Complex., 24(3):533–600, 2015.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [17]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:conf/stoc/ChenT19&quot;&gt;&lt;/a&gt;Lijie Chen and Roei Tell. Bootstrapping results for threshold circuits &amp;#8220;just beyond&amp;#8221;      known lower bounds.  In Moses Charikar and Edith Cohen, editors, Proceedings of the      51st Annual ACM SIGACT Symposium on Theory of Computing, STOC 2019, Phoenix,      AZ, USA, June 23-26, 2019, pages 34–41. ACM, 2019.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [18]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XCleve91&quot;&gt;&lt;/a&gt;Richard  Cleve.    Towards  optimal  simulations  of  formulas  by  bounded-width      programs. Computational Complexity, 1:91–105, 1991.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [19]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XCook73&quot;&gt;&lt;/a&gt;Stephen&amp;nbsp;A. Cook. A hierarchy for nondeterministic time complexity. J.&amp;nbsp;of Computer      and System Sciences, 7(4):343–353, 1973.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [20]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/siamcomp/Csanky76&quot;&gt;&lt;/a&gt;L.&amp;nbsp;Csanky.     Fast  parallel  matrix  inversion  algorithms.     SIAM  J.  Comput.,      5(4):618–623, 1976.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [21]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDodisPT10&quot;&gt;&lt;/a&gt;Yevgeniy Dodis, Mihai Pǎtraşcu, and Mikkel Thorup. Changing base without losing      space. In 42nd ACM Symp.&amp;nbsp;on the Theory of Computing (STOC), pages 593–602. ACM,      2010.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [22]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/jcss/Fortnow00&quot;&gt;&lt;/a&gt;Lance  Fortnow.   Time-space  tradeoffs  for  satisfiability.   J.  Comput.  Syst.  Sci.,      60(2):337–353, 2000.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [23]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/jct/FraenkelL81&quot;&gt;&lt;/a&gt;Aviezri&amp;nbsp;S. Fraenkel and David Lichtenstein. Computing a perfect strategy for n x n      chess requires time exponential in n. J. Comb. Theory, Ser. A, 31(2):199–214, 1981.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [24]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XFredmanS89&quot;&gt;&lt;/a&gt;Michael&amp;nbsp;L. Fredman and Michael&amp;nbsp;E. Saks.  The cell probe complexity of dynamic      data structures. In ACM Symp.&amp;nbsp;on the Theory of Computing (STOC), pages 345–354,      1989.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [25]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XGajentaanO95&quot;&gt;&lt;/a&gt;Anka Gajentaan and Mark&amp;nbsp;H. Overmars. On a class of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7BO%7D%28n%5E2%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7BO%7D%28n%5E2%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7BO%7D%28n%5E2%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;{O}(n^2)&quot; class=&quot;latex&quot; /&gt; problems in computational      geometry. Comput. Geom., 5:165–185, 1995.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [26]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XGalMiltersen07&quot;&gt;&lt;/a&gt;Anna G�l and Peter&amp;nbsp;Bro Miltersen.  The cell probe complexity of succinct data      structures. Theoretical Computer Science, 379(3):405–417, 2007.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [27]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XGareyJ79&quot;&gt;&lt;/a&gt;M.&amp;nbsp;R. Garey and David&amp;nbsp;S. Johnson. Computers and Intractability: A Guide to the      Theory of NP-Completeness. W. H. Freeman, 1979.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [28]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XMR1549939&quot;&gt;&lt;/a&gt;K.&amp;nbsp;G�del.   �ber  formal  unentscheidbare  s�tze  der  Principia  Mathematica  und      verwandter systeme I. Monatsh. Math. Phys., 38, 1931.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [29]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XGoldreich08Complexity&quot;&gt;&lt;/a&gt;Oded Goldreich. Computational Complexity: A Conceptual Perspective. Cambridge      University Press, 2008.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [30]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XGreenlawHR-Limits&quot;&gt;&lt;/a&gt;Raymond  Greenlaw,  H.&amp;nbsp;James  Hoover,  and  Walter  Ruzzo.   Limits  to  Parallel      Computation: P-Completeness Theory. 02 2001.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [31]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;X10.4007/annals.2021.193.2.4&quot;&gt;&lt;/a&gt;David Harvey and Joris van&amp;nbsp;der Hoeven. Integer multiplication in time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=O%28n%5Cmathrm+%7Blog%7D%5C%2C+n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=O%28n%5Cmathrm+%7Blog%7D%5C%2C+n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=O%28n%5Cmathrm+%7Blog%7D%5C%2C+n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;O(n&amp;#92;mathrm {log}&amp;#92;, n)&quot; class=&quot;latex&quot; /&gt;. Annals of      Mathematics, 193(2):563 – 617, 2021.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [32]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/iandc/Hennie65&quot;&gt;&lt;/a&gt;F.&amp;nbsp;C. Hennie.  One-tape, off-line turing machine computations.  Information and      Control, 8(6):553–578, 1965.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [33]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XHennieS66&quot;&gt;&lt;/a&gt;Fred  Hennie  and  Richard  Stearns.    Two-tape  simulation  of  multitape  turing      machines. J.&amp;nbsp;of the ACM, 13:533–546, October 1966.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [34]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/jacm/HopcroftPV77&quot;&gt;&lt;/a&gt;John&amp;nbsp;E. Hopcroft, Wolfgang&amp;nbsp;J. Paul, and Leslie&amp;nbsp;G. Valiant. On time versus space.      J. ACM, 24(2):332–337, 1977.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [35]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XIP99&quot;&gt;&lt;/a&gt;Russell Impagliazzo and Ramamohan Paturi.   The complexity of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;k&quot; class=&quot;latex&quot; /&gt;-sat.   In IEEE      Conf.&amp;nbsp;on Computational Complexity (CCC), pages 237–, 1999.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [36]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XImpagliazzoPS97&quot;&gt;&lt;/a&gt;Russell Impagliazzo, Ramamohan Paturi, and Michael&amp;nbsp;E. Saks. Size-depth tradeoffs      for threshold circuits. SIAM J. Comput., 26(3):693–707, 1997.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [37]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XIPZ01&quot;&gt;&lt;/a&gt;Russell Impagliazzo, Ramamohan Paturi, and Francis Zane.  Which problems have      strongly exponential complexity? J. Computer &amp;amp; Systems Sciences, 63(4):512–530, Dec      2001.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [38]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XImW97&quot;&gt;&lt;/a&gt;Russell  Impagliazzo  and  Avi  Wigderson.    &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cmathit+%7BP%7D+%3D+%5Cmathit+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cmathit+%7BP%7D+%3D+%5Cmathit+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathit+%7BP%7D+%3D+%5Cmathit+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;mathit {P} = &amp;#92;mathit {BPP}&quot; class=&quot;latex&quot; /&gt;  if  &lt;img src=&quot;https://s0.wp.com/latex.php?latex=E&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=E&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=E&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;E&quot; class=&quot;latex&quot; /&gt;  requires  exponential  circuits:      Derandomizing the XOR lemma.  In 29th ACM Symp.&amp;nbsp;on the Theory of Computing      (STOC), pages 220–229. ACM, 1997.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [39]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XKarpLi82&quot;&gt;&lt;/a&gt;Richard&amp;nbsp;M.  Karp  and  Richard&amp;nbsp;J.  Lipton.    Turing  machines  that  take  advice.      L’Enseignement Math�matique. Revue Internationale. IIe S�rie, 28(3-4):191–209, 1982.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [40]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XKobayashi1985OnTS&quot;&gt;&lt;/a&gt;Kojiro Kobayashi.  On the structure of one-tape nondeterministic turing machine      time hierarchy. Theor. Comput. Sci., 40:175–193, 1985.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [41]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/toc/Kopparty018&quot;&gt;&lt;/a&gt;Swastik Kopparty and Srikanth Srinivasan. Certifying polynomials for AC\({}^{\mbox {0}}\)[\(\oplus \)] circuits,      with  applications  to  lower  bounds  and  circuit  compression.   Theory of Computing,      14(1):1–24, 2018.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [42]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/siamcomp/LarsenWY20&quot;&gt;&lt;/a&gt;Kasper&amp;nbsp;Green Larsen, Omri Weinstein, and Huacheng Yu. Crossing the logarithmic      barrier for dynamic boolean data structure lower bounds.  SIAM J. Comput., 49(5),      2020.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [43]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XLevin73&quot;&gt;&lt;/a&gt;Leonid&amp;nbsp;A.  Levin.    Universal  sequential  search  problems.    Problemy  Peredachi      Informatsii, 9(3):115–116, 1973.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [44]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XLundFoKaNi92&quot;&gt;&lt;/a&gt;Carsten Lund, Lance Fortnow, Howard Karloff, and Noam Nisan. Algebraic methods      for interactive proof systems. J.&amp;nbsp;of the ACM, 39(4):859–868, October 1992.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [45]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XLupanov58&quot;&gt;&lt;/a&gt;O.&amp;nbsp;B. Lupanov. A method of circuit synthesis. Izv. VUZ Radiofiz., 1:120–140, 1958.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [46]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XMaS87&quot;&gt;&lt;/a&gt;Wolfgang Maass and Amir Schorr. Speed-up of Turing machines with one work tape      and a two-way input tape. SIAM J.&amp;nbsp;on Computing, 16(1):195–202, 1987.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [47]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XBarrington89&quot;&gt;&lt;/a&gt;David&amp;nbsp;A.  Mix  Barrington.   Bounded-width  polynomial-size  branching  programs      recognize  exactly  those  languages  in  NC&lt;sup&gt;1&lt;/sup&gt;.   J.&amp;nbsp;of  Computer  and  System  Sciences,      38(1):150–164, 1989.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [48]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XNaN93&quot;&gt;&lt;/a&gt;Joseph Naor and Moni Naor.  Small-bias probability spaces: efficient constructions      and applications. SIAM J.&amp;nbsp;on Computing, 22(4):838–856, 1993.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [49]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XNechiporuk66&quot;&gt;&lt;/a&gt;E.&amp;nbsp;I. Nechiporuk. A boolean function. Soviet Mathematics-Doklady, 169(4):765–766,      1966.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [50]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XNep70&quot;&gt;&lt;/a&gt;Valery&amp;nbsp;A. Nepomnjaščiĭ. Rudimentary predicates and Turing calculations. Soviet      Mathematics-Doklady, 11(6):1462–1465, 1970.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [51]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XViolaNEU-ram2sat-neu-author&quot;&gt;&lt;/a&gt;NEU. From RAM to SAT. Available at &lt;a href=&quot;http://www.ccs.neu.edu/home/viola/&quot; rel=&quot;nofollow&quot;&gt;http://www.ccs.neu.edu/home/viola/&lt;/a&gt;, 2012.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [52]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/jcss/PapadimitriouY91&quot;&gt;&lt;/a&gt;Christos&amp;nbsp;H. Papadimitriou and Mihalis Yannakakis. Optimization, approximation,      and complexity classes. J. Comput. Syst. Sci., 43(3):425–440, 1991.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [53]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XPatrascu08Succincter&quot;&gt;&lt;/a&gt;Mihai Pǎtraşcu.  Succincter.  In 49th IEEE Symp.&amp;nbsp;on Foundations of Computer      Science (FOCS). IEEE, 2008.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [54]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XPPST83&quot;&gt;&lt;/a&gt;Wolfgang&amp;nbsp;J. Paul, Nicholas Pippenger, Endre Szemer�di, and William&amp;nbsp;T. Trotter.      On determinism versus non-determinism and related problems (preliminary version). In      IEEE Symp.&amp;nbsp;on Foundations of Computer Science (FOCS), pages 429–438, 1983.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [55]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XPippengerF79&quot;&gt;&lt;/a&gt;Nicholas Pippenger and Michael&amp;nbsp;J. Fischer. Relations among complexity measures.      J.&amp;nbsp;of the ACM, 26(2):361–381, 1979.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [56]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XRaz87&quot;&gt;&lt;/a&gt;Alexander Razborov. Lower bounds on the dimension of schemes of bounded depth      in a complete basis containing the logical addition function.  Akademiya Nauk SSSR.      Matematicheskie Zametki, 41(4):598–607, 1987.  English translation in Mathematical      Notes of the Academy of Sci. of the USSR, 41(4):333-338, 1987.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [57]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XReingold08&quot;&gt;&lt;/a&gt;Omer Reingold. Undirected connectivity in log-space. J.&amp;nbsp;of the ACM, 55(4), 2008.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [58]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/siamcomp/Robson84&quot;&gt;&lt;/a&gt;J.&amp;nbsp;M.  Robson.    N  by  N  checkers  is  exptime  complete.    SIAM  J.  Comput.,      13(2):252–267, 1984.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [59]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:conf/coco/Santhanam01&quot;&gt;&lt;/a&gt;Rahul Santhanam.   On separators, segregators and time versus space.   In IEEE      Conf.&amp;nbsp;on Computational Complexity (CCC), pages 286–294, 2001.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;                                                                                                                                                                                      [60]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XSAVITCH1970177&quot;&gt;&lt;/a&gt;Walter&amp;nbsp;J. Savitch.  Relationships between nondeterministic and deterministic tape      complexities. Journal of Computer and System Sciences, 4(2):177–192, 1970.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [61]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/siamcomp/Schonhage80&quot;&gt;&lt;/a&gt;Arnold Sch�nhage. Storage modification machines. SIAM J. Comput., 9(3):490–508,      1980.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [62]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XShamir92&quot;&gt;&lt;/a&gt;Adi Shamir. IP = PSPACE. J.&amp;nbsp;of the ACM, 39(4):869–877, October 1992.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [63]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XMR29860&quot;&gt;&lt;/a&gt;Claude&amp;nbsp;E. Shannon. The synthesis of two-terminal switching circuits. Bell System      Tech. J., 28:59–98, 1949.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [64]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XSho90&quot;&gt;&lt;/a&gt;Victor Shoup. New algorithms for finding irreducible polynomials over finite fields.      Mathematics of Computation, 54(189):435–447, 1990.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [65]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XSiegel04&quot;&gt;&lt;/a&gt;Alan Siegel. On universal classes of extremely random constant-time hash functions.      SIAM J.&amp;nbsp;on Computing, 33(3):505–543, 2004.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [66]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XSip83b&quot;&gt;&lt;/a&gt;Michael Sipser. A complexity theoretic approach to randomness. In ACM Symp.&amp;nbsp;on      the Theory of Computing (STOC), pages 330–335, 1983.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [67]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XSmo87&quot;&gt;&lt;/a&gt;Roman Smolensky.  Algebraic methods in the theory of lower bounds for Boolean      circuit complexity.  In 19th ACM Symp.&amp;nbsp;on the Theory of Computing (STOC), pages      77–82. ACM, 1987.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [68]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XMR2145856&quot;&gt;&lt;/a&gt;Larry Stockmeyer and Albert&amp;nbsp;R. Meyer.  Cosmological lower bound on the circuit      complexity of a small problem in logic. J. ACM, 49(6):753–784, 2002.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [69]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XToda91&quot;&gt;&lt;/a&gt;Seinosuke Toda.   PP is as hard as the polynomial-time hierarchy.   SIAM J.&amp;nbsp;on      Computing, 20(5):865–877, 1991.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [70]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/x/Turing37&quot;&gt;&lt;/a&gt;Alan&amp;nbsp;M.   Turing.      On   computable   numbers,   with   an   application   to   the      entscheidungsproblem. Proc. London Math. Soc., s2-42(1):230–265, 1937.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [71]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XVal77&quot;&gt;&lt;/a&gt;Leslie&amp;nbsp;G.  Valiant.   Graph-theoretic  arguments  in  low-level  complexity.   In  6th      Symposium on Mathematical Foundations of Computer Science, volume&amp;nbsp;53 of Lecture      Notes in Computer Science, pages 162–176. Springer, 1977.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [72]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/tcs/ValiantV86&quot;&gt;&lt;/a&gt;Leslie&amp;nbsp;G. Valiant and Vijay&amp;nbsp;V. Vazirani. NP is as easy as detecting unique solutions.      Theor. Comput. Sci., 47(3):85–93, 1986.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [73]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XMelkebeek06&quot;&gt;&lt;/a&gt;Dieter  van  Melkebeek.   A  survey  of  lower  bounds  for  satisfiability  and  related      problems. Foundations and Trends in Theoretical Computer Science, 2(3):197–303, 2006.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [74]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/tcs/MelkebeekR05&quot;&gt;&lt;/a&gt;Dieter van Melkebeek and Ran Raz.  A time lower bound for satisfiability.  Theor.      Comput. Sci., 348(2-3):311–320, 2005.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [75]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/tcs/Vinodchandran05&quot;&gt;&lt;/a&gt;N.&amp;nbsp;V. Vinodchandran.  A note on the circuit complexity of PP.  Theor. Comput.      Sci., 347(1-2):415–418, 2005.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [76]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;Xviola-gems09&quot;&gt;&lt;/a&gt;Emanuele Viola.  Gems of theoretical computer science.  Lecture notes of the class      taught           at           Northeastern           University.           Available           at      &lt;a href=&quot;http://www.ccs.neu.edu/home/viola/classes/gems-08/index.html&quot; rel=&quot;nofollow&quot;&gt;http://www.ccs.neu.edu/home/viola/classes/gems-08/index.html&lt;/a&gt;, 2009.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [77]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XViolaBPvsE&quot;&gt;&lt;/a&gt;Emanuele Viola.  On approximate majority and probabilistic time.  Computational      Complexity, 18(3):337–375, 2009.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [78]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;Xviola-FTTCS09&quot;&gt;&lt;/a&gt;Emanuele Viola. On the power of small-depth computation. Foundations and Trends      in Theoretical Computer Science, 5(1):1–72, 2009.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [79]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XViola-xxx&quot;&gt;&lt;/a&gt;Emanuele Viola.  Reducing 3XOR to listing triangles, an exposition.  Available at      &lt;a href=&quot;http://www.ccs.neu.edu/home/viola/&quot; rel=&quot;nofollow&quot;&gt;http://www.ccs.neu.edu/home/viola/&lt;/a&gt;, 2011.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [80]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;Xviola-triz&quot;&gt;&lt;/a&gt;Emanuele Viola. Bit-probe lower bounds for succinct data structures. SIAM J.&amp;nbsp;on      Computing, 41(6):1593–1604, 2012.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [81]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;Xviola-datastructurelb-implies-cclb&quot;&gt;&lt;/a&gt;Emanuele Viola.  Lower bounds for data structures with space close to maximum      imply  circuit  lower  bounds.    Theory  of  Computing,  15:1–9,  2019.    Available  at      &lt;a href=&quot;http://www.ccs.neu.edu/home/viola/&quot; rel=&quot;nofollow&quot;&gt;http://www.ccs.neu.edu/home/viola/&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [82]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;Xviola-tm&quot;&gt;&lt;/a&gt;Emanuele  Viola.   Pseudorandom  bits  and  lower  bounds  for  randomized  turing      machines. Theory of Computing, 18(10):1–12, 2022.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;authors&quot;&gt;By Manu&lt;/p&gt;
  </content>
    <author>
      <name>Emanuele Viola</name>
      <uri>https://emanueleviola.wordpress.com</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">CCI: jobs: Two Ph.D. Students at KTH Royal Institute of Technology (apply by June 1, 2023)</title>
    <link href="https://cstheory-jobs.org/2023/05/14/two-ph-d-students-at-kth-royal-institute-of-technology-apply-by-june-1-2023/"/>
    <id>http://cstheory-jobs.org/2023/05/14/two-ph-d-students-at-kth-royal-institute-of-technology-apply-by-june-1-2023/</id>
    <updated>2023-05-14T13:17:45+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;KTH Royal Institute for Technology is hiring for two Ph.D. students in algorithms and data analysis, with a focus on graph algorithms. The Ph.D. students will work under the supervision of assistant professor Stefan Neumann.&lt;/p&gt;
&lt;p&gt;These are two full positions (100% employment) with opportunities for research visits abroad.&lt;/p&gt;
&lt;p&gt;Website: &lt;a href=&quot;https://www.kth.se/en/om/work-at-kth/lediga-jobb/what:job/jobID:625561/where:4/&quot;&gt;https://www.kth.se/en/om/work-at-kth/lediga-jobb/what:job/jobID:625561/where:4/&lt;/a&gt;&lt;br /&gt;
Email: neum@kth.se&lt;/p&gt;
&lt;p class=&quot;authors&quot;&gt;By shacharlovett&lt;/p&gt;
  </content>
    <author>
      <name>CCI: jobs</name>
      <uri>https://cstheory-jobs.org</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">ECCC Papers: TR23-071 |  Sampling and Certifying Symmetric Functions | 

	Artur Riazanov, 

	Yuval Filmus, 

	Dmitry Sokolov, 

	Itai Leigh</title>
    <link href="https://eccc.weizmann.ac.il/report/2023/071"/>
    <id>https://eccc.weizmann.ac.il/report/2023/071</id>
    <updated>2023-05-14T11:04:25+00:00</updated>
    <content type="html" xml:lang="en">
    A circuit $\mathcal{C}$ samples a distribution $\mathbf{X}$ with an error $\epsilon$ if the statistical distance between the output of $\mathcal{C}$ on the uniform input and $\mathbf{X}$ is $\epsilon$. We study the hardness of sampling a uniform distribution over the set of $n$-bit strings of Hamming weight $k$ denoted by $\mathbf{U}^n_k$ for decision forests, i.e. every output bit is computed as a decision tree of the inputs. For every $k$ there is an $O(\log n)$-depth decision forest sampling $\mathbf{U}^n_k$ with an inverse-polynomial error [Viola 2012, Czumaj 2015]. We show that for every $\epsilon &amp;gt; 0$ there exists $\tau$ such that for decision depth $\tau \log (n/k) / \log \log (n/k)$, the error for sampling $\mathbf{U}_k^n$ is at least $1-\epsilon$. Our result is based on the recent robust sunflower lemma [Alweiss, Lovett, Wu, Zhang 2021, Rao 2019].
  Our second result is about matching a set of $n$-bit strings with the image of a $d$-local circuit, i.e. such that each output bit depends on at most $d$ input bits. We study the set of all $n$-bit strings whose Hamming weight is at least $n/2$. We improve the previously known locality lower bound from $\Omega(\log^* n)$ [Beyersdorff, Datta, Krebs, Mahajan, Scharfenberger-Fabian, Sreenivasaiah, Thomas and Vollmer, 2013] to $\Omega(\sqrt{\log n})$, leaving only a quartic gap from the best upper bound of $O(\log^2 n)$.
  </content>
    <author>
      <name>ECCC Papers</name>
      <uri>https://eccc.weizmann.ac.il/</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">David Eppstein: Coloring the plane for generic norms</title>
    <link href="https://11011110.github.io/blog/2023/05/13/coloring-plane-generic.html"/>
    <id>https://11011110.github.io/blog/2023/05/13/coloring-plane-generic</id>
    <updated>2023-05-13T17:09:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;Noga Alon recently stopped by my department earlier this month to give two talks. During his visit, he pointed me to some interesting recent work he had done on coloring the plane, buried in the discussion at the end of his preprint “Unit and distinct distances in typical norms” (&lt;a href=&quot;https://arxiv.org/abs/2302.09058&quot;&gt;arXiv:2302.09058&lt;/a&gt;, with Matija Bucić and Lisa Sauermann). Recall that the still-unsolved &lt;a href=&quot;https://en.wikipedia.org/wiki/Hadwiger%E2%80%93Nelson_problem&quot;&gt;Hadwiger–Nelson problem&lt;/a&gt; asks how many colors are needed to color the points of the plane so that no two points at distance one from each other have the same color. The figure below shows a 7-coloring in the pattern of a hexagonal tiling, with this property, so at most seven colors are needed. The black unit distance graph outlined in the same figure, the &lt;a href=&quot;/blog/2011/11/29/moser-spindle.html&quot;&gt;Moser spindle&lt;/a&gt;, requires four colors, but by now much larger and more complicated unit distance graphs are known that force the number of colors to be at least five.&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;/blog/assets/2023/Hadwiger-Nelson.svg&quot; alt=&quot;Seven-coloring of the plane with superimposed Moser spindle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The preprint asks, what if we use a different distance function for the plane, defined by a non-Euclidean &lt;a href=&quot;https://en.wikipedia.org/wiki/Norm_(mathematics)&quot;&gt;norm&lt;/a&gt;? The answer turns out to be very different: for most such distances, the optimal number of colors is four.&lt;/p&gt;

&lt;p&gt;Any norm in the \(d\)-dimensional space \(\mathbb{R}^d\) can be described by its unit ball, a centrally symmetric convex body, and any centrally symmetric convex body defines a norm. The distance between two points is measured by the factor you would need to scale the body so that if you center it at one of the two points it touches the other one. A unit vector, for a distance defined in this way, is just a point on the boundary of the unit ball. For Euclidean distance in the plane the unit ball is a circular disk, and it is also common in computational geometry to consider norms whose unit ball is a regular polygon (with evenly many sides), such as a square or hexagon. But infinitely many other less-regular shapes are also possible, each defining its own distance. Because these distances are different from each other, the number of colors they need may also be different, and may be easier to compute. For instance, for a square unit ball, you can use a square tiling instead of the hexagonal one and color the tiling with only four colors (being careful of how to handle boundary points) so that no two points at unit distance have the same color:&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;/blog/assets/2023/plaid.svg&quot; alt=&quot;Four-coloring of the plane for a square norm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Alon, Bucić, and Sauermann approach this problem by treating \(\mathbb{R}^d\) as an infinite-dimensional vector space over the rational numbers rather than a \(d\)-dimensional vector space over the real numbers, and asking questions about which subsets of the unit vectors are rationally independent (treating a unit vector and its negation as being the same for this purpose). That means that there is no way to produce one of the vectors as a weighted combination of other vectors in the same set, with rational numbers as the weights. This is much in the same spirit as &lt;a href=&quot;/blog/2022/04/03/dissection-into-rectangles.html&quot;&gt;using Dehn invariants to study polygonal dissections&lt;/a&gt; where again, it is rational dependence more than real dependence that is central.&lt;/p&gt;

&lt;p&gt;For a polygonal distance, any two unit vectors on the same side of a polygon have infinitely many rational combinations that are also unit vectors. If \(u\) and \(v\) are unit vectors on one side of a convex polygon, and \(p\) is any rational number with \(0\lt p\lt 1\), then \(pu+(1-p)v\) is a rational combination that lies between \(u\) and \(v\) on the same side of the polygon. Because it is on the boundary of the polygon, it is a unit vector. For the Euclidean distance, we have to be more careful, but there still can be infinitely many rational combinations that are also unit vectors. For instance, if \(x=(1,0)\) and \(y=(0,1)\) are the axis-parallel unit vectors of a Cartesian coordinate system, their rational combination \(\tfrac12 x + \tfrac12 y = (\tfrac12,\tfrac12)\) is not a unit vector for Euclidean distance (its length is \(1/\sqrt2\)), and the unit vector in the same direction, \((1/\sqrt2,1/\sqrt2)\), is not a rational combination of \(x\) and \(y\). However, if \(a^2+b^2=c^2\) is any integer Pythagorean triple, the vector \(\tfrac{a}{c}x+\tfrac{b}{c}y=(\tfrac{a}{c},\tfrac{b}{c})\) is both a unit vector and a rational combination of \(x\) and \(y\). Because there are infinitely many Pythagorean triples, \(x\) and \(y\) have infinitely many unit-vector rational combinations.&lt;/p&gt;

&lt;p&gt;What Alon, Bucić, and Sauermann show is that for “most” norms in a certain technical sense (a &lt;a href=&quot;https://en.wikipedia.org/wiki/Comeager&quot;&gt;comeager&lt;/a&gt; set of norms in a certain topological space of norms), rational combinations are much less common. More precisely, they prove the following statements, which are equivalent to each other by standard results in the theory of &lt;a href=&quot;https://en.wikipedia.org/wiki/Matroid_partitioning&quot;&gt;matroid partitions&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Every finite set \(U\) of unit vectors, for a \(d\)-dimensional generic norm, has rational rank \(\ge \vert U\vert/d\)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If \(U\) is a finite set of unit vectors for a \(d\)-dimensional generic norm, then every subset of \(k\) vectors from \(U\) has at most \(kd\) rational combinations in \(U\) (including themselves, but not counting negations as different).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Every finite set of unit vectors for a \(d\)-dimensional generic norm can be partitioned into at most \(d\) subsets, so that the vectors within each subset are rationally independent.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we give each of these \(d\) subsets a color, and use these colors for the edges of any finite unit distance graph, then every two parallel edges will have the same color, and every monochromatic cycle will have edges that can be paired into parallel edges in opposite directions from each other (like the edges of a square or regular hexagon). This means that the subgraph of edges of any single color will be bipartite. We can color each of these subgraphs with two colors, and combine the subgraphs to get \(2^d\) colors for the whole unit distance graph. Let’s see how such a coloring might look for the Moser spindle:&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;/blog/assets/2023/spindle-color.svg&quot; alt=&quot;Four-coloring the Moser spindle by partitioning it into bipartite subgraphs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this example, the blue-edge subgraph has two cycles, both rhombi. Each edge of a rhombus can be paired with another parallel edge; if you travel around the rhombus you will follow these two edges in opposite directions. The yellow-edge subgraph has no cycles at all. Combining the 2-colorings of the two subgraphs gives us a 4-coloring of the whole Moser spindle.&lt;/p&gt;

&lt;p&gt;This method 4-colors every finite unit distance graph, for a generic norm, but not the whole plane at once. To color the whole plane, the &lt;a href=&quot;https://en.wikipedia.org/wiki/De_Bruijn%E2%80%93Erd%C5%91s_theorem_(graph_theory)&quot;&gt;De Bruijn–Erdős theorem&lt;/a&gt; can be used. This is a theorem that, whenever all finite subgraphs of an infinite graph can be colored with a certain finite number of colors, the whole graph can be colored with the same number of colors. It’s possible to construct a copy of the Moser spindle as a unit distance graph for any norm, by using the intermediate value theorem to find equilateral triangles supported by any edge and then rotating one pair of triangles with respect to another until getting another unit distance. Therefore, four colors is optimal. But the 4-coloring you get is a nasty set-theoretic thing, impossible to visualize, unlike the nice tiling-based 7-coloring of the Euclidean plane.&lt;/p&gt;

&lt;p&gt;Noga left me with some related but unsolved questions: Can we find an explicit example of a norm with this few-rational-combinations property? It would need to be strictly convex (the boundaries of its balls could not include any line segments); can we find an explicit example of a strictly-convex norm requiring only four colors? Is it possible for such a norm to have a simple finite description? And what about smooth norms, or \(L^p\)-norms (possibly for non-integer \(p\))?&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://mathstodon.xyz/@11011110/110364160343375481&quot;&gt;Discuss on Mastodon&lt;/a&gt;)&lt;/p&gt;&lt;p class=&quot;authors&quot;&gt;By David Eppstein&lt;/p&gt;
  </content>
    <author>
      <name>David Eppstein</name>
      <uri>https://11011110.github.io/blog/</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">CCI: jobs: Postdoc at Cambridge (apply by July 1, 2023)</title>
    <link href="https://cstheory-jobs.org/2023/05/12/postdoc-at-cambridge-apply-by-july-1-2023/"/>
    <id>http://cstheory-jobs.org/2023/05/12/postdoc-at-cambridge-apply-by-july-1-2023/</id>
    <updated>2023-05-12T10:03:39+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;A postdoc position in Quantum Algorithms and Complexity at the University of Cambridge, under the supervision of Sergii Strelchuk and Tom Gur, is available.&lt;/p&gt;
&lt;p&gt;Website: &lt;a href=&quot;https://www.maths.cam.ac.uk/person/ss870&quot;&gt;https://www.maths.cam.ac.uk/person/ss870&lt;/a&gt;, &lt;a href=&quot;https://www.dcs.warwick.ac.uk/~tomgur/&quot;&gt;https://www.dcs.warwick.ac.uk/~tomgur/&lt;/a&gt;&lt;br /&gt;
Email: ss870@cam.ac.uk, tom.gur@warwick.ac.uk&lt;/p&gt;
&lt;p class=&quot;authors&quot;&gt;By shacharlovett&lt;/p&gt;
  </content>
    <author>
      <name>CCI: jobs</name>
      <uri>https://cstheory-jobs.org</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Constant-depth circuits vs. monotone circuits</title>
    <link href="http://arxiv.org/abs/2305.06821"/>
    <id>http://arxiv.org/abs/2305.06821</id>
    <updated>2023-05-12T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Cavalar_B/0/1/0/all/0/1&quot;&gt;Bruno P. Cavalar&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Oliveira_I/0/1/0/all/0/1&quot;&gt;Igor C. Oliveira&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We establish new separations between the power of monotone and general
(non-monotone) Boolean circuits:
&lt;/p&gt;
&lt;p&gt;- For every $k \geq 1$, there is a monotone function in ${\sf AC^0}$ that
requires monotone circuits of depth $\Omega(\log^k n)$. This significantly
extends a classical result of Okol&#39;nishnikova (1982) and Ajtai and Gurevich
(1987). In addition, our separation holds for a monotone graph property, which
was unknown even in the context of ${\sf AC^0}$ versus ${\sf mAC^0}$.
&lt;/p&gt;
&lt;p&gt;- For every $k \geq 1$, there is a monotone function in ${\sf AC^0}[\oplus]$
that requires monotone circuits of size $\exp(\Omega(\log^k n))$. This makes
progress towards a question posed by Grigni and Sipser (1992).
&lt;/p&gt;
&lt;p&gt;These results show that constant-depth circuits can be more efficient than
monotone circuits when computing monotone functions.
&lt;/p&gt;
&lt;p&gt;In the opposite direction, we observe that non-trivial simulations are
possible in the absence of parity gates: every monotone function computed by an
${\sf AC^0}$ circuit of size $s$ and depth $d$ can be computed by a monotone
circuit of size $2^{n - n/O(\log s)^{d-1}}$. We show that the existence of
significantly faster monotone simulations would lead to breakthrough circuit
lower bounds. In particular, if every monotone function in ${\sf AC^0}$ admits
a polynomial size monotone circuit, then ${\sf NC^2}$ is not contained in ${\sf
NC^1}$ .
&lt;/p&gt;
&lt;p&gt;Finally, we revisit our separation result against monotone circuit size and
investigate the limits of our approach, which is based on a monotone lower
bound for constraint satisfaction problems established by G\&quot;o\&quot;os et al.
(2019) via lifting techniques. Adapting results of Schaefer (1978) and Allender
et al. (2009), we obtain an unconditional classification of the monotone
circuit complexity of Boolean-valued CSPs via their polymorphisms. This result
and the consequences we derive from it might be of independent interest.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: A Near-Optimal Deterministic Distributed Synchronizer</title>
    <link href="http://arxiv.org/abs/2305.06452"/>
    <id>http://arxiv.org/abs/2305.06452</id>
    <updated>2023-05-12T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Ghaffari_M/0/1/0/all/0/1&quot;&gt;Mohsen Ghaffari&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Trygub_A/0/1/0/all/0/1&quot;&gt;Anton Trygub&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We provide the first deterministic distributed synchronizer with near-optimal
time complexity and message complexity overheads. Concretely, given any
distributed algorithm $\mathcal{A}$ that has time complexity $T$ and message
complexity $M$ in the synchronous message-passing model (subject to some care
in defining the model), the synchronizer provides a distributed algorithm
$\mathcal{A}&#39;$ that runs in the asynchronous message-passing model with time
complexity $T \cdot poly(\log n)$ and message complexity $(M+m)\cdot poly(\log
n)$. Here, $n$ and $m$ denote the number of nodes and edges in the network,
respectively. The synchronizer is deterministic in the sense that if algorithm
$\mathcal{A}$ is deterministic, then so is algorithm $\mathcal{A}&#39;$.
Previously, only a randomized synchronizer with near-optimal overheads was
known by seminal results of Awerbuch, Patt-Shamir, Peleg, and Saks [STOC 1992]
and Awerbuch and Peleg [FOCS 1990]. We also point out and fix some inaccuracies
in these prior works.
&lt;/p&gt;
&lt;p&gt;As concrete applications of our synchronizer, we resolve some longstanding
and fundamental open problems in distributed algorithms: we get the first
asynchronous deterministic distributed algorithms with near-optimal time and
message complexities for leader election, breadth-first search tree, and
minimum spanning tree computations: these all have message complexity
$\tilde{O}(m)$ message complexity. The former two have $\tilde{O}(D)$ time
complexity, where $D$ denotes the network diameter, and the latter has
$\tilde{O}(D+\sqrt{n})$ time complexity. All these bounds are optimal up to
logarithmic factors. Previously all such near-optimal algorithms were either
restricted to the synchronous setting or required randomization.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Spectral Clustering on Large Datasets: When Does it Work? Theory from Continuous Clustering and Density Cheeger-Buser</title>
    <link href="http://arxiv.org/abs/2305.06541"/>
    <id>http://arxiv.org/abs/2305.06541</id>
    <updated>2023-05-12T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Chu_T/0/1/0/all/0/1&quot;&gt;Timothy Chu&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Miller_G/0/1/0/all/0/1&quot;&gt;Gary Miller&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Walkington_N/0/1/0/all/0/1&quot;&gt;Noel Walkington&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Spectral clustering is one of the most popular clustering algorithms that has
stood the test of time. It is simple to describe, can be implemented using
standard linear algebra, and often finds better clusters than traditional
clustering algorithms like $k$-means and $k$-centers. The foundational
algorithm for two-way spectral clustering, by Shi and Malik, creates a
geometric graph from data and finds a spectral cut of the graph.
&lt;/p&gt;
&lt;p&gt;In modern machine learning, many data sets are modeled as a large number of
points drawn from a probability density function. Little is known about when
spectral clustering works in this setting -- and when it doesn&#39;t. Past
researchers justified spectral clustering by appealing to the graph Cheeger
inequality (which states that the spectral cut of a graph approximates the
``Normalized Cut&#39;&#39;), but this justification is known to break down on large
data sets.
&lt;/p&gt;
&lt;p&gt;We provide theoretically-informed intuition about spectral clustering on
large data sets drawn from probability densities, by proving when a continuous
form of spectral clustering considered by past researchers (the unweighted
spectral cut of a probability density) finds good clusters of the underlying
density itself. Our work suggests that Shi-Malik spectral clustering works well
on data drawn from mixtures of Laplace distributions, and works poorly on data
drawn from certain other densities, such as a density we call the `square-root
trough&#39;.
&lt;/p&gt;
&lt;p&gt;Our core theorem proves that weighted spectral cuts have low weighted
isoperimetry for all probability densities. Our key tool is a new Cheeger-Buser
inequality for all probability densities, including discontinuous ones.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Optimal Algorithms for Bounded Weighted Edit Distance</title>
    <link href="http://arxiv.org/abs/2305.06659"/>
    <id>http://arxiv.org/abs/2305.06659</id>
    <updated>2023-05-12T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Cassis_A/0/1/0/all/0/1&quot;&gt;Alejandro Cassis&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kociumaka_T/0/1/0/all/0/1&quot;&gt;Tomasz Kociumaka&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Wellnitz_P/0/1/0/all/0/1&quot;&gt;Philip Wellnitz&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The edit distance of two strings is the minimum number of insertions,
deletions, and substitutions of characters needed to transform one string into
the other. The textbook dynamic-programming algorithm computes the edit
distance of two length-$n$ strings in $O(n^2)$ time, which is optimal up to
subpolynomial factors under SETH. An established way of circumventing this
hardness is to consider the bounded setting, where the running time is
parameterized by the edit distance $k$. A celebrated algorithm by Landau and
Vishkin (JCSS &#39;88) achieves time $O(n + k^2)$, which is optimal as a function
of $n$ and $k$.
&lt;/p&gt;
&lt;p&gt;Most practical applications rely on a more general weighted edit distance,
where each edit has a weight depending on its type and the involved characters
from the alphabet $\Sigma$. This is formalized through a weight function $w :
\Sigma\cup\{\varepsilon\}\times\Sigma\cup\{\varepsilon\}\to\mathbb{R}$
normalized so that $w(a,a)=0$ and $w(a,b)\geq 1$ for all $a,b \in
\Sigma\cup\{\varepsilon\}$ with $a \neq b$; the goal is to find an alignment of
the two strings minimizing the total weight of edits. The $O(n^2)$-time
algorithm supports this setting seamlessly, but only very recently, Das,
Gilbert, Hajiaghayi, Kociumaka, and Saha (STOC &#39;23) gave the first non-trivial
algorithm for the bounded version, achieving time $O(n + k^5)$. While this
running time is linear for $k\le n^{1/5}$, it is still very far from the bound
$O(n+k^2)$ achievable in the unweighted setting.
&lt;/p&gt;
&lt;p&gt;In this paper, we essentially close this gap by showing both an improved
$\tilde O(n+\sqrt{nk^3})$-time algorithm and, more surprisingly, a matching
lower bound: Conditioned on the All-Pairs Shortest Paths (APSP) hypothesis, our
running time is optimal for $\sqrt{n}\le k\le n$ (up to subpolynomial factors).
This is the first separation between the complexity of the weighted and
unweighted edit distance problems.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Characterizing the impact of last-level cache replacement policies on big-data workloads</title>
    <link href="http://arxiv.org/abs/2305.06696"/>
    <id>http://arxiv.org/abs/2305.06696</id>
    <updated>2023-05-12T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Jamet_A/0/1/0/all/0/1&quot;&gt;Alexandre Valentin Jamet&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Alvarez_L/0/1/0/all/0/1&quot;&gt;Lluc Alvarez&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Casas_M/0/1/0/all/0/1&quot;&gt;Marc Casas&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In recent years, graph-processing has become an essential class of workloads
with applications in a rapidly growing number of fields. Graph-processing
typically uses large input sets, often in multi-gigabyte scale, and
data-dependent graph traversal methods exhibiting irregular memory access
patterns. Recent work demonstrates that, due to the highly irregular memory
access patterns of data-dependent graph traversals, state-of-the-art
graph-processing workloads spend up to 80 % of the total execution time waiting
for memory accesses to be served by the DRAM. The vast disparity between the
Last Level Cache (LLC) and main memory latencies is a problem that has been
addressed for years in computer architecture. One of the prevailing approaches
when it comes to mitigating this performance gap between modern CPUs and DRAM
is cache replacement policies. In this work, we characterize the challenges
drawn by graph-processing workloads and evaluate the most relevant cache
replacement policies.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Minimal dominating sets enumeration with FPT-delay parameterized by the degeneracy and maximum degree</title>
    <link href="http://arxiv.org/abs/2305.06974"/>
    <id>http://arxiv.org/abs/2305.06974</id>
    <updated>2023-05-12T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Bartier_V/0/1/0/all/0/1&quot;&gt;Valentin Bartier&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Defrain_O/0/1/0/all/0/1&quot;&gt;Oscar Defrain&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Inerney_F/0/1/0/all/0/1&quot;&gt;Fionn Mc Inerney&lt;/a&gt;&lt;/p&gt;&lt;p&gt;At STOC 2002, Eiter, Gottlob, and Makino presented a technique called ordered
generation that yields an $n^{O(d)}$-delay algorithm listing all minimal
transversals of an $n$-vertex hypergraph of degeneracy $d$, for an appropriate
definition of degeneracy. Recently at IWOCA 2019, Conte, Kant\&#39;e, Marino, and
Uno asked whether, even for a more restrictive notion of degeneracy, this
XP-delay algorithm parameterized by $d$ could be made FPT-delay parameterized
by $d$ and the maximum degree $\Delta$, i.e., an algorithm with delay
$f(d,\Delta)\cdot n^{O(1)}$ for some computable function $f$. We answer this
question in the affirmative whenever the hypergraph corresponds to the closed
neighborhoods of a graph, i.e., we show that the intimately related problem of
enumerating minimal dominating sets in graphs admits an FPT-delay algorithm
parameterized by the degeneracy and the maximum degree.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Fair Price Discrimination</title>
    <link href="http://arxiv.org/abs/2305.07006"/>
    <id>http://arxiv.org/abs/2305.07006</id>
    <updated>2023-05-12T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Banerjee_S/0/1/0/all/0/1&quot;&gt;Siddhartha Banerjee&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Munagala_K/0/1/0/all/0/1&quot;&gt;Kamesh Munagala&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Shen_Y/0/1/0/all/0/1&quot;&gt;Yiheng Shen&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Wang_K/0/1/0/all/0/1&quot;&gt;Kangning Wang&lt;/a&gt;&lt;/p&gt;&lt;p&gt;A seller is pricing identical copies of a good to a stream of unit-demand
buyers. Each buyer has a value on the good as his private information. The
seller only knows the empirical value distribution of the buyer population and
chooses the revenue-optimal price. We consider a widely studied third-degree
price discrimination model where an information intermediary with perfect
knowledge of the arriving buyer&#39;s value sends a signal to the seller, hence
changing the seller&#39;s posterior and inducing the seller to set a personalized
posted price. Prior work of Bergemann, Brooks, and Morris (American Economic
Review, 2015) has shown the existence of a signaling scheme that preserves
seller revenue, while always selling the item, hence maximizing consumer
surplus. In a departure from prior work, we ask whether the consumer surplus
generated is fairly distributed among buyers with different values. To this
end, we aim to maximize welfare functions that reward more balanced surplus
allocations.
&lt;/p&gt;
&lt;p&gt;Our main result is the surprising existence of a novel signaling scheme that
simultaneously $8$-approximates all welfare functions that are non-negative,
monotonically increasing, symmetric, and concave, compared with any other
signaling scheme. Classical examples of such welfare functions include the
utilitarian social welfare, the Nash welfare, and the max-min welfare. Such a
guarantee cannot be given by any consumer-surplus-maximizing scheme -- which
are the ones typically studied in the literature. In addition, our scheme is
socially efficient, and has the fairness property that buyers with higher
values enjoy higher expected surplus, which is not always the case for existing
schemes.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">ECCC Papers: TR23-070 |  Bounded Relativization | 

	Shuichi Hirahara, 

	Zhenjian Lu, 

	Hanlin Ren</title>
    <link href="https://eccc.weizmann.ac.il/report/2023/070"/>
    <id>https://eccc.weizmann.ac.il/report/2023/070</id>
    <updated>2023-05-11T19:05:26+00:00</updated>
    <content type="html" xml:lang="en">
    Relativization is one of the most fundamental concepts in complexity theory, which explains the difficulty of resolving major open problems. In this paper, we propose a weaker notion of relativization called *bounded relativization*. For a complexity class $C$, we say that a statement is *$C$-relativizing* if the statement holds relative to every oracle $O$ in $C$. It is easy to see that every result that relativizes also $C$-relativizes for every complexity class $C$. On the other hand, we observe that many non-relativizing results, such as $IP = PSPACE$, are in fact $PSPACE$-relativizing.

First, we use the idea of bounded relativization to obtain new lower bound results, including the following nearly maximum circuit lower bound: for every constant $\varepsilon &amp;gt; 0$, $BPE^{MCSP}/2^{\varepsilon n} \not\subseteq SIZE[2^n/n]$. We prove this by $PSPACE$-relativizing the recent pseudodeterministic pseudorandom generator by Lu, Oliveira, and Santhanam (STOC 2021).

Next, we study the limitations of $PSPACE$-relativizing proof techniques, and show that a seemingly minor improvement over the known results using $PSPACE$-relativizing techniques would imply a breakthrough separation $NP \ne L$. For example:
$\bullet$ Impagliazzo and Wigderson (JCSS 2001) proved that if $EXP \ne BPP$, then $BPP$ admits infinitely-often subexponential-time heuristic derandomization. We show that their result is $PSPACE$-relativizing, and that improving it to worst-case derandomization using $PSPACE$-relativizing techniques implies $NP \ne L$.
$\bullet$ Oliveira and Santhanam (STOC 2017) recently proved that every dense subset in $P$ admits an infinitely-often subexponential-time pseudodeterministic construction, which we observe is $PSPACE$-relativizing. Improving this to almost-everywhere (pseudodeterministic) or (infinitely-often) deterministic constructions by $PSPACE$-relativizing techniques implies $NP \ne L$.
$\bullet$ Santhanam (SICOMP 2009) proved that $pr-MA$ does not have fixed polynomial-size circuits. This lower bound can be shown $PSPACE$-relativizing, and we show that improving it to an almost-everywhere lower bound using $PSPACE$-relativizing techniques implies $NP \ne L$.

In fact, we show that if we can use $PSPACE$-relativizing techniques to obtain the above-mentioned improvements, then $PSPACE \ne EXPH$. We obtain our barrier results by constructing suitable oracles computable in $EXPH$ relative to which these improvements are impossible.
  </content>
    <author>
      <name>ECCC Papers</name>
      <uri>https://eccc.weizmann.ac.il/</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">ECCC Papers: TR23-069 |  Constant-depth circuits vs. monotone circuits | 

	Bruno Pasqualotto Cavalar, 

	Igor Carboni Oliveira</title>
    <link href="https://eccc.weizmann.ac.il/report/2023/069"/>
    <id>https://eccc.weizmann.ac.il/report/2023/069</id>
    <updated>2023-05-11T15:29:27+00:00</updated>
    <content type="html" xml:lang="en">
    We establish new separations between the power of monotone and general (non-monotone) Boolean circuits:

- For every $k \geq 1$, there is a monotone function in ${\rm AC^0}$ (constant-depth poly-size circuits) that requires monotone circuits of depth $\Omega(\log^k n)$. This significantly extends a classical result of Okol&amp;#39;nishnikova (1982) and Ajtai and Gurevich (1987). In addition, our separation holds for a monotone graph property, which was unknown even in the context of ${\rm AC^0}$ versus ${\rm mAC^0}$.
- For every $k \geq 1$, there is a monotone function in ${\rm AC^0}[\oplus]$ (constant-depth poly-size circuits extended with parity gates) that requires monotone circuits of size $\exp(\Omega(\log^k n))$. This makes progress towards a question posed by Grigni and Sipser (1992).
  
These results show that constant-depth circuits can be more efficient than monotone circuits when computing monotone functions.

In the opposite direction, we observe that non-trivial simulations are possible in the absence of parity gates: every monotone function computed by an ${\rm AC^0}$ circuit of size $s$ and depth $d$ can be computed by a monotone circuit of size $2^{n - n/O(\log s)^{d-1}}$. We show that the existence of significantly faster monotone simulations would lead to breakthrough circuit lower bounds. In particular, if every monotone function in ${\rm AC^0}$ admits a polynomial size monotone circuit, then ${\rm NC^2}$ is not contained in ${\rm NC^1}$ .

Finally, we revisit our separation result against monotone circuit size and investigate the limits of our approach, which is based on a monotone lower bound for constraint satisfaction problems established by Göös, Kamath, Robere and Sokolov (2019) via lifting techniques. Adapting results of Schaefer (1978) and Allender, Bauland, Immerman, Schnoor and Vollmer (2009), we obtain an unconditional classification of the monotone circuit complexity of Boolean-valued CSPs via their polymorphisms. This result and the consequences we derive from it might be of independent interest.
  </content>
    <author>
      <name>ECCC Papers</name>
      <uri>https://eccc.weizmann.ac.il/</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">ECCC Papers: TR23-068 |  Colourful TFNP and Propositional Proofs | 

	Ben Davis, 

	Robert Robere</title>
    <link href="https://eccc.weizmann.ac.il/report/2023/068"/>
    <id>https://eccc.weizmann.ac.il/report/2023/068</id>
    <updated>2023-05-11T14:19:24+00:00</updated>
    <content type="html" xml:lang="en">
    Recent work has shown that many of the standard TFNP classes — such as PLS, PPADS, PPAD, SOPL, and EOPL — have corresponding proof systems in propositional proof complexity, in the sense that a total search problem is in the class if and only if the totality of the problem can be efficiently proved by the corresponding proof system. We build on this line of work by studying coloured variants of these TFNP classes: C-PLS, C-PPADS, C-PPAD, C-SOPL, and C-EOPL. While C-PLS has been studied in the literature before, the coloured variants of the other classes are introduced here for the first time. We give a family of results showing that these coloured TFNP classes are natural objects of study, and that the correspondence between TFNP and natural propositional proof systems is not an exceptional phenomenon isolated to weak TFNP classes. Namely, we show that:

- Each of the classes C-PLS, C-PPADS, and C-SOPL have corresponding proof systems characterizing them. Specifically, the proof systems for these classes are obtained by adding depth to the formulas in the corresponding proof system for the uncoloured class. For instance, while it was previously known that PLS is characterized by bounded-width Res- olution (i.e. depth 0.5 Frege), we prove that C-PLS is characterized by depth-1.5 Frege (Res(polylog(n))).

- The classes C-PPAD and C-EOPL coincide exactly with the uncoloured classes PPADS and SOPL, respectively. Thus, both of these classes also have corresponding proof systems: unary Sherali-Adams and Reversible Resolution, respectively.

- Finally, we prove a coloured intersection theorem for the coloured sink classes, showing C-PLS?C-PPADS = C-SOPL, generalizing the intersection theorem PLS?PPADS = SOPL. However, while it is known in the uncoloured world that PLS ? PPAD = EOPL = CLS, we prove that this equality fails in the coloured world in the black-box setting. More precisely, we show that there is an oracle O relative to which C-PLS ? C-PPAD $\neq$ C-EOPL.

To prove our results, we introduce an abstract multivalued proof system — the Blockwise Calculus — which may be of independent interest.
  </content>
    <author>
      <name>ECCC Papers</name>
      <uri>https://eccc.weizmann.ac.il/</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">Computational Complexity: Winter is Coming</title>
    <link href="https://blog.computationalcomplexity.org/2023/05/winter-is-coming.html"/>
    <id>tag:blogger.com,1999:blog-3722233.post-7739714885756524623</id>
    <updated>2023-05-11T13:38:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;I fear we are heading to a computer science winter. Now why would I say that when CS enrollments are at record levels and AI is driving incredible excitement in the field? Back in 2016 I &lt;a href=&quot;https://blog.computationalcomplexity.org/2016/04/its-all-about-jobs.html&quot;&gt;wrote&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;We won’t see a decline in demand for computer science students until we automate ourselves out of a job.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;With advances in machine learning, especially generative AI, you can now use AI tools with little to no knowledge of computer science and mathematics. You can do quite a bit more with just a basic knowledge of Python programming and APIs. And tools like Github co-pilot make programming that much easier.&lt;/p&gt;&lt;p&gt;In 2005 during the last period computer science saw small enrollments, I &lt;a href=&quot;https://blog.computationalcomplexity.org/2005/07/computer-science-in-high-school.html&quot;&gt;suggested&lt;/a&gt;&amp;nbsp;computing became a commodity and we lost the excitement in the field, leading to a decrease of interest and students. It didn&#39;t help that potential students had a (&lt;a href=&quot;https://cra.org/govaffairs/blog/2006/03/ny-times-editorial-outsourcing-isnt-as-bad-as-you-think/&quot;&gt;mostly mistaken&lt;/a&gt;) perception that all the computing jobs were being outsourced to India.&lt;/p&gt;&lt;p&gt;We may soon see a time when computing loses its excitement again if everyone can just interact in English (or any other language). Students might now have a perception that computing jobs will be outsourced to AI. The recent tech layoffs don&#39;t help. Even the ones interested in computing might focus more on the various low-cost certificate programs instead of a full CS degree.&lt;/p&gt;&lt;p&gt;What can we do? We need to reframe our degrees or create new ones to recognize the move to data-oriented computing. We need to embrace teaching responsible AI but without fighting the future.&amp;nbsp;&lt;/p&gt;&lt;p&gt;CS is in a great place right now but we have to continually adjust to ensure our future relevance or we may no longer have it.&lt;/p&gt;&lt;p class=&quot;authors&quot;&gt;By Lance Fortnow&lt;/p&gt;
  </content>
    <author>
      <name>Computational Complexity</name>
      <uri>http://blog.computationalcomplexity.org/</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">Emanuele Viola: Mathematics of the impossible, Chapter 11, Proofs</title>
    <link href="https://emanueleviola.wordpress.com/2023/05/11/mathematics-of-the-impossible-chapter-11-proofs/"/>
    <id>http://emanueleviola.wordpress.com/?p=1250</id>
    <updated>2023-05-11T13:20:59+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p style=&quot;text-align:justify&quot;&gt;The notion of proof is pervasive. We have seen many proofs in this book until now. But the notion extends to others realms of knowledge, including empirical science, law, and more. Complexity theory has contributed a great deal to the notion of proof, with important applications in several areas such as cryptography.&lt;/p&gt;
&lt;h3 class=&quot;sectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;11.1   &lt;/span&gt; &lt;a id=&quot;x1-11100011.1&quot;&gt;&lt;/a&gt;Static proofs&lt;/h3&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;As remarked in section&amp;nbsp;&lt;a href=&quot;#x1-590005.1.0.1&quot;&gt;5.1.0.1&lt;!--tex4ht:ref: subsec:How-to-think-of-NP --&gt;&lt;/a&gt;, we can think of problems in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {NP}&quot; class=&quot;latex&quot; /&gt; as those admitting a solution that can be verified efficiently, namely in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {P}&quot; class=&quot;latex&quot; /&gt;. Let us repeat the definition of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {NP}&quot; class=&quot;latex&quot; /&gt; using the suggestive letter &lt;img src=&quot;https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;V&quot; class=&quot;latex&quot; /&gt; for verifier.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-111001r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Definition&lt;/b&gt; 11.1.  &lt;/span&gt; A function &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3AX%5Csubseteq+%5C%7B0%2C1%5C%7D%5E%2A+%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3AX%5Csubseteq+%5C%7B0%2C1%5C%7D%5E%2A+%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3AX%5Csubseteq+%5C%7B0%2C1%5C%7D%5E%2A+%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:X&amp;#92;subseteq &amp;#92;{0,1&amp;#92;}^* &amp;#92;to &amp;#92;{0,1&amp;#92;} &quot; class=&quot;latex&quot; /&gt; is in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {NP}&quot; class=&quot;latex&quot; /&gt; iff there is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=V%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=V%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=V%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;V&amp;#92;in &amp;#92;text {P}&quot; class=&quot;latex&quot; /&gt; (called “verifier”) and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d%5Cin+%5Cmathbb+%7BN%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d%5Cin+%5Cmathbb+%7BN%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d%5Cin+%5Cmathbb+%7BN%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&amp;#92;in &amp;#92;mathbb {N}&quot; class=&quot;latex&quot; /&gt; s.t.:&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+f%28x%29%3D1%5CLeftrightarrow+%5Cexists+y%5Cin+%5C%7B0%2C1%5C%7D+%5E%7B%7Cx%7C%5E%7Bd%7D%7D%3AV%28x%2Cy%29%3D1.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+f%28x%29%3D1%5CLeftrightarrow+%5Cexists+y%5Cin+%5C%7B0%2C1%5C%7D+%5E%7B%7Cx%7C%5E%7Bd%7D%7D%3AV%28x%2Cy%29%3D1.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+f%28x%29%3D1%5CLeftrightarrow+%5Cexists+y%5Cin+%5C%7B0%2C1%5C%7D+%5E%7B%7Cx%7C%5E%7Bd%7D%7D%3AV%28x%2Cy%29%3D1.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} f(x)=1&amp;#92;Leftrightarrow &amp;#92;exists y&amp;#92;in &amp;#92;{0,1&amp;#92;} ^{|x|^{d}}:V(x,y)=1. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   We are naturally interested in fast proof verification, and especially the complexity of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;V&quot; class=&quot;latex&quot; /&gt;. It turns out that proofs can be encoded in a format that allows for very efficient verification. This message is already in the following.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-111002r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 11.1.  &lt;/span&gt;For any input length &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt;, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;V&quot; class=&quot;latex&quot; /&gt; in Definition &lt;a href=&quot;#x1-111001r1&quot;&gt;11.1&lt;!--tex4ht:ref: def:NP-as-proof-system --&gt;&lt;/a&gt; can be taken to be a 3CNF of size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n^{d}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   That is, whereas when defining &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {NP}&quot; class=&quot;latex&quot; /&gt; as a proof system we considered arbitrary verifiers &lt;img src=&quot;https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;V&quot; class=&quot;latex&quot; /&gt; in P, in fact the definition is unchanged if one selects a very restricted class of verifiers: small 3CNFs.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;    &lt;b&gt;Proof&lt;/b&gt;.&amp;nbsp;&lt;/span&gt;This is just a restatement of Theorem &lt;a href=&quot;#x1-57001r1&quot;&gt;5.1&lt;!--tex4ht:ref: thm:redux-ckt-2-3sat --&gt;&lt;/a&gt;. &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   This extreme reduction in the verifier’s complexity is possible because we are allowing proofs to be long, longer than the original verifier’s running time. If we don’t allow for that, such a reduction is not known. Such “bounded proofs” are very interesting to study, but we shall not do so now.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Instead, we ask for more. The 3CNF in the above theorem still depends on the entire proof. We can ask for a verifier that only depends on few bits of the proof. Taking this to the extreme, we can ask whether &lt;img src=&quot;https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;V&quot; class=&quot;latex&quot; /&gt; can only read a constant number of bits from &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y&quot; class=&quot;latex&quot; /&gt;. Without randomness, this is impossible.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-111003r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 11.1.  &lt;/span&gt;Suppose &lt;img src=&quot;https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;V&quot; class=&quot;latex&quot; /&gt; in Definition &lt;a href=&quot;#x1-111001r1&quot;&gt;11.1&lt;!--tex4ht:ref: def:NP-as-proof-system --&gt;&lt;/a&gt; only reads &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le d&quot; class=&quot;latex&quot; /&gt; bits of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y&quot; class=&quot;latex&quot; /&gt;, for a constant &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt;. Show that the corresponding class would be the same as P.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Surprisingly, if we allow randomness this is possible. Moreover, the use of randomness is fairly limited – only logarithmically many bits – yielding the following central characterization.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-111004r2&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 11.2.  &lt;/span&gt; A function &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3AX%5Csubseteq+%5C%7B0%2C1%5C%7D%5E%2A+%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3AX%5Csubseteq+%5C%7B0%2C1%5C%7D%5E%2A+%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3AX%5Csubseteq+%5C%7B0%2C1%5C%7D%5E%2A+%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:X&amp;#92;subseteq &amp;#92;{0,1&amp;#92;}^* &amp;#92;to &amp;#92;{0,1&amp;#92;} &quot; class=&quot;latex&quot; /&gt; is in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BNP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {NP}&quot; class=&quot;latex&quot; /&gt; iff there is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=V%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=V%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=V%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;V&amp;#92;in &amp;#92;text {P}&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d%5Cin+%5Cmathbb+%7BN%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d%5Cin+%5Cmathbb+%7BN%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d%5Cin+%5Cmathbb+%7BN%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&amp;#92;in &amp;#92;mathbb {N}&quot; class=&quot;latex&quot; /&gt; s.t.:&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%28x%29%3D1%5CRightarrow+%5Cexists+y%5Cin+%5C%7B0%2C1%5C%7D+%5E%7B%7Cx%7C%5E%7Bd%7D%7D%3A%5Cmathbb+%7BP%7D_%7Br%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bd%5Clog+%7Cx%7C%7D%7D%5BV%28x%2Cy%2Cr%29%3D1%5D%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%28x%29%3D1%5CRightarrow+%5Cexists+y%5Cin+%5C%7B0%2C1%5C%7D+%5E%7B%7Cx%7C%5E%7Bd%7D%7D%3A%5Cmathbb+%7BP%7D_%7Br%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bd%5Clog+%7Cx%7C%7D%7D%5BV%28x%2Cy%2Cr%29%3D1%5D%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%28x%29%3D1%5CRightarrow+%5Cexists+y%5Cin+%5C%7B0%2C1%5C%7D+%5E%7B%7Cx%7C%5E%7Bd%7D%7D%3A%5Cmathbb+%7BP%7D_%7Br%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bd%5Clog+%7Cx%7C%7D%7D%5BV%28x%2Cy%2Cr%29%3D1%5D%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f(x)=1&amp;#92;Rightarrow &amp;#92;exists y&amp;#92;in &amp;#92;{0,1&amp;#92;} ^{|x|^{d}}:&amp;#92;mathbb {P}_{r&amp;#92;in &amp;#92;{0,1&amp;#92;} ^{d&amp;#92;log |x|}}[V(x,y,r)=1]=1&quot; class=&quot;latex&quot; /&gt;,&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%28x%29%3D0%5CRightarrow+%5Cforall+y%5Cin+%5C%7B0%2C1%5C%7D+%5E%7B%7Cx%7C%5E%7Bd%7D%7D%3A%5Cmathbb+%7BP%7D_%7Br%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bd%5Clog+%7Cx%7C%7D%7D%5BV%28x%2Cy%2Cr%29%3D1%5D%3C0.01&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%28x%29%3D0%5CRightarrow+%5Cforall+y%5Cin+%5C%7B0%2C1%5C%7D+%5E%7B%7Cx%7C%5E%7Bd%7D%7D%3A%5Cmathbb+%7BP%7D_%7Br%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bd%5Clog+%7Cx%7C%7D%7D%5BV%28x%2Cy%2Cr%29%3D1%5D%3C0.01&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%28x%29%3D0%5CRightarrow+%5Cforall+y%5Cin+%5C%7B0%2C1%5C%7D+%5E%7B%7Cx%7C%5E%7Bd%7D%7D%3A%5Cmathbb+%7BP%7D_%7Br%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bd%5Clog+%7Cx%7C%7D%7D%5BV%28x%2Cy%2Cr%29%3D1%5D%3C0.01&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f(x)=0&amp;#92;Rightarrow &amp;#92;forall y&amp;#92;in &amp;#92;{0,1&amp;#92;} ^{|x|^{d}}:&amp;#92;mathbb {P}_{r&amp;#92;in &amp;#92;{0,1&amp;#92;} ^{d&amp;#92;log |x|}}[V(x,y,r)=1]&amp;lt;0.01&quot; class=&quot;latex&quot; /&gt;,&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   and moreover &lt;img src=&quot;https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;V&quot; class=&quot;latex&quot; /&gt; reads &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le d&quot; class=&quot;latex&quot; /&gt; bits of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-111005r2&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 11.2.  &lt;/span&gt;Prove the “only if” in Theorem &lt;a href=&quot;#x1-111004r2&quot;&gt;11.2&lt;!--tex4ht:ref: thm:NP-iff-PCP --&gt;&lt;/a&gt; in the specific case &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3D0.01%5Ctext+%7B-Gap-3Sat%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3D0.01%5Ctext+%7B-Gap-3Sat%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3D0.01%5Ctext+%7B-Gap-3Sat%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f=0.01&amp;#92;text {-Gap-3Sat}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Given this exercise, the “only if” direction for any problem in NP follows from the advanced result that any problem in NP can be map reduced to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=0.01&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=0.01&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=0.01&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;0.01&quot; class=&quot;latex&quot; /&gt;-Gap-3Sat (which is essentially Theorem &lt;a href=&quot;#x1-55002r7&quot;&gt;4.7&lt;!--tex4ht:ref: thm:-=00005BPCP=00005D --&gt;&lt;/a&gt;, except we did not claim map reductions or a specific constant there).&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-111006r3&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 11.3.  &lt;/span&gt;Prove the “if” in Theorem &lt;a href=&quot;#x1-111004r2&quot;&gt;11.2&lt;!--tex4ht:ref: thm:NP-iff-PCP --&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h3 class=&quot;sectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;11.2   &lt;/span&gt; &lt;a id=&quot;x1-11200011.2&quot;&gt;&lt;/a&gt;Zero-knowledge&lt;/h3&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;In Theorem &lt;a href=&quot;#x1-111004r2&quot;&gt;11.2&lt;!--tex4ht:ref: thm:NP-iff-PCP --&gt;&lt;/a&gt; the verifier gains “constant confidence” about the validity of the proof, just be inspecting a constant number of bits. Hence the verifier “learns” at most a constant number of bits of the proof. This is remarkable, but we can further ask if we can modify the proof so that the verifier “learns nothing” about the proof. Such proofs are called zero knowledge and are extensively studied and applied.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   We sketch how this is done for Gap-3Color, which is also NP-complete. Rather than a single proof &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y&quot; class=&quot;latex&quot; /&gt;, now the verifier will receive a random proof &lt;img src=&quot;https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;Y&quot; class=&quot;latex&quot; /&gt;. This &lt;img src=&quot;https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;Y&quot; class=&quot;latex&quot; /&gt; is obtained from a 3 coloring &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y&quot; class=&quot;latex&quot; /&gt; by randomly permuting colors (so for any &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y&quot; class=&quot;latex&quot; /&gt; the corresponding &lt;img src=&quot;https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;Y&quot; class=&quot;latex&quot; /&gt; is uniform over 6 colorings). The verifier will pick a random edge and inspect the corresponding endpoints, and accept if they are different.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The verifier learn nothing because all that they see is two random different color. One can formalize “learning nothing” by noting that the verifier can produce this distribution by themselves, without looking at the proof. (So why does the verifier gain anything from &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y&quot; class=&quot;latex&quot; /&gt;? The fact that a proof &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y&quot; class=&quot;latex&quot; /&gt; has been written down means that colors have been picked so that every two endpoints are uniform colors, something that the verifier is not easily able to reproduce.)&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   This gives a zero-knowledge proof for verifiers that follow the protocol of just inspecting an edge. In a cryptographic setting one has to worry about verifiers which don’t follow the protocol. Using cryptographic assumptions, one can force the verifiers to follow the protocol by considering an &lt;em&gt;interactive&lt;/em&gt; proof: First a proof &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y&quot; class=&quot;latex&quot; /&gt; is committed to but not revealed, then the verifier selects an edge to inspect, and only then the corresponding colors are revealed, and only those. This protocol lends itself to a physical implementation.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h3 class=&quot;sectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;11.3   &lt;/span&gt; &lt;a id=&quot;x1-11300011.3&quot;&gt;&lt;/a&gt;Interactive proofs&lt;/h3&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;We now consider interactive proofs. Here the verifier &lt;img src=&quot;https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;V&quot; class=&quot;latex&quot; /&gt; engages in a protocol with a prover &lt;img src=&quot;https://s0.wp.com/latex.php?latex=P&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=P&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=P&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;P&quot; class=&quot;latex&quot; /&gt;. Given an input &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt; to both &lt;img src=&quot;https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;V&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=P&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=P&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=P&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;P&quot; class=&quot;latex&quot; /&gt;, the verifier asks questions, the prover replies, the verifier asks more questions, and so on. The case of NP corresponds to the prover simply sending &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y&quot; class=&quot;latex&quot; /&gt; to                                                                                                                                                                                     &lt;img src=&quot;https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;V&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   It turns out that it suffices for the verifier to send uniformly random strings &lt;img src=&quot;https://s0.wp.com/latex.php?latex=Q_%7B1%7D%2CQ_%7B2%7D%2C%5Cldots+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=Q_%7B1%7D%2CQ_%7B2%7D%2C%5Cldots+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=Q_%7B1%7D%2CQ_%7B2%7D%2C%5Cldots+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;Q_{1},Q_{2},&amp;#92;ldots &quot; class=&quot;latex&quot; /&gt; bits to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=P&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=P&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=P&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;P&quot; class=&quot;latex&quot; /&gt;. This leads to a simple definition.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-113001r2&quot;&gt;&lt;/a&gt; &lt;b&gt;Definition&lt;/b&gt; 11.2.  &lt;/span&gt;A function &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3AX%5Csubseteq+%5C%7B0%2C1%5C%7D%5E%2A+%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3AX%5Csubseteq+%5C%7B0%2C1%5C%7D%5E%2A+%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3AX%5Csubseteq+%5C%7B0%2C1%5C%7D%5E%2A+%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:X&amp;#92;subseteq &amp;#92;{0,1&amp;#92;}^* &amp;#92;to &amp;#92;{0,1&amp;#92;} &quot; class=&quot;latex&quot; /&gt; admits an efficient interactive proof, abbreviated IP, if there is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=V%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=V%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=V%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;V&amp;#92;in &amp;#92;text {P}&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d%5Cin+%5Cmathbb+%7BN%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d%5Cin+%5Cmathbb+%7BN%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d%5Cin+%5Cmathbb+%7BN%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&amp;#92;in &amp;#92;mathbb {N}&quot; class=&quot;latex&quot; /&gt; such that for every &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&amp;#92;in &amp;#92;{0,1&amp;#92;} ^{n}&quot; class=&quot;latex&quot; /&gt;, letting &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b%3A%3Dn%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b%3A%3Dn%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b%3A%3Dn%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b:=n^{d}&quot; class=&quot;latex&quot; /&gt;:&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;ul class=&quot;itemize1&quot;&gt;
&lt;li class=&quot;itemize&quot;&gt;If &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%28x%29%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%28x%29%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%28x%29%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f(x)=1&quot; class=&quot;latex&quot; /&gt; then &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cexists+P%3A%5C%7B0%2C1%5C%7D%5E%2A+%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bb%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cexists+P%3A%5C%7B0%2C1%5C%7D%5E%2A+%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bb%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cexists+P%3A%5C%7B0%2C1%5C%7D%5E%2A+%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bb%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;exists P:&amp;#92;{0,1&amp;#92;}^* &amp;#92;to &amp;#92;{0,1&amp;#92;} ^{b}&quot; class=&quot;latex&quot; /&gt; such that
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+V%5Cleft+%28P%28Q_%7B1%7D%29%2CP%28Q_%7B1%7D%2CQ_%7B2%7D%29%2C%5Cldots+%2CP%28Q_%7B1%7D%2CQ_%7B2%7D%2C%5Cldots+%2CQ_%7Bb%7D%29%5Cright+%29%3D1+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+V%5Cleft+%28P%28Q_%7B1%7D%29%2CP%28Q_%7B1%7D%2CQ_%7B2%7D%29%2C%5Cldots+%2CP%28Q_%7B1%7D%2CQ_%7B2%7D%2C%5Cldots+%2CQ_%7Bb%7D%29%5Cright+%29%3D1+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+V%5Cleft+%28P%28Q_%7B1%7D%29%2CP%28Q_%7B1%7D%2CQ_%7B2%7D%29%2C%5Cldots+%2CP%28Q_%7B1%7D%2CQ_%7B2%7D%2C%5Cldots+%2CQ_%7Bb%7D%29%5Cright+%29%3D1+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} V&amp;#92;left (P(Q_{1}),P(Q_{1},Q_{2}),&amp;#92;ldots ,P(Q_{1},Q_{2},&amp;#92;ldots ,Q_{b})&amp;#92;right )=1 &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;for every &lt;img src=&quot;https://s0.wp.com/latex.php?latex=Q_%7B1%7D%2CQ_%7B2%7D%2C%5Cldots+%2CQ_%7Bb%7D%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bb%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=Q_%7B1%7D%2CQ_%7B2%7D%2C%5Cldots+%2CQ_%7Bb%7D%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bb%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=Q_%7B1%7D%2CQ_%7B2%7D%2C%5Cldots+%2CQ_%7Bb%7D%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bb%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;Q_{1},Q_{2},&amp;#92;ldots ,Q_{b}&amp;#92;in &amp;#92;{0,1&amp;#92;} ^{b}&quot; class=&quot;latex&quot; /&gt;.&lt;/li&gt;
&lt;li class=&quot;itemize&quot;&gt;If &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%28x%29%3D0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%28x%29%3D0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%28x%29%3D0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f(x)=0&quot; class=&quot;latex&quot; /&gt; then &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cforall+P%3A%5C%7B0%2C1%5C%7D%5E%2A+%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bb%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cforall+P%3A%5C%7B0%2C1%5C%7D%5E%2A+%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bb%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cforall+P%3A%5C%7B0%2C1%5C%7D%5E%2A+%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bb%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;forall P:&amp;#92;{0,1&amp;#92;}^* &amp;#92;to &amp;#92;{0,1&amp;#92;} ^{b}&quot; class=&quot;latex&quot; /&gt; we have
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb+%7BP%7D_%7BQ_%7B1%7D%2CQ_%7B2%7D%2C%5Cldots+%2CQ_%7Bb%7D%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bb%7D%7D%5Cleft+%5BV%5Cleft+%28P%28Q_%7B1%7D%29%2CP%28Q_%7B1%7D%2CQ_%7B2%7D%29%2C%5Cldots+%2CP%28Q_%7B1%7D%2CQ_%7B2%7D%2C%5Cldots+%2CQ_%7Bb%7D%29%5Cright+%29%3D1%5Cright+%5D%5Cle+1%2F3.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb+%7BP%7D_%7BQ_%7B1%7D%2CQ_%7B2%7D%2C%5Cldots+%2CQ_%7Bb%7D%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bb%7D%7D%5Cleft+%5BV%5Cleft+%28P%28Q_%7B1%7D%29%2CP%28Q_%7B1%7D%2CQ_%7B2%7D%29%2C%5Cldots+%2CP%28Q_%7B1%7D%2CQ_%7B2%7D%2C%5Cldots+%2CQ_%7Bb%7D%29%5Cright+%29%3D1%5Cright+%5D%5Cle+1%2F3.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb+%7BP%7D_%7BQ_%7B1%7D%2CQ_%7B2%7D%2C%5Cldots+%2CQ_%7Bb%7D%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bb%7D%7D%5Cleft+%5BV%5Cleft+%28P%28Q_%7B1%7D%29%2CP%28Q_%7B1%7D%2CQ_%7B2%7D%29%2C%5Cldots+%2CP%28Q_%7B1%7D%2CQ_%7B2%7D%2C%5Cldots+%2CQ_%7Bb%7D%29%5Cright+%29%3D1%5Cright+%5D%5Cle+1%2F3.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} &amp;#92;mathbb {P}_{Q_{1},Q_{2},&amp;#92;ldots ,Q_{b}&amp;#92;in &amp;#92;{0,1&amp;#92;} ^{b}}&amp;#92;left [V&amp;#92;left (P(Q_{1}),P(Q_{1},Q_{2}),&amp;#92;ldots ,P(Q_{1},Q_{2},&amp;#92;ldots ,Q_{b})&amp;#92;right )=1&amp;#92;right ]&amp;#92;le 1/3. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;The following amazing result shows the power of interactive proofs, compared to non-interactive proofs. We can think of NP as “reading a book” and IP as “going to class and asking questions.” We don’t yet know how to replace teachers with books.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-113002r3&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 11.3.  &lt;/span&gt;&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#XLundFoKaNi92&quot;&gt;41&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;#XShamir92&quot;&gt;58&lt;/a&gt;]&lt;/span&gt;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7B+IP%7D%3D%5Ctext+%7BPSpace%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7B+IP%7D%3D%5Ctext+%7BPSpace%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7B+IP%7D%3D%5Ctext+%7BPSpace%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text { IP}=&amp;#92;text {PSpace}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   In the rest of this section we present the main ideas in the proof of &lt;a href=&quot;#x1-113002r3&quot;&gt;11.3&lt;!--tex4ht:ref: thm:IP=00003DPSpace --&gt;&lt;/a&gt;, establishing a weaker result. In particular we show that IP contains problems not known to be in NP.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-113003r4&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 11.4.  &lt;/span&gt;Given a field &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;mathbb {F}&quot; class=&quot;latex&quot; /&gt;, an arithmetic circuit &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C%28x_%7B1%7D%2Cx_%7B2%7D%2C%5Cldots+%2Cx_%7Bv%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C%28x_%7B1%7D%2Cx_%7B2%7D%2C%5Cldots+%2Cx_%7Bv%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C%28x_%7B1%7D%2Cx_%7B2%7D%2C%5Cldots+%2Cx_%7Bv%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C(x_{1},x_{2},&amp;#92;ldots ,x_{v})&quot; class=&quot;latex&quot; /&gt; over &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;mathbb {F}&quot; class=&quot;latex&quot; /&gt; computing a polynomial of degree &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt;, and an element &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s%5Cin+%5Cmathbb+%7BF%7D%2C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s%5Cin+%5Cmathbb+%7BF%7D%2C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s%5Cin+%5Cmathbb+%7BF%7D%2C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&amp;#92;in &amp;#92;mathbb {F},&quot; class=&quot;latex&quot; /&gt; deciding if&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Csum+_%7Bx_%7B1%7D%2Cx_%7B2%7D%2C%5Cldots+%2Cx_%7Bv%7D%5Cin+%5C%7B0%2C1%5C%7D+%7DC%28x_%7B1%7D%2Cx_%7B2%7D%2C%5Cldots+%2Cx_%7Bv%7D%29%3Ds%7E%7E%7E%7E%2811.1%29+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Csum+_%7Bx_%7B1%7D%2Cx_%7B2%7D%2C%5Cldots+%2Cx_%7Bv%7D%5Cin+%5C%7B0%2C1%5C%7D+%7DC%28x_%7B1%7D%2Cx_%7B2%7D%2C%5Cldots+%2Cx_%7Bv%7D%29%3Ds%7E%7E%7E%7E%2811.1%29+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Csum+_%7Bx_%7B1%7D%2Cx_%7B2%7D%2C%5Cldots+%2Cx_%7Bv%7D%5Cin+%5C%7B0%2C1%5C%7D+%7DC%28x_%7B1%7D%2Cx_%7B2%7D%2C%5Cldots+%2Cx_%7Bv%7D%29%3Ds%7E%7E%7E%7E%2811.1%29+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} &amp;#92;sum _{x_{1},x_{2},&amp;#92;ldots ,x_{v}&amp;#92;in &amp;#92;{0,1&amp;#92;} }C(x_{1},x_{2},&amp;#92;ldots ,x_{v})=s~~~~(11.1) &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;is in IP, whenever &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%281-d%2Fq%29%5E%7Bv%7D%5Cge+2%2F3&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%281-d%2Fq%29%5E%7Bv%7D%5Cge+2%2F3&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%281-d%2Fq%29%5E%7Bv%7D%5Cge+2%2F3&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;(1-d/q)^{v}&amp;#92;ge 2/3&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;    &lt;b&gt;Proof&lt;/b&gt;.&amp;nbsp;&lt;/span&gt;If &lt;img src=&quot;https://s0.wp.com/latex.php?latex=v%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=v%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=v%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;v=1&quot; class=&quot;latex&quot; /&gt; then &lt;img src=&quot;https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;V&quot; class=&quot;latex&quot; /&gt; can decide this question by itself, by evaluating the circuit. For larger &lt;img src=&quot;https://s0.wp.com/latex.php?latex=v&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=v&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=v&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;v&quot; class=&quot;latex&quot; /&gt; we give a way to reduce &lt;img src=&quot;https://s0.wp.com/latex.php?latex=v&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=v&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=v&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;v&quot; class=&quot;latex&quot; /&gt; by &lt;img src=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;1&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   As the first prover answer, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;V&quot; class=&quot;latex&quot; /&gt; expects a polynomial &lt;img src=&quot;https://s0.wp.com/latex.php?latex=p&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=p&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=p&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;p&quot; class=&quot;latex&quot; /&gt; of degree &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt; in the variable &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt;, which is meant to be&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+s%27%28x%29%3A%3D%5Csum+_%7Bx_%7B2%7D%2Cx_%7B3%7D%2C%5Cldots+%2Cx_%7Bn%7D%5Cin+%5C%7B0%2C1%5C%7D+%7DC%28x%2Cx_%7B2%7D%2Cx_%7B3%7D%5Cldots+%2Cx_%7Bn%7D%29.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+s%27%28x%29%3A%3D%5Csum+_%7Bx_%7B2%7D%2Cx_%7B3%7D%2C%5Cldots+%2Cx_%7Bn%7D%5Cin+%5C%7B0%2C1%5C%7D+%7DC%28x%2Cx_%7B2%7D%2Cx_%7B3%7D%5Cldots+%2Cx_%7Bn%7D%29.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+s%27%28x%29%3A%3D%5Csum+_%7Bx_%7B2%7D%2Cx_%7B3%7D%2C%5Cldots+%2Cx_%7Bn%7D%5Cin+%5C%7B0%2C1%5C%7D+%7DC%28x%2Cx_%7B2%7D%2Cx_%7B3%7D%5Cldots+%2Cx_%7Bn%7D%29.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} s&amp;#039;(x):=&amp;#92;sum _{x_{2},x_{3},&amp;#92;ldots ,x_{n}&amp;#92;in &amp;#92;{0,1&amp;#92;} }C(x,x_{2},x_{3}&amp;#92;ldots ,x_{n}). &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;V&quot; class=&quot;latex&quot; /&gt; checks if &lt;img src=&quot;https://s0.wp.com/latex.php?latex=p%280%29%2Bp%281%29%3Ds&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=p%280%29%2Bp%281%29%3Ds&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=p%280%29%2Bp%281%29%3Ds&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;p(0)+p(1)=s&quot; class=&quot;latex&quot; /&gt;, and if not rejects. Otherwise, it recursively runs the protocol to verify that&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Csum+_%7Bx_%7B2%7D%2Cx_%7B3%7D%2C%5Cldots+%2Cx_%7Bn%7D%5Cin+%5C%7B0%2C1%5C%7D+%7DC%28Q_%7B1%7D%2Cx_%7B2%7D%2Cx_%7B3%7D%2C%5Cldots+%2Cx_%7Bn%7D%29%3Dp%28Q_%7B1%7D%29.%7E%7E%7E%7E%2811.2%29+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Csum+_%7Bx_%7B2%7D%2Cx_%7B3%7D%2C%5Cldots+%2Cx_%7Bn%7D%5Cin+%5C%7B0%2C1%5C%7D+%7DC%28Q_%7B1%7D%2Cx_%7B2%7D%2Cx_%7B3%7D%2C%5Cldots+%2Cx_%7Bn%7D%29%3Dp%28Q_%7B1%7D%29.%7E%7E%7E%7E%2811.2%29+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Csum+_%7Bx_%7B2%7D%2Cx_%7B3%7D%2C%5Cldots+%2Cx_%7Bn%7D%5Cin+%5C%7B0%2C1%5C%7D+%7DC%28Q_%7B1%7D%2Cx_%7B2%7D%2Cx_%7B3%7D%2C%5Cldots+%2Cx_%7Bn%7D%29%3Dp%28Q_%7B1%7D%29.%7E%7E%7E%7E%2811.2%29+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} &amp;#92;sum _{x_{2},x_{3},&amp;#92;ldots ,x_{n}&amp;#92;in &amp;#92;{0,1&amp;#92;} }C(Q_{1},x_{2},x_{3},&amp;#92;ldots ,x_{n})=p(Q_{1}).~~~~(11.2) &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   This concludes the description of the protocol. We now verify its correctness.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   In case equation&amp;nbsp;(??) is true, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=P&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=P&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=P&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;P&quot; class=&quot;latex&quot; /&gt; can send polynomials that cause &lt;img src=&quot;https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;V&quot; class=&quot;latex&quot; /&gt; to accept.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   In case equation&amp;nbsp;(??) is false, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s%27%280%29%2Bs%27%281%29%5Cne+s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s%27%280%29%2Bs%27%281%29%5Cne+s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s%27%280%29%2Bs%27%281%29%5Cne+s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&amp;#039;(0)+s&amp;#039;(1)&amp;#92;ne s&quot; class=&quot;latex&quot; /&gt;. Hence, unless &lt;img src=&quot;https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=V&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;V&quot; class=&quot;latex&quot; /&gt; rejects right away because &lt;img src=&quot;https://s0.wp.com/latex.php?latex=p%280%29%2Bp%281%29%5Cne+s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=p%280%29%2Bp%281%29%5Cne+s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=p%280%29%2Bp%281%29%5Cne+s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;p(0)+p(1)&amp;#92;ne s&quot; class=&quot;latex&quot; /&gt;, we have &lt;img src=&quot;https://s0.wp.com/latex.php?latex=p%5Cne+s%27&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=p%5Cne+s%27&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=p%5Cne+s%27&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;p&amp;#92;ne s&amp;#039;&quot; class=&quot;latex&quot; /&gt;. The polynomials &lt;img src=&quot;https://s0.wp.com/latex.php?latex=p&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=p&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=p&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;p&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s%27&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s%27&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s%27&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&amp;#039;&quot; class=&quot;latex&quot; /&gt; have degree &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le d&quot; class=&quot;latex&quot; /&gt;. Hence by Lemma &lt;a href=&quot;#x1-33003r3&quot;&gt;2.3&lt;!--tex4ht:ref: lem:schwartz-zippel --&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb+%7BP%7D_%7BQ_%7B1%7D%7D%5Bp%28Q_%7B1%7D%29%5Cne+s%27%28Q_%7B1%7D%29%5D%5Cge+1-d%2Fq.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb+%7BP%7D_%7BQ_%7B1%7D%7D%5Bp%28Q_%7B1%7D%29%5Cne+s%27%28Q_%7B1%7D%29%5D%5Cge+1-d%2Fq.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb+%7BP%7D_%7BQ_%7B1%7D%7D%5Bp%28Q_%7B1%7D%29%5Cne+s%27%28Q_%7B1%7D%29%5D%5Cge+1-d%2Fq.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} &amp;#92;mathbb {P}_{Q_{1}}[p(Q_{1})&amp;#92;ne s&amp;#039;(Q_{1})]&amp;#92;ge 1-d/q. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;When this event occurs, equation&amp;nbsp;(??) is again false, and we can repeat the argument. Overall, the probability that we maintain a false statement throughout the protocol is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cge+%281-d%2Fq%29%5E%7Bv%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cge+%281-d%2Fq%29%5E%7Bv%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cge+%281-d%2Fq%29%5E%7Bv%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;ge (1-d/q)^{v}&quot; class=&quot;latex&quot; /&gt;. &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-113004r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Corollary&lt;/b&gt; 11.1.  &lt;/span&gt;Given  a  3CNF  formula  &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;phi &quot; class=&quot;latex&quot; /&gt;  and  &lt;img src=&quot;https://s0.wp.com/latex.php?latex=k%5Cin+%5Cmathbb+%7BN%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=k%5Cin+%5Cmathbb+%7BN%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=k%5Cin+%5Cmathbb+%7BN%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;k&amp;#92;in &amp;#92;mathbb {N}&quot; class=&quot;latex&quot; /&gt;,  deciding  if  &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;phi &quot; class=&quot;latex&quot; /&gt;  has  exactly  &lt;img src=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;k&quot; class=&quot;latex&quot; /&gt;  satisfying assignments is in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BIP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BIP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BIP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {IP}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The proof uses a far-reaching technique: &lt;em&gt;arithmetization. &lt;/em&gt;We construct an arithmetic circuit &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C_%7B%5Cphi+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C_%7B%5Cphi+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C_%7B%5Cphi+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C_{&amp;#92;phi }&quot; class=&quot;latex&quot; /&gt; over a field &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;mathbb {F}&quot; class=&quot;latex&quot; /&gt; which agrees with &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;phi &quot; class=&quot;latex&quot; /&gt; on &lt;em&gt;boolean &lt;/em&gt;inputs&lt;em&gt;, &lt;/em&gt;but&lt;em&gt; &lt;/em&gt;that can then be evaluated over other elements of the field.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-113005r4&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 11.4.  &lt;/span&gt;Prove Corollary &lt;a href=&quot;#x1-113004r1&quot;&gt;11.1&lt;!--tex4ht:ref: cor:=000023sat-IP --&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The study of interactive proofs is rich. Many aspects are of interest, including:&lt;/p&gt;
&lt;ul class=&quot;itemize1&quot;&gt;
&lt;li class=&quot;itemize&quot;&gt;The efficiency of the prover (does it have to be unbounded, randomized, etc.), and of       the verifier.&lt;/li&gt;
&lt;li class=&quot;itemize&quot;&gt;The number of rounds.&lt;/li&gt;
&lt;li class=&quot;itemize&quot;&gt;The tradeoff betwen the error and the other parameters.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 class=&quot;likesectionHead&quot;&gt;&lt;a id=&quot;x1-11700012.2&quot;&gt;&lt;/a&gt;References&lt;/h3&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;thebibliography&quot;&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [1]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:conf/focs/AbboudBW15&quot;&gt;&lt;/a&gt;Amir Abboud, Arturs Backurs, and Virginia&amp;nbsp;Vassilevska Williams. Tight hardness      results for LCS and other sequence similarity measures.  In Venkatesan Guruswami,      editor, IEEE 56th Annual Symposium on Foundations of Computer Science, FOCS      2015, Berkeley, CA, USA, 17-20 October, 2015, pages 59–78. IEEE Computer Society,      2015.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [2]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAdleman78&quot;&gt;&lt;/a&gt;Leonard  Adleman.   Two  theorems  on  random  polynomial  time.   In  19th IEEE      Symp.&amp;nbsp;on Foundations of Computer Science (FOCS), pages 75–83. 1978.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [3]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAjt83&quot;&gt;&lt;/a&gt;Mikl�s Ajtai.  &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5CSigma+%5Csp+%7B1%7D%5Csb+%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5CSigma+%5Csp+%7B1%7D%5Csb+%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CSigma+%5Csp+%7B1%7D%5Csb+%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;Sigma &amp;#92;sp {1}&amp;#92;sb {1}&quot; class=&quot;latex&quot; /&gt;-formulae on finite structures.  Annals of Pure and Applied Logic,      24(1):1–48, 1983.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [4]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAjtai05&quot;&gt;&lt;/a&gt;Mikl�s Ajtai. A non-linear time lower bound for boolean branching programs. Theory      of Computing, 1(1):149–176, 2005.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [5]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAll89&quot;&gt;&lt;/a&gt;Eric  Allender.   A  note  on  the  power  of  threshold  circuits.   In  30th Symposium      on Foundations of Computer Science, pages 580–584, Research Triangle Park, North      Carolina, 30 October–1 November 1989. IEEE.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [6]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAllender01&quot;&gt;&lt;/a&gt;Eric Allender. The division breakthroughs. Bulletin of the EATCS, 74:61–77, 2001.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [7]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAllenderK10&quot;&gt;&lt;/a&gt;Eric  Allender  and  Michal  Koucký.     Amplifying  lower  bounds  by  means  of      self-reducibility. J.&amp;nbsp;of the ACM, 57(3), 2010.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [8]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAGHP92&quot;&gt;&lt;/a&gt;Noga Alon, Oded Goldreich, Johan H�stad, and Ren� Peralta. Simple constructions      of  almost  &lt;img src=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;k&quot; class=&quot;latex&quot; /&gt;-wise  independent  random  variables.   Random  Structures  &amp;amp;  Algorithms,      3(3):289–304, 1992.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [9]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/jcss/AngluinV79&quot;&gt;&lt;/a&gt;Dana Angluin and Leslie&amp;nbsp;G. Valiant. Fast probabilistic algorithms for hamiltonian      circuits and matchings. J. Comput. Syst. Sci., 18(2):155–193, 1979.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [10]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAroraLuMoSuSz98&quot;&gt;&lt;/a&gt;Sanjeev Arora, Carsten Lund, Rajeev Motwani, Madhu Sudan, and Mario Szegedy.      Proof  verification  and  the  hardness  of  approximation  problems.    J.&amp;nbsp;of  the  ACM,      45(3):501–555, May 1998.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [11]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/siamcomp/BackursI18&quot;&gt;&lt;/a&gt;Arturs Backurs and Piotr Indyk.  Edit distance cannot be computed in strongly      subquadratic time (unless SETH is false). SIAM J. Comput., 47(3):1087–1097, 2018.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [12]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XBatcher68&quot;&gt;&lt;/a&gt;Kenneth&amp;nbsp;E. Batcher.  Sorting networks and their applications.  In AFIPS Spring      Joint Computing Conference, volume&amp;nbsp;32, pages 307–314, 1968.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [13]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XBeameCH86&quot;&gt;&lt;/a&gt;Paul  Beame,  Stephen&amp;nbsp;A.  Cook,  and  H.&amp;nbsp;James  Hoover.   Log  depth  circuits  for      division and related problems. SIAM J. Comput., 15(4):994–1003, 1986.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [14]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XBSSV03&quot;&gt;&lt;/a&gt;Paul Beame, Michael Saks, Xiaodong Sun, and Erik Vee.   Time-space trade-off      lower  bounds  for  randomized  computation  of  decision  problems.   J.&amp;nbsp;of  the  ACM,      50(2):154–195, 2003.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [15]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XBen-OrC92&quot;&gt;&lt;/a&gt;Michael Ben-Or and Richard Cleve. Computing algebraic formulas using a constant      number of registers. SIAM J.&amp;nbsp;on Computing, 21(1):54–58, 1992.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [16]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/cc/BussW15&quot;&gt;&lt;/a&gt;Samuel&amp;nbsp;R.  Buss  and  Ryan  Williams.   Limits  on  alternation  trading  proofs  for      time-space lower bounds. Comput. Complex., 24(3):533–600, 2015.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [17]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:conf/stoc/ChenT19&quot;&gt;&lt;/a&gt;Lijie Chen and Roei Tell. Bootstrapping results for threshold circuits &amp;#8220;just beyond&amp;#8221;      known lower bounds.  In Moses Charikar and Edith Cohen, editors, Proceedings of the      51st Annual ACM SIGACT Symposium on Theory of Computing, STOC 2019, Phoenix,      AZ, USA, June 23-26, 2019, pages 34–41. ACM, 2019.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [18]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XCleve91&quot;&gt;&lt;/a&gt;Richard  Cleve.    Towards  optimal  simulations  of  formulas  by  bounded-width                                                                                                                                                                                          programs. Computational Complexity, 1:91–105, 1991.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [19]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XCook73&quot;&gt;&lt;/a&gt;Stephen&amp;nbsp;A. Cook. A hierarchy for nondeterministic time complexity. J.&amp;nbsp;of Computer      and System Sciences, 7(4):343–353, 1973.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [20]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/siamcomp/Csanky76&quot;&gt;&lt;/a&gt;L.&amp;nbsp;Csanky.     Fast  parallel  matrix  inversion  algorithms.     SIAM  J.  Comput.,      5(4):618–623, 1976.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [21]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/jcss/Fortnow00&quot;&gt;&lt;/a&gt;Lance  Fortnow.   Time-space  tradeoffs  for  satisfiability.   J.  Comput.  Syst.  Sci.,      60(2):337–353, 2000.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [22]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/jct/FraenkelL81&quot;&gt;&lt;/a&gt;Aviezri&amp;nbsp;S. Fraenkel and David Lichtenstein. Computing a perfect strategy for n x n      chess requires time exponential in n. J. Comb. Theory, Ser. A, 31(2):199–214, 1981.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [23]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XFredmanS89&quot;&gt;&lt;/a&gt;Michael&amp;nbsp;L. Fredman and Michael&amp;nbsp;E. Saks.  The cell probe complexity of dynamic      data structures. In ACM Symp.&amp;nbsp;on the Theory of Computing (STOC), pages 345–354,      1989.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [24]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XGajentaanO95&quot;&gt;&lt;/a&gt;Anka Gajentaan and Mark&amp;nbsp;H. Overmars. On a class of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7BO%7D%28n%5E2%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7BO%7D%28n%5E2%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7BO%7D%28n%5E2%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;{O}(n^2)&quot; class=&quot;latex&quot; /&gt; problems in computational      geometry. Comput. Geom., 5:165–185, 1995.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [25]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XGareyJ79&quot;&gt;&lt;/a&gt;M.&amp;nbsp;R. Garey and David&amp;nbsp;S. Johnson. Computers and Intractability: A Guide to the      Theory of NP-Completeness. W. H. Freeman, 1979.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [26]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XMR1549939&quot;&gt;&lt;/a&gt;K.&amp;nbsp;G�del.   �ber  formal  unentscheidbare  s�tze  der  Principia  Mathematica  und      verwandter systeme I. Monatsh. Math. Phys., 38, 1931.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [27]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XGoldreich08Complexity&quot;&gt;&lt;/a&gt;Oded Goldreich. Computational Complexity: A Conceptual Perspective. Cambridge      University Press, 2008.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [28]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XGreenlawHR-Limits&quot;&gt;&lt;/a&gt;Raymond  Greenlaw,  H.&amp;nbsp;James  Hoover,  and  Walter  Ruzzo.   Limits  to  Parallel      Computation: P-Completeness Theory. 02 2001.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [29]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;X10.4007/annals.2021.193.2.4&quot;&gt;&lt;/a&gt;David Harvey and Joris van&amp;nbsp;der Hoeven. Integer multiplication in time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=O%28n%5Cmathrm+%7Blog%7D%5C%2C+n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=O%28n%5Cmathrm+%7Blog%7D%5C%2C+n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=O%28n%5Cmathrm+%7Blog%7D%5C%2C+n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;O(n&amp;#92;mathrm {log}&amp;#92;, n)&quot; class=&quot;latex&quot; /&gt;. Annals of      Mathematics, 193(2):563 – 617, 2021.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [30]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/iandc/Hennie65&quot;&gt;&lt;/a&gt;F.&amp;nbsp;C. Hennie.  One-tape, off-line turing machine computations.  Information and      Control, 8(6):553–578, 1965.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [31]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XHennieS66&quot;&gt;&lt;/a&gt;Fred  Hennie  and  Richard  Stearns.    Two-tape  simulation  of  multitape  turing      machines. J.&amp;nbsp;of the ACM, 13:533–546, October 1966.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [32]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/jacm/HopcroftPV77&quot;&gt;&lt;/a&gt;John&amp;nbsp;E. Hopcroft, Wolfgang&amp;nbsp;J. Paul, and Leslie&amp;nbsp;G. Valiant. On time versus space.      J. ACM, 24(2):332–337, 1977.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [33]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XIP99&quot;&gt;&lt;/a&gt;Russell Impagliazzo and Ramamohan Paturi.   The complexity of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;k&quot; class=&quot;latex&quot; /&gt;-sat.   In IEEE      Conf.&amp;nbsp;on Computational Complexity (CCC), pages 237–, 1999.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [34]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XImpagliazzoPS97&quot;&gt;&lt;/a&gt;Russell Impagliazzo, Ramamohan Paturi, and Michael&amp;nbsp;E. Saks. Size-depth tradeoffs      for threshold circuits. SIAM J. Comput., 26(3):693–707, 1997.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [35]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XIPZ01&quot;&gt;&lt;/a&gt;Russell Impagliazzo, Ramamohan Paturi, and Francis Zane.  Which problems have      strongly exponential complexity? J. Computer &amp;amp; Systems Sciences, 63(4):512–530, Dec      2001.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [36]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XImW97&quot;&gt;&lt;/a&gt;Russell  Impagliazzo  and  Avi  Wigderson.    &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cmathit+%7BP%7D+%3D+%5Cmathit+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cmathit+%7BP%7D+%3D+%5Cmathit+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathit+%7BP%7D+%3D+%5Cmathit+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;mathit {P} = &amp;#92;mathit {BPP}&quot; class=&quot;latex&quot; /&gt;  if  &lt;img src=&quot;https://s0.wp.com/latex.php?latex=E&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=E&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=E&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;E&quot; class=&quot;latex&quot; /&gt;  requires  exponential  circuits:      Derandomizing the XOR lemma.  In 29th ACM Symp.&amp;nbsp;on the Theory of Computing      (STOC), pages 220–229. ACM, 1997.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [37]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XKarpLi82&quot;&gt;&lt;/a&gt;Richard&amp;nbsp;M.  Karp  and  Richard&amp;nbsp;J.  Lipton.    Turing  machines  that  take  advice.      L’Enseignement Math�matique. Revue Internationale. IIe S�rie, 28(3-4):191–209, 1982.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [38]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XKobayashi1985OnTS&quot;&gt;&lt;/a&gt;Kojiro Kobayashi.  On the structure of one-tape nondeterministic turing machine      time hierarchy. Theor. Comput. Sci., 40:175–193, 1985.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [39]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/siamcomp/LarsenWY20&quot;&gt;&lt;/a&gt;Kasper&amp;nbsp;Green Larsen, Omri Weinstein, and Huacheng Yu. Crossing the logarithmic      barrier for dynamic boolean data structure lower bounds.  SIAM J. Comput., 49(5),      2020.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [40]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XLevin73&quot;&gt;&lt;/a&gt;Leonid&amp;nbsp;A.  Levin.    Universal  sequential  search  problems.    Problemy  Peredachi      Informatsii, 9(3):115–116, 1973.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [41]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XLundFoKaNi92&quot;&gt;&lt;/a&gt;Carsten Lund, Lance Fortnow, Howard Karloff, and Noam Nisan. Algebraic methods      for interactive proof systems. J.&amp;nbsp;of the ACM, 39(4):859–868, October 1992.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [42]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XLupanov58&quot;&gt;&lt;/a&gt;O.&amp;nbsp;B. Lupanov. A method of circuit synthesis. Izv. VUZ Radiofiz., 1:120–140, 1958.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [43]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XMaS87&quot;&gt;&lt;/a&gt;Wolfgang Maass and Amir Schorr. Speed-up of Turing machines with one work tape      and a two-way input tape. SIAM J.&amp;nbsp;on Computing, 16(1):195–202, 1987.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [44]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XBarrington89&quot;&gt;&lt;/a&gt;David&amp;nbsp;A.  Mix  Barrington.   Bounded-width  polynomial-size  branching  programs      recognize  exactly  those  languages  in  NC&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5E1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5E1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5E1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;^1&quot; class=&quot;latex&quot; /&gt;.    J.&amp;nbsp;of  Computer  and  System  Sciences,      38(1):150–164, 1989.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [45]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XNaN93&quot;&gt;&lt;/a&gt;Joseph Naor and Moni Naor.  Small-bias probability spaces: efficient constructions      and applications. SIAM J.&amp;nbsp;on Computing, 22(4):838–856, 1993.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [46]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XNechiporuk66&quot;&gt;&lt;/a&gt;E.&amp;nbsp;I. Nechiporuk. A boolean function. Soviet Mathematics-Doklady, 169(4):765–766,      1966.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [47]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XNep70&quot;&gt;&lt;/a&gt;Valery&amp;nbsp;A. Nepomnjaščiĭ. Rudimentary predicates and Turing calculations. Soviet      Mathematics-Doklady, 11(6):1462–1465, 1970.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [48]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XViolaNEU-ram2sat-neu-author&quot;&gt;&lt;/a&gt;NEU. From RAM to SAT. Available at &lt;a href=&quot;http://www.ccs.neu.edu/home/viola/&quot; rel=&quot;nofollow&quot;&gt;http://www.ccs.neu.edu/home/viola/&lt;/a&gt;, 2012.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;                                                                                                                                                                                      [49]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/jcss/PapadimitriouY91&quot;&gt;&lt;/a&gt;Christos&amp;nbsp;H. Papadimitriou and Mihalis Yannakakis. Optimization, approximation,      and complexity classes. J. Comput. Syst. Sci., 43(3):425–440, 1991.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [50]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XPPST83&quot;&gt;&lt;/a&gt;Wolfgang&amp;nbsp;J. Paul, Nicholas Pippenger, Endre Szemer�di, and William&amp;nbsp;T. Trotter.      On determinism versus non-determinism and related problems (preliminary version). In      IEEE Symp.&amp;nbsp;on Foundations of Computer Science (FOCS), pages 429–438, 1983.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [51]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XPippengerF79&quot;&gt;&lt;/a&gt;Nicholas Pippenger and Michael&amp;nbsp;J. Fischer. Relations among complexity measures.      J.&amp;nbsp;of the ACM, 26(2):361–381, 1979.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [52]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XRaz87&quot;&gt;&lt;/a&gt;Alexander Razborov. Lower bounds on the dimension of schemes of bounded depth      in a complete basis containing the logical addition function.  Akademiya Nauk SSSR.      Matematicheskie Zametki, 41(4):598–607, 1987.  English translation in Mathematical      Notes of the Academy of Sci. of the USSR, 41(4):333-338, 1987.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [53]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XReingold08&quot;&gt;&lt;/a&gt;Omer Reingold. Undirected connectivity in log-space. J.&amp;nbsp;of the ACM, 55(4), 2008.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [54]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/siamcomp/Robson84&quot;&gt;&lt;/a&gt;J.&amp;nbsp;M.  Robson.    N  by  N  checkers  is  exptime  complete.    SIAM  J.  Comput.,      13(2):252–267, 1984.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [55]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:conf/coco/Santhanam01&quot;&gt;&lt;/a&gt;Rahul Santhanam.   On separators, segregators and time versus space.   In IEEE      Conf.&amp;nbsp;on Computational Complexity (CCC), pages 286–294, 2001.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [56]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XSAVITCH1970177&quot;&gt;&lt;/a&gt;Walter&amp;nbsp;J. Savitch.  Relationships between nondeterministic and deterministic tape      complexities. Journal of Computer and System Sciences, 4(2):177–192, 1970.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [57]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/siamcomp/Schonhage80&quot;&gt;&lt;/a&gt;Arnold Sch�nhage. Storage modification machines. SIAM J. Comput., 9(3):490–508,      1980.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [58]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XShamir92&quot;&gt;&lt;/a&gt;Adi Shamir. IP = PSPACE. J.&amp;nbsp;of the ACM, 39(4):869–877, October 1992.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [59]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XMR29860&quot;&gt;&lt;/a&gt;Claude&amp;nbsp;E. Shannon. The synthesis of two-terminal switching circuits. Bell System                                                                                                                                                                                          Tech. J., 28:59–98, 1949.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [60]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XSho90&quot;&gt;&lt;/a&gt;Victor Shoup. New algorithms for finding irreducible polynomials over finite fields.      Mathematics of Computation, 54(189):435–447, 1990.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [61]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XSiegel04&quot;&gt;&lt;/a&gt;Alan Siegel. On universal classes of extremely random constant-time hash functions.      SIAM J.&amp;nbsp;on Computing, 33(3):505–543, 2004.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [62]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XSip83b&quot;&gt;&lt;/a&gt;Michael Sipser. A complexity theoretic approach to randomness. In ACM Symp.&amp;nbsp;on      the Theory of Computing (STOC), pages 330–335, 1983.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [63]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XSmo87&quot;&gt;&lt;/a&gt;Roman Smolensky.  Algebraic methods in the theory of lower bounds for Boolean      circuit complexity.  In 19th ACM Symp.&amp;nbsp;on the Theory of Computing (STOC), pages      77–82. ACM, 1987.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [64]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XMR2145856&quot;&gt;&lt;/a&gt;Larry Stockmeyer and Albert&amp;nbsp;R. Meyer.  Cosmological lower bound on the circuit      complexity of a small problem in logic. J. ACM, 49(6):753–784, 2002.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [65]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XToda91&quot;&gt;&lt;/a&gt;Seinosuke Toda.   PP is as hard as the polynomial-time hierarchy.   SIAM J.&amp;nbsp;on      Computing, 20(5):865–877, 1991.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [66]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/x/Turing37&quot;&gt;&lt;/a&gt;Alan&amp;nbsp;M.   Turing.      On   computable   numbers,   with   an   application   to   the      entscheidungsproblem. Proc. London Math. Soc., s2-42(1):230–265, 1937.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [67]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XVal77&quot;&gt;&lt;/a&gt;Leslie&amp;nbsp;G.  Valiant.   Graph-theoretic  arguments  in  low-level  complexity.   In  6th      Symposium on Mathematical Foundations of Computer Science, volume&amp;nbsp;53 of Lecture      Notes in Computer Science, pages 162–176. Springer, 1977.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [68]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/tcs/ValiantV86&quot;&gt;&lt;/a&gt;Leslie&amp;nbsp;G. Valiant and Vijay&amp;nbsp;V. Vazirani. NP is as easy as detecting unique solutions.      Theor. Comput. Sci., 47(3):85–93, 1986.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [69]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XMelkebeek06&quot;&gt;&lt;/a&gt;Dieter  van  Melkebeek.   A  survey  of  lower  bounds  for  satisfiability  and  related                                                                                                                                                                                          problems. Foundations and Trends in Theoretical Computer Science, 2(3):197–303, 2006.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [70]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/tcs/MelkebeekR05&quot;&gt;&lt;/a&gt;Dieter van Melkebeek and Ran Raz.  A time lower bound for satisfiability.  Theor.      Comput. Sci., 348(2-3):311–320, 2005.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [71]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/tcs/Vinodchandran05&quot;&gt;&lt;/a&gt;N.&amp;nbsp;V. Vinodchandran.  A note on the circuit complexity of PP.  Theor. Comput.      Sci., 347(1-2):415–418, 2005.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [72]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XViolaBPvsE&quot;&gt;&lt;/a&gt;Emanuele Viola.  On approximate majority and probabilistic time.  Computational      Complexity, 18(3):337–375, 2009.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [73]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;Xviola-FTTCS09&quot;&gt;&lt;/a&gt;Emanuele Viola. On the power of small-depth computation. Foundations and Trends      in Theoretical Computer Science, 5(1):1–72, 2009.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [74]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XViola-xxx&quot;&gt;&lt;/a&gt;Emanuele Viola.  Reducing 3XOR to listing triangles, an exposition.  Available at      &lt;a href=&quot;http://www.ccs.neu.edu/home/viola/&quot; rel=&quot;nofollow&quot;&gt;http://www.ccs.neu.edu/home/viola/&lt;/a&gt;, 2011.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [75]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;Xviola-datastructurelb-implies-cclb&quot;&gt;&lt;/a&gt;Emanuele Viola.  Lower bounds for data structures with space close to maximum      imply  circuit  lower  bounds.    Theory  of  Computing,  15:1–9,  2019.    Available  at      &lt;a href=&quot;http://www.ccs.neu.edu/home/viola/&quot; rel=&quot;nofollow&quot;&gt;http://www.ccs.neu.edu/home/viola/&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [76]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;Xviola-tm&quot;&gt;&lt;/a&gt;Emanuele  Viola.   Pseudorandom  bits  and  lower  bounds  for  randomized  turing      machines. Theory of Computing, 18(10):1–12, 2022.&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&quot;authors&quot;&gt;By Manu&lt;/p&gt;
  </content>
    <author>
      <name>Emanuele Viola</name>
      <uri>https://emanueleviola.wordpress.com</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">TCS+ Seminar Series: TCS+ talk: Wednesday, May 17 — Justin Gilmer, Google</title>
    <link href="https://tcsplus.wordpress.com/2023/05/11/tcs-talk-wednesday-may-17-justin-gilmer-google/"/>
    <id>http://tcsplus.wordpress.com/?p=689</id>
    <updated>2023-05-11T10:53:10+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;The next TCS+ talk will take place this coming Wednesday, May 17th at 1:00 PM Eastern Time (10:00 AM Pacific Time, 19:00 Central European Time, 17:00 UTC). &lt;strong&gt;Justin Gilmer&lt;/strong&gt; from Google will speak about &amp;#8220;&lt;em&gt;A constant lower bound for Frankl&amp;#8217;s union-closed sets conjecture.&lt;/em&gt;&amp;#8221; (abstract below).&lt;/p&gt;
&lt;p&gt;You can reserve a spot as an individual or a group to join us live by signing up on &lt;a href=&quot;https://sites.google.com/view/tcsplus/welcome/next-tcs-talk&quot;&gt;the online form&lt;/a&gt;. Registration is &lt;em&gt;not&lt;/em&gt; required to attend the interactive talk, and the link will be posted on the website the day prior to the talk; however, by registering in the form, you will receive a reminder, along with the link. (The recorded talk will also be posted &lt;a href=&quot;https://sites.google.com/view/tcsplus/welcome/past-talks&quot;&gt;on our website&lt;/a&gt; afterwards) As usual, for more information about the TCS+ online seminar series and the upcoming talks, or to &lt;a href=&quot;https://sites.google.com/view/tcsplus/welcome/suggest-a-talk&quot;&gt;suggest&lt;/a&gt; a possible topic or speaker, please see &lt;a href=&quot;https://sites.google.com/view/tcsplus/&quot;&gt;the website&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote&quot;&gt;&lt;p&gt;Abstract: A finite set system is union-closed if for every pair of sets in the system their union is also in the system. Frankl in 1979 conjectured that for any such system there exists an element which is contained in ½ of the sets in that system (the only exception being the family containing just the empty set). In this talk I will discuss how a simple observation regarding the contrapositive of Frankl&amp;#8217;s conjecture eventually led to the discovery of an information theoretic approach on the problem and a proof of the first constant lower bound.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p class=&quot;authors&quot;&gt;By plustcs&lt;/p&gt;
  </content>
    <author>
      <name>TCS+ Seminar Series</name>
      <uri>https://tcsplus.wordpress.com</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">CCI: jobs: postdoc at Aarhus University (apply by January 6, 2023)</title>
    <link href="https://cstheory-jobs.org/2023/05/11/postdoc-at-aarhus-university-apply-by-january-6-2023/"/>
    <id>http://cstheory-jobs.org/2023/05/11/postdoc-at-aarhus-university-apply-by-january-6-2023/</id>
    <updated>2023-05-11T09:10:21+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;A post doc position in theoretical aspects of machine learning is&lt;br /&gt;
available. The post doc is under the supervision of Professor Kasper Green Larsen, Aarhus University, Denmark.&lt;/p&gt;
&lt;p&gt;Candidates with expertise in theoretical computer science&lt;br /&gt;
and/or machine learning are preferred.&lt;/p&gt;
&lt;p&gt;Website: &lt;a href=&quot;https://clin.medarbejdere.au.dk/en/postgraduate-clinical-associate-professors/job-openings/job/post-doc-position-in-theoretical-aspects-of-machine-learning-at-computer-science-aarhus-university-1&quot;&gt;https://clin.medarbejdere.au.dk/en/postgraduate-clinical-associate-professors/job-openings/job/post-doc-position-in-theoretical-aspects-of-machine-learning-at-computer-science-aarhus-university-1&lt;/a&gt;&lt;br /&gt;
Email: larsen@cs.au.dk&lt;/p&gt;
&lt;p class=&quot;authors&quot;&gt;By shacharlovett&lt;/p&gt;
  </content>
    <author>
      <name>CCI: jobs</name>
      <uri>https://cstheory-jobs.org</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">Gil Kalai: Amnon Shashua’s lecture at Reichman University: A Deep Dive into LLMs and their Future Impact.</title>
    <link href="https://gilkalai.wordpress.com/2023/05/11/amnon-shashuas-lecture-at-reichman-university-a-deep-dive-into-llms-and-their-future-impact/"/>
    <id>http://gilkalai.wordpress.com/?p=24235</id>
    <updated>2023-05-11T05:31:20+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;&lt;/p&gt;


&lt;p&gt;LLM is the acronym for &amp;#8220;large language model&amp;#8221; like GPT-3, ChatGPT, GPT-4 etc. Amnon Shashua gave an enlightening clear lecture about the repeated recent breakthroughs for LLM&amp;#8217;s and where we stand. Here is the &lt;a href=&quot;https://youtu.be/Qz3q6jcknHE&quot;&gt;You-Tube link&lt;/a&gt; for the lecture (in Hebrew) and I will try to add a link for the slides (which are in English). &lt;strong&gt;Update:&lt;/strong&gt; &lt;a title=&quot;LLMs-RUNI&quot; href=&quot;https://gilkalai.files.wordpress.com/2023/05/llms-runi.pdf&quot;&gt;Here are the slides.&lt;/a&gt; One aspect of the story that I find mind boggling is that adding to the model the ability to program for the purpose of writing code, led also to improved language abilities! (As a matter of fact, everything about LLMs is mind boggling!) &lt;/p&gt;
&lt;p&gt;&lt;iframe class=&quot;youtube-player&quot; width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/Qz3q6jcknHE?version=3&amp;#038;rel=1&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;fs=1&amp;#038;hl=en&amp;#038;autohide=2&amp;#038;wmode=transparent&quot; allowfullscreen=&quot;true&quot; style=&quot;border:0;&quot; sandbox=&quot;allow-scripts allow-same-origin allow-popups allow-presentation&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Two weeks ago Amnon Shasua was awarded the &lt;a href=&quot;https://en.wikipedia.org/wiki/Israel_Prize&quot;&gt;Israel prize&lt;/a&gt;, regarded as the state&amp;#8217;s highest cultural honor. In his words on behalf of the recipients, Amnon emphasized the need to keep  the independence and stature of the Israeli court systems. &lt;span style=&quot;color: #0000ff&quot;&gt;&lt;strong&gt;Congratulations, Amnon! &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Let me also mention that as part of a project (in its early stages) with Maya Bar-Hillel and Daphna Shahaf, last summer we performed several little experiments with various AI programs and below are some entertaining related Dalle-E2 pictures. Here is &lt;a href=&quot;https://youtu.be/92T34rp6H6Q&quot;&gt;another intersting video&lt;/a&gt; where &lt;a href=&quot;https://youtu.be/92T34rp6H6Q&quot;&gt;Liron Lishinsky-Fisher&lt;/a&gt; describes eight AI applications. &lt;/p&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; data-attachment-id=&quot;24245&quot; data-permalink=&quot;https://gilkalai.wordpress.com/2023/05/11/amnon-shashuas-lecture-at-reichman-university-a-deep-dive-into-llms-and-their-future-impact/ai21-labs/&quot; data-orig-file=&quot;https://gilkalai.files.wordpress.com/2023/05/founders_roei-shor-photography-ai21-labs-.jpg&quot; data-orig-size=&quot;2048,1365&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;Roei Shor&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;\u00a9 2022 Roei Shor, all rights reserved.&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;AI21 labs&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;1&amp;quot;}&quot; data-image-title=&quot;AI21 labs&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://gilkalai.files.wordpress.com/2023/05/founders_roei-shor-photography-ai21-labs-.jpg?w=300&quot; data-large-file=&quot;https://gilkalai.files.wordpress.com/2023/05/founders_roei-shor-photography-ai21-labs-.jpg?w=640&quot; class=&quot;alignnone size-full wp-image-24245&quot; src=&quot;https://gilkalai.files.wordpress.com/2023/05/founders_roei-shor-photography-ai21-labs-.jpg&quot; alt=&quot;AI21 labs&quot; width=&quot;2048&quot; height=&quot;1365&quot; srcset=&quot;https://gilkalai.files.wordpress.com/2023/05/founders_roei-shor-photography-ai21-labs-.jpg 2048w, https://gilkalai.files.wordpress.com/2023/05/founders_roei-shor-photography-ai21-labs-.jpg?w=150&amp;amp;h=100 150w, https://gilkalai.files.wordpress.com/2023/05/founders_roei-shor-photography-ai21-labs-.jpg?w=300&amp;amp;h=200 300w, https://gilkalai.files.wordpress.com/2023/05/founders_roei-shor-photography-ai21-labs-.jpg?w=768&amp;amp;h=512 768w, https://gilkalai.files.wordpress.com/2023/05/founders_roei-shor-photography-ai21-labs-.jpg?w=1024&amp;amp;h=683 1024w&quot; sizes=&quot;(max-width: 2048px) 100vw, 2048px&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/AI21_Labs&quot;&gt;AI21&lt;/a&gt; founders: Yoav Shoham, Ori Goshen, and Amnon Shashua. (Roei Shor Photography, &lt;a href=&quot;https://www.timesofisrael.com/ai21-labs-co-founded-by-amnon-shashua-rolls-out-ai-feature-to-spice-up-writing/&quot;&gt;source&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; data-attachment-id=&quot;24241&quot; data-permalink=&quot;https://gilkalai.wordpress.com/2023/05/11/amnon-shashuas-lecture-at-reichman-university-a-deep-dive-into-llms-and-their-future-impact/fish2/&quot; data-orig-file=&quot;https://gilkalai.files.wordpress.com/2023/05/fish2.jpg&quot; data-orig-size=&quot;835,813&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;1&amp;quot;}&quot; data-image-title=&quot;fish2&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://gilkalai.files.wordpress.com/2023/05/fish2.jpg?w=300&quot; data-large-file=&quot;https://gilkalai.files.wordpress.com/2023/05/fish2.jpg?w=640&quot; class=&quot;alignnone size-full wp-image-24241&quot; src=&quot;https://gilkalai.files.wordpress.com/2023/05/fish2.jpg&quot; alt=&quot;fish2&quot; width=&quot;835&quot; height=&quot;813&quot; srcset=&quot;https://gilkalai.files.wordpress.com/2023/05/fish2.jpg 835w, https://gilkalai.files.wordpress.com/2023/05/fish2.jpg?w=150&amp;amp;h=146 150w, https://gilkalai.files.wordpress.com/2023/05/fish2.jpg?w=300&amp;amp;h=292 300w, https://gilkalai.files.wordpress.com/2023/05/fish2.jpg?w=768&amp;amp;h=748 768w&quot; sizes=&quot;(max-width: 835px) 100vw, 835px&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: #ff0000&quot;&gt;&lt;strong&gt;Prompt: &lt;span class=&quot;x193iq5w xeuugli x13faqbe x1vvkbs x1xmvt09 x1lliihq x1s928wv xhkezso x1gmr53x x1cpjm7i x1fgarty x1943h6x xudqn12 x3x7a5m x6prxxf xvq8zen xo1l8bm xzsf02u x1yc453h&quot; dir=&quot;auto&quot;&gt;Steve is walking from the city hall toward the big fish and Andrew is walking from the big fish toward the city hall.&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; data-attachment-id=&quot;24243&quot; data-permalink=&quot;https://gilkalai.wordpress.com/2023/05/11/amnon-shashuas-lecture-at-reichman-university-a-deep-dive-into-llms-and-their-future-impact/dall%c2%b7e-2023-02-07-20-51-25-cecil-is-a-criminal-lawyer-show-a-picture-of-cecil-at-age-of-two/&quot; data-orig-file=&quot;https://gilkalai.files.wordpress.com/2023/05/dallc2b7e-2023-02-07-20.51.25-cecil-is-a-criminal-lawyer.-show-a-picture-of-cecil-at-age-of-two.png&quot; data-orig-size=&quot;1024,1024&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;DALL·E 2023-02-07 20.51.25 &amp;#8211; Cecil is a criminal lawyer. Show a picture of Cecil at age of two.&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://gilkalai.files.wordpress.com/2023/05/dallc2b7e-2023-02-07-20.51.25-cecil-is-a-criminal-lawyer.-show-a-picture-of-cecil-at-age-of-two.png?w=300&quot; data-large-file=&quot;https://gilkalai.files.wordpress.com/2023/05/dallc2b7e-2023-02-07-20.51.25-cecil-is-a-criminal-lawyer.-show-a-picture-of-cecil-at-age-of-two.png?w=640&quot; class=&quot;alignnone size-full wp-image-24243&quot; src=&quot;https://gilkalai.files.wordpress.com/2023/05/dallc2b7e-2023-02-07-20.51.25-cecil-is-a-criminal-lawyer.-show-a-picture-of-cecil-at-age-of-two.png&quot; alt=&quot;DALL·E 2023-02-07 20.51.25 - Cecil is a criminal lawyer. Show a picture of Cecil at age of two.&quot; width=&quot;1024&quot; height=&quot;1024&quot; srcset=&quot;https://gilkalai.files.wordpress.com/2023/05/dallc2b7e-2023-02-07-20.51.25-cecil-is-a-criminal-lawyer.-show-a-picture-of-cecil-at-age-of-two.png 1024w, https://gilkalai.files.wordpress.com/2023/05/dallc2b7e-2023-02-07-20.51.25-cecil-is-a-criminal-lawyer.-show-a-picture-of-cecil-at-age-of-two.png?w=150&amp;amp;h=150 150w, https://gilkalai.files.wordpress.com/2023/05/dallc2b7e-2023-02-07-20.51.25-cecil-is-a-criminal-lawyer.-show-a-picture-of-cecil-at-age-of-two.png?w=300&amp;amp;h=300 300w, https://gilkalai.files.wordpress.com/2023/05/dallc2b7e-2023-02-07-20.51.25-cecil-is-a-criminal-lawyer.-show-a-picture-of-cecil-at-age-of-two.png?w=768&amp;amp;h=768 768w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;color: #ff0000&quot;&gt;A criminal lawyer at the age of two.&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p class=&quot;authors&quot;&gt;By Gil Kalai&lt;/p&gt;
  </content>
    <author>
      <name>Gil Kalai</name>
      <uri>https://gilkalai.wordpress.com</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Scheme-Theoretic Approach to Computational Complexity. IV. A New Perspective on Hardness of Approximation</title>
    <link href="http://arxiv.org/abs/2305.05676"/>
    <id>http://arxiv.org/abs/2305.05676</id>
    <updated>2023-05-11T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Civril_A/0/1/0/all/0/1&quot;&gt;Ali &amp;#xc7;ivril&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We provide a new approach for establishing hardness of approximation results,
based on the theory recently introduced by the author. It allows one to
directly show that approximating a problem beyond a certain threshold requires
super-polynomial time. To exhibit the framework, we revisit two famous problems
in this paper. The particular results we prove are:
&lt;/p&gt;
&lt;p&gt;MAX-3-SAT$(1,\frac{7}{8}+\epsilon)$ requires exponential time for any
constant $\epsilon$ satisfying $\frac{1}{8} \geq \epsilon &amp;gt; 0$. In particular,
the gap exponential time hypothesis (Gap-ETH) holds.
&lt;/p&gt;
&lt;p&gt;MAX-3-LIN-2$(1-\epsilon, \frac{1}{2}+\epsilon)$ requires exponential time for
any constant $\epsilon$ satisfying $\frac{1}{4} \geq \epsilon &amp;gt; 0$.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: On the average-case complexity of learning output distributions of quantum circuits</title>
    <link href="http://arxiv.org/abs/2305.05765"/>
    <id>http://arxiv.org/abs/2305.05765</id>
    <updated>2023-05-11T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/quant-ph/1/au:+Nietner_A/0/1/0/all/0/1&quot;&gt;Alexander Nietner&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/quant-ph/1/au:+Ioannou_M/0/1/0/all/0/1&quot;&gt;Marios Ioannou&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/quant-ph/1/au:+Sweke_R/0/1/0/all/0/1&quot;&gt;Ryan Sweke&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/quant-ph/1/au:+Kueng_R/0/1/0/all/0/1&quot;&gt;Richard Kueng&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/quant-ph/1/au:+Eisert_J/0/1/0/all/0/1&quot;&gt;Jens Eisert&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/quant-ph/1/au:+Hinsche_M/0/1/0/all/0/1&quot;&gt;Marcel Hinsche&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/quant-ph/1/au:+Haferkamp_J/0/1/0/all/0/1&quot;&gt;Jonas Haferkamp&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In this work, we show that learning the output distributions of brickwork
random quantum circuits is average-case hard in the statistical query model.
This learning model is widely used as an abstract computational model for most
generic learning algorithms. In particular, for brickwork random quantum
circuits on $n$ qubits of depth $d$, we show three main results:
&lt;/p&gt;
&lt;p&gt;- At super logarithmic circuit depth $d=\omega(\log(n))$, any learning
algorithm requires super polynomially many queries to achieve a constant
probability of success over the randomly drawn instance.
&lt;/p&gt;
&lt;p&gt;- There exists a $d=O(n)$, such that any learning algorithm requires
$\Omega(2^n)$ queries to achieve a $O(2^{-n})$ probability of success over the
randomly drawn instance.
&lt;/p&gt;
&lt;p&gt;- At infinite circuit depth $d\to\infty$, any learning algorithm requires
$2^{2^{\Omega(n)}}$ many queries to achieve a $2^{-2^{\Omega(n)}}$ probability
of success over the randomly drawn instance.
&lt;/p&gt;
&lt;p&gt;As an auxiliary result of independent interest, we show that the output
distribution of a brickwork random quantum circuit is constantly far from any
fixed distribution in total variation distance with probability $1-O(2^{-n})$,
which confirms a variant of a conjecture by Aaronson and Chen.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: On the Information Capacity of Nearest Neighbor Representations</title>
    <link href="http://arxiv.org/abs/2305.05808"/>
    <id>http://arxiv.org/abs/2305.05808</id>
    <updated>2023-05-11T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kilic_K/0/1/0/all/0/1&quot;&gt;Kordag Mehmet Kilic&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Sima_J/0/1/0/all/0/1&quot;&gt;Jin Sima&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Bruck_J/0/1/0/all/0/1&quot;&gt;Jehoshua Bruck&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The $\textit{von Neumann Computer Architecture}$ has a distinction between
computation and memory. In contrast, the brain has an integrated architecture
where computation and memory are indistinguishable. Motivated by the
architecture of the brain, we propose a model of $\textit{associative
computation}$ where memory is defined by a set of vectors in $\mathbb{R}^n$
(that we call $\textit{anchors}$), computation is performed by convergence from
an input vector to a nearest neighbor anchor, and the output is a label
associated with an anchor. Specifically, in this paper, we study the
representation of Boolean functions in the associative computation model, where
the inputs are binary vectors and the corresponding outputs are the labels ($0$
or $1$) of the nearest neighbor anchors. The information capacity of a Boolean
function in this model is associated with two quantities: $\textit{(i)}$ the
number of anchors (called $\textit{Nearest Neighbor (NN) Complexity}$) and
$\textit{(ii)}$ the maximal number of bits representing entries of anchors
(called $\textit{Resolution}$). We study symmetric Boolean functions and
present constructions that have optimal NN complexity and resolution.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: DNN Verification, Reachability, and the Exponential Function Problem</title>
    <link href="http://arxiv.org/abs/2305.06064"/>
    <id>http://arxiv.org/abs/2305.06064</id>
    <updated>2023-05-11T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Isac_O/0/1/0/all/0/1&quot;&gt;Omri Isac&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Zohar_Y/0/1/0/all/0/1&quot;&gt;Yoni Zohar&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Barrett_C/0/1/0/all/0/1&quot;&gt;Clark Barrett&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Katz_G/0/1/0/all/0/1&quot;&gt;Guy Katz&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Deep neural networks (DNNs) are increasingly being deployed to perform
safety-critical tasks. The opacity of DNNs, which prevents humans from
reasoning about them, presents new safety and security challenges. To address
these challenges, the verification community has begun developing techniques
for rigorously analyzing DNNs, with numerous verification algorithms proposed
in recent years. While a significant amount of work has gone into developing
these verification algorithms, little work has been devoted to rigorously
studying the computability and complexity of the underlying theoretical
problems. Here, we seek to contribute to the bridging of this gap. We focus on
two kinds of DNNs: those that employ piecewise-linear activation functions
(e.g., ReLU), and those that employ piecewise-smooth activation functions
(e.g., Sigmoids). We prove the two following theorems: 1) The decidability of
verifying DNNs with piecewise-smooth activation functions is equivalent to a
well-known, open problem formulated by Tarski; and 2) The DNN verification
problem for any quantifier-free linear arithmetic specification can be reduced
to the DNN reachability problem, whose approximation is NP-complete. These
results answer two fundamental questions about the computability and complexity
of DNN verification, and the ways it is affected by the network&#39;s activation
functions and error tolerance; and could help guide future efforts in
developing DNN verification tools.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Deterministic and Strongly Nondeterministic Decision Trees for Decision Tables from Closed Classes</title>
    <link href="http://arxiv.org/abs/2305.06093"/>
    <id>http://arxiv.org/abs/2305.06093</id>
    <updated>2023-05-11T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Ostonov_A/0/1/0/all/0/1&quot;&gt;Azimkhon Ostonov&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Moshkov_M/0/1/0/all/0/1&quot;&gt;Mikhail Moshkov&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In this paper, we consider classes of decision tables with 0-1-decisions
closed relative to removal of attributes (columns) and changing decisions
assigned to rows. For tables from an arbitrary closed class, we study the
dependence of the minimum complexity of deterministic decision trees on various
parameters of the tables: the minimum complexity of a test, the complexity of
the set of attributes attached to columns, and the minimum complexity of a
strongly nondeterministic decision tree. We also study the dependence of the
minimum complexity of strongly nondeterministic decision trees on the
complexity of the set of attributes attached to columns. Note that a strongly
nondeterministic decision tree can be interpreted as a set of true decision
rules that cover all rows labeled with the decision 1.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Geometry: Shape Formation and Locomotion with Joint Movements in the Amoebot Model</title>
    <link href="http://arxiv.org/abs/2305.06146"/>
    <id>http://arxiv.org/abs/2305.06146</id>
    <updated>2023-05-11T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Padalkin_A/0/1/0/all/0/1&quot;&gt;Andreas Padalkin&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kumar_M/0/1/0/all/0/1&quot;&gt;Manish Kumar&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Scheideler_C/0/1/0/all/0/1&quot;&gt;Christian Scheideler&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We are considering the geometric amoebot model where a set of $n$ amoebots is
placed on the triangular grid. An amoebot is able to send information to its
neighbors, and to move via expansions and contractions. Since amoebots and
information can only travel node by node, most problems have a natural lower
bound of $\Omega(D)$ where $D$ denotes the diameter of the structure. Inspired
by the nervous and muscular system, Feldmann et al. have proposed the
reconfigurable circuit extension and the joint movement extension of the
amoebot model with the goal of breaking this lower bound.
&lt;/p&gt;
&lt;p&gt;In the joint movement extension, the way amoebots move is altered. Amoebots
become able to push and pull other amoebots. Feldmann et al. demonstrated the
power of joint movements by transforming a line of amoebots into a rhombus
within $O(\log n)$ rounds. However, they left the details of the extension
open. The goal of this paper is therefore to formalize and extend the joint
movement extension. In order to provide a proof of concept for the extension,
we consider two fundamental problems of modular robot systems: shape formation
and locomotion.
&lt;/p&gt;
&lt;p&gt;We approach these problems by defining meta-modules of rhombical and
hexagonal shape, respectively. The meta-modules are capable of movement
primitives like sliding, rotating, and tunneling. This allows us to simulate
shape formation algorithms of various modular robot systems. Finally, we
construct three amoebot structures capable of locomotion by rolling, crawling,
and walking, respectively.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Geometry</name>
      <uri>https://arxiv.org/list/cs.CG/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Geometry: NervePool: A Simplicial Pooling Layer</title>
    <link href="http://arxiv.org/abs/2305.06315"/>
    <id>http://arxiv.org/abs/2305.06315</id>
    <updated>2023-05-11T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+McGuire_S/0/1/0/all/0/1&quot;&gt;Sarah McGuire&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Munch_E/0/1/0/all/0/1&quot;&gt;Elizabeth Munch&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Hirn_M/0/1/0/all/0/1&quot;&gt;Matthew Hirn&lt;/a&gt;&lt;/p&gt;&lt;p&gt;For deep learning problems on graph-structured data, pooling layers are
important for down sampling, reducing computational cost, and to minimize
overfitting. We define a pooling layer, NervePool, for data structured as
simplicial complexes, which are generalizations of graphs that include
higher-dimensional simplices beyond vertices and edges; this structure allows
for greater flexibility in modeling higher-order relationships. The proposed
simplicial coarsening scheme is built upon partitions of vertices, which allow
us to generate hierarchical representations of simplicial complexes, collapsing
information in a learned fashion. NervePool builds on the learned vertex
cluster assignments and extends to coarsening of higher dimensional simplices
in a deterministic fashion. While in practice, the pooling operations are
computed via a series of matrix operations, the topological motivation is a
set-theoretic construction based on unions of stars of simplices and the nerve
complex
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Geometry</name>
      <uri>https://arxiv.org/list/cs.CG/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Parallel External Sorting of ASCII Records Using Learned Models</title>
    <link href="http://arxiv.org/abs/2305.05671"/>
    <id>http://arxiv.org/abs/2305.05671</id>
    <updated>2023-05-11T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kristo_A/0/1/0/all/0/1&quot;&gt;Ani Kristo&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kraska_T/0/1/0/all/0/1&quot;&gt;Tim Kraska&lt;/a&gt;&lt;/p&gt;&lt;p&gt;External sorting is at the core of many operations in large-scale database
systems, such as ordering and aggregation queries for large result sets,
building indexes, sort-merge joins, duplicate removal, sharding, and record
clustering. Unlike in-memory sorting, these algorithms need to work together
with the OS and the filesystem to efficiently utilize system resources and
minimize disk I/O.
&lt;/p&gt;
&lt;p&gt;In this paper we describe ELSAR: a parallel external sorting algorithm that
uses an innovative paradigm based on a learned data distribution model. The
algorithm leverages the model to arrange the input records into mutually
exclusive, monotonic, and equi-depth partitions that, once sorted, can simply
be concatenated to form the output. This method completely eliminates the need
for multi-way file merging, which is typically used in external sorting.
&lt;/p&gt;
&lt;p&gt;We present thorough benchmarks for uniform and skewed datasets in various
storage media, where we measure the sorting rates, size scalability, and energy
efficiency of ELSAR and other sorting algorithms. We observed that ELSAR has up
to 1.65x higher sorting rates than the next-best external sort (Nsort) on SSD
drives and 5.31x higher than the GNU coreutils&#39; sort utility on Intel Optane
non-volatile memory. In addition, ELSAR supersedes the current winner of the
SortBenchmark for the most energy-efficient external string sorting algorithm
by an impressive margin of 41%.
&lt;/p&gt;
&lt;p&gt;These results reinforce the premise that novel learning-enhanced algorithms
can provide remarkable performance benefits over traditional ones.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: On the Number of $t$-Lee-Error-Correcting Codes</title>
    <link href="http://arxiv.org/abs/2305.05763"/>
    <id>http://arxiv.org/abs/2305.05763</id>
    <updated>2023-05-11T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Willenborg_N/0/1/0/all/0/1&quot;&gt;Nadja Willenborg&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Horlemann_A/0/1/0/all/0/1&quot;&gt;Anna-Lena Horlemann&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Weger_V/0/1/0/all/0/1&quot;&gt;Violetta Weger&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We consider $t$-Lee-error-correcting codes of length $n$ over the residue
ring $\mathbb{Z}_m := \mathbb{Z}/m\mathbb{Z}$ and determine upper and lower
bounds on the number of $t$-Lee-error-correcting codes. We use two different
methods, namely estimating isolated nodes on bipartite graphs and the graph
container method. The former gives density results for codes of fixed size and
the latter for any size. This confirms some recent density results for linear
Lee metric codes and provides new density results for nonlinear codes. To apply
a variant of the graph container algorithm we also investigate some geometrical
properties of the balls in the Lee metric.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Universal Matrix Sparsifiers and Fast Deterministic Algorithms for Linear Algebra</title>
    <link href="http://arxiv.org/abs/2305.05826"/>
    <id>http://arxiv.org/abs/2305.05826</id>
    <updated>2023-05-11T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Bhattacharjee_R/0/1/0/all/0/1&quot;&gt;Rajarshi Bhattacharjee&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Dexter_G/0/1/0/all/0/1&quot;&gt;Gregory Dexter&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Musco_C/0/1/0/all/0/1&quot;&gt;Cameron Musco&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Ray_A/0/1/0/all/0/1&quot;&gt;Archan Ray&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Woodruff_D/0/1/0/all/0/1&quot;&gt;David P Woodruff&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Given $\mathbf A \in \mathbb{R}^{n \times n}$ with entries bounded in
magnitude by $1$, it is well-known that if $S \subset [n] \times [n]$ is a
uniformly random subset of $\tilde{O} (n/\epsilon^2)$ entries, and if ${\mathbf
A}_S$ equals $\mathbf A$ on the entries in $S$ and is zero elsewhere, then
$\|\mathbf A - \frac{n^2}{s} \cdot {\mathbf A}_S\|_2 \le \epsilon n$ with high
probability, where $\|\cdot\|_2$ is the spectral norm. We show that for
positive semidefinite (PSD) matrices, no randomness is needed at all in this
statement. Namely, there exists a fixed subset $S$ of $\tilde{O}
(n/\epsilon^2)$ entries that acts as a universal sparsifier: the above error
bound holds simultaneously for every bounded entry PSD matrix $\mathbf A \in
\mathbb{R}^{n \times n}$. One can view this result as a significant extension
of a Ramanujan expander graph, which sparsifies any bounded entry PSD matrix,
not just the all ones matrix.
&lt;/p&gt;
&lt;p&gt;We leverage the existence of such universal sparsifiers to give the first
deterministic algorithms for several central problems related to singular value
computation that run in faster than matrix multiplication time. We also prove
universal sparsification bounds for non-PSD matrices, showing that $\tilde{O}
(n/\epsilon^4)$ entries suffices to achieve error $\epsilon \cdot
\max(n,\|\mathbf A\|_1)$, where $\|\mathbf A\|_1$ is the trace norm. We prove
that this is optimal up to an $\tilde{O} (1/\epsilon^2)$ factor. Finally, we
give an improved deterministic spectral approximation algorithm for PSD
$\mathbf A$ with entries lying in $\{-1,0,1\}$, which we show is nearly
information-theoretically optimal.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Constant Approximation for Network Revenue Management with Markovian-Correlated Customer Arrivals</title>
    <link href="http://arxiv.org/abs/2305.05829"/>
    <id>http://arxiv.org/abs/2305.05829</id>
    <updated>2023-05-11T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Jiang_J/0/1/0/all/0/1&quot;&gt;Jiashuo Jiang&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The Network Revenue Management (NRM) problem is a well-known challenge in
dynamic decision-making under uncertainty. In this problem, fixed resources
must be allocated to serve customers over a finite horizon, while customers
arrive according to a stochastic process. The typical NRM model assumes that
customer arrivals are independent over time. However, in this paper, we explore
a more general setting where customer arrivals over different periods can be
correlated. We propose a new model that assumes the existence of a system
state, which determines customer arrivals for the current period. This system
state evolves over time according to a time-inhomogeneous Markov chain. Our
model can be used to represent correlation in various settings and synthesizes
previous literature on correlation models.
&lt;/p&gt;
&lt;p&gt;To solve the NRM problem under our correlated model, we derive a new linear
programming (LP) approximation of the optimal policy. Our approximation
provides a tighter upper bound on the total expected value collected by the
optimal policy than existing upper bounds. We use our LP to develop a new bid
price policy, which computes bid prices for each system state and time period
in a backward induction manner. The decision is then made by comparing the
reward of the customer against the associated bid prices. Our policy guarantees
to collect at least $1/(1+L)$ fraction of the total reward collected by the
optimal policy, where $L$ denotes the maximum number of resources required by a
customer.
&lt;/p&gt;
&lt;p&gt;In summary, our work presents a new model for correlated customer arrivals in
the NRM problem and provides an LP approximation for solving the problem under
this model. We derive a new bid price policy and provides a theoretical
guarantee on the performance of the policy.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Acceleration of FM-index Queries Through Prefix-free Parsing</title>
    <link href="http://arxiv.org/abs/2305.05893"/>
    <id>http://arxiv.org/abs/2305.05893</id>
    <updated>2023-05-11T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Hong_A/0/1/0/all/0/1&quot;&gt;Aaron Hong&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Oliva_M/0/1/0/all/0/1&quot;&gt;Marco Oliva&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Koppl_D/0/1/0/all/0/1&quot;&gt;Dominik K&amp;#xf6;ppl&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Bannai_H/0/1/0/all/0/1&quot;&gt;Hideo Bannai&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Boucher_C/0/1/0/all/0/1&quot;&gt;Christina Boucher&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Gagie_T/0/1/0/all/0/1&quot;&gt;Travis Gagie&lt;/a&gt;&lt;/p&gt;&lt;p&gt;FM-indexes are a crucial data structure in DNA alignment, for example, but
searching with them usually takes at least one random access per character in
the query pattern. Ferragina and Fischer observed in 2007 that word-based
indexes often use fewer random accesses than character-based indexes, and thus
support faster searches. Since DNA lacks natural word-boundaries, however, it
is necessary to parse it somehow before applying word-based FM-indexing. Last
year, Deng et al.\ proposed parsing genomic data by induced suffix sorting, and
showed the resulting word-based FM-indexes support faster counting queries than
standard FM-indexes when patterns are a few thousand characters or longer. In
this paper we show that using prefix-free parsing -- which takes parameters
that let us tune the average length of the phrases -- instead of induced suffix
sorting, gives a significant speedup for patterns of only a few hundred
characters. We implement our method and demonstrate it is between 3 and 18
times faster than competing methods on queries to GRCh38. And was consistently
faster on queries made to 25,000, 50,000 and 100,000 SARS-CoV-2 genomes. Hence,
it is very clear that our method accelerates the performance of count over all
state-of-the-art methods with a minor increase in the memory. Our source code
is available at https://github.com/marco-oliva/afm .
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Novel Quantum Information Processing Methods and Investigation</title>
    <link href="http://arxiv.org/abs/2305.05953"/>
    <id>http://arxiv.org/abs/2305.05953</id>
    <updated>2023-05-11T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/quant-ph/1/au:+Yu_Z/0/1/0/all/0/1&quot;&gt;Zhang Ze Yu&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Quantum information processing and its subfield, quantum image processing,
are rapidly growing fields as a result of advancements in the practicality of
quantum mechanics. In this paper, we propose a quantum algorithm for processing
information, such as one-dimensional time series and two-dimensional images, in
the frequency domain. The information of interest is encoded into the magnitude
of probability amplitude or the coefficient of each basis state. The oracle for
filtering operates based on postselection results, and its explicit circuit
design is presented. This oracle is versatile enough to perform all basic
filtering, including high pass, low pass, band pass, band stop, and many other
processing techniques. Finally, we present two novel schemes for transposing
matrices in this paper. They use similar encoding rules but with deliberate
choices in terms of selecting basis states. These schemes could potentially be
useful for other quantum information processing tasks, such as edge detection.
The proposed techniques are implemented on the IBM Qiskit quantum simulator.
Some results are compared with traditional information processing results to
verify their correctness and are presented in this paper.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Coding for IBLTs with Listing Guarantees</title>
    <link href="http://arxiv.org/abs/2305.05972"/>
    <id>http://arxiv.org/abs/2305.05972</id>
    <updated>2023-05-11T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Bar_Lev_D/0/1/0/all/0/1&quot;&gt;Daniella Bar-Lev&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Mizrahi_A/0/1/0/all/0/1&quot;&gt;Avi Mizrahi&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Etzion_T/0/1/0/all/0/1&quot;&gt;Tuvi Etzion&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Rottenstreich_O/0/1/0/all/0/1&quot;&gt;Ori Rottenstreich&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Yaakobi_E/0/1/0/all/0/1&quot;&gt;Eitan Yaakobi&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The Invertible Bloom Lookup Table (IBLT) is a probabilistic data structure
for set representation, with applications in network and traffic monitoring. It
is known for its ability to list its elements, an operation that succeeds with
high probability for sufficiently large table. However, listing can fail even
for relatively small sets. This paper extends recent work on the worst-case
analysis of IBLT, which guarantees successful listing for all sets of a certain
size, by introducing more general IBLT schemes. These schemes allow for greater
freedom in the implementation of the insert, delete, and listing operations and
demonstrate that the IBLT memory can be reduced while still maintaining
successful listing guarantees. The paper also explores the time-memory
trade-off of these schemes, some of which are based on linear codes and
\(B_h\)-sequences over finite fields.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Improving the performance of classical linear algebra iterative methods via hybrid parallelism</title>
    <link href="http://arxiv.org/abs/2305.05988"/>
    <id>http://arxiv.org/abs/2305.05988</id>
    <updated>2023-05-11T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Martinez_Ferrer_P/0/1/0/all/0/1&quot;&gt;Pedro J. Martinez-Ferrer&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Arslan_T/0/1/0/all/0/1&quot;&gt;Tufan Arslan&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Beltran_V/0/1/0/all/0/1&quot;&gt;Vicen&amp;#xe7; Beltran&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We propose fork-join and task-based hybrid implementations of four classical
linear algebra iterative methods (Jacobi, Gauss-Seidel, conjugate gradient and
biconjugate gradient stabilised) as well as variations of them. Algorithms are
duly documented and the corresponding source code is made publicly available
for reproducibility. Both weak and strong scalability benchmarks are conducted
to statistically analyse their relative efficiencies.
&lt;/p&gt;
&lt;p&gt;The weak scalability results assert the superiority of a task-based hybrid
parallelisation over MPI-only and fork-join hybrid implementations. Indeed, the
task-based model is able to achieve speedups of up to 25% larger than its
MPI-only counterpart depending on the numerical method and the computational
resources used. For strong scalability scenarios, hybrid methods based on tasks
remain more efficient with moderate computational resources where data locality
does not play an important role. Fork-join hybridisation often yields mixed
results and hence does not present a competitive advantage over a much simpler
MPI approach.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Pebble guided Treasure Hunt in Plane</title>
    <link href="http://arxiv.org/abs/2305.06067"/>
    <id>http://arxiv.org/abs/2305.06067</id>
    <updated>2023-05-11T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Bhattacharya_A/0/1/0/all/0/1&quot;&gt;Adri Bhattacharya&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Gorain_B/0/1/0/all/0/1&quot;&gt;Barun Gorain&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Mandal_P/0/1/0/all/0/1&quot;&gt;Partha Sarathi Mandal&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We study the problem of treasure hunt in a Euclidean plane by a mobile agent
with the guidance of pebbles. The initial position of the agent and position of
the treasure are modeled as special points in the Euclidean plane. The treasure
is situated at a distance at most $D&amp;gt;0$ from the initial position of the agent.
The agent has a perfect compass, but an adversary controls the speed of the
agent. Hence, the agent can not measure how much distance it traveled for a
given time. The agent can find the treasure only when it reaches the exact
position of the treasure. The cost of the treasure hunt is defined as the total
distance traveled by the agent before it finds the treasure. The agent has no
prior knowledge of the position of the treasure or the value of $D$. An Oracle,
which knows the treasure&#39;s position and the agent&#39;s initial location, places
some pebbles to guide the agent towards the treasure. Once decided to move
along some specified angular direction, the agent can decide to change its
direction only when it encounters a pebble or a special point.
&lt;/p&gt;
&lt;p&gt;We ask the following central question in this paper:
&lt;/p&gt;
&lt;p&gt;``For given $k \ge 0$, What is cheapest treasure hunt algorithm if at most
$k$ pebbles are placed by the Oracle?&quot;
&lt;/p&gt;
&lt;p&gt;We show that for $k=1$, there does not exist any treasure hunt algorithm that
finds the treasure with finite cost. We show the existence of an algorithm with
cost $O(D)$ for $k=2$. For $k&amp;gt;8$ we have designed an algorithm that uses $k$
many pebbles to find the treasure with cost $O(k^{2}) + D(\sin\theta&#39; +
\cos\theta&#39;)$, where $\theta&#39;=\frac{\pi}{2^{k-8}}$. The second result shows the
existence of an algorithm with cost arbitrarily close to $D$ for sufficiently
large values of $D$.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Average Awake Complexity of MIS and Matching</title>
    <link href="http://arxiv.org/abs/2305.06120"/>
    <id>http://arxiv.org/abs/2305.06120</id>
    <updated>2023-05-11T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Ghaffari_M/0/1/0/all/0/1&quot;&gt;Mohsen Ghaffari&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Portmann_J/0/1/0/all/0/1&quot;&gt;Julian Portmann&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Chatterjee, Gmyr, and Pandurangan [PODC 2020] recently introduced the notion
of awake complexity for distributed algorithms, which measures the number of
rounds in which a node is awake. In the other rounds, the node is sleeping and
performs no computation or communication. Measuring the number of awake rounds
can be of significance in many settings of distributed computing, e.g., in
sensor networks where energy consumption is of concern.
&lt;/p&gt;
&lt;p&gt;In that paper, Chatterjee et al. provide an elegant randomized algorithm for
the Maximal Independent Set (MIS) problem that achieves an $O(1)$ node-averaged
awake complexity. That is, the average awake time among the nodes is $O(1)$
rounds. However, to achieve that, the algorithm sacrifices the more standard
round complexity measure from the well-known $O(\log n)$ bound of MIS, due to
Luby [STOC&#39;85], to $O(\log^{3.41} n)$ rounds.
&lt;/p&gt;
&lt;p&gt;Our first contribution is to present a simple randomized distributed MIS
algorithm that, with high probability, has $O(1)$ node-averaged awake
complexity and $O(\log n)$ worst-case round complexity. Our second, and more
technical contribution, is to show algorithms with the same $O(1)$
node-averaged awake complexity and $O(\log n)$ worst-case round complexity for
$(1+\varepsilon)$-approximation of maximum matching and
$(2+\varepsilon)$-approximation of minimum vertex cover, where $\varepsilon$
denotes an arbitrary small positive constant.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Optimal mixing of the down-up walk on independent sets of a given size</title>
    <link href="http://arxiv.org/abs/2305.06198"/>
    <id>http://arxiv.org/abs/2305.06198</id>
    <updated>2023-05-11T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Jain_V/0/1/0/all/0/1&quot;&gt;Vishesh Jain&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Michelen_M/0/1/0/all/0/1&quot;&gt;Marcus Michelen&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Pham_H/0/1/0/all/0/1&quot;&gt;Huy Tuan Pham&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Vuong_T/0/1/0/all/0/1&quot;&gt;Thuy-Duong Vuong&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Let $G$ be a graph on $n$ vertices of maximum degree $\Delta$. We show that,
for any $\delta &amp;gt; 0$, the down-up walk on independent sets of size $k \leq
(1-\delta)\alpha_c(\Delta)n$ mixes in time $O_{\Delta,\delta}(k\log{n})$,
thereby resolving a conjecture of Davies and Perkins in an optimal form. Here,
$\alpha_{c}(\Delta)n$ is the NP-hardness threshold for the problem of counting
independent sets of a given size in a graph on $n$ vertices of maximum degree
$\Delta$. Our mixing time has optimal dependence on $k,n$ for the entire range
of $k$; previously, even polynomial mixing was not known. In fact, for $k =
\Omega_{\Delta}(n)$ in this range, we establish a log-Sobolev inequality with
optimal constant $\Omega_{\Delta,\delta}(1/n)$.
&lt;/p&gt;
&lt;p&gt;At the heart of our proof are three new ingredients, which may be of
independent interest. The first is a method for lifting
$\ell_\infty$-independence from a suitable distribution on the discrete cube --
in this case, the hard-core model -- to the slice by proving stability of an
Edgeworth expansion using a multivariate zero-free region for the base
distribution. The second is a generalization of the Lee-Yau induction to prove
log-Sobolev inequalities for distributions on the slice with considerably less
symmetry than the uniform distribution. The third is a sharp decomposition-type
result which provides a lossless comparison between the Dirichlet form of the
original Markov chain and that of the so-called projected chain in the presence
of a contractive coupling.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">Scott Aaronson: Robin Hanson and I discuss the AI future</title>
    <link href="https://scottaaronson.blog/?p=7299"/>
    <id>https://scottaaronson.blog/?p=7299</id>
    <updated>2023-05-10T13:59:59+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;That&amp;#8217;s all.  No real post this morning, just an &lt;a href=&quot;https://www.youtube.com/watch?v=GANvcj019S0&quot;&gt;hour-long podcast on YouTube&lt;/a&gt; featuring two decades-long veterans of the nerd blogosphere, Robin Hanson and yours truly, talking about AI, trying to articulate various possibilities outside the Yudkowskyan doom scenario.  The podcast was Robin&amp;#8217;s idea.  Hope you enjoy, and looking forward to your comments!&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;&lt;mark style=&quot;background-color:rgba(0, 0, 0, 0)&quot; class=&quot;has-inline-color has-vivid-red-color&quot;&gt;Update: &lt;/mark&gt;&lt;/strong&gt;Oh, and &lt;a href=&quot;https://share.transistor.fm/s/33bf25d3&quot;&gt;another new podcast&lt;/a&gt; is up, with me and Sebastian Hassinger of Amazon/AWS!  Audio only.  Mostly quantum computing but with a little AI thrown in.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;&lt;mark style=&quot;background-color:rgba(0, 0, 0, 0)&quot; class=&quot;has-inline-color has-vivid-red-color&quot;&gt;Update:&lt;/mark&gt;&lt;/strong&gt; &lt;a href=&quot;https://thegradientpub.substack.com/p/scott-aaronson-against-ai-doomerism&quot;&gt;Yet another new podcast&lt;/a&gt;, with Daniel Bashir of The Gradient.  Daniel titled it &amp;#8220;Against AI Doomerism,&amp;#8221; but it covers a bunch of topics (and I&amp;#8217;d say my views are a bit more complicated than &amp;#8220;anti-doomerist&amp;#8221;&amp;#8230;).&lt;/p&gt;
&lt;p class=&quot;authors&quot;&gt;By Scott&lt;/p&gt;
  </content>
    <author>
      <name>Scott Aaronson</name>
      <uri>https://scottaaronson.blog</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">CCI: jobs: PhD, Postdoc at Hasso Plattner Institute (apply by May 31, 2023)</title>
    <link href="https://cstheory-jobs.org/2023/05/10/phd-postdoc-at-hasso-plattner-institute-apply-by-may-31-2023/"/>
    <id>http://cstheory-jobs.org/2023/05/10/phd-postdoc-at-hasso-plattner-institute-apply-by-may-31-2023/</id>
    <updated>2023-05-10T13:13:11+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;The Algorithm Engineering group at the Hasso Plattner Institute (HPI) currently hosts about thirty researchers and invites applications for two new Ph.D. Students and/or Postdoctoral Researchers in Algorithms.&lt;/p&gt;
&lt;p&gt;Website: &lt;a href=&quot;https://hpi.de/offers/2023/may-31.html&quot;&gt;https://hpi.de/offers/2023/may-31.html&lt;/a&gt;&lt;br /&gt;
Email: Timo.Koetzing@hpi.de&lt;/p&gt;
&lt;p class=&quot;authors&quot;&gt;By shacharlovett&lt;/p&gt;
  </content>
    <author>
      <name>CCI: jobs</name>
      <uri>https://cstheory-jobs.org</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Low-Degree Testing Over Grids</title>
    <link href="http://arxiv.org/abs/2305.04983"/>
    <id>http://arxiv.org/abs/2305.04983</id>
    <updated>2023-05-10T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Amireddy_P/0/1/0/all/0/1&quot;&gt;Prashanth Amireddy&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Srinivasan_S/0/1/0/all/0/1&quot;&gt;Srikanth Srinivasan&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Sudan_M/0/1/0/all/0/1&quot;&gt;Madhu Sudan&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We study the question of local testability of low (constant) degree functions
from a product domain $S_1 \times \dots \times {S}_n$ to a field $\mathbb{F}$,
where ${S_i} \subseteq \mathbb{F}$ can be arbitrary constant sized sets. We
show that this family is locally testable when the grid is &quot;symmetric&quot;. That
is, if ${S_i} = {S}$ for all i, there is a probabilistic algorithm using
constantly many queries that distinguishes whether $f$ has a polynomial
representation of degree at most $d$ or is $\Omega(1)$-far from having this
property. In contrast, we show that there exist asymmetric grids with $|{S}_1|
=\dots= |{S}_n| = 3$ for which testing requires $\omega_n(1)$ queries, thereby
establishing that even in the context of polynomials, local testing depends on
the structure of the domain and not just the distance of the underlying code.
&lt;/p&gt;
&lt;p&gt;The low-degree testing problem has been studied extensively over the years
and a wide variety of tools have been applied to propose and analyze tests. Our
work introduces yet another new connection in this rich field, by building
low-degree tests out of tests for &quot;junta-degrees&quot;. A function $f : {S}_1 \times
\dots \times {S}_n \to {G}$, for an abelian group ${G}$ is said to be a
junta-degree-$d$ function if it is a sum of $d$-juntas. We derive our
low-degree test by giving a new local test for junta-degree-$d$ functions. For
the analysis of our tests, we deduce a small-set expansion theorem for
spherical noise over large grids, which may be of independent interest.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: In Honour of Ted Swart</title>
    <link href="http://arxiv.org/abs/2305.05011"/>
    <id>http://arxiv.org/abs/2305.05011</id>
    <updated>2023-05-10T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Gismondi_S/0/1/0/all/0/1&quot;&gt;Stephen Gismondi&lt;/a&gt;&lt;/p&gt;&lt;p&gt;This is a tribute to my dear life-long friend, mentor and colleague Ted
Swart. It includes anecdotal stories and memories of our times together, and
also includes a new academic contribution in his honour, Teds polytope. Tweeks
made to the Birkhoff polytope Bn endow Teds polytope Tn({\epsilon}) with a
special tunable parameter {\epsilon} = {\epsilon}(n). Observe how Bn can be
viewed as the convex hull of both the TSP polytope, and the set of non-tour
permutation extrema, and, that its extended formulation is compact. Tours
(connected 2-factor permutation matrices when viewed as adjacency matrices) can
be distinguished from non-tours (disconnected 2-factor permutation matrices)
where {\epsilon} scales the magnitude of tweeks made to Bn. For {\epsilon} &amp;gt; 0,
Tn({\epsilon}) is tuned so that the convex hull of extrema corresponding to
transformed tours is lifted from Bn, and separated (by a hyperplane) from the
convex hull of extrema corresponding to translated non-tours. This leads to
creation of the feasible region of an LP model that can decide existence of a
tour in a graph based on an extended formulation of the TSP polytope. That is,
by designing for polynomial-time distinguishable tour extrema embedded in a
subspace disjoint from non-tour extrema, NP-completeness strongholds come into
play, necessarily expressed in a non-compact extended formulation of
Tn({\epsilon}) i.e. a compact extended formulation of the TSP polytope cannot
exist. No matter, Ted would have loved these ideas, and Tn({\epsilon}) might
one day yet be useful in the study of the P versus NP conundrum. In summary,
Tn({\epsilon}) is a perturbed Bn i.e. the convex hull of both an
{\epsilon}-stretched TSP polytope, and the set of translated non-tour
permutation extrema i.e. a TSP-like polytope and separable non-tour extrema.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Scheme-Theoretic Approach to Computational Complexity. III. SETH</title>
    <link href="http://arxiv.org/abs/2305.05415"/>
    <id>http://arxiv.org/abs/2305.05415</id>
    <updated>2023-05-10T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Civril_A/0/1/0/all/0/1&quot;&gt;Ali &amp;#xc7;ivril&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We show that there exist infinitely many $n \in \mathbb{Z}^+$ such that for
any constant $\epsilon &amp;gt; 0$, any deterministic algorithm to solve
$k$-\textsf{SAT} for $k \geq 3$ must perform at least
$(2^{k-\frac{3}{2}-\epsilon})^{\frac{n}{k+1}}$ operations, where $n$ is the
number of variables in the $k$\textsf{-SAT} instance.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: CPMA: An Efficient Batch-Parallel Compressed Set Without Pointers</title>
    <link href="http://arxiv.org/abs/2305.05055"/>
    <id>http://arxiv.org/abs/2305.05055</id>
    <updated>2023-05-10T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Wheatman_B/0/1/0/all/0/1&quot;&gt;Brian Wheatman&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Burns_R/0/1/0/all/0/1&quot;&gt;Randal Burns&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Buluc_A/0/1/0/all/0/1&quot;&gt;Ayd&amp;#x131;n Bulu&amp;#xe7;&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Xu_H/0/1/0/all/0/1&quot;&gt;Helen Xu&lt;/a&gt;&lt;/p&gt;&lt;p&gt;This paper introduces the batch-parallel Compressed Packed Memory Array
(CPMA), a compressed dynamic ordered batch-parallel set data structure based on
the Packed Memory Array (PMA). Traditionally, batch-parallel sets are built on
pointer-based data structures such as trees because pointer-based structures
enable fast parallel unions via pointer manipulation. When compared to
cache-optimized trees, PMAs were slower to update but faster to scan.
&lt;/p&gt;
&lt;p&gt;The batch-parallel CPMA overcomes this tradeoff between updates and scans by
optimizing for cache-friendliness. On average, the CPMA is faster than
compressed PaC-trees, a state-of-the-art batch-parallel set library based on
cache-optimized trees, by 1.2x on range queries and 3x on batch updates.
&lt;/p&gt;
&lt;p&gt;We further evaluate the CPMA compared to compressed PaC-trees on a real-world
application of dynamic graph processing. The CPMA is on average 1.2x faster on
a suite of graph algorithms and 2x faster on batch inserts for graphs when
compared with compressed PaC-trees.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Autumn: A Scalable Read Optimized LSM-tree based Key-Value Stores with Fast Point and Range Read Speed</title>
    <link href="http://arxiv.org/abs/2305.05074"/>
    <id>http://arxiv.org/abs/2305.05074</id>
    <updated>2023-05-10T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Zhao_F/0/1/0/all/0/1&quot;&gt;Fuheng Zhao&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Reznikov_L/0/1/0/all/0/1&quot;&gt;Leron Reznikov&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Agrawal_D/0/1/0/all/0/1&quot;&gt;Divyakant Agrawal&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Abbadi_A/0/1/0/all/0/1&quot;&gt;Amr El Abbadi&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The Log Structured Merge Trees (LSM-tree) based key-value stores are widely
used in many storage systems to support a variety of operations such as
updates, point reads, and range reads. Traditionally, LSM-tree&#39;s merge policy
organizes data into multiple levels of exponentially increasing capacity to
support high-speed writes. However, we contend that the traditional merge
policies are not optimized for reads. In this work, we present Autumn, a
scalable and read optimized LSM-tree based key-value stores with minimal point
and range read cost. The key idea in improving the read performance is to
dynamically adjust the capacity ratio between two adjacent levels as more data
are stored. As a result, smaller levels gradually increase their capacities and
merge more often. In particular, the point and range read cost improves from
the previous best known $O(logN)$ complexity to $O(\sqrt{logN})$ in Autumn by
applying the new novel Garnering merge policy. While Garnering merge policy
optimizes for both point reads and range reads, it maintains high performance
for updates. Moreover, to further improve the update costs, Autumn uses a small
amount of bounded space of DRAM to pin/keep the first level of LSM-tree. We
implemented Autumn on top of LevelDB and experimentally showcases the gain in
performance for real world workloads.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Memory-Efficient Solutions to Large-Graph MST Problems</title>
    <link href="http://arxiv.org/abs/2305.05121"/>
    <id>http://arxiv.org/abs/2305.05121</id>
    <updated>2023-05-10T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Bhalla_A/0/1/0/all/0/1&quot;&gt;Arjun Bhalla&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Minimum Spanning Trees are a well-studied subset of graph problems. While
classical algorithms have existed to solve these problems for decades, new
variations and application areas are constantly being discovered. When dealing
with large graph problems, however, memory constraints can often be limiting,
especially when using these classical methods in memory restricted
environments. In this work, we propose an augmentation of Prim&#39;s algorithm that
can be empirically shown to solve MST problems with a reduction in auxiliary
memory usage of over 90%, and a margin of error of less than 0.3%.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Sorting Finite Automata via Partition Refinement</title>
    <link href="http://arxiv.org/abs/2305.05129"/>
    <id>http://arxiv.org/abs/2305.05129</id>
    <updated>2023-05-10T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Becker_R/0/1/0/all/0/1&quot;&gt;Ruben Becker&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Caceres_M/0/1/0/all/0/1&quot;&gt;Manuel C&amp;#xe1;ceres&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Cenzato_D/0/1/0/all/0/1&quot;&gt;Davide Cenzato&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kim_S/0/1/0/all/0/1&quot;&gt;Sung-Hwan Kim&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kodric_B/0/1/0/all/0/1&quot;&gt;Bojana Kodric&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Olivares_F/0/1/0/all/0/1&quot;&gt;Francisco Olivares&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Prezza_N/0/1/0/all/0/1&quot;&gt;Nicola Prezza&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Wheeler nondeterministic finite automata (WNFAs) were introduced as a
generalization of prefix sorting from strings to labeled graphs. WNFAs admit
optimal solutions to classic hard problems on labeled graphs and languages. The
problem of deciding whether a given NFA is Wheeler is known to be NP-complete.
Recently, however, Alanko et al. showed how to side-step this complexity by
switching to preorders: letting $Q$ be the set of states, $E$ the set of
transitions, $|Q|=n$, and $|E|=m$, they provided a $O(mn^2)$-time algorithm
computing a totally-ordered partition of the WNFA&#39;s states such that (1)
equivalent states recognize the same regular language, and (2) the order of
non-equivalent states is consistent with any Wheeler order, when one exists.
Then, the output is a preorder of the states as useful for pattern matching as
standard Wheeler orders. Further research generalized these concepts to
arbitrary NFAs by introducing co-lex partial preorders: any NFA admits a
partial preorder of its states reflecting the co-lex order of their accepted
strings; the smaller the width of such preorder is, the faster regular
expression matching queries can be performed. To date, the fastest algorithm
for computing the smallest-width partial preorder on NFAs runs in
$O(m^2+n^{5/2})$ time, while on DFAs the same can be done in $O(\min(n^2\log
n,mn))$ time. In this paper, we provide much more efficient solutions to the
problem above. Our results are achieved by extending a classic algorithm for
the relational coarsest partition refinement problem to work with ordered
partitions. Specifically, we provide a $O(m\log n)$-time algorithm computing a
co-lex total preorder when the input is a WNFA, and an algorithm with the same
time complexity computing the smallest-width co-lex partial order of any DFA.
Also, we present implementations of our algorithms and show that they are very
efficient in practice.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Constant-Competitiveness for Random Assignment Matroid Secretary Without Knowing the Matroid</title>
    <link href="http://arxiv.org/abs/2305.05353"/>
    <id>http://arxiv.org/abs/2305.05353</id>
    <updated>2023-05-10T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Santiago_R/0/1/0/all/0/1&quot;&gt;Richard Santiago&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Sergeev_I/0/1/0/all/0/1&quot;&gt;Ivan Sergeev&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Zenklusen_R/0/1/0/all/0/1&quot;&gt;Rico Zenklusen&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The Matroid Secretary Conjecture is a notorious open problem in online
optimization. It claims the existence of an $O(1)$-competitive algorithm for
the Matroid Secretary Problem (MSP). Here, the elements of a weighted matroid
appear one-by-one, revealing their weight at appearance, and the task is to
select elements online with the goal to get an independent set of largest
possible weight. $O(1)$-competitive MSP algorithms have so far only been
obtained for restricted matroid classes and for MSP variations, including
Random-Assignment MSP (RA-MSP), where an adversary fixes a number of weights
equal to the ground set size of the matroid, which then get assigned randomly
to the elements of the ground set. Unfortunately, these approaches heavily rely
on knowing the full matroid upfront. This is an arguably undesirable
requirement, and there are good reasons to believe that an approach towards
resolving the MSP Conjecture should not rely on it. Thus, both Soto [SIAM
Journal on Computing 2013] and Oveis Gharan &amp;amp; Vondrak [Algorithmica 2013]
raised as an open question whether RA-MSP admits an $O(1)$-competitive
algorithm even without knowing the matroid upfront.
&lt;/p&gt;
&lt;p&gt;In this work, we answer this question affirmatively. Our result makes RA-MSP
the first well-known MSP variant with an $O(1)$-competitive algorithm that does
not need to know the underlying matroid upfront and without any restriction on
the underlying matroid. Our approach is based on first approximately learning
the rank-density curve of the matroid, which we then exploit algorithmically.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: An Improved Approximation Algorithm for the Minimum 2-Vertex-Connected Spanning Subgraph Problem</title>
    <link href="http://arxiv.org/abs/2305.05398"/>
    <id>http://arxiv.org/abs/2305.05398</id>
    <updated>2023-05-10T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Civril_A/0/1/0/all/0/1&quot;&gt;Ali &amp;#xc7;ivril&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We provide an algorithm for the minimum 2-vertex-connected spanning subgraph
problem with approximation ratio $\frac{4}{3}$, improving upon the previous
best factor $\frac{10}{7}$.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: 4/3-Approximation of Graphic TSP</title>
    <link href="http://arxiv.org/abs/2305.05411"/>
    <id>http://arxiv.org/abs/2305.05411</id>
    <updated>2023-05-10T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Civril_A/0/1/0/all/0/1&quot;&gt;Ali &amp;#xc7;ivril&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We describe a $\frac{4}{3}$-approximation algorithm for the traveling
salesman problem in which the distances between points are induced by
graph-theoretical distances in an unweighted graph. The algorithm is based on
finding a minimum cost perfect matching on the odd degree vertices of a
carefully computed 2-edge-connected spanning subgraph.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


</feed>
