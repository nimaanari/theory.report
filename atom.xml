<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Theory of Computing Report</title>
  <link rel="self" href=""/>
  <link href=""/>
  <id></id>
  <updated></updated>
  <generator uri="http://feedreader.github.io/">Pluto 1.6.2 on Ruby 3.0.6 (2023-03-30) [x86_64-linux]</generator>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: No Where to Go But High: A Perspective on High Dimensional Expanders</title>
    <link href="http://arxiv.org/abs/2304.10106"/>
    <id>http://arxiv.org/abs/2304.10106</id>
    <updated>2023-04-21T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Gotlib_R/0/1/0/all/0/1&quot;&gt;Roy Gotlib&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Kaufman_T/0/1/0/all/0/1&quot;&gt;Tali Kaufman&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&quot;No Where to go but in&quot; is a well known statement of Osho. Osho meant to say
that the answers to all our questions should be obtained by looking into
ourselves. In a paraphrase to Osho&#39;s statement we say &quot;No Where to go but
high&quot;. This meant to demonstrate that for various seemingly unrelated topics
and questions the only way to get significant progress is via the prism of a
new philosophy (new field) called high dimensional expansion. In this note we
give an introduction \footnote{This introduction reflects the authors&#39;
interests and by no mean claim to represent the field in a through way} to the
high dimensional expansion philosophy, and how it has been useful recently in
obtaining progress in various questions in seemingly unrelated fields.
&lt;/p&gt;
&lt;p&gt;This exposition is dedicated to the memory of my mother, Sarah Kaufman, who
was always trying to understand the reason why things behave in a certain way.
It is also dedicated to the memory of my father Eliezer Kaufman.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Geometry: Reconfiguration of 3D Pivoting Modular Robots</title>
    <link href="http://arxiv.org/abs/2304.09990"/>
    <id>http://arxiv.org/abs/2304.09990</id>
    <updated>2023-04-21T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Akitaya_H/0/1/0/all/0/1&quot;&gt;Hugo A. Akitaya&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Stock_F/0/1/0/all/0/1&quot;&gt;Frederick Stock&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We study a new model of 3-dimensional modular self-reconfigurable robots
Rhombic Dodecahedral (RD). By extending results on the 2D analog of this model
we characterize the free space requirements for a pivoting move and investigate
the $\textit{reconfiguration problem}$, that is, given two configurations $s$
and $t$ is there a sequence of moves that transforms $s$ into $t$? We show
reconfiguration is PSPACE-hard for RD modules in a restricted pivoting model.
In a more general model, we show that RD configurations are not universally
reconfigurable despite the fact that their 2D analog is [Akitaya et al., SoCG
2021]. Additionally, we present a new class of RD configurations that we call
$\textit{super-rigid}$. Such a configuration remains rigid even as a subset of
any larger configuration, which does not exist in the 2D setting.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Geometry</name>
      <uri>https://arxiv.org/list/cs.CG/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Minimizing the Size of the Uncertainty Regions for Centers of Moving Entities</title>
    <link href="http://arxiv.org/abs/2304.10028"/>
    <id>http://arxiv.org/abs/2304.10028</id>
    <updated>2023-04-21T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Evans_W/0/1/0/all/0/1&quot;&gt;William Evans&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Tabatabaee_S/0/1/0/all/0/1&quot;&gt;Seyed Ali Tabatabaee&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In this paper, we study the problems of computing the 1-center, centroid, and
1-median of objects moving with bounded speed in Euclidean space. We can
acquire the exact location of only a constant number of objects (usually one)
per unit time, but for every other object, its set of potential locations,
called the object&#39;s uncertainty region, grows subject only to the speed limit.
As a result, the center of the objects may be at several possible locations,
called the center&#39;s uncertainty region. For each of these center problems, we
design query strategies to minimize the size of the center&#39;s uncertainty region
and compare its performance to an optimal query strategy that knows the
trajectories of the objects, but must still query to reduce their uncertainty.
For the static case of the 1-center problem in R^1, we show an algorithm that
queries four objects per unit time and works as well as the optimal algorithm
with one query per unit time. For the general case of the 1-center problem in
R^1, the centroid problem in R^d, and the 1-median problem in R^1, we prove
that the Round-robin scheduling algorithm is the best possible competitive
algorithm. For the center of mass problem in R^d, we provide an O(log
n)-competitive algorithm. In addition, for the general case of the 1-center
problem in R^d (d &amp;gt;= 2), we argue that no algorithm can guarantee a bounded
competitive ratio against the optimal algorithm.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: High-Performance and Flexible Parallel Algorithms for Semisort and Related Problems</title>
    <link href="http://arxiv.org/abs/2304.10078"/>
    <id>http://arxiv.org/abs/2304.10078</id>
    <updated>2023-04-21T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Dong_X/0/1/0/all/0/1&quot;&gt;Xiaojun Dong&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Wu_Y/0/1/0/all/0/1&quot;&gt;Yunshu Wu&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Wang_Z/0/1/0/all/0/1&quot;&gt;Zhongqi Wang&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Dhulipala_L/0/1/0/all/0/1&quot;&gt;Laxman Dhulipala&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Gu_Y/0/1/0/all/0/1&quot;&gt;Yan Gu&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Sun_Y/0/1/0/all/0/1&quot;&gt;Yihan Sun&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Semisort is a fundamental algorithmic primitive widely used in the design and
analysis of efficient parallel algorithms. It takes input as an array of
records and a function extracting a \emph{key} per record, and reorders them so
that records with equal keys are contiguous. Since many applications only
require collecting equal values, but not fully sorting the input, semisort is
broadly applicable, e.g., in string algorithms, graph analytics, and geometry
processing, among many other domains. However, despite dozens of recent papers
that use semisort in their theoretical analysis and the existence of an
asymptotically optimal parallel semisort algorithm, most implementations of
these parallel algorithms choose to implement semisort by using comparison or
integer sorting in practice, due to potential performance issues in existing
semisort implementations.
&lt;/p&gt;
&lt;p&gt;In this paper, we revisit the semisort problem, with the goal of achieving a
high-performance parallel semisort implementation with a flexible interface.
Our approach can easily extend to two related problems, \emph{histogram} and
\emph{collect-reduce}. Our algorithms achieve strong speedups in practice, and
importantly, outperform state-of-the-art parallel sorting and semisorting
methods for almost all settings we tested, with varying input sizes,
distribution, and key types. We also test two important applications with
real-world data, and show that our algorithms improve the performance over
existing approaches. We believe that many other parallel algorithm
implementations can be accelerated using our results.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Polylog-Competitive Algorithms for Dynamic Balanced Graph Partitioning for Ring Demands</title>
    <link href="http://arxiv.org/abs/2304.10350"/>
    <id>http://arxiv.org/abs/2304.10350</id>
    <updated>2023-04-21T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Racke_H/0/1/0/all/0/1&quot;&gt;Harald R&amp;#xe4;cke&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Schmid_S/0/1/0/all/0/1&quot;&gt;Stefan Schmid&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Zabrodin_R/0/1/0/all/0/1&quot;&gt;Ruslan Zabrodin&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The performance of many large-scale and data-intensive distributed systems
critically depends on the capacity of the interconnecting network. This paper
is motivated by the vision of self-adjusting infrastructures whose resources
can be adjusted according to the workload they currently serve, in a
demand-aware manner. Such dynamic adjustments can be exploited to improve
network utilization and hence performance, by dynamically moving frequently
interacting communication partners closer, e.g., collocating them in the same
server or datacenter rack.
&lt;/p&gt;
&lt;p&gt;In particular, we revisit the online balanced graph partitioning problem
which captures the fundamental tradeoff between the benefits and costs of
dynamically collocating communication partners. The demand is modelled as a
sequence $\sigma$ (revealed in an online manner) of communication requests
between $n$ processes, each of which is running on one of the $\ell$ servers.
Each server has capacity $k=n/\ell$, hence, the processes have to be scheduled
in a balanced manner across the servers. A request incurs cost $1$, if the
requested processes are located on different servers, otherwise the cost is 0.
A process can be migrated to a different server at cost $1$.
&lt;/p&gt;
&lt;p&gt;This paper presents the first online algorithm for online balanced graph
partitioning achieving a polylogarithmic competitive ratio for the fundamental
case of ring communication patterns. Specifically, our main contribution is a
$O(\log^3 n)$-competitive randomized online algorithm for this problem. We
further present a randomized online algorithm which is $O(\log^2
n)$-competitive when compared to a static optimal solution. Our two results
rely on different algorithms and techniques and hence are of independent
interest.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: How the Move Acceptance Hyper-Heuristic Copes With Local Optima: Drastic Differences Between Jumps and Cliffs</title>
    <link href="http://arxiv.org/abs/2304.10414"/>
    <id>http://arxiv.org/abs/2304.10414</id>
    <updated>2023-04-21T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Doerr_B/0/1/0/all/0/1&quot;&gt;Benjamin Doerr&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Dremaux_A/0/1/0/all/0/1&quot;&gt;Arthur Dremaux&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Lutzeyer_J/0/1/0/all/0/1&quot;&gt;Johannes Lutzeyer&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Stumpf_A/0/1/0/all/0/1&quot;&gt;Aur&amp;#xe9;lien Stumpf&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In recent work, Lissovoi, Oliveto, and Warwicker (Artificial Intelligence
(2023)) proved that the Move Acceptance Hyper-Heuristic (MAHH) leaves the local
optimum of the multimodal cliff benchmark with remarkable efficiency. With its
$O(n^3)$ runtime, for almost all cliff widths $d,$ the MAHH massively
outperforms the $\Theta(n^d)$ runtime of simple elitist evolutionary algorithms
(EAs). For the most prominent multimodal benchmark, the jump functions, the
given runtime estimates of $O(n^{2m} m^{-\Theta(m)})$ and
$\Omega(2^{\Omega(m)})$, for gap size $m \ge 2$, are far apart and the real
performance of MAHH is still an open question.
&lt;/p&gt;
&lt;p&gt;In this work, we resolve this question. We prove that for any choice of the
MAHH selection parameter~$p$, the expected runtime of the MAHH on a jump
function with gap size $m = o(n^{1/2})$ is at least $\Omega(n^{2m-1} /
(2m-1)!)$. This renders the MAHH much slower than simple elitist evolutionary
algorithms with their typical $O(n^m)$ runtime.
&lt;/p&gt;
&lt;p&gt;We also show that the MAHH with the global bit-wise mutation operator instead
of the local one-bit operator optimizes jump functions in time $O(\min\{m
n^m,\frac{n^{2m-1}}{m!\Omega(m)^{m-2}}\})$, essentially the minimum of the
optimization times of the $(1+1)$ EA and the MAHH. This suggests that combining
several ways to cope with local optima can be a fruitful approach.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Learning Narrow One-Hidden-Layer ReLU Networks</title>
    <link href="http://arxiv.org/abs/2304.10524"/>
    <id>http://arxiv.org/abs/2304.10524</id>
    <updated>2023-04-21T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Chen_S/0/1/0/all/0/1&quot;&gt;Sitan Chen&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Dou_Z/0/1/0/all/0/1&quot;&gt;Zehao Dou&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Goel_S/0/1/0/all/0/1&quot;&gt;Surbhi Goel&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Klivans_A/0/1/0/all/0/1&quot;&gt;Adam R Klivans&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Meka_R/0/1/0/all/0/1&quot;&gt;Raghu Meka&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We consider the well-studied problem of learning a linear combination of $k$
ReLU activations with respect to a Gaussian distribution on inputs in $d$
dimensions. We give the first polynomial-time algorithm that succeeds whenever
$k$ is a constant. All prior polynomial-time learners require additional
assumptions on the network, such as positive combining coefficients or the
matrix of hidden weight vectors being well-conditioned.
&lt;/p&gt;
&lt;p&gt;Our approach is based on analyzing random contractions of higher-order moment
tensors. We use a multi-scale analysis to argue that sufficiently close neurons
can be collapsed together, sidestepping the conditioning issues present in
prior work. This allows us to design an iterative procedure to discover
individual neurons.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">ECCC Papers: TR23-055 |  On Approximability of Satisfiable $k$-CSPs: II | 

	Amey Bhangale, 

	Subhash Khot, 

	Dor Minzer</title>
    <link href="https://eccc.weizmann.ac.il/report/2023/055"/>
    <id>https://eccc.weizmann.ac.il/report/2023/055</id>
    <updated>2023-04-20T22:00:35+00:00</updated>
    <content type="html" xml:lang="en">
    Let $\Sigma$ be an alphabet and $\mu$ be a distribution on $\Sigma^k$ for some $k \geq 2$. Let $\alpha &amp;gt; 0$ be the minimum probability of a tuple in the support of $\mu$ (denoted by $supp(\mu)$). Here, the support of $\mu$ is the set of all tuples in $\Sigma^k$ that have a positive probability mass under $\mu$. We treat the parameters $\Sigma, k, \mu, \alpha$ as fixed and constant.

We say that the distribution $\mu$ has a  linear embedding if there exist an Abelian group $G$ (with the identity element $0_G$) and mappings $\sigma_i : \Sigma \rightarrow G$, $1 \leq i \leq k$, such that  at least one of the mappings is non-constant and for every $(a_1, a_2, \ldots, a_k)\in supp(\mu)$, $\sum_{i=1}^k \sigma_i(a_i) = 0_G$. In [Bhangale-Khot-Minzer, STOC 2022], the authors asked the following analytical question.

Let $f_i: \Sigma^n\rightarrow [-1,1]$ be bounded functions, such that at least one of the functions $f_i$ essentially has degree at least $d$, meaning that the Fourier mass of $f_i$ on terms of degree less than $d$ is negligible, say at most $\delta$. In particular, $|\mathbb{E}[f_i]| \leq \delta$. The Fourier representation is w.r.t. the marginal of $\mu$ on the $i^{th}$ co-ordinate, denoted $(\Sigma, \mu_i)$. If $\mu$ has no linear embedding (over any Abelian group), then is it necessarily the case that

$$|\mathbb{E}_{(x_1, x_2, \ldots, x_k)\sim \mu^{\otimes n}}[f_1(x_1)f_2(x_2)\cdots f_k(x_k)]   = o_{d, \delta}(1),$$

where the right hand side $\to 0$ as the degree $d \to \infty$  and $\delta \to 0$?


In this paper, we answer this analytical question fully and in the affirmative for $k=3$. We also show the following two applications of the result.

1. The first application is related to hardness of approximation. Using the reduction from [Bhangale-Khot-Minzer, STOC 2022], we show that for every $3$-ary predicate $P:\Sigma^3 \to \{0,1\}$ such that $P$ has no linear embedding, an SDP integrality gap instance of a $P$-CSP instance with gap $(1,s)$ can be translated into a dictatorship test with completeness $1$ and soundness $s+o(1)$, under certain additional conditions on the instance.

2. The second application is related to additive combinatorics. We show that if the distribution $\mu$ on $\Sigma^3$ has no linear embedding, marginals of $\mu$ are uniform on $\Sigma$, and $(a,a,a)\in supp(\mu)$ for every $a\in \Sigma$, then every large enough subset of $\Sigma^n$ contains a triple $(x_1, x_2,x_3)$ from $\mu^{\otimes n}$ (and in fact a significant density of such triples).
  </content>
    <author>
      <name>ECCC Papers</name>
      <uri>https://eccc.weizmann.ac.il/</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">ECCC Papers: TR23-054 |  On Approximability of Satisfiable $k$-CSPs: III | 

	Amey Bhangale, 

	Subhash Khot, 

	Dor Minzer</title>
    <link href="https://eccc.weizmann.ac.il/report/2023/054"/>
    <id>https://eccc.weizmann.ac.il/report/2023/054</id>
    <updated>2023-04-20T22:00:22+00:00</updated>
    <content type="html" xml:lang="en">
    In this paper we study functions on the Boolean hypercube that have the property that after applying certain random restrictions, the restricted function is correlated to a linear function with non-negligible probability. If the given function is correlated with a linear function then this property clearly holds. Furthermore, the property also holds for low-degree functions as low-degree functions become a constant function under a random restriction with a non-negligible probability. We show that this essentially is the only possible reason.  More specifically, we show that the function must be correlated to a product of a linear function and a low-degree function. One of the main motivations of studying this question comes from the recent work of the authors [Bhangale, Khot and Minzer, STOC 2021] towards understanding approximability of satisfiable Constraint Satisfaction Problems.

Towards proving our structural theorem, we analyze a $2$-query direct product test for the table $F: {[n]\choose qn} \rightarrow \{0,1\}^{qn}$ where $q\in (0,1)$. We show that, for every constant $\varepsilon&amp;gt;0$, if the test passes with probability $\varepsilon&amp;gt;0$, then there is a global function such that for at least $\delta(\varepsilon)$ fraction of sets, the global function agrees with the given table on {\em all except $\alpha(\varepsilon)$ many locations}. The novelty of this result lies in the fact that $\alpha(\varepsilon)$ is independent of the set sizes. Prior to our work, such a conclusion (in fact, a stronger conclusion with $\alpha = 0$) was shown in [Dinur-Filmus-Harsha, SODA 2019] albeit when the test accepts with probability $1-\varepsilon$ for a small constant $\varepsilon&amp;gt;0$. The setting of parameters in our direct product tests is fundamentally different compared to [Dinur-Goldenberg, FOCS 2008], [Impagliazzo-Kabanets-Wigderson, SIAM Journal of Computing 2012], [Dinur-Steurer, CCC 2014], [Dinur-Filmus-Harsha, SODA 2019]  and hence our analysis involves new techniques, including the use of the small-set expansion property of graphs defined on multi-slices. Such expansion property was recently shown in [Braverman-Khot-Lifshitz-Minzer, FOCS 2022].

As one application of our structural result, we give a $4$-query linearity test under the $p$-biased distribution. More specifically, for any $p\in (\frac{1}{3},\frac{2}{3})$, we give a test that queries a given function $f: \{0,1\}^n \rightarrow \{0,1\}$ at $4$ locations, where the marginal distribution of each query is $\mu_p^{\otimes n}$. The test has perfect completeness and soundness $\frac{1}{2}+\varepsilon$ -- in other words, for every constant $\varepsilon&amp;gt;0$,  if the test passes with probability at least $\frac{1}{2}+\varepsilon$, then the function $f$ is correlated to a linear function under the $\mu_p^{\otimes n}$ measure. This qualitatively improves the results on the linearity testing under the $p$-biased distribution from the previous work [Kopparty-Saraf, APPROX/RANDOM 2009] and [Dinur-Filmus-Harsha, SODA 2019] in which the authors studied the test with soundness $1-\varepsilon$.
  </content>
    <author>
      <name>ECCC Papers</name>
      <uri>https://eccc.weizmann.ac.il/</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">Computational Complexity: Health Tech</title>
    <link href="https://blog.computationalcomplexity.org/2023/04/health-tech.html"/>
    <id>tag:blogger.com,1999:blog-3722233.post-5261164684490370098</id>
    <updated>2023-04-20T21:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;&lt;/p&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhyGNMicDXyUD2rOs44Tlkus5rR0BF-8qwueFzOJQdXm6L_eaGZ3V9blhL9X1Viqg01o_gl-YkkgkE7wwPWfbJlN9q0HJU8RpEJIw6iVauLUFPD-c_iK0645ZzXrpgVAuDHASeM1X7zFcBn3YQyHIPJrRKsPIw6Rj0VYGzzY4yZbmRwQ9rwIQ/s4080/PXL_20230418_180451901.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;3072&quot; data-original-width=&quot;4080&quot; height=&quot;301&quot; src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEhyGNMicDXyUD2rOs44Tlkus5rR0BF-8qwueFzOJQdXm6L_eaGZ3V9blhL9X1Viqg01o_gl-YkkgkE7wwPWfbJlN9q0HJU8RpEJIw6iVauLUFPD-c_iK0645ZzXrpgVAuDHASeM1X7zFcBn3YQyHIPJrRKsPIw6Rj0VYGzzY4yZbmRwQ9rwIQ/w400-h301/PXL_20230418_180451901.jpg&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;On Tuesday, at the behest of an alumnus, I spent the afternoon at &lt;a href=&quot;https://www.himss.org/global-conference&quot;&gt;HIMSS&lt;/a&gt;, a large health tech conference being held at the big convention center in Chicago. When I think of Health Tech, I imagine fancy medical devices, but most of the exhibitors were focused on software solutions.&lt;p&gt;&lt;/p&gt;&lt;p&gt;Cybersecurity had the biggest theme area, no surprise given the devasting role ransomware has had on some hospital chains. The second largest theme area focused on Interoperability. Just a few years ago, the vast majority of medical data is transferred via fax. A few companies, like Epic Systems, dominate the electronic health records space and don&#39;t share nicely. There&#39;s a relatively new standard,&amp;nbsp;&lt;a href=&quot;https://en.wikipedia.org/wiki/Fast_Healthcare_Interoperability_Resources&quot;&gt;FHIR&lt;/a&gt;, for transferring medical data, making it easily accessible via APIs while keeping it secure. Hopefully, we can finally kill off the fax machines in doctors offices. Patient Engagement was the other big theme area.&lt;/p&gt;&lt;p&gt;Of course the big discussion topics are about how AI will change health care. For example, the advances in electronic records have led to doctors spending far too much time entering data instead of seeing patients. AI could make data entry quick, easier or perhaps even unnecessary. Also AI could help provide functionality for triage and initial diagnoses, helping to extend the capabilities in a staff-limited environment and help bring down health-care costs. Many of the exhibited software systems boasted about using AI but it won&#39;t be until next year&#39;s meeting that we see the true integration of large-language models into health care technology.&lt;/p&gt;&lt;p&gt;Many of the challenges of technology in health care carry over to higher education. We don&#39;t generally use faxes, but why do we send transcripts by PDFs? Health and student data share similar privacy and security challenges, why can&#39;t we develop a FHIR-like system for higher education? Cybersecurity and &lt;strike&gt;Patient&lt;/strike&gt;&amp;nbsp;Student Engagement challenges loom large for universities as well.&amp;nbsp;&lt;/p&gt;&lt;p class=&quot;authors&quot;&gt;By Lance Fortnow&lt;/p&gt;
  </content>
    <author>
      <name>Computational Complexity</name>
      <uri>http://blog.computationalcomplexity.org/</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">ECCC Papers: TR23-053 |  Proof Simulation via Round-based Strategy Extraction for QBF | 

	Leroy Chew</title>
    <link href="https://eccc.weizmann.ac.il/report/2023/053"/>
    <id>https://eccc.weizmann.ac.il/report/2023/053</id>
    <updated>2023-04-20T05:02:11+00:00</updated>
    <content type="html" xml:lang="en">
    The proof complexity of Quantified Boolean Formulas (QBF) relates to both QBF solving and OBF certification. One method to p-simulate a QBF proof system is by formalising the soundness of its strategy extraction in propositional logic. In this work we illustrate how to use extended QBF Frege to simulate LD-Q(Drrs)-Res, a proof system that combines conflict driven clause learning with dependency schemes, using such a method.
The round-based technique is the most common way to show a QBF proof system has strategy extraction, originally shown for Q-resolution and later used for LD-Q-Resolution, LQU-Resolution, expansion based systems and dependency-scheme based systems. Many of these proof systems were already shown to be simulated by extended QBF Frege, but simulation had to use a specialised local strategy extraction technique. Here we simulate the remaining systems, by formalising the soundness of LD-Q(Drrs)-Res&amp;#39;s round-based strategy extraction in propositional logic. This is a positive result for certification, and further suggests the feasibility of using Extended QU-Resolution or QRAT to certify QCDCL solvers.
  </content>
    <author>
      <name>ECCC Papers</name>
      <uri>https://eccc.weizmann.ac.il/</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">ECCC Papers: TR23-052 |  Limits of CDCL Learning via Merge Resolution | 

	Marc Vinyals, 

	Chunxiao Li, 

	Noah Fleming, 

	Antonina Kolokolova, 

	Vijay Ganesh</title>
    <link href="https://eccc.weizmann.ac.il/report/2023/052"/>
    <id>https://eccc.weizmann.ac.il/report/2023/052</id>
    <updated>2023-04-20T04:59:40+00:00</updated>
    <content type="html" xml:lang="en">
    In their seminal work, Atserias et al. and independently Pipatsrisawat and Darwiche in 2009 showed that CDCL solvers can simulate resolution proofs with polynomial overhead. However, previous work does not address the tightness of the simulation, i.e., the question of how large this overhead needs to be. In this paper, we address this question by focusing on an important property of proofs generated by CDCL solvers that employ standard learning schemes, namely that the derivation of a learned clause has at least one inference where a literal appears in both premises (aka, a merge literal). Specifically, we show that proofs of this kind can simulate resolution proofs with at most a linear overhead, but there also exist formulas where such overhead is necessary or, more precisely, that there exist formulas with resolution proofs of linear length that require quadratic CDCL proofs.
  </content>
    <author>
      <name>ECCC Papers</name>
      <uri>https://eccc.weizmann.ac.il/</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">ECCC Papers: TR23-051 |  QCDCL vs QBF Resolution: Further Insights | 

	Benjamin Böhm, 

	Olaf Beyersdorff</title>
    <link href="https://eccc.weizmann.ac.il/report/2023/051"/>
    <id>https://eccc.weizmann.ac.il/report/2023/051</id>
    <updated>2023-04-20T04:57:52+00:00</updated>
    <content type="html" xml:lang="en">
    We continue the investigation on the relations of QCDCL and QBF resolution systems. In particular, we introduce QCDCL versions that tightly characterise QU-Resolution and (a slight variant of) long-distance Q-Resolution. We show that most QCDCL variants - parameterised by different policies for decisions, unit propagations and reductions --  lead to incomparable systems for almost all choices of these policies.
  </content>
    <author>
      <name>ECCC Papers</name>
      <uri>https://eccc.weizmann.ac.il/</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Limits of CDCL Learning via Merge Resolution</title>
    <link href="http://arxiv.org/abs/2304.09422"/>
    <id>http://arxiv.org/abs/2304.09422</id>
    <updated>2023-04-20T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Vinyals_M/0/1/0/all/0/1&quot;&gt;Marc Vinyals&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Li_C/0/1/0/all/0/1&quot;&gt;Chunxiao Li&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Fleming_N/0/1/0/all/0/1&quot;&gt;Noah Fleming&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kolokolova_A/0/1/0/all/0/1&quot;&gt;Antonina Kolokolova&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Ganesh_V/0/1/0/all/0/1&quot;&gt;Vijay Ganesh&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In their seminal work, Atserias et al. and independently Pipatsrisawat and
Darwiche in 2009 showed that CDCL solvers can simulate resolution proofs with
polynomial overhead. However, previous work does not address the tightness of
the simulation, i.e., the question of how large this overhead needs to be. In
this paper, we address this question by focusing on an important property of
proofs generated by CDCL solvers that employ standard learning schemes, namely
that the derivation of a learned clause has at least one inference where a
literal appears in both premises (aka, a merge literal). Specifically, we show
that proofs of this kind can simulate resolution proofs with at most a linear
overhead, but there also exist formulas where such overhead is necessary or,
more precisely, that there exist formulas with resolution proofs of linear
length that require quadratic CDCL proofs.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Higher-dimensional subdiagram matching</title>
    <link href="http://arxiv.org/abs/2304.09216"/>
    <id>http://arxiv.org/abs/2304.09216</id>
    <updated>2023-04-20T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Hadzihasanovic_A/0/1/0/all/0/1&quot;&gt;Amar Hadzihasanovic&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Kessler_D/0/1/0/all/0/1&quot;&gt;Diana Kessler&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Higher-dimensional rewriting is founded on a duality of rewrite systems and
cell complexes, connecting computational mathematics to higher categories and
homotopy theory: the two sides of a rewrite rule are two halves of the boundary
of an (n+1)-cell, which are diagrams of n-cells. We study higher-dimensional
diagram rewriting as a mechanism of computation, focussing on the matching
problem for rewritable subdiagrams within the combinatorial framework of
diagrammatic sets. We provide an algorithm for subdiagram matching in arbitrary
dimensions, based on new results on layerings of diagrams, and derive upper
bounds on its time complexity. We show that these superpolynomial bounds can be
improved to polynomial bounds under certain acyclicity conditions, and that
these conditions hold in general for diagrams up to dimension 3. We discuss the
challenges that arise in dimension 4.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: New Subset Selection Algorithms for Low Rank Approximation: Offline and Online</title>
    <link href="http://arxiv.org/abs/2304.09217"/>
    <id>http://arxiv.org/abs/2304.09217</id>
    <updated>2023-04-20T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Woodruff_D/0/1/0/all/0/1&quot;&gt;David P. Woodruff&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Yasuda_T/0/1/0/all/0/1&quot;&gt;Taisuke Yasuda&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Subset selection for the rank $k$ approximation of an $n\times d$ matrix $A$
offers improvements in the interpretability of matrices, as well as a variety
of computational savings. This problem is well-understood when the error
measure is the Frobenius norm, with various tight algorithms known even in
challenging models such as the online model, where an algorithm must select the
column subset irrevocably when the columns arrive one by one. In contrast, for
other matrix losses, optimal trade-offs between the subset size and
approximation quality have not been settled, even in the offline setting. We
give a number of results towards closing these gaps.
&lt;/p&gt;
&lt;p&gt;In the offline setting, we achieve nearly optimal bicriteria algorithms in
two settings. First, we remove a $\sqrt k$ factor from a result of [SWZ19] when
the loss function is any entrywise loss with an approximate triangle inequality
and at least linear growth. Our result is tight for the $\ell_1$ loss. We give
a similar improvement for entrywise $\ell_p$ losses for $p&amp;gt;2$, improving a
previous distortion of $k^{1-1/p}$ to $k^{1/2-1/p}$. Our results come from a
technique which replaces the use of a well-conditioned basis with a slightly
larger spanning set for which any vector can be expressed as a linear
combination with small Euclidean norm. We show that this technique also gives
the first oblivious $\ell_p$ subspace embeddings for $1&amp;lt;p&amp;lt;2$ with $\tilde
O(d^{1/p})$ distortion, which is nearly optimal and closes a long line of work.
&lt;/p&gt;
&lt;p&gt;In the online setting, we give the first online subset selection algorithm
for $\ell_p$ subspace approximation and entrywise $\ell_p$ low rank
approximation by implementing sensitivity sampling online, which is challenging
due to the sequential nature of sensitivity sampling. Our main technique is an
online algorithm for detecting when an approximately optimal subspace changes
substantially.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Optimal Eigenvalue Approximation via Sketching</title>
    <link href="http://arxiv.org/abs/2304.09281"/>
    <id>http://arxiv.org/abs/2304.09281</id>
    <updated>2023-04-20T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Swartworth_W/0/1/0/all/0/1&quot;&gt;William Swartworth&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Woodruff_D/0/1/0/all/0/1&quot;&gt;David P. Woodruff&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Given a symmetric matrix $A$, we show from the simple sketch $GAG^T$, where
$G$ is a Gaussian matrix with $k = O(1/\epsilon^2)$ rows, that there is a
procedure for approximating all eigenvalues of $A$ simultaneously to within
$\epsilon \|A\|_F$ additive error with large probability. Unlike the work of
(Andoni, Nguyen, SODA, 2013), we do not require that $A$ is positive
semidefinite and therefore we can recover sign information about the spectrum
as well. Our result also significantly improves upon the sketching dimension of
recent work for this problem (Needell, Swartworth, Woodruff FOCS 2022), and in
fact gives optimal sketching dimension. Our proof develops new properties of
singular values of $GA$ for a $k \times n$ Gaussian matrix $G$ and an $n \times
n$ matrix $A$ which may be of independent interest. Additionally we achieve
tight bounds in terms of matrix-vector queries. Our sketch can be computed
using $O(1/\epsilon^2)$ matrix-vector multiplies, and by improving on lower
bounds for the so-called rank estimation problem, we show that this number is
optimal even for adaptive matrix-vector queries.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Sliding Block Hashing (Slick) -- Basic Algorithmic Ideas</title>
    <link href="http://arxiv.org/abs/2304.09283"/>
    <id>http://arxiv.org/abs/2304.09283</id>
    <updated>2023-04-20T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Lehmann_H/0/1/0/all/0/1&quot;&gt;Hans-Peter Lehmann&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Sanders_P/0/1/0/all/0/1&quot;&gt;Peter Sanders&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Walzer_S/0/1/0/all/0/1&quot;&gt;Stefan Walzer&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We present {\bf Sli}ding Blo{\bf ck} Hashing (Slick), a simple hash table
data structure that combines high performance with very good space efficiency.
This preliminary report outlines avenues for analysis and implementation that
we intend to pursue.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: A New Deterministic Algorithm for Fully Dynamic All-Pairs Shortest Paths</title>
    <link href="http://arxiv.org/abs/2304.09321"/>
    <id>http://arxiv.org/abs/2304.09321</id>
    <updated>2023-04-20T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Chuzhoy_J/0/1/0/all/0/1&quot;&gt;Julia Chuzhoy&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Zhang_R/0/1/0/all/0/1&quot;&gt;Ruimin Zhang&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We study the fully dynamic All-Pairs Shortest Paths (APSP) problem in
undirected edge-weighted graphs. Given an $n$-vertex graph $G$ with
non-negative edge lengths, that undergoes an online sequence of edge insertions
and deletions, the goal is to support approximate distance queries and
shortest-path queries. We provide a deterministic algorithm for this problem,
that, for a given precision parameter $\epsilon$, achieves approximation factor
$(\log\log n)^{2^{O(1/\epsilon^3)}}$, and has amortized update time
$O(n^{\epsilon}\log L)$ per operation, where $L$ is the ratio of longest to
shortest edge length. Query time for distance-query is
$O(2^{O(1/\epsilon)}\cdot \log n\cdot \log\log L)$, and query time for
shortest-path query is $O(|E(P)|+2^{O(1/\epsilon)}\cdot \log n\cdot \log\log
L)$, where $P$ is the path that the algorithm returns. To the best of our
knowledge, even allowing any $o(n)$-approximation factor, no adaptive-update
algorithms with better than $\Theta(m)$ amortized update time and better than
$\Theta(n)$ query time were known prior to this work. We also note that our
guarantees are stronger than the best current guarantees for APSP in
decremental graphs in the adaptive-adversary setting.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Provably-Efficient and Internally-Deterministic Parallel Union-Find</title>
    <link href="http://arxiv.org/abs/2304.09331"/>
    <id>http://arxiv.org/abs/2304.09331</id>
    <updated>2023-04-20T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Fedorov_A/0/1/0/all/0/1&quot;&gt;Alexander Fedorov&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Hashemi_D/0/1/0/all/0/1&quot;&gt;Diba Hashemi&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Nadiradze_G/0/1/0/all/0/1&quot;&gt;Giorgi Nadiradze&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Alistarh_D/0/1/0/all/0/1&quot;&gt;Dan Alistarh&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Determining the degree of inherent parallelism in classical sequential
algorithms and leveraging it for fast parallel execution is a key topic in
parallel computing, and detailed analyses are known for a wide range of
classical algorithms. In this paper, we perform the first such analysis for the
fundamental Union-Find problem, in which we are given a graph as a sequence of
edges, and must maintain its connectivity structure under edge additions. We
prove that classic sequential algorithms for this problem are
well-parallelizable under reasonable assumptions, addressing a conjecture by
[Blelloch, 2017]. More precisely, we show via a new potential argument that,
under uniform random edge ordering, parallel union-find operations are unlikely
to interfere: $T$ concurrent threads processing the graph in parallel will
encounter memory contention $O(T^2 \cdot \log |V| \cdot \log |E|)$ times in
expectation, where $|E|$ and $|V|$ are the number of edges and nodes in the
graph, respectively. We leverage this result to design a new parallel
Union-Find algorithm that is both internally deterministic, i.e., its results
are guaranteed to match those of a sequential execution, but also
work-efficient and scalable, as long as the number of threads $T$ is
$O(|E|^{\frac{1}{3} - \varepsilon})$, for an arbitrarily small constant
$\varepsilon &amp;gt; 0$, which holds for most large real-world graphs. We present
lower bounds which show that our analysis is close to optimal, and experimental
results suggesting that the performance cost of internal determinism is
limited.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Randomly punctured Reed--Solomon codes achieve list-decoding capacity over linear-sized fields</title>
    <link href="http://arxiv.org/abs/2304.09445"/>
    <id>http://arxiv.org/abs/2304.09445</id>
    <updated>2023-04-20T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Alrabiah_O/0/1/0/all/0/1&quot;&gt;Omar Alrabiah&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Guruswami_V/0/1/0/all/0/1&quot;&gt;Venkatesan Guruswami&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Li_R/0/1/0/all/0/1&quot;&gt;Ray Li&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Reed--Solomon codes are a classic family of error-correcting codes consisting
of evaluations of low-degree polynomials over a finite field on some sequence
of distinct field elements. They are widely known for their optimal
unique-decoding capabilities, but their list-decoding capabilities are not
fully understood. Given the prevalence of Reed-Solomon codes, a fundamental
question in coding theory is determining if Reed--Solomon codes can optimally
achieve list-decoding capacity.
&lt;/p&gt;
&lt;p&gt;A recent breakthrough by Brakensiek, Gopi, and Makam, established that
Reed--Solomon codes are combinatorially list-decodable all the way to capacity.
However, their results hold for randomly-punctured Reed--Solomon codes over an
exponentially large field size $2^{O(n)}$, where $n$ is the block length of the
code. A natural question is whether Reed--Solomon codes can still achieve
capacity over smaller fields. Recently, Guo and Zhang showed that Reed--Solomon
codes are list-decodable to capacity with field size $O(n^2)$. We show that
Reed--Solomon codes are list-decodable to capacity with linear field size
$O(n)$, which is optimal up to the constant factor. We also give evidence that
the ratio between the alphabet size $q$ and code length $n$ cannot be bounded
by an absolute constant.
&lt;/p&gt;
&lt;p&gt;Our proof is based on the proof of Guo and Zhang, and additionally exploits
symmetries of reduced intersection matrices. With our proof, which maintains a
hypergraph perspective of the list-decoding problem, we include an alternate
presentation of ideas of Brakensiek, Gopi, and Makam that more directly
connects the list-decoding problem to the GM-MDS theorem via a hypergraph
orientation theorem.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Uniform Generation of Temporal Graphs with Given Degrees</title>
    <link href="http://arxiv.org/abs/2304.09654"/>
    <id>http://arxiv.org/abs/2304.09654</id>
    <updated>2023-04-20T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Allendorf_D/0/1/0/all/0/1&quot;&gt;Daniel Allendorf&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Uniform sampling from the set $\mathcal{G}(\mathbf{d})$ of graphs with a
given degree-sequence $\mathbf{d} = (d_1, \dots, d_n) \in \mathbb N^n$ is a
classical problem in the study of random graphs. We consider an analogue for
temporal graphs in which the edges are labeled with integer timestamps. The
input to this generation problem is a tuple $\mathbf{D} = (\mathbf{d}, T) \in
\mathbb N^n \times \mathbb N_{&amp;gt;0}$ and the task is to output a uniform random
sample from the set $\mathcal{G}(\mathbf{D})$ of temporal graphs with
degree-sequence $\mathbf{d}$ and timestamps in the interval $[1, T]$. By
allowing repeated edges with distinct timestamps, $\mathcal{G}(\mathbf{D})$ can
be non-empty even if $\mathcal{G}(\mathbf{d})$ is, and as a consequence,
existing algorithms are difficult to apply.
&lt;/p&gt;
&lt;p&gt;We describe an algorithm for this generation problem which runs in expected
time $O(M)$ if $\Delta^{2+\epsilon} = O(M)$ for some constant $\epsilon &amp;gt; 0$
and $T - \Delta = \Omega(T)$ where $M = \sum_i d_i$ and $\Delta = \max_i d_i$.
Our algorithm applies the switching method of McKay and Wormald $[1]$ to
temporal graphs: we first generate a random temporal multigraph and then remove
self-loops and duplicated edges with switching operations which rewire the
edges in a degree-preserving manner.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: List Defective Colorings: Distributed Algorithms and Applications</title>
    <link href="http://arxiv.org/abs/2304.09666"/>
    <id>http://arxiv.org/abs/2304.09666</id>
    <updated>2023-04-20T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Fuchs_M/0/1/0/all/0/1&quot;&gt;Marc Fuchs&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kuhn_F/0/1/0/all/0/1&quot;&gt;Fabian Kuhn&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The distributed coloring problem is at the core of the area of distributed
graph algorithms and it is a problem that has seen tremendous progress over the
last few years. Much of the remarkable recent progress on deterministic
distributed coloring algorithms is based on two main tools: a) defective
colorings in which every node of a given color can have a limited number of
neighbors of the same color and b) list coloring, a natural generalization of
the standard coloring problem that naturally appears when colorings are
computed in different stages and one has to extend a previously computed
partial coloring to a full coloring.
&lt;/p&gt;
&lt;p&gt;In this paper, we introduce \emph{list defective colorings}, which can be
seen as a generalization of these two coloring variants. Essentially, in a list
defective coloring instance, each node $v$ is given a list of colors
$x_{v,1},\dots,x_{v,p}$ together with a list of defects $d_{v,1},\dots,d_{v,p}$
such that if $v$ is colored with color $x_{v, i}$, it is allowed to have at
most $d_{v, i}$ neighbors with color $x_{v, i}$.
&lt;/p&gt;
&lt;p&gt;We highlight the important role of list defective colorings by showing that
faster list defective coloring algorithms would directly lead to faster
deterministic $(\Delta+1)$-coloring algorithms in the LOCAL model. Further, we
extend a recent distributed list coloring algorithm by Maus and Tonoyan [DISC
&#39;20]. Slightly simplified, we show that if for each node $v$ it holds that
$\sum_{i=1}^p \big(d_{v,i}+1)^2 &amp;gt; \mathrm{deg}_G^2(v)\cdot polylog\Delta$ then
this list defective coloring instance can be solved in a
communication-efficient way in only $O(\log\Delta)$ communication rounds. This
leads to the first deterministic $(\Delta+1)$-coloring algorithm in the
standard CONGEST model with a time complexity of $O(\sqrt{\Delta}\cdot polylog
\Delta+\log^* n)$, matching the best time complexity in the LOCAL model up to a
$polylog\Delta$ factor.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: The Price of Explainability for Clustering</title>
    <link href="http://arxiv.org/abs/2304.09743"/>
    <id>http://arxiv.org/abs/2304.09743</id>
    <updated>2023-04-20T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Gupta_A/0/1/0/all/0/1&quot;&gt;Anupam Gupta&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Pittu_M/0/1/0/all/0/1&quot;&gt;Madhusudhan Reddy Pittu&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Svensson_O/0/1/0/all/0/1&quot;&gt;Ola Svensson&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Yuan_R/0/1/0/all/0/1&quot;&gt;Rachel Yuan&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Given a set of points in $d$-dimensional space, an explainable clustering is
one where the clusters are specified by a tree of axis-aligned threshold cuts.
Dasgupta et al. (ICML 2020) posed the question of the price of explainability:
the worst-case ratio between the cost of the best explainable clusterings to
that of the best clusterings.
&lt;/p&gt;
&lt;p&gt;We show that the price of explainability for $k$-medians is at most
$1+H_{k-1}$; in fact, we show that the popular Random Thresholds algorithm has
exactly this price of explanability, matching the known lower bound
constructions. We complement our tight analysis of this particular algorithm by
constructing instances where the price of explanability (using any algorithm)
is at least $(1-o(1)) \ln k$, showing that our result is best possible, up to
lower-order terms. We also improve the price of explanability for the $k$-means
problem to $O(k \ln \ln k)$ from the previous $O(k \ln k)$, considerably
closing the gap to the lower bounds of $\Omega(k)$.
&lt;/p&gt;
&lt;p&gt;Finally, we study the algorithmic question of finding the best explainable
clustering: We show that explainable $k$-medians and $k$-means cannot be
approximated better than $O(\ln k)$, under standard complexity-theoretic
conjectures. This essentially settles the approximability of explainable
$k$-medians and leaves open the intriguing possibility to get significantly
better approximation algorithms for $k$-means than its price of explainability.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Nearly Work-Efficient Parallel DFS in Undirected Graphs</title>
    <link href="http://arxiv.org/abs/2304.09774"/>
    <id>http://arxiv.org/abs/2304.09774</id>
    <updated>2023-04-20T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Ghaffari_M/0/1/0/all/0/1&quot;&gt;Mohsen Ghaffari&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Grunau_C/0/1/0/all/0/1&quot;&gt;Christoph Grunau&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Qu_J/0/1/0/all/0/1&quot;&gt;Jiahao Qu&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We present the first parallel depth-first search algorithm for undirected
graphs that has near-linear work and sublinear depth. Concretely, in any
$n$-node $m$-edge undirected graph, our algorithm computes a DFS in
$\tilde{O}(\sqrt{n})$ depth and using $\tilde{O}(m+n)$ work. All prior work
either required $\Omega(n)$ depth, and thus were essentially sequential, or
needed a high $poly(n)$ work and thus were far from being work-efficient.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Temporal Betweenness Centrality on Shortest Paths</title>
    <link href="http://arxiv.org/abs/2304.09791"/>
    <id>http://arxiv.org/abs/2304.09791</id>
    <updated>2023-04-20T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Naima_M/0/1/0/all/0/1&quot;&gt;Mehdi Naima&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Latapy_M/0/1/0/all/0/1&quot;&gt;Matthieu Latapy&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Magnien_C/0/1/0/all/0/1&quot;&gt;Cl&amp;#xe9;mence Magnien&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Betweenness centrality measure assesses the importance of nodes in a graph
and has been used in a variety of contexts. Betweenness centrality has also
been extended to temporal graphs. Temporal graphs have edges that bear labels
according to the time of the interactions between the nodes. Betweenness
centrality has been extended to the temporal graph settings, and the notion of
paths has been extended to temporal paths. Recent results by Bu{\ss} et al. and
Rymar et al. showed that the betweenness centrality of all nodes in a temporal
graph can be computed in O(n^3 T^2) or O(n^2 m T^2 ), where T is the number of
time units, m the number of temporal edges and n the number of nodes. In this
paper, we improve the running time analysis of these previous approaches to
compute the betweenness centrality of all nodes in a temporal graph. We give an
algorithm that runs in O(n m T + n^2 T ).
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Coloring Fast with Broadcasts</title>
    <link href="http://arxiv.org/abs/2304.09844"/>
    <id>http://arxiv.org/abs/2304.09844</id>
    <updated>2023-04-20T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Flin_M/0/1/0/all/0/1&quot;&gt;Maxime Flin&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Ghaffari_M/0/1/0/all/0/1&quot;&gt;Mohsen Ghaffari&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Halldorsson_M/0/1/0/all/0/1&quot;&gt;Magn&amp;#xfa;s M. Halld&amp;#xf3;rsson&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kuhn_F/0/1/0/all/0/1&quot;&gt;Fabian Kuhn&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Nolin_A/0/1/0/all/0/1&quot;&gt;Alexandre Nolin&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We present an $O(\log^3\log n)$-round distributed algorithm for the
$(\Delta+1)$-coloring problem, where each node broadcasts only one $O(\log
n)$-bit message per round to its neighbors. Previously, the best such
broadcast-based algorithm required $O(\log n)$ rounds. If $\Delta \in
\Omega(\log^{3} n)$, our algorithm runs in $O(\log^* n)$ rounds. Our
algorithm&#39;s round complexity matches state-of-the-art in the much more powerful
CONGEST model [Halld\&#39;orsson et al., STOC&#39;21 &amp;amp; PODC&#39;22], where each node sends
one different message to each of its neighbors, thus sending up to
$\Theta(n\log n)$ bits per round. This is the best complexity known, even if
message sizes are unbounded.
&lt;/p&gt;
&lt;p&gt;Our algorithm is simple enough to be implemented in even weaker models: we
can achieve the same $O(\log^3\log n)$ round complexity if each node reads its
received messages in a streaming fashion, using only $O(\log^3 n)$-bit memory.
Therefore, we hope that our algorithm opens the road for adopting the recent
exciting progress on sublogarithmic-time distributed $(\Delta+1)$-coloring
algorithms in a wider range of (theoretical or practical) settings.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">Emanuele Viola: Mathematics of the impossible, Chapter 9, Log-depth circuits</title>
    <link href="https://emanueleviola.wordpress.com/2023/04/19/mathematics-of-the-impossible-chapter-9-log-depth-circuits/"/>
    <id>http://emanueleviola.wordpress.com/?p=1239</id>
    <updated>2023-04-19T15:55:05+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;In this chapter we investigate circuits of logarithmic depth. Again, several surprises lay ahead, including a solution to the teaser in Chapter &lt;a href=&quot;#x1-180001&quot;&gt;1&lt;!--tex4ht:ref: chap:A-teaser --&gt;&lt;/a&gt;!&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Let us begin slowly with some basic properties of these circuits so as to get familiar with them. The next exercise shows that circuits of depth &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&amp;#92;log n&quot; class=&quot;latex&quot; /&gt; for a constant &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt; also have power size, so we don’t need to bound the size separately.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-101001r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 9.1.  &lt;/span&gt;A circuit of depth &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt; has size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+c%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+c%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+c%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le c^{d}&quot; class=&quot;latex&quot; /&gt; without loss of generality.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The next exercises shows how to compute several simple functions by log-depth circuits.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-101002r2&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 9.2.  &lt;/span&gt;Prove that the Or, And, and Parity functions on &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt; bits have circuits of depth &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c&amp;#92;log n&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Prove that any &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3A+%5C%7B0%2C1%5C%7D%5En+%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3A+%5C%7B0%2C1%5C%7D%5En+%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3A+%5C%7B0%2C1%5C%7D%5En+%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f: &amp;#92;{0,1&amp;#92;}^n &amp;#92;to &amp;#92;{0,1&amp;#92;} &quot; class=&quot;latex&quot; /&gt; computable by an AltCkt of depth &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt; and size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s%5Cge+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s%5Cge+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s%5Cge+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&amp;#92;ge n&quot; class=&quot;latex&quot; /&gt; is also computable by a circuit of depth &lt;img src=&quot;https://s0.wp.com/latex.php?latex=cd%5Clog+s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=cd%5Clog+s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=cd%5Clog+s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;cd&amp;#92;log s&quot; class=&quot;latex&quot; /&gt; and size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s^{c}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Next, let us relate these circuits to branching programs. The upshot is that circuits of logarithmic depth are a special case of power-size branching programs, and the latter are a special case of circuits of log-square depth.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-101003r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 9.1.  &lt;/span&gt;Directed reachability has circuits of depth &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c%5Clog+%5E%7B2%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c%5Clog+%5E%7B2%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c%5Clog+%5E%7B2%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c&amp;#92;log ^{2}n&quot; class=&quot;latex&quot; /&gt; and size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n^{c}&quot; class=&quot;latex&quot; /&gt;. In particular, the same holds for any function in NL, and any function with power-size branching programs.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;                                                                                                                                                                                        &lt;b&gt;Proof&lt;/b&gt;.&amp;nbsp;&lt;/span&gt;On input a graph &lt;img src=&quot;https://s0.wp.com/latex.php?latex=G&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=G&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=G&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;G&quot; class=&quot;latex&quot; /&gt; on &lt;img src=&quot;https://s0.wp.com/latex.php?latex=u&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=u&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=u&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;u&quot; class=&quot;latex&quot; /&gt; nodes and two nodes &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt;, let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M&quot; class=&quot;latex&quot; /&gt; be the &lt;img src=&quot;https://s0.wp.com/latex.php?latex=u%5Ctimes+u&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=u%5Ctimes+u&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=u%5Ctimes+u&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;u&amp;#92;times u&quot; class=&quot;latex&quot; /&gt; transition matrix corresponding to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=G&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=G&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=G&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;G&quot; class=&quot;latex&quot; /&gt;, where &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M_%7Bi%2Cj%7D%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M_%7Bi%2Cj%7D%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M_%7Bi%2Cj%7D%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M_{i,j}=1&quot; class=&quot;latex&quot; /&gt; iff edge &lt;img src=&quot;https://s0.wp.com/latex.php?latex=j%5Cto+i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=j%5Cto+i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=j%5Cto+i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;j&amp;#92;to i&quot; class=&quot;latex&quot; /&gt; is in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=G&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=G&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=G&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;G&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Transition matrices are multiplied as normal matrices, except that “&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%2B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%2B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%2B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;+&quot; class=&quot;latex&quot; /&gt;” is replaced with “&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cvee+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cvee+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cvee+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;vee &quot; class=&quot;latex&quot; /&gt;,” which suffices to know connectivity. To answer directed reachability we compute entry &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt; of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M%5E%7Bu%7Dv&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M%5E%7Bu%7Dv&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M%5E%7Bu%7Dv&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M^{u}v&quot; class=&quot;latex&quot; /&gt;, where &lt;img src=&quot;https://s0.wp.com/latex.php?latex=v&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=v&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=v&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;v&quot; class=&quot;latex&quot; /&gt; has a &lt;img src=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;1&quot; class=&quot;latex&quot; /&gt; corresponding to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;0&quot; class=&quot;latex&quot; /&gt; everywhere else. (We can modify the graph to add a self-loop on node &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt; so that we can reach &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt; in exactly &lt;img src=&quot;https://s0.wp.com/latex.php?latex=u&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=u&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=u&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;u&quot; class=&quot;latex&quot; /&gt; steps iff we reach &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt; in any number of steps.)&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Computing &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M%5E%7Bu%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M%5E%7Bu%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M%5E%7Bu%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M^{u}&quot; class=&quot;latex&quot; /&gt; can be done by squaring &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c%5Clog+u&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c%5Clog+u&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c%5Clog+u&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c&amp;#92;log u&quot; class=&quot;latex&quot; /&gt; times &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M&quot; class=&quot;latex&quot; /&gt;. Each squaring can be done in depth &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c%5Clog+u&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c%5Clog+u&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c%5Clog+u&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c&amp;#92;log u&quot; class=&quot;latex&quot; /&gt;, by Exercise &lt;a href=&quot;#x1-101002r2&quot;&gt;9.2&lt;!--tex4ht:ref: xca:Or-log-depth --&gt;&lt;/a&gt;. This establishes the first claim, since &lt;img src=&quot;https://s0.wp.com/latex.php?latex=u%5Cle+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=u%5Cle+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=u%5Cle+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;u&amp;#92;le n&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The “in particular” follows because those functions can be reduced to directed reachability efficiently. &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Conversely, we have the following.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-101004r2&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 9.2.  &lt;/span&gt;Any  function  &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3A+%5C%7B0%2C1%5C%7D%5En+%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3A+%5C%7B0%2C1%5C%7D%5En+%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3A+%5C%7B0%2C1%5C%7D%5En+%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f: &amp;#92;{0,1&amp;#92;}^n &amp;#92;to &amp;#92;{0,1&amp;#92;} &quot; class=&quot;latex&quot; /&gt;  computed  by  a  circuit  of  depth  &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt;  can  be  computed  by  a branching program of size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=2%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=2%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=2%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;2^{d}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   In particular, functions computed by circuits of logarithmic depth can be computed by branching programs of power size.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Later in this chapter we will prove a stronger and much less obvious result.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;    &lt;b&gt;Proof&lt;/b&gt;.&amp;nbsp;&lt;/span&gt;We proceed by induction on the depth of the circuit &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C&quot; class=&quot;latex&quot; /&gt;. If the depth is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;1&quot; class=&quot;latex&quot; /&gt; then &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C&quot; class=&quot;latex&quot; /&gt; is either a constant or an input bit, and a branching program of size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;1&quot; class=&quot;latex&quot; /&gt; is available by definition.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Suppose the circuit &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C&quot; class=&quot;latex&quot; /&gt; has the form &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C_%7B1%7D%5Cwedge+C_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C_%7B1%7D%5Cwedge+C_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C_%7B1%7D%5Cwedge+C_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C_{1}&amp;#92;wedge C_{2}&quot; class=&quot;latex&quot; /&gt;. By induction, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C_%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C_%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C_%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C_{1}&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C_{2}&quot; class=&quot;latex&quot; /&gt; have branching programs &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B_%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B_%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B_%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B_{1}&quot; class=&quot;latex&quot; /&gt;and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B_{2}&quot; class=&quot;latex&quot; /&gt; each of size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=2%5E%7Bd-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=2%5E%7Bd-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=2%5E%7Bd-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;2^{d-1}&quot; class=&quot;latex&quot; /&gt;. A branching program &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B&quot; class=&quot;latex&quot; /&gt; for &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C&quot; class=&quot;latex&quot; /&gt; of size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=2%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=2%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=2%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;2^{d}&quot; class=&quot;latex&quot; /&gt; is obtained by rewiring the edges leading to states labelled &lt;img src=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;1&quot; class=&quot;latex&quot; /&gt; in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B_%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B_%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B_%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B_{1}&quot; class=&quot;latex&quot; /&gt; to the start state of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B_{2}&quot; class=&quot;latex&quot; /&gt;. The start state of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B&quot; class=&quot;latex&quot; /&gt; is the start state of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B_%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B_%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B_%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B_{1}&quot; class=&quot;latex&quot; /&gt;. &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-101005r3&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 9.3.  &lt;/span&gt;Finish the proof by analyzing the case &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C%3DC_%7B1%7D%5Cvee+C_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C%3DC_%7B1%7D%5Cvee+C_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C%3DC_%7B1%7D%5Cvee+C_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C=C_{1}&amp;#92;vee C_{2}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-101006r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Definition&lt;/b&gt; 9.1.  &lt;/span&gt;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNC%7D%5E%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNC%7D%5E%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BNC%7D%5E%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {NC}^{i}&quot; class=&quot;latex&quot; /&gt; is the class of functions &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D%5E%2A+%5Cto+%5C%7B0%2C1%5C%7D%5E%2A+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D%5E%2A+%5Cto+%5C%7B0%2C1%5C%7D%5E%2A+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D%5E%2A+%5Cto+%5C%7B0%2C1%5C%7D%5E%2A+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:&amp;#92;{0,1&amp;#92;}^* &amp;#92;to &amp;#92;{0,1&amp;#92;}^* &quot; class=&quot;latex&quot; /&gt; computable by circuits that have depth &lt;img src=&quot;https://s0.wp.com/latex.php?latex=a%5Clog+%5E%7Bi%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=a%5Clog+%5E%7Bi%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=a%5Clog+%5E%7Bi%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;a&amp;#92;log ^{i}n&quot; class=&quot;latex&quot; /&gt; and size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%5E%7Ba%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%5E%7Ba%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%5E%7Ba%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n^{a}&quot; class=&quot;latex&quot; /&gt;, for some constant &lt;img src=&quot;https://s0.wp.com/latex.php?latex=a&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=a&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=a&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;a&quot; class=&quot;latex&quot; /&gt;. The circuits are uniform if they can be computed in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BL%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BL%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BL%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {L}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The class &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNC%7D%5E%7B0%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNC%7D%5E%7B0%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BNC%7D%5E%7B0%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {NC}^{0}&quot; class=&quot;latex&quot; /&gt; is also of great interest. It can be more simply defined as the class of functions where each output bit depends on a constant number of input bits. We will see many surprising useful things that can be computed in this class.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The previous results give, for uniform circuits:&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Ctext+%7BNC%7D%5E%7B0%7D%5Csubseteq+%5Ctext+%7B%5Censuremath+%7B%5Ctext+%7BNC%7D%5E%7B1%7D%5Csubseteq+%7D%7D%5Ctext+%7BL%7D%5Csubseteq+%5Ctext+%7BNL%7D%5Csubseteq+%5Ctext+%7BNC%7D%5E%7B2%7D%5Csubseteq+%5Ctext+%7BNC%7D%5E%7B3%7D%5Csubseteq+%5Ccdots+%5Csubseteq+%5Ctext+%7BP%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Ctext+%7BNC%7D%5E%7B0%7D%5Csubseteq+%5Ctext+%7B%5Censuremath+%7B%5Ctext+%7BNC%7D%5E%7B1%7D%5Csubseteq+%7D%7D%5Ctext+%7BL%7D%5Csubseteq+%5Ctext+%7BNL%7D%5Csubseteq+%5Ctext+%7BNC%7D%5E%7B2%7D%5Csubseteq+%5Ctext+%7BNC%7D%5E%7B3%7D%5Csubseteq+%5Ccdots+%5Csubseteq+%5Ctext+%7BP%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Ctext+%7BNC%7D%5E%7B0%7D%5Csubseteq+%5Ctext+%7B%5Censuremath+%7B%5Ctext+%7BNC%7D%5E%7B1%7D%5Csubseteq+%7D%7D%5Ctext+%7BL%7D%5Csubseteq+%5Ctext+%7BNL%7D%5Csubseteq+%5Ctext+%7BNC%7D%5E%7B2%7D%5Csubseteq+%5Ctext+%7BNC%7D%5E%7B3%7D%5Csubseteq+%5Ccdots+%5Csubseteq+%5Ctext+%7BP%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} &amp;#92;text {NC}^{0}&amp;#92;subseteq &amp;#92;text {&amp;#92;ensuremath {&amp;#92;text {NC}^{1}&amp;#92;subseteq }}&amp;#92;text {L}&amp;#92;subseteq &amp;#92;text {NL}&amp;#92;subseteq &amp;#92;text {NC}^{2}&amp;#92;subseteq &amp;#92;text {NC}^{3}&amp;#92;subseteq &amp;#92;cdots &amp;#92;subseteq &amp;#92;text {P}. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The only inclusion known to be strict is the first one:&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-101007r4&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 9.4.  &lt;/span&gt;Prove that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNC%7D%5E%7B0%7D%5Cne+%5Ctext+%7BNC%7D%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNC%7D%5E%7B0%7D%5Cne+%5Ctext+%7BNC%7D%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BNC%7D%5E%7B0%7D%5Cne+%5Ctext+%7BNC%7D%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {NC}^{0}&amp;#92;ne &amp;#92;text {NC}^{1}&quot; class=&quot;latex&quot; /&gt;. (Mostly to practice definitions.)&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;h3 class=&quot;sectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;9.1   &lt;/span&gt; &lt;a id=&quot;x1-1020009.1&quot;&gt;&lt;/a&gt;The power of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNC%7D%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNC%7D%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BNC%7D%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {NC}^{1}&quot; class=&quot;latex&quot; /&gt;: Arithmetic&lt;/h3&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;In this section we illustrate the power of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNC%7D%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNC%7D%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BNC%7D%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {NC}^{1}&quot; class=&quot;latex&quot; /&gt; by showing that the same basic arithmetic which we saw is doable in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BL%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BL%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BL%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {L}&quot; class=&quot;latex&quot; /&gt; (Theorem &lt;a href=&quot;#x1-83001r5&quot;&gt;7.5&lt;!--tex4ht:ref: thm:arithmetic-L --&gt;&lt;/a&gt;) can in fact be done in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNC%7D%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNC%7D%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BNC%7D%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {NC}^{1}&quot; class=&quot;latex&quot; /&gt; as well.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-102001r3&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 9.3.  &lt;/span&gt; The following problems are in NC&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;^{1}&quot; class=&quot;latex&quot; /&gt;:&lt;/p&gt;
&lt;ol class=&quot;enumerate1&quot;&gt;
&lt;li class=&quot;enumerate&quot; id=&quot;x1-102003x1&quot;&gt;Addition of two input integers.&lt;/li&gt;
&lt;li class=&quot;enumerate&quot; id=&quot;x1-102005x2&quot;&gt;Iterated addition: Addition of any number of input integers.&lt;/li&gt;
&lt;li class=&quot;enumerate&quot; id=&quot;x1-102007x3&quot;&gt;Multiplication of two input integers.&lt;/li&gt;
&lt;li class=&quot;enumerate&quot; id=&quot;x1-102009x4&quot;&gt;Iterated multiplication: Multiplication of any number of input integers.&lt;/li&gt;
&lt;li class=&quot;enumerate&quot; id=&quot;x1-102011x5&quot;&gt;Division of two integers.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-102012r5&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 9.5.  &lt;/span&gt;Prove Item 1.&amp;nbsp;in Theorem &lt;a href=&quot;#x1-102001r3&quot;&gt;9.3&lt;!--tex4ht:ref: thm:arithmetic-NC1 --&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Iterated addition is surprisingly non-trivial. We can’t use the methods from the proof of Theorem &lt;a href=&quot;#x1-83001r5&quot;&gt;7.5&lt;!--tex4ht:ref: thm:arithmetic-L --&gt;&lt;/a&gt;. Instead, we rely on a new and very clever technique.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;    &lt;b&gt;Proof of Item 2.&amp;nbsp;in Theorem &lt;a href=&quot;#x1-102001r3&quot;&gt;9.3&lt;!--tex4ht:ref: thm:arithmetic-NC1 --&gt;&lt;/a&gt;.&lt;/b&gt;.&amp;nbsp;&lt;/span&gt; We use “2-out-of-3:” Given 3 integers &lt;img src=&quot;https://s0.wp.com/latex.php?latex=X%2CY%2CZ&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=X%2CY%2CZ&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=X%2CY%2CZ&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;X,Y,Z&quot; class=&quot;latex&quot; /&gt;, we compute 2 integers &lt;img src=&quot;https://s0.wp.com/latex.php?latex=A%2CB&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=A%2CB&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=A%2CB&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;A,B&quot; class=&quot;latex&quot; /&gt; such that&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+X%2BY%2BZ%3DA%2BB%2C+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+X%2BY%2BZ%3DA%2BB%2C+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+X%2BY%2BZ%3DA%2BB%2C+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} X+Y+Z=A+B, &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;where each bit of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;A&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B&quot; class=&quot;latex&quot; /&gt; only depends on three bits, one from &lt;img src=&quot;https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;X&quot; class=&quot;latex&quot; /&gt;, one from &lt;img src=&quot;https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;Y&quot; class=&quot;latex&quot; /&gt;, and one from &lt;img src=&quot;https://s0.wp.com/latex.php?latex=Z&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=Z&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=Z&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;Z&quot; class=&quot;latex&quot; /&gt;. Thus &lt;img src=&quot;https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;A&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B&quot; class=&quot;latex&quot; /&gt; can be computed in NC&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5E%7B0%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5E%7B0%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5E%7B0%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;^{0}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   If we can do this, then to compute iterated addition we construct a tree of logarithmic depth to reduce the original sum to a sum &lt;img src=&quot;https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;2&quot; class=&quot;latex&quot; /&gt; terms, which we add as in Item 1.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Here’s how it works. Note &lt;img src=&quot;https://s0.wp.com/latex.php?latex=X_%7Bi%7D%2BY_%7Bi%7D%2BZ_%7Bi%7D%5Cleq+3&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=X_%7Bi%7D%2BY_%7Bi%7D%2BZ_%7Bi%7D%5Cleq+3&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=X_%7Bi%7D%2BY_%7Bi%7D%2BZ_%7Bi%7D%5Cleq+3&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;X_{i}+Y_{i}+Z_{i}&amp;#92;leq 3&quot; class=&quot;latex&quot; /&gt;. We let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=A_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=A_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=A_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;A_{i}&quot; class=&quot;latex&quot; /&gt; be the least significant bit of this sum, and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B_%7Bi%2B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B_%7Bi%2B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B_%7Bi%2B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B_{i+1}&quot; class=&quot;latex&quot; /&gt; the most significant one. Note that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=A_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=A_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=A_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;A_{i}&quot; class=&quot;latex&quot; /&gt; is the XOR &lt;img src=&quot;https://s0.wp.com/latex.php?latex=X_%7Bi%7D%2BY_%7Bi%7D%2BZ_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=X_%7Bi%7D%2BY_%7Bi%7D%2BZ_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=X_%7Bi%7D%2BY_%7Bi%7D%2BZ_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;X_{i}+Y_{i}+Z_{i}&quot; class=&quot;latex&quot; /&gt;, while &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B_%7Bi%2B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B_%7Bi%2B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B_%7Bi%2B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B_{i+1}&quot; class=&quot;latex&quot; /&gt; is the majority of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=X_%7Bi%7D%2CY_%7Bi%7D%2CZ_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=X_%7Bi%7D%2CY_%7Bi%7D%2CZ_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=X_%7Bi%7D%2CY_%7Bi%7D%2CZ_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;X_{i},Y_{i},Z_{i}&quot; class=&quot;latex&quot; /&gt;. &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The following corollary will also be used to solve the teaser in Chapter &lt;a href=&quot;#x1-180001&quot;&gt;1&lt;!--tex4ht:ref: chap:A-teaser --&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-102013r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Corollary&lt;/b&gt; 9.1.  &lt;/span&gt;Majority is in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNC%7D%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNC%7D%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BNC%7D%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {NC}^{1}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-102014r6&quot;&gt;&lt;/a&gt;                                                                                                                                                                                     &lt;b&gt;Exercise&lt;/b&gt; 9.6.  &lt;/span&gt;Prove it.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-102015r7&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 9.7.  &lt;/span&gt;Prove Item 3.&amp;nbsp;in Theorem &lt;a href=&quot;#x1-102001r3&quot;&gt;9.3&lt;!--tex4ht:ref: thm:arithmetic-NC1 --&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Next we turn to iterated multiplication. The idea is to follow the proof for L in section&amp;nbsp;&lt;a href=&quot;#x1-830007.2.1&quot;&gt;7.2.1&lt;!--tex4ht:ref: subsec:Arithmetic-in-L --&gt;&lt;/a&gt;. We shall use CRR again. The problem is that we still had to perform iterated multiplication, albeit only in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BZ%7D_%7Bp%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BZ%7D_%7Bp%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BZ%7D_%7Bp%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;mathbb {Z}_{p}&quot; class=&quot;latex&quot; /&gt; for &lt;img src=&quot;https://s0.wp.com/latex.php?latex=p%5Cle+n%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=p%5Cle+n%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=p%5Cle+n%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;p&amp;#92;le n^{c}&quot; class=&quot;latex&quot; /&gt;. One more mathematical result is useful now:&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-102016r4&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 9.4.  &lt;/span&gt;If &lt;img src=&quot;https://s0.wp.com/latex.php?latex=p&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=p&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=p&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;p&quot; class=&quot;latex&quot; /&gt; is a prime then &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%28%5Cmathbb+%7BZ%7D_%7Bp%7D-%5C%7B0%5C%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%28%5Cmathbb+%7BZ%7D_%7Bp%7D-%5C%7B0%5C%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28%5Cmathbb+%7BZ%7D_%7Bp%7D-%5C%7B0%5C%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;(&amp;#92;mathbb {Z}_{p}-&amp;#92;{0&amp;#92;})&quot; class=&quot;latex&quot; /&gt; is a cyclic group, meaning that there exists a generator &lt;img src=&quot;https://s0.wp.com/latex.php?latex=g%5Cin+%28%5Cmathbb+%7BZ%7D_%7Bp%7D-%5C%7B0%5C%7D%29%3A%5Cforall+x%5Cin+%28%5Cmathbb+%7BZ%7D_%7Bp%7D-%5C%7B0%5C%7D%29%2Cx%3Dg%5E%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=g%5Cin+%28%5Cmathbb+%7BZ%7D_%7Bp%7D-%5C%7B0%5C%7D%29%3A%5Cforall+x%5Cin+%28%5Cmathbb+%7BZ%7D_%7Bp%7D-%5C%7B0%5C%7D%29%2Cx%3Dg%5E%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=g%5Cin+%28%5Cmathbb+%7BZ%7D_%7Bp%7D-%5C%7B0%5C%7D%29%3A%5Cforall+x%5Cin+%28%5Cmathbb+%7BZ%7D_%7Bp%7D-%5C%7B0%5C%7D%29%2Cx%3Dg%5E%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;g&amp;#92;in (&amp;#92;mathbb {Z}_{p}-&amp;#92;{0&amp;#92;}):&amp;#92;forall x&amp;#92;in (&amp;#92;mathbb {Z}_{p}-&amp;#92;{0&amp;#92;}),x=g^{i}&quot; class=&quot;latex&quot; /&gt;, for some &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i%5Cin+%5Cmathbb+%7BZ%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i%5Cin+%5Cmathbb+%7BZ%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i%5Cin+%5Cmathbb+%7BZ%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&amp;#92;in &amp;#92;mathbb {Z}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-102017r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Example&lt;/b&gt; 9.1.  &lt;/span&gt;For &lt;img src=&quot;https://s0.wp.com/latex.php?latex=p%3D5&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=p%3D5&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=p%3D5&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;p=5&quot; class=&quot;latex&quot; /&gt; we can take &lt;img src=&quot;https://s0.wp.com/latex.php?latex=g%3D2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=g%3D2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=g%3D2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;g=2&quot; class=&quot;latex&quot; /&gt;: &lt;img src=&quot;https://s0.wp.com/latex.php?latex=2%5E%7B0%7D%3D1%2C2%5E%7B1%7D%3D2%2C2%5E%7B2%7D%3D4%2C2%5E%7B3%7D%3D8%3D3&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=2%5E%7B0%7D%3D1%2C2%5E%7B1%7D%3D2%2C2%5E%7B2%7D%3D4%2C2%5E%7B3%7D%3D8%3D3&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=2%5E%7B0%7D%3D1%2C2%5E%7B1%7D%3D2%2C2%5E%7B2%7D%3D4%2C2%5E%7B3%7D%3D8%3D3&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;2^{0}=1,2^{1}=2,2^{2}=4,2^{3}=8=3&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;    &lt;b&gt;Proof of Item 4.&amp;nbsp;in Theorem &lt;a href=&quot;#x1-102001r3&quot;&gt;9.3&lt;!--tex4ht:ref: thm:arithmetic-NC1 --&gt;&lt;/a&gt;&lt;/b&gt;.&amp;nbsp;&lt;/span&gt; We follow the proof for L in section&amp;nbsp;&lt;a href=&quot;#x1-830007.2.1&quot;&gt;7.2.1&lt;!--tex4ht:ref: subsec:Arithmetic-in-L --&gt;&lt;/a&gt;. To compute iterated product of integers &lt;img src=&quot;https://s0.wp.com/latex.php?latex=r_%7B1%7D%2Cr_%7B2%7D%2C%5Cldots+%2Cr_%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=r_%7B1%7D%2Cr_%7B2%7D%2C%5Cldots+%2Cr_%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=r_%7B1%7D%2Cr_%7B2%7D%2C%5Cldots+%2Cr_%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;r_{1},r_{2},&amp;#92;ldots ,r_{t}&quot; class=&quot;latex&quot; /&gt; modulo &lt;img src=&quot;https://s0.wp.com/latex.php?latex=p&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=p&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=p&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;p&quot; class=&quot;latex&quot; /&gt;, use Theorem &lt;a href=&quot;#x1-102016r4&quot;&gt;9.4&lt;!--tex4ht:ref: thm:cyclic-group-Zp-multiplicative --&gt;&lt;/a&gt; to compute exponents &lt;img src=&quot;https://s0.wp.com/latex.php?latex=e_%7B1%7D%2Ce_%7B2%7D%2C%5Cldots+%2Ce_%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=e_%7B1%7D%2Ce_%7B2%7D%2C%5Cldots+%2Ce_%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=e_%7B1%7D%2Ce_%7B2%7D%2C%5Cldots+%2Ce_%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;e_{1},e_{2},&amp;#92;ldots ,e_{t}&quot; class=&quot;latex&quot; /&gt; s.t.&amp;nbsp;&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+r_%7Bi%7D%3Dg%5E%7Be_%7Bi%7D%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+r_%7Bi%7D%3Dg%5E%7Be_%7Bi%7D%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+r_%7Bi%7D%3Dg%5E%7Be_%7Bi%7D%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} r_{i}=g^{e_{i}}. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Then &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cprod+_%7Bi%7Dr_%7Bi%7D%5Cmod+p%3Dg%5E%7B%5Csum+_%7Bi%7De_%7Bi%7D%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cprod+_%7Bi%7Dr_%7Bi%7D%5Cmod+p%3Dg%5E%7B%5Csum+_%7Bi%7De_%7Bi%7D%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cprod+_%7Bi%7Dr_%7Bi%7D%5Cmod+p%3Dg%5E%7B%5Csum+_%7Bi%7De_%7Bi%7D%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;prod _{i}r_{i}&amp;#92;mod p=g^{&amp;#92;sum _{i}e_{i}}&quot; class=&quot;latex&quot; /&gt;. We can use Item 2.&amp;nbsp;to compute the iterated addition of the exponents. Note that computing the exponent of a number mod &lt;img src=&quot;https://s0.wp.com/latex.php?latex=p&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=p&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=p&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;p&quot; class=&quot;latex&quot; /&gt;, and vice versa, can be done in log-depth since the numbers have &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c&amp;#92;log n&quot; class=&quot;latex&quot; /&gt; bits (as follows for example by combining Theorem &lt;a href=&quot;#x1-26003r3&quot;&gt;2.3&lt;!--tex4ht:ref: thm:every-function-ckt-Lupanov --&gt;&lt;/a&gt; and Exercise &lt;a href=&quot;#x1-101002r2&quot;&gt;9.2&lt;!--tex4ht:ref: xca:Or-log-depth --&gt;&lt;/a&gt;). &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   One can also compute division, and make all these circuits uniform, but we won’t prove this now.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h3 class=&quot;sectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;9.2   &lt;/span&gt; &lt;a id=&quot;x1-1030009.2&quot;&gt;&lt;/a&gt;Computing with 3 bits of memory&lt;/h3&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;We now move to a surprising result that in particular strengthens Theorem &lt;a href=&quot;#x1-101004r2&quot;&gt;9.2&lt;!--tex4ht:ref: thm:simu-depth-d-br-prog-pow-size --&gt;&lt;/a&gt;. For a moment, let’s forget about circuits, branching programs, etc.&amp;nbsp;and instead consider a new, minimalistic type of programs. We will have 3 one-bit registers: &lt;img src=&quot;https://s0.wp.com/latex.php?latex=R_%7B0%7D%2CR_%7B1%7D%2CR_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=R_%7B0%7D%2CR_%7B1%7D%2CR_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=R_%7B0%7D%2CR_%7B1%7D%2CR_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;R_{0},R_{1},R_{2}&quot; class=&quot;latex&quot; /&gt;, operating modulo &lt;img src=&quot;https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;2&quot; class=&quot;latex&quot; /&gt;. We allow the following operations&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+R_%7Bi%7D+%26+%2B%3DR_%7Bj%7D%2C%5C%5C+R_%7Bi%7D+%26+%2B%3DR_%7Bj%7Dx_%7Bk%7D+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+R_%7Bi%7D+%26+%2B%3DR_%7Bj%7D%2C%5C%5C+R_%7Bi%7D+%26+%2B%3DR_%7Bj%7Dx_%7Bk%7D+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+R_%7Bi%7D+%26+%2B%3DR_%7Bj%7D%2C%5C%5C+R_%7Bi%7D+%26+%2B%3DR_%7Bj%7Dx_%7Bk%7D+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} R_{i} &amp;amp; +=R_{j},&amp;#92;&amp;#92; R_{i} &amp;amp; +=R_{j}x_{k} &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;where &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x_%7Bk%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x_%7Bk%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x_%7Bk%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x_{k}&quot; class=&quot;latex&quot; /&gt; is an input bit, for any &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i%2Cj%5Cin+%5C%7B0%2C1%2C2%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i%2Cj%5Cin+%5C%7B0%2C1%2C2%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i%2Cj%5Cin+%5C%7B0%2C1%2C2%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i,j&amp;#92;in &amp;#92;{0,1,2&amp;#92;}&quot; class=&quot;latex&quot; /&gt;, with &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i%5Cne+j&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i%5Cne+j&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i%5Cne+j&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&amp;#92;ne j&quot; class=&quot;latex&quot; /&gt;. (Talk about RISC!) Here &lt;img src=&quot;https://s0.wp.com/latex.php?latex=R_%7Bi%7D%2B%3DR_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=R_%7Bi%7D%2B%3DR_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=R_%7Bi%7D%2B%3DR_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;R_{i}+=R_{j}&quot; class=&quot;latex&quot; /&gt; means to add the content of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=R_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=R_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=R_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;R_{j}&quot; class=&quot;latex&quot; /&gt; to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=R_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=R_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=R_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;R_{i}&quot; class=&quot;latex&quot; /&gt;, while &lt;img src=&quot;https://s0.wp.com/latex.php?latex=R_%7Bi%7D%2B%3DR_%7Bj%7Dx_%7Bk%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=R_%7Bi%7D%2B%3DR_%7Bj%7Dx_%7Bk%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=R_%7Bi%7D%2B%3DR_%7Bj%7Dx_%7Bk%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;R_{i}+=R_{j}x_{k}&quot; class=&quot;latex&quot; /&gt; means to add &lt;img src=&quot;https://s0.wp.com/latex.php?latex=R_%7Bj%7Dx_%7Bk%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=R_%7Bj%7Dx_%7Bk%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=R_%7Bj%7Dx_%7Bk%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;R_{j}x_{k}&quot; class=&quot;latex&quot; /&gt; to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=R_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=R_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=R_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;R_{i}&quot; class=&quot;latex&quot; /&gt;, where &lt;img src=&quot;https://s0.wp.com/latex.php?latex=R_%7Bj%7Dx_%7Bk%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=R_%7Bj%7Dx_%7Bk%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=R_%7Bj%7Dx_%7Bk%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;R_{j}x_{k}&quot; class=&quot;latex&quot; /&gt; is the product (a.k.a.&amp;nbsp;And) of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=R_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=R_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=R_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;R_{j}&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x_%7Bk%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x_%7Bk%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x_%7Bk%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x_{k}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-103001r2&quot;&gt;&lt;/a&gt; &lt;b&gt;Definition&lt;/b&gt; 9.2.  &lt;/span&gt;For &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i%2Cj&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i%2Cj&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i%2Cj&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i,j&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3A+%5C%7B0%2C1%5C%7D%5En+%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3A+%5C%7B0%2C1%5C%7D%5En+%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3A+%5C%7B0%2C1%5C%7D%5En+%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f: &amp;#92;{0,1&amp;#92;}^n &amp;#92;to &amp;#92;{0,1&amp;#92;} &quot; class=&quot;latex&quot; /&gt; we say that a program is &lt;em&gt;for&lt;/em&gt; (or &lt;em&gt;equivalent to&lt;/em&gt;)&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+R_%7Bi%7D%2B%3DR_%7Bj%7Df+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+R_%7Bi%7D%2B%3DR_%7Bj%7Df+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+R_%7Bi%7D%2B%3DR_%7Bj%7Df+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} R_{i}+=R_{j}f &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;if for every input &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt; and initial values of the registers, executing the program is equivalent to the instruction &lt;img src=&quot;https://s0.wp.com/latex.php?latex=R_%7Bi%7D%2B%3DR_%7Bj%7Df%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=R_%7Bi%7D%2B%3DR_%7Bj%7Df%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=R_%7Bi%7D%2B%3DR_%7Bj%7Df%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;R_{i}+=R_{j}f(x)&quot; class=&quot;latex&quot; /&gt;, where note that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=R_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=R_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=R_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;R_{j}&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=R_%7Bk%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=R_%7Bk%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=R_%7Bk%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;R_{k}&quot; class=&quot;latex&quot; /&gt; are unchanged.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Also note that if we repeat twice a program for &lt;img src=&quot;https://s0.wp.com/latex.php?latex=R_%7Bi%7D%2B%3DR_%7Bj%7Df&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=R_%7Bi%7D%2B%3DR_%7Bj%7Df&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=R_%7Bi%7D%2B%3DR_%7Bj%7Df&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;R_{i}+=R_{j}f&quot; class=&quot;latex&quot; /&gt; then no register changes (recall the sum is modulo &lt;img src=&quot;https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;2&quot; class=&quot;latex&quot; /&gt;, so &lt;img src=&quot;https://s0.wp.com/latex.php?latex=1%2B1%3D0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=1%2B1%3D0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=1%2B1%3D0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;1+1=0&quot; class=&quot;latex&quot; /&gt;). This feature is critically exploited later to “clean up” computation.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   We now state and prove the surprising result. It is convenient to state it for circuits with Xor instead of Or gates. This is without loss of generality since &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x%5Cvee+y%3Dx%2By%2Bx%5Cwedge+y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x%5Cvee+y%3Dx%2By%2Bx%5Cwedge+y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x%5Cvee+y%3Dx%2By%2Bx%5Cwedge+y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&amp;#92;vee y=x+y+x&amp;#92;wedge y&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-103002r5&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 9.5.  &lt;/span&gt;&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#XBarrington89&quot;&gt;44&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;#XBen-OrC92&quot;&gt;15&lt;/a&gt;]&lt;/span&gt; Suppose &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3A+%5C%7B0%2C1%5C%7D%5En+%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3A+%5C%7B0%2C1%5C%7D%5En+%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3A+%5C%7B0%2C1%5C%7D%5En+%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f: &amp;#92;{0,1&amp;#92;}^n &amp;#92;to &amp;#92;{0,1&amp;#92;} &quot; class=&quot;latex&quot; /&gt; is computable by circuits of depth &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt; with Xor and And gates. For every &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i%5Cne+j&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i%5Cne+j&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i%5Cne+j&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&amp;#92;ne j&quot; class=&quot;latex&quot; /&gt; there is a program of length &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+c4%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+c4%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+c4%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le c4^{d}&quot; class=&quot;latex&quot; /&gt; for&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+R_%7Bi%7D+%26+%2B%3DR_%7Bj%7Df.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+R_%7Bi%7D+%26+%2B%3DR_%7Bj%7Df.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+R_%7Bi%7D+%26+%2B%3DR_%7Bj%7Df.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} R_{i} &amp;amp; +=R_{j}f. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Once such a program is available, we can start with register values &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%280%2C1%2C0%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%280%2C1%2C0%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%280%2C1%2C0%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;(0,1,0)&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i%3D0%2Cj%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i%3D0%2Cj%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i%3D0%2Cj%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i=0,j=1&quot; class=&quot;latex&quot; /&gt; to obtain &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f(x)&quot; class=&quot;latex&quot; /&gt; in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=R_%7B0%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=R_%7B0%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=R_%7B0%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;R_{0}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;                                                                                                                                                                                        &lt;b&gt;Proof&lt;/b&gt;.&amp;nbsp;&lt;/span&gt;We proceed by induction on &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt;. When &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d=1&quot; class=&quot;latex&quot; /&gt; the circuit is simply outputting a constant or one of the input bits, which we can compute with the corresponding instructions. (If the circuit is the constant zero then the empty program would do.)&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Proceeding with the induction step:&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   A program for &lt;img src=&quot;https://s0.wp.com/latex.php?latex=R_%7Bi%7D%2B%3DR_%7Bj%7D%28f_%7B1%7D%2Bf_%7B2%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=R_%7Bi%7D%2B%3DR_%7Bj%7D%28f_%7B1%7D%2Bf_%7B2%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=R_%7Bi%7D%2B%3DR_%7Bj%7D%28f_%7B1%7D%2Bf_%7B2%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;R_{i}+=R_{j}(f_{1}+f_{2})&quot; class=&quot;latex&quot; /&gt; is simply given by the concatenation of (the programs for)&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+R_%7Bi%7D+%26+%2B%3DR_%7Bj%7Df_%7B1%7D%5C%5C+R_%7Bi%7D+%26+%2B%3DR_%7Bj%7Df_%7B2%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+R_%7Bi%7D+%26+%2B%3DR_%7Bj%7Df_%7B1%7D%5C%5C+R_%7Bi%7D+%26+%2B%3DR_%7Bj%7Df_%7B2%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+R_%7Bi%7D+%26+%2B%3DR_%7Bj%7Df_%7B1%7D%5C%5C+R_%7Bi%7D+%26+%2B%3DR_%7Bj%7Df_%7B2%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} R_{i} &amp;amp; +=R_{j}f_{1}&amp;#92;&amp;#92; R_{i} &amp;amp; +=R_{j}f_{2}. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Less obviously, a program for &lt;img src=&quot;https://s0.wp.com/latex.php?latex=R_%7Bi%7D%2B%3DR_%7Bj%7D%28f_%7B1%7D%5Cwedge+f_%7B2%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=R_%7Bi%7D%2B%3DR_%7Bj%7D%28f_%7B1%7D%5Cwedge+f_%7B2%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=R_%7Bi%7D%2B%3DR_%7Bj%7D%28f_%7B1%7D%5Cwedge+f_%7B2%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;R_{i}+=R_{j}(f_{1}&amp;#92;wedge f_{2})&quot; class=&quot;latex&quot; /&gt; is given by&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+R_%7Bi%7D+%26+%2B%3DR_%7Bk%7Df_%7B1%7D%5C%5C+R_%7Bk%7D+%26+%2B%3DR_%7Bj%7Df_%7B2%7D%5C%5C+R_%7Bi%7D+%26+%2B%3DR_%7Bk%7Df_%7B1%7D%5C%5C+R_%7Bk%7D+%26+%2B%3DR_%7Bj%7Df_%7B2%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+R_%7Bi%7D+%26+%2B%3DR_%7Bk%7Df_%7B1%7D%5C%5C+R_%7Bk%7D+%26+%2B%3DR_%7Bj%7Df_%7B2%7D%5C%5C+R_%7Bi%7D+%26+%2B%3DR_%7Bk%7Df_%7B1%7D%5C%5C+R_%7Bk%7D+%26+%2B%3DR_%7Bj%7Df_%7B2%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+R_%7Bi%7D+%26+%2B%3DR_%7Bk%7Df_%7B1%7D%5C%5C+R_%7Bk%7D+%26+%2B%3DR_%7Bj%7Df_%7B2%7D%5C%5C+R_%7Bi%7D+%26+%2B%3DR_%7Bk%7Df_%7B1%7D%5C%5C+R_%7Bk%7D+%26+%2B%3DR_%7Bj%7Df_%7B2%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} R_{i} &amp;amp; +=R_{k}f_{1}&amp;#92;&amp;#92; R_{k} &amp;amp; +=R_{j}f_{2}&amp;#92;&amp;#92; R_{i} &amp;amp; +=R_{k}f_{1}&amp;#92;&amp;#92; R_{k} &amp;amp; +=R_{j}f_{2}. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-103003r8&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 9.8.  &lt;/span&gt;Prove that the program for &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f_%7B1%7D%5Cwedge+f_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f_%7B1%7D%5Cwedge+f_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f_%7B1%7D%5Cwedge+f_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f_{1}&amp;#92;wedge f_{2}&quot; class=&quot;latex&quot; /&gt; in the proof works. Write down the contents of the registers after each instruction in the program.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   A similar proof works over other fields as well.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   We can now address the teaser Theorem &lt;a href=&quot;#x1-18002r1&quot;&gt;1.1&lt;!--tex4ht:ref: thm:Majority-3-bits-teaser --&gt;&lt;/a&gt; from Chapter &lt;a href=&quot;#x1-180001&quot;&gt;1&lt;!--tex4ht:ref: chap:A-teaser --&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;    &lt;b&gt;Proof of Theorem &lt;a href=&quot;#x1-18002r1&quot;&gt;1.1&lt;!--tex4ht:ref: thm:Majority-3-bits-teaser --&gt;&lt;/a&gt;.&lt;/b&gt;.&amp;nbsp;&lt;/span&gt; Combine Corollary &lt;a href=&quot;#x1-102013r1&quot;&gt;9.1&lt;!--tex4ht:ref: cor:Majority-is-in-NC1 --&gt;&lt;/a&gt; with Theorem &lt;a href=&quot;#x1-103002r5&quot;&gt;9.5&lt;!--tex4ht:ref: thm:-barrington-ben-or-cleve --&gt;&lt;/a&gt;. &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-103004r2&quot;&gt;&lt;/a&gt; &lt;b&gt;Corollary&lt;/b&gt; 9.2.  &lt;/span&gt;Iterated product of 3&amp;#215;3 matrices over &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;mathbb {F}_{2}&quot; class=&quot;latex&quot; /&gt; is complete for NC&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;^{1}&quot; class=&quot;latex&quot; /&gt; under projections.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   That is, the problem is in NC&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;^{1}&quot; class=&quot;latex&quot; /&gt; and for any &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%5Cin+%5Ctext+%7BNC%7D%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%5Cin+%5Ctext+%7BNC%7D%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%5Cin+%5Ctext+%7BNC%7D%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&amp;#92;in &amp;#92;text {NC}^{1}&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt; one can write a sequence of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%3Dn%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%3Dn%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%3Dn%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t=n^{c}&quot; class=&quot;latex&quot; /&gt; 3&amp;#215;3 matrices &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M_%7B1%7D%2CM_%7B2%7D%2C%5Cldots+%2CM_%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M_%7B1%7D%2CM_%7B2%7D%2C%5Cldots+%2CM_%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M_%7B1%7D%2CM_%7B2%7D%2C%5Cldots+%2CM_%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M_{1},M_{2},&amp;#92;ldots ,M_{t}&quot; class=&quot;latex&quot; /&gt; where each entry is either a constant or an input variable &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x_{i}&quot; class=&quot;latex&quot; /&gt; s.t.&amp;nbsp;for every &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&amp;#92;in &amp;#92;{0,1&amp;#92;} ^{n}&quot; class=&quot;latex&quot; /&gt;:&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cprod+_%7Bi%3D1%7D%5E%7Bt%7DM_%7Bi%7D%5Ccdot+%5Cbegin+%7Bbmatrix%7D0%5C%5C+1%5C%5C+0+%5Cend+%7Bbmatrix%7D%3D%5Cbegin+%7Bbmatrix%7Df%28x%29%5C%5C+1%5C%5C+0+%5Cend+%7Bbmatrix%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cprod+_%7Bi%3D1%7D%5E%7Bt%7DM_%7Bi%7D%5Ccdot+%5Cbegin+%7Bbmatrix%7D0%5C%5C+1%5C%5C+0+%5Cend+%7Bbmatrix%7D%3D%5Cbegin+%7Bbmatrix%7Df%28x%29%5C%5C+1%5C%5C+0+%5Cend+%7Bbmatrix%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cprod+_%7Bi%3D1%7D%5E%7Bt%7DM_%7Bi%7D%5Ccdot+%5Cbegin+%7Bbmatrix%7D0%5C%5C+1%5C%5C+0+%5Cend+%7Bbmatrix%7D%3D%5Cbegin+%7Bbmatrix%7Df%28x%29%5C%5C+1%5C%5C+0+%5Cend+%7Bbmatrix%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} &amp;#92;prod _{i=1}^{t}M_{i}&amp;#92;cdot &amp;#92;begin {bmatrix}0&amp;#92;&amp;#92; 1&amp;#92;&amp;#92; 0 &amp;#92;end {bmatrix}=&amp;#92;begin {bmatrix}f(x)&amp;#92;&amp;#92; 1&amp;#92;&amp;#92; 0 &amp;#92;end {bmatrix}. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-103005r9&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 9.9.  &lt;/span&gt;Prove this.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h3 class=&quot;sectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;9.3   &lt;/span&gt; &lt;a id=&quot;x1-1040009.3&quot;&gt;&lt;/a&gt;Linear-size log-depth&lt;/h3&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;It is unknown whether NP has linear-size circuits of logarithmic depth! But there is a non-trivial simulation of such circuits by AltCkts of depth 3 of sub-exponential size.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-104001r6&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 9.6.  &lt;/span&gt;&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#XVal77&quot;&gt;67&lt;/a&gt;]&lt;/span&gt; Any circuit &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C%3A+%5C%7B0%2C1%5C%7D%5En+%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C%3A+%5C%7B0%2C1%5C%7D%5En+%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C%3A+%5C%7B0%2C1%5C%7D%5En+%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C: &amp;#92;{0,1&amp;#92;}^n &amp;#92;to &amp;#92;{0,1&amp;#92;} &quot; class=&quot;latex&quot; /&gt; of size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=an&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=an&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=an&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;an&quot; class=&quot;latex&quot; /&gt; and depth &lt;img src=&quot;https://s0.wp.com/latex.php?latex=a%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=a%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=a%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;a&amp;#92;log n&quot; class=&quot;latex&quot; /&gt; has an equivalent alternating circuit of depth 3 and size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=2%5E%7Bc_%7Ba%7Dn%2F%5Clog+%5Clog+n%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=2%5E%7Bc_%7Ba%7Dn%2F%5Clog+%5Clog+n%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=2%5E%7Bc_%7Ba%7Dn%2F%5Clog+%5Clog+n%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;2^{c_{a}n/&amp;#92;log &amp;#92;log n}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The idea is&amp;#8230; yes! Once again, we are going to guess computation. It is possible to guess the values of about &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%2F%5Clog+%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%2F%5Clog+%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%2F%5Clog+%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n/&amp;#92;log &amp;#92;log n&quot; class=&quot;latex&quot; /&gt; wires to reduce the depth to say &lt;img src=&quot;https://s0.wp.com/latex.php?latex=0.1%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=0.1%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=0.1%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;0.1&amp;#92;log n&quot; class=&quot;latex&quot; /&gt;, and the rest is brute-forced. For an exposition, see &lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#Xviola-FTTCS09&quot;&gt;73&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h3 class=&quot;likesectionHead&quot;&gt;&lt;a id=&quot;x1-1050009.3&quot;&gt;&lt;/a&gt;Notes&lt;/h3&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;Our presentation of Theorem &lt;a href=&quot;#x1-103002r5&quot;&gt;9.5&lt;!--tex4ht:ref: thm:-barrington-ben-or-cleve --&gt;&lt;/a&gt; follows &lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#XCleve91&quot;&gt;18&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;div class=&quot;thebibliography&quot;&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [1]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:conf/focs/AbboudBW15&quot;&gt;&lt;/a&gt;Amir Abboud, Arturs Backurs, and Virginia&amp;nbsp;Vassilevska Williams. Tight hardness      results for LCS and other sequence similarity measures.  In Venkatesan Guruswami,      editor, IEEE 56th Annual Symposium on Foundations of Computer Science, FOCS      2015, Berkeley, CA, USA, 17-20 October, 2015, pages 59–78. IEEE Computer Society,      2015.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [2]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAdleman78&quot;&gt;&lt;/a&gt;Leonard  Adleman.   Two  theorems  on  random  polynomial  time.   In  19th IEEE      Symp.&amp;nbsp;on Foundations of Computer Science (FOCS), pages 75–83. 1978.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [3]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAjt83&quot;&gt;&lt;/a&gt;Mikl�s Ajtai.  &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5CSigma+%5Csp+%7B1%7D%5Csb+%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5CSigma+%5Csp+%7B1%7D%5Csb+%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CSigma+%5Csp+%7B1%7D%5Csb+%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;Sigma &amp;#92;sp {1}&amp;#92;sb {1}&quot; class=&quot;latex&quot; /&gt;-formulae on finite structures.  Annals of Pure and Applied Logic,      24(1):1–48, 1983.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [4]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAjtai05&quot;&gt;&lt;/a&gt;Mikl�s Ajtai. A non-linear time lower bound for boolean branching programs. Theory      of Computing, 1(1):149–176, 2005.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [5]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAll89&quot;&gt;&lt;/a&gt;Eric  Allender.   A  note  on  the  power  of  threshold  circuits.   In  30th Symposium      on Foundations of Computer Science, pages 580–584, Research Triangle Park, North      Carolina, 30 October–1 November 1989. IEEE.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [6]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAllender01&quot;&gt;&lt;/a&gt;Eric Allender. The division breakthroughs. Bulletin of the EATCS, 74:61–77, 2001.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [7]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAllenderK10&quot;&gt;&lt;/a&gt;Eric  Allender  and  Michal  Koucký.     Amplifying  lower  bounds  by  means  of      self-reducibility. J.&amp;nbsp;of the ACM, 57(3), 2010.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [8]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAGHP92&quot;&gt;&lt;/a&gt;Noga Alon, Oded Goldreich, Johan H�stad, and Ren� Peralta. Simple constructions      of  almost  &lt;img src=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;k&quot; class=&quot;latex&quot; /&gt;-wise  independent  random  variables.   Random  Structures  &amp;amp;  Algorithms,      3(3):289–304, 1992.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [9]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/jcss/AngluinV79&quot;&gt;&lt;/a&gt;Dana Angluin and Leslie&amp;nbsp;G. Valiant. Fast probabilistic algorithms for hamiltonian      circuits and matchings. J. Comput. Syst. Sci., 18(2):155–193, 1979.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [10]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAroraLuMoSuSz98&quot;&gt;&lt;/a&gt;Sanjeev Arora, Carsten Lund, Rajeev Motwani, Madhu Sudan, and Mario Szegedy.      Proof  verification  and  the  hardness  of  approximation  problems.    J.&amp;nbsp;of  the  ACM,      45(3):501–555, May 1998.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [11]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/siamcomp/BackursI18&quot;&gt;&lt;/a&gt;Arturs Backurs and Piotr Indyk.  Edit distance cannot be computed in strongly      subquadratic time (unless SETH is false). SIAM J. Comput., 47(3):1087–1097, 2018.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [12]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XBatcher68&quot;&gt;&lt;/a&gt;Kenneth&amp;nbsp;E. Batcher.  Sorting networks and their applications.  In AFIPS Spring      Joint Computing Conference, volume&amp;nbsp;32, pages 307–314, 1968.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [13]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XBeameCH86&quot;&gt;&lt;/a&gt;Paul  Beame,  Stephen&amp;nbsp;A.  Cook,  and  H.&amp;nbsp;James  Hoover.   Log  depth  circuits  for      division and related problems. SIAM J. Comput., 15(4):994–1003, 1986.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [14]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XBSSV03&quot;&gt;&lt;/a&gt;Paul Beame, Michael Saks, Xiaodong Sun, and Erik Vee.   Time-space trade-off      lower  bounds  for  randomized  computation  of  decision  problems.   J.&amp;nbsp;of  the  ACM,      50(2):154–195, 2003.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [15]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XBen-OrC92&quot;&gt;&lt;/a&gt;Michael Ben-Or and Richard Cleve. Computing algebraic formulas using a constant      number of registers. SIAM J.&amp;nbsp;on Computing, 21(1):54–58, 1992.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [16]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/cc/BussW15&quot;&gt;&lt;/a&gt;Samuel&amp;nbsp;R.  Buss  and  Ryan  Williams.   Limits  on  alternation  trading  proofs  for      time-space lower bounds. Comput. Complex., 24(3):533–600, 2015.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [17]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:conf/stoc/ChenT19&quot;&gt;&lt;/a&gt;Lijie Chen and Roei Tell. Bootstrapping results for threshold circuits &amp;#8220;just beyond&amp;#8221;      known lower bounds.  In Moses Charikar and Edith Cohen, editors, Proceedings of the      51st Annual ACM SIGACT Symposium on Theory of Computing, STOC 2019, Phoenix,      AZ, USA, June 23-26, 2019, pages 34–41. ACM, 2019.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [18]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XCleve91&quot;&gt;&lt;/a&gt;Richard  Cleve.    Towards  optimal  simulations  of  formulas  by  bounded-width                                                                                                                                                                                          programs. Computational Complexity, 1:91–105, 1991.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [19]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XCook73&quot;&gt;&lt;/a&gt;Stephen&amp;nbsp;A. Cook. A hierarchy for nondeterministic time complexity. J.&amp;nbsp;of Computer      and System Sciences, 7(4):343–353, 1973.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [20]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/siamcomp/Csanky76&quot;&gt;&lt;/a&gt;L.&amp;nbsp;Csanky.     Fast  parallel  matrix  inversion  algorithms.     SIAM  J.  Comput.,      5(4):618–623, 1976.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [21]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/jcss/Fortnow00&quot;&gt;&lt;/a&gt;Lance  Fortnow.   Time-space  tradeoffs  for  satisfiability.   J.  Comput.  Syst.  Sci.,      60(2):337–353, 2000.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [22]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/jct/FraenkelL81&quot;&gt;&lt;/a&gt;Aviezri&amp;nbsp;S. Fraenkel and David Lichtenstein. Computing a perfect strategy for n x n      chess requires time exponential in n. J. Comb. Theory, Ser. A, 31(2):199–214, 1981.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [23]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XFredmanS89&quot;&gt;&lt;/a&gt;Michael&amp;nbsp;L. Fredman and Michael&amp;nbsp;E. Saks.  The cell probe complexity of dynamic      data structures. In ACM Symp.&amp;nbsp;on the Theory of Computing (STOC), pages 345–354,      1989.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [24]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XGajentaanO95&quot;&gt;&lt;/a&gt;Anka Gajentaan and Mark&amp;nbsp;H. Overmars. On a class of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7BO%7D%28n%5E2%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7BO%7D%28n%5E2%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7BO%7D%28n%5E2%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;{O}(n^2)&quot; class=&quot;latex&quot; /&gt; problems in computational      geometry. Comput. Geom., 5:165–185, 1995.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [25]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XGareyJ79&quot;&gt;&lt;/a&gt;M.&amp;nbsp;R. Garey and David&amp;nbsp;S. Johnson. Computers and Intractability: A Guide to the      Theory of NP-Completeness. W. H. Freeman, 1979.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [26]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XMR1549939&quot;&gt;&lt;/a&gt;K.&amp;nbsp;G�del.   �ber  formal  unentscheidbare  s�tze  der  Principia  Mathematica  und      verwandter systeme I. Monatsh. Math. Phys., 38, 1931.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [27]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XGoldreich08Complexity&quot;&gt;&lt;/a&gt;Oded Goldreich. Computational Complexity: A Conceptual Perspective. Cambridge      University Press, 2008.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [28]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XGreenlawHR-Limits&quot;&gt;&lt;/a&gt;Raymond  Greenlaw,  H.&amp;nbsp;James  Hoover,  and  Walter  Ruzzo.   Limits  to  Parallel      Computation: P-Completeness Theory. 02 2001.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [29]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;X10.4007/annals.2021.193.2.4&quot;&gt;&lt;/a&gt;David Harvey and Joris van&amp;nbsp;der Hoeven. Integer multiplication in time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=O%28n%5Cmathrm+%7Blog%7D%5C%2C+n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=O%28n%5Cmathrm+%7Blog%7D%5C%2C+n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=O%28n%5Cmathrm+%7Blog%7D%5C%2C+n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;O(n&amp;#92;mathrm {log}&amp;#92;, n)&quot; class=&quot;latex&quot; /&gt;. Annals of      Mathematics, 193(2):563 – 617, 2021.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [30]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/iandc/Hennie65&quot;&gt;&lt;/a&gt;F.&amp;nbsp;C. Hennie.  One-tape, off-line turing machine computations.  Information and      Control, 8(6):553–578, 1965.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [31]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XHennieS66&quot;&gt;&lt;/a&gt;Fred  Hennie  and  Richard  Stearns.    Two-tape  simulation  of  multitape  turing      machines. J.&amp;nbsp;of the ACM, 13:533–546, October 1966.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [32]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/jacm/HopcroftPV77&quot;&gt;&lt;/a&gt;John&amp;nbsp;E. Hopcroft, Wolfgang&amp;nbsp;J. Paul, and Leslie&amp;nbsp;G. Valiant. On time versus space.      J. ACM, 24(2):332–337, 1977.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [33]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XIP99&quot;&gt;&lt;/a&gt;Russell Impagliazzo and Ramamohan Paturi.   The complexity of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;k&quot; class=&quot;latex&quot; /&gt;-sat.   In IEEE      Conf.&amp;nbsp;on Computational Complexity (CCC), pages 237–, 1999.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [34]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XImpagliazzoPS97&quot;&gt;&lt;/a&gt;Russell Impagliazzo, Ramamohan Paturi, and Michael&amp;nbsp;E. Saks. Size-depth tradeoffs      for threshold circuits. SIAM J. Comput., 26(3):693–707, 1997.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [35]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XIPZ01&quot;&gt;&lt;/a&gt;Russell Impagliazzo, Ramamohan Paturi, and Francis Zane.  Which problems have      strongly exponential complexity? J. Computer &amp;amp; Systems Sciences, 63(4):512–530, Dec      2001.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [36]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XImW97&quot;&gt;&lt;/a&gt;Russell  Impagliazzo  and  Avi  Wigderson.    &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cmathit+%7BP%7D+%3D+%5Cmathit+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cmathit+%7BP%7D+%3D+%5Cmathit+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathit+%7BP%7D+%3D+%5Cmathit+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;mathit {P} = &amp;#92;mathit {BPP}&quot; class=&quot;latex&quot; /&gt;  if  &lt;img src=&quot;https://s0.wp.com/latex.php?latex=E&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=E&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=E&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;E&quot; class=&quot;latex&quot; /&gt;  requires  exponential  circuits:      Derandomizing the XOR lemma.  In 29th ACM Symp.&amp;nbsp;on the Theory of Computing      (STOC), pages 220–229. ACM, 1997.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [37]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XKarpLi82&quot;&gt;&lt;/a&gt;Richard&amp;nbsp;M.  Karp  and  Richard&amp;nbsp;J.  Lipton.    Turing  machines  that  take  advice.      L’Enseignement Math�matique. Revue Internationale. IIe S�rie, 28(3-4):191–209, 1982.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [38]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XKobayashi1985OnTS&quot;&gt;&lt;/a&gt;Kojiro Kobayashi.  On the structure of one-tape nondeterministic turing machine      time hierarchy. Theor. Comput. Sci., 40:175–193, 1985.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [39]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/siamcomp/LarsenWY20&quot;&gt;&lt;/a&gt;Kasper&amp;nbsp;Green Larsen, Omri Weinstein, and Huacheng Yu. Crossing the logarithmic      barrier for dynamic boolean data structure lower bounds.  SIAM J. Comput., 49(5),      2020.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [40]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XLevin73&quot;&gt;&lt;/a&gt;Leonid&amp;nbsp;A.  Levin.    Universal  sequential  search  problems.    Problemy  Peredachi      Informatsii, 9(3):115–116, 1973.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [41]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XLundFoKaNi92&quot;&gt;&lt;/a&gt;Carsten Lund, Lance Fortnow, Howard Karloff, and Noam Nisan. Algebraic methods      for interactive proof systems. J.&amp;nbsp;of the ACM, 39(4):859–868, October 1992.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [42]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XLupanov58&quot;&gt;&lt;/a&gt;O.&amp;nbsp;B. Lupanov. A method of circuit synthesis. Izv. VUZ Radiofiz., 1:120–140, 1958.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [43]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XMaS87&quot;&gt;&lt;/a&gt;Wolfgang Maass and Amir Schorr. Speed-up of Turing machines with one work tape      and a two-way input tape. SIAM J.&amp;nbsp;on Computing, 16(1):195–202, 1987.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [44]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XBarrington89&quot;&gt;&lt;/a&gt;David&amp;nbsp;A.  Mix  Barrington.   Bounded-width  polynomial-size  branching  programs      recognize  exactly  those  languages  in  NC&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5E1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5E1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5E1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;^1&quot; class=&quot;latex&quot; /&gt;.    J.&amp;nbsp;of  Computer  and  System  Sciences,      38(1):150–164, 1989.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [45]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XNaN93&quot;&gt;&lt;/a&gt;Joseph Naor and Moni Naor.  Small-bias probability spaces: efficient constructions      and applications. SIAM J.&amp;nbsp;on Computing, 22(4):838–856, 1993.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [46]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XNechiporuk66&quot;&gt;&lt;/a&gt;E.&amp;nbsp;I. Nechiporuk. A boolean function. Soviet Mathematics-Doklady, 169(4):765–766,      1966.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [47]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XNep70&quot;&gt;&lt;/a&gt;Valery&amp;nbsp;A. Nepomnjaščiĭ. Rudimentary predicates and Turing calculations. Soviet      Mathematics-Doklady, 11(6):1462–1465, 1970.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [48]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XViolaNEU-ram2sat-neu-author&quot;&gt;&lt;/a&gt;NEU. From RAM to SAT. Available at &lt;a href=&quot;http://www.ccs.neu.edu/home/viola/&quot; rel=&quot;nofollow&quot;&gt;http://www.ccs.neu.edu/home/viola/&lt;/a&gt;, 2012.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;                                                                                                                                                                                      [49]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/jcss/PapadimitriouY91&quot;&gt;&lt;/a&gt;Christos&amp;nbsp;H. Papadimitriou and Mihalis Yannakakis. Optimization, approximation,      and complexity classes. J. Comput. Syst. Sci., 43(3):425–440, 1991.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [50]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XPPST83&quot;&gt;&lt;/a&gt;Wolfgang&amp;nbsp;J. Paul, Nicholas Pippenger, Endre Szemer�di, and William&amp;nbsp;T. Trotter.      On determinism versus non-determinism and related problems (preliminary version). In      IEEE Symp.&amp;nbsp;on Foundations of Computer Science (FOCS), pages 429–438, 1983.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [51]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XPippengerF79&quot;&gt;&lt;/a&gt;Nicholas Pippenger and Michael&amp;nbsp;J. Fischer. Relations among complexity measures.      J.&amp;nbsp;of the ACM, 26(2):361–381, 1979.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [52]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XRaz87&quot;&gt;&lt;/a&gt;Alexander Razborov. Lower bounds on the dimension of schemes of bounded depth      in a complete basis containing the logical addition function.  Akademiya Nauk SSSR.      Matematicheskie Zametki, 41(4):598–607, 1987.  English translation in Mathematical      Notes of the Academy of Sci. of the USSR, 41(4):333-338, 1987.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [53]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XReingold08&quot;&gt;&lt;/a&gt;Omer Reingold. Undirected connectivity in log-space. J.&amp;nbsp;of the ACM, 55(4), 2008.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [54]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/siamcomp/Robson84&quot;&gt;&lt;/a&gt;J.&amp;nbsp;M.  Robson.    N  by  N  checkers  is  exptime  complete.    SIAM  J.  Comput.,      13(2):252–267, 1984.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [55]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:conf/coco/Santhanam01&quot;&gt;&lt;/a&gt;Rahul Santhanam.   On separators, segregators and time versus space.   In IEEE      Conf.&amp;nbsp;on Computational Complexity (CCC), pages 286–294, 2001.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [56]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XSAVITCH1970177&quot;&gt;&lt;/a&gt;Walter&amp;nbsp;J. Savitch.  Relationships between nondeterministic and deterministic tape      complexities. Journal of Computer and System Sciences, 4(2):177–192, 1970.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [57]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/siamcomp/Schonhage80&quot;&gt;&lt;/a&gt;Arnold Sch�nhage. Storage modification machines. SIAM J. Comput., 9(3):490–508,      1980.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [58]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XShamir92&quot;&gt;&lt;/a&gt;Adi Shamir. IP = PSPACE. J.&amp;nbsp;of the ACM, 39(4):869–877, October 1992.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [59]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XMR29860&quot;&gt;&lt;/a&gt;Claude&amp;nbsp;E. Shannon. The synthesis of two-terminal switching circuits. Bell System                                                                                                                                                                                          Tech. J., 28:59–98, 1949.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [60]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XSho90&quot;&gt;&lt;/a&gt;Victor Shoup. New algorithms for finding irreducible polynomials over finite fields.      Mathematics of Computation, 54(189):435–447, 1990.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [61]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XSiegel04&quot;&gt;&lt;/a&gt;Alan Siegel. On universal classes of extremely random constant-time hash functions.      SIAM J.&amp;nbsp;on Computing, 33(3):505–543, 2004.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [62]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XSip83b&quot;&gt;&lt;/a&gt;Michael Sipser. A complexity theoretic approach to randomness. In ACM Symp.&amp;nbsp;on      the Theory of Computing (STOC), pages 330–335, 1983.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [63]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XSmo87&quot;&gt;&lt;/a&gt;Roman Smolensky.  Algebraic methods in the theory of lower bounds for Boolean      circuit complexity.  In 19th ACM Symp.&amp;nbsp;on the Theory of Computing (STOC), pages      77–82. ACM, 1987.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [64]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XMR2145856&quot;&gt;&lt;/a&gt;Larry Stockmeyer and Albert&amp;nbsp;R. Meyer.  Cosmological lower bound on the circuit      complexity of a small problem in logic. J. ACM, 49(6):753–784, 2002.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [65]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XToda91&quot;&gt;&lt;/a&gt;Seinosuke Toda.   PP is as hard as the polynomial-time hierarchy.   SIAM J.&amp;nbsp;on      Computing, 20(5):865–877, 1991.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [66]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/x/Turing37&quot;&gt;&lt;/a&gt;Alan&amp;nbsp;M.   Turing.      On   computable   numbers,   with   an   application   to   the      entscheidungsproblem. Proc. London Math. Soc., s2-42(1):230–265, 1937.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [67]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XVal77&quot;&gt;&lt;/a&gt;Leslie&amp;nbsp;G.  Valiant.   Graph-theoretic  arguments  in  low-level  complexity.   In  6th      Symposium on Mathematical Foundations of Computer Science, volume&amp;nbsp;53 of Lecture      Notes in Computer Science, pages 162–176. Springer, 1977.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [68]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/tcs/ValiantV86&quot;&gt;&lt;/a&gt;Leslie&amp;nbsp;G. Valiant and Vijay&amp;nbsp;V. Vazirani. NP is as easy as detecting unique solutions.      Theor. Comput. Sci., 47(3):85–93, 1986.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [69]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XMelkebeek06&quot;&gt;&lt;/a&gt;Dieter  van  Melkebeek.   A  survey  of  lower  bounds  for  satisfiability  and  related                                                                                                                                                                                          problems. Foundations and Trends in Theoretical Computer Science, 2(3):197–303, 2006.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [70]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/tcs/MelkebeekR05&quot;&gt;&lt;/a&gt;Dieter van Melkebeek and Ran Raz.  A time lower bound for satisfiability.  Theor.      Comput. Sci., 348(2-3):311–320, 2005.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [71]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/tcs/Vinodchandran05&quot;&gt;&lt;/a&gt;N.&amp;nbsp;V. Vinodchandran.  A note on the circuit complexity of PP.  Theor. Comput.      Sci., 347(1-2):415–418, 2005.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [72]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XViolaBPvsE&quot;&gt;&lt;/a&gt;Emanuele Viola.  On approximate majority and probabilistic time.  Computational      Complexity, 18(3):337–375, 2009.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [73]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;Xviola-FTTCS09&quot;&gt;&lt;/a&gt;Emanuele Viola. On the power of small-depth computation. Foundations and Trends      in Theoretical Computer Science, 5(1):1–72, 2009.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [74]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XViola-xxx&quot;&gt;&lt;/a&gt;Emanuele Viola.  Reducing 3XOR to listing triangles, an exposition.  Available at      &lt;a href=&quot;http://www.ccs.neu.edu/home/viola/&quot; rel=&quot;nofollow&quot;&gt;http://www.ccs.neu.edu/home/viola/&lt;/a&gt;, 2011.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [75]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;Xviola-datastructurelb-implies-cclb&quot;&gt;&lt;/a&gt;Emanuele Viola.  Lower bounds for data structures with space close to maximum      imply  circuit  lower  bounds.    Theory  of  Computing,  15:1–9,  2019.    Available  at      &lt;a href=&quot;http://www.ccs.neu.edu/home/viola/&quot; rel=&quot;nofollow&quot;&gt;http://www.ccs.neu.edu/home/viola/&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [76]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;Xviola-tm&quot;&gt;&lt;/a&gt;Emanuele  Viola.   Pseudorandom  bits  and  lower  bounds  for  randomized  turing      machines. Theory of Computing, 18(10):1–12, 2022.&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&quot;authors&quot;&gt;By Manu&lt;/p&gt;
  </content>
    <author>
      <name>Emanuele Viola</name>
      <uri>https://emanueleviola.wordpress.com</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">ECCC Papers: TR23-050 |  Communication complexity of half-plane membership | 

	Hamed Hatami, 

	TsunMing Cheung, 

	Manasseh Ahmed, 

	Kusha Sareen</title>
    <link href="https://eccc.weizmann.ac.il/report/2023/050"/>
    <id>https://eccc.weizmann.ac.il/report/2023/050</id>
    <updated>2023-04-19T12:14:07+00:00</updated>
    <content type="html" xml:lang="en">
    We study the randomized communication complexity of the following problem. Alice receives the integer coordinates of a point in the plane, and Bob receives the integer parameters of a half-plane, and their goal is to determine whether Alice&amp;#39;s point belongs to Bob&amp;#39;s half-plane. 


This communication task corresponds to  determining whether $x_1y_1+y_2\geq x_2$, where the first player knows $(x_1,x_2) \in [n]^2$ and the second player knows $(y_1,y_2) \in [n]^2$. We prove that its randomized communication complexity is $\Omega(\log n)$.   
  


 
Our lower bound extends a recent result of Hatami, Hosseini, and Lovett (CCC &amp;#39;20 and ToC &amp;#39;22) regarding the largest possible gap between sign-rank and randomized communication complexity.
  </content>
    <author>
      <name>ECCC Papers</name>
      <uri>https://eccc.weizmann.ac.il/</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">ECCC Papers: TR23-049 |  Top-Down Lower Bounds for Depth-Four Circuits | 

	Mika Göös, 

	Artur Riazanov, 

	Anastasia Sofronova, 

	Dmitry Sokolov</title>
    <link href="https://eccc.weizmann.ac.il/report/2023/049"/>
    <id>https://eccc.weizmann.ac.il/report/2023/049</id>
    <updated>2023-04-19T12:02:39+00:00</updated>
    <content type="html" xml:lang="en">
    We present a top-down lower-bound method for depth-$4$  boolean circuits. In particular, we give a new proof of the well-known result that the parity function requires depth-$4$ circuits of size exponential in $n^{1/3}$. Our proof is an application of robust sunflowers and block unpredictability.
  </content>
    <author>
      <name>ECCC Papers</name>
      <uri>https://eccc.weizmann.ac.il/</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">Richard Lipton: An Award For Ellen Zegura</title>
    <link href="https://rjlipton.wpcomstaging.com/2023/04/18/an-award-for-ellen-zegura/"/>
    <id>https://rjlipton.wpcomstaging.com/?p=21480</id>
    <updated>2023-04-19T03:08:19+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;
Ellen Zegura was just honored with the Class of 1934 Distinguished Professor &lt;a href=&quot;https://news.gatech.edu/news/2023/04/13/ellen-zegura-honored-class-1934-distinguished-professor-award&quot;&gt;Award&lt;/a&gt;. The Class of 1934 Distinguished Professor Award recognizes outstanding achievement in teaching, research, and service. It is the highest honor given to a Georgia Tech professor. &lt;/p&gt;
&lt;p&gt;&lt;P&gt;&lt;br /&gt;
&lt;a href=&quot;https://rjlipton.wpcomstaging.com/2023/04/18/an-award-for-ellen-zegura/ez/&quot; rel=&quot;attachment wp-att-21482&quot;&gt;&lt;img data-attachment-id=&quot;21482&quot; data-permalink=&quot;https://rjlipton.wpcomstaging.com/2023/04/18/an-award-for-ellen-zegura/ez/&quot; data-orig-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/04/ez.jpeg?fit=248%2C225&amp;amp;ssl=1&quot; data-orig-size=&quot;248,225&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;1&amp;quot;}&quot; data-image-title=&quot;ez&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/04/ez.jpeg?fit=248%2C225&amp;amp;ssl=1&quot; data-large-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/04/ez.jpeg?fit=248%2C225&amp;amp;ssl=1&quot; decoding=&quot;async&quot; loading=&quot;lazy&quot; src=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/04/ez.jpeg?resize=200%2C180&amp;#038;ssl=1&quot; alt=&quot;&quot; width=&quot;200&quot; height=&quot;180&quot; class=&quot;aligncenter wp-image-21482&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;P&gt;&lt;br /&gt;
Created in 1984 by the Class of 1934 in observance of its 50th reunion, the award is presented to an active professor who has made significant, long-term contributions&amp;#8212;contributions that have brought widespread recognition to the professor, to their school, and to the Institute. The GaTech &lt;a href=&quot;https://news.gatech.edu/news/2023/04/13/ellen-zegura-honored-class-1934-distinguished-professor-award&quot;&gt;story&lt;/a&gt; on Ellen has many delightful personal details touching all aspects of her vocation.&lt;/p&gt;
&lt;p&gt;
Two other people in our line have been so honored recently: &lt;a href=&quot;https://www.cc.gatech.edu/people/james-foley&quot;&gt;Jim Foley&lt;/a&gt; from computing and &lt;a href=&quot;https://news.gatech.edu/news/2016/04/11/thomas-earns-top-faculty-honor&quot;&gt;Robin Thomas&lt;/a&gt; from mathematics. As a past Tech professor I knew both of them well. I&amp;#8217;ve also known other past winners of this great award. Congrats to Ellen. &lt;/p&gt;
&lt;p&gt;
&lt;p&gt;&lt;H2&gt; Voting Too &lt;/H2&gt;&lt;/p&gt;
&lt;p&gt;&lt;p&gt;
Zegura is getting this award for many reasons, but one prominent reason is her research with two other top Georgia Tech professors&amp;#8212;Michael Best and Rich DeMillo on voting safety. Best is a professor of international affairs and interactive computing at Georgia Tech and has worked globally on election systems monitoring for more than 15 years. DeMillo is the chair of the School of Cybersecurity and Privacy at Georgia Tech and has also worked on voting for years. &lt;/p&gt;
&lt;p&gt;&lt;P&gt;&lt;br /&gt;
&lt;a href=&quot;https://rjlipton.wpcomstaging.com/2023/04/18/an-award-for-ellen-zegura/trio/&quot; rel=&quot;attachment wp-att-21483&quot;&gt;&lt;img data-attachment-id=&quot;21483&quot; data-permalink=&quot;https://rjlipton.wpcomstaging.com/2023/04/18/an-award-for-ellen-zegura/trio/&quot; data-orig-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/04/Trio.jpg?fit=605%2C219&amp;amp;ssl=1&quot; data-orig-size=&quot;605,219&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;1&amp;quot;}&quot; data-image-title=&quot;Trio&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/04/Trio.jpg?fit=300%2C109&amp;amp;ssl=1&quot; data-large-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/04/Trio.jpg?fit=600%2C217&amp;amp;ssl=1&quot; decoding=&quot;async&quot; loading=&quot;lazy&quot; src=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/04/Trio.jpg?resize=550%2C200&amp;#038;ssl=1&quot; alt=&quot;&quot; width=&quot;550&quot; height=&quot;200&quot; class=&quot;aligncenter wp-image-21483&quot; srcset=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/04/Trio.jpg?w=605&amp;amp;ssl=1 605w, https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/04/Trio.jpg?resize=300%2C109&amp;amp;ssl=1 300w, https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/04/Trio.jpg?resize=600%2C219&amp;amp;ssl=1 600w&quot; sizes=&quot;(max-width: 550px) 100vw, 550px&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;P&gt;&lt;br /&gt;
The trio wrote an opinion piece on &lt;a href=&quot;https://www.ajc.com/opinion/opinion-ga-voting-processes-should-be-both-secure-and-usable/H2N2RAET65GGTEPSJDS67ORXGQ/&quot;&gt;elections&lt;/a&gt; in the Atlanta Journal-Constitution newspaper. Also see &lt;a href=&quot;https://scs.gatech.edu/news/640727/georgia-techs-secure-and-safe-elections-research-group-provide-live-wait-times-fulton&quot;&gt;this&lt;/a&gt; for comments by Tech&amp;#8217;s Secure and Safe Elections Research Group. &lt;/p&gt;
&lt;p&gt;
Here are some of the papers this was based on&amp;#8212;Rich was a co-author of the first, Ellen and Michael on the others: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://oar.princeton.edu/bitstream/88435/pr1qj9r/1/BallotMarkingDeviceVoters.pdf&quot;&gt;Ballot-Marking Devices&lt;/a&gt;&amp;#8212;DeMillo &lt;/p&gt;
&lt;li&gt;
&lt;a href=&quot;https://dl.acm.org/doi/abs/10.1145/2909609.2909623&quot;&gt;A First Look at &amp;#8220;Eyes on the Vote&amp;#8221;&lt;/a&gt;&amp;#8212;Best and Zegura &lt;/p&gt;
&lt;li&gt;
&lt;a href=&quot;https://dl.acm.org/doi/abs/10.1145/2909609.2909640&quot;&gt;Lessons in Social Election Monitoring&lt;/a&gt;&amp;#8212;Best and Zegura
&lt;/ul&gt;
&lt;p&gt;&lt;H2&gt; Open Problems &lt;/H2&gt;&lt;/p&gt;
&lt;p&gt;&lt;p&gt;
Again congrats to Ellen on being honored. &lt;/p&gt;
&lt;p&gt;
&lt;p class=&quot;authors&quot;&gt;By rjlipton&lt;/p&gt;
  </content>
    <author>
      <name>Richard Lipton</name>
      <uri>https://rjlipton.wpcomstaging.com</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Revisiting Block-Diagonal SDP Relaxations for the Clique Number of the Paley Graphs</title>
    <link href="http://arxiv.org/abs/2304.08615"/>
    <id>http://arxiv.org/abs/2304.08615</id>
    <updated>2023-04-19T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kobzar_V/0/1/0/all/0/1&quot;&gt;Vladimir A. Kobzar&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Mody_K/0/1/0/all/0/1&quot;&gt;Krishnan Mody&lt;/a&gt;&lt;/p&gt;&lt;p&gt;This work addresses the block-diagonal semidefinite program (SDP) relaxations
for the clique number of the Paley graphs. The size of the maximal clique
(clique number) of a graph is a classic NP-complete problem; a Paley graph is a
deterministic graph where two vertices are connected if their difference is a
quadratic residue modulo certain prime powers. Improving the upper bound for
the Paley graph clique number for odd prime powers is an open problem in
combinatorics. Moreover, since quadratic residues exhibit pseudorandom
properties, Paley graphs are related to the construction of deterministic
restricted isometries, an open problem in compressed sensing and sparse
recovery. Recent work provides evidence that the current upper bounds can be
improved by the sum-of-squares (SOS) relaxations. In particular the bounds
given by the SOS relaxations of degree 4 (SOS-4) are asymptotically growing at
an order smaller than square root of the prime. However computations of SOS-4
become intractable with respect to large graphs. Gvozdenovic et al. introduced
a more computationally efficient block-diagonal hierarchy of SDPs that refines
the SOS hierarchy. They computed the values of these SDPs of degrees 2 and 3
(L2 and L3 respectively) for the Paley graph clique numbers associated with
primes p less or equal to 809. These values bound from the above the values of
the corresponding SOS-4 and SOS-6 relaxations respectively. We revisit these
computations and determine the values of the L2 relaxation for larger p&#39;s. Our
results provide additional numerical evidence that the L2 relaxations, and
therefore also the SOS-4 relaxations, are asymptotically growing at an order
smaller than the square root of p.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Super-Logarithmic Lower Bounds for Dynamic Graph Problems</title>
    <link href="http://arxiv.org/abs/2304.08745"/>
    <id>http://arxiv.org/abs/2304.08745</id>
    <updated>2023-04-19T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Larsen_K/0/1/0/all/0/1&quot;&gt;Kasper Green Larsen&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Yu_H/0/1/0/all/0/1&quot;&gt;Huacheng Yu&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In this work, we prove a $\tilde{\Omega}(\lg^{3/2} n )$ unconditional lower
bound on the maximum of the query time and update time for dynamic data
structures supporting reachability queries in $n$-node directed acyclic graphs
under edge insertions. This is the first super-logarithmic lower bound for any
natural graph problem. In proving the lower bound, we also make novel
contributions to the state-of-the-art data structure lower bound techniques
that we hope may lead to further progress in proving lower bounds.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Lossy Compressor preserving variant calling through Extended BWT</title>
    <link href="http://arxiv.org/abs/2304.08534"/>
    <id>http://arxiv.org/abs/2304.08534</id>
    <updated>2023-04-19T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Guerrini_V/0/1/0/all/0/1&quot;&gt;Veronica Guerrini&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Louza_F/0/1/0/all/0/1&quot;&gt;Felipe A. Louza&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Rosone_G/0/1/0/all/0/1&quot;&gt;Giovanna Rosone&lt;/a&gt;&lt;/p&gt;&lt;p&gt;A standard format used for storing the output of high-throughput sequencing
experiments is the FASTQ format. It comprises three main components: (i)
headers, (ii) bases (nucleotide sequences), and (iii) quality scores. FASTQ
files are widely used for variant calling, where sequencing data are mapped
into a reference genome to discover variants that may be used for further
analysis. There are many specialized compressors that exploit redundancy in
FASTQ data with the focus only on either the bases or the quality scores
components. In this paper we consider the novel problem of lossy compressing,
in a reference-free way, FASTQ data by modifying both components at the same
time, while preserving the important information of the original FASTQ. We
introduce a general strategy, based on the Extended Burrows-Wheeler Transform
(EBWT) and positional clustering, and we present implementations in both
internal memory and external memory. Experimental results show that the lossy
compression performed by our tool is able to achieve good compression while
preserving information relating to variant calling more than the competitors.
Availability: the software is freely available at
https://github.com/veronicaguerrini/BFQzip.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Traversing combinatorial 0/1-polytopes via optimization</title>
    <link href="http://arxiv.org/abs/2304.08567"/>
    <id>http://arxiv.org/abs/2304.08567</id>
    <updated>2023-04-19T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Merino_A/0/1/0/all/0/1&quot;&gt;Arturo Merino&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Mutze_T/0/1/0/all/0/1&quot;&gt;Torsten M&amp;#xfc;tze&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In this paper, we present a new framework that exploits combinatorial
optimization for efficiently generating a large variety of combinatorial
objects based on graphs, matroids, posets and polytopes. Our method relies on a
simple and versatile algorithm for computing a Hamilton path on the skeleton of
any 0/1-polytope ${\rm conv}(X)$, where $X\subseteq \{0,1\}^n$. The algorithm
uses as a black box any algorithm that solves a variant of the classical linear
optimization problem $\min\{w\cdot x\mid x\in X\}$, and the resulting delay,
i.e., the running time per visited vertex on the Hamilton path, is only by a
factor of $\log n$ larger than the running time of the optimization algorithm.
When $X$ encodes a particular class of combinatorial objects, then traversing
the skeleton of the polytope ${\rm conv}(X)$ along a Hamilton path corresponds
to listing the combinatorial objects by local change operations, i.e., we
obtain Gray code listings. As concrete results of our general framework, we
obtain efficient algorithms for generating all ($c$-optimal) bases in a
matroid; ($c$-optimal) spanning trees, forests, ($c$-optimal) matchings in a
general graph; ($c$-optimal) vertex covers, ($c$-optimal) stable sets in a
bipartite graph; as well as ($c$-optimal) antichains and ideals of a poset. The
delay and space required by these algorithms are polynomial in the size of the
matroid, graph, or poset, respectively, and these listings correspond to
Hamilton paths on the corresponding combinatorial polytopes. We also obtain an
$O(t_{\rm LP} \log n)$ delay algorithm for the vertex enumeration problem on
0/1-polytopes $\{x\in\mathbb{R}^n\mid Ax\leq b\}$, where $A\in
\mathbb{R}^{m\times n}$ and $b\in\mathbb{R}^m$, and $t_{\rm LP}$ is the time
needed to solve the linear program $\min\{w\cdot x\mid Ax\leq b\}$. This
improves upon the 25-year old $O(t_{\rm LP}\,n)$ delay algorithm of Bussieck
and L\&quot;ubbecke.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Graph Sparsification by Approximate Matrix Multiplication</title>
    <link href="http://arxiv.org/abs/2304.08581"/>
    <id>http://arxiv.org/abs/2304.08581</id>
    <updated>2023-04-19T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Charalambides_N/0/1/0/all/0/1&quot;&gt;Neophytos Charalambides&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Hero_A/0/1/0/all/0/1&quot;&gt;Alfred O. Hero III&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Graphs arising in statistical problems, signal processing, large networks,
combinatorial optimization, and data analysis are often dense, which causes
both computational and storage bottlenecks. One way of \textit{sparsifying} a
\textit{weighted} graph, while sharing the same vertices as the original graph
but reducing the number of edges, is through \textit{spectral sparsification}.
We study this problem through the perspective of RandNLA. Specifically, we
utilize randomized matrix multiplication to give a clean and simple analysis of
how sampling according to edge weights gives a spectral approximation to graph
Laplacians. Through the $CR$-MM algorithm, we attain a simple and
computationally efficient sparsifier whose resulting Laplacian estimate is
unbiased and of minimum variance. Furthermore, we define a new notion of
\textit{additive spectral sparsifiers}, which has not been considered in the
literature.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Subcubic algorithm for (Unweighted) Unrooted Tree Edit Distance</title>
    <link href="http://arxiv.org/abs/2304.08632"/>
    <id>http://arxiv.org/abs/2304.08632</id>
    <updated>2023-04-19T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Pioro_K/0/1/0/all/0/1&quot;&gt;Krzysztof Pi&amp;#xf3;ro&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The tree edit distance problem is a natural generalization of the classic
string edit distance problem. Given two ordered, edge-labeled trees $T_1$ and
$T_2$, the edit distance between $T_1$ and $T_2$ is defined as the minimum
total cost of operations that transform $T_1$ into $T_2$. In one operation, we
can contract an edge, split a vertex into two or change the label of an edge.
For the weighted version of the problem, where the cost of each operation
depends on the type of the operation and the label on the edge involved,
$\mathcal{O}(n^3)$ time algorithms are known for both rooted and unrooted
trees. The existence of a truly subcubic $\mathcal{O}(n^{3-\epsilon})$ time
algorithm is unlikely, as it would imply a truly subcubic algorithm for the
APSP problem. However, recently Mao (FOCS&#39;21) showed that if we assume that
each operation has a unit cost, then the tree edit distance between two rooted
trees can be computed in truly subcubic time. In this paper, we show how to
adapt Mao&#39;s algorithm to make it work for unrooted trees and we show an
$\widetilde{\mathcal{O}}(n^{(7\omega + 15)/(2\omega + 6)}) \leq
\mathcal{O}(n^{2.9417})$ time algorithm for the unweighted tree edit distance
between two unrooted trees, where $\omega \leq 2.373$ is the matrix
multiplication exponent. It is the first known subcubic algorithm for unrooted
trees. The main idea behind our algorithm is the fact that to compute the tree
edit distance between two unrooted trees, it is enough to compute the tree edit
distance between an arbitrary rooting of the first tree and every rooting of
the second tree.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Dynamic Vector Bin Packing for Online Resource Allocation in the Cloud</title>
    <link href="http://arxiv.org/abs/2304.08648"/>
    <id>http://arxiv.org/abs/2304.08648</id>
    <updated>2023-04-19T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Murhekar_A/0/1/0/all/0/1&quot;&gt;Aniket Murhekar&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Arbour_D/0/1/0/all/0/1&quot;&gt;David Arbour&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Mai_T/0/1/0/all/0/1&quot;&gt;Tung Mai&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Rao_A/0/1/0/all/0/1&quot;&gt;Anup Rao&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Several cloud-based applications, such as cloud gaming, rent servers to
execute jobs which arrive in an online fashion. Each job has a resource demand
and must be dispatched to a cloud server which has enough resources to execute
the job, which departs after its completion. Under the `pay-as-you-go&#39; billing
model, the server rental cost is proportional to the total time that servers
are actively running jobs. The problem of efficiently allocating a sequence of
online jobs to servers without exceeding the resource capacity of any server
while minimizing total server usage time can be modelled as a variant of the
dynamic bin packing problem (DBP), called MinUsageTime DBP.
&lt;/p&gt;
&lt;p&gt;In this work, we initiate the study of the problem with multi-dimensional
resource demands (e.g. CPU/GPU usage, memory requirement, bandwidth usage,
etc.), called MinUsageTime Dynamic Vector Bin Packing (DVBP). We study the
competitive ratio (CR) of Any Fit packing algorithms for this problem. We show
almost-tight bounds on the CR of three specific Any Fit packing algorithms,
namely First Fit, Next Fit, and Move To Front. We prove that the CR of Move To
Front is at most $(2\mu+1)d +1$, where $\mu$ is the ratio of the max/min item
durations. For $d=1$, this significantly improves the previously known upper
bound of $6\mu+7$ (Kamali &amp;amp; Lopez-Ortiz, 2015). We then prove the CR of First
Fit and Next Fit are bounded by $(\mu+2)d+1$ and $2\mu d+1$, respectively.
Next, we prove a lower bound of $(\mu+1)d$ on the CR of any Any Fit packing
algorithm, an improved lower bound of $2\mu d$ for Next Fit, and a lower bound
of $2\mu$ for Move To Front in the 1-D case. All our bounds improve or match
the best-known bounds for the 1-D case. Finally, we experimentally study the
average-case performance of these algorithms on randomly generated synthetic
data, and observe that Move To Front outperforms other Any Fit packing
algorithms.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: On Approximate Reconfigurability of Label Cover</title>
    <link href="http://arxiv.org/abs/2304.08746"/>
    <id>http://arxiv.org/abs/2304.08746</id>
    <updated>2023-04-19T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Ohsaka_N/0/1/0/all/0/1&quot;&gt;Naoto Ohsaka&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Given a two-prover game $G$ and its two satisfying labelings
$\psi_\mathsf{s}$ and $\psi_\mathsf{t}$, the Label Cover Reconfiguration
problem asks whether $\psi_\mathsf{s}$ can be transformed into
$\psi_\mathsf{t}$ by repeatedly changing the value of a vertex while preserving
any intermediate labeling satisfying $G$. We consider an optimization variant
of Label Cover Reconfiguration by relaxing the feasibility of labelings,
referred to as Maxmin Label Cover Reconfiguration: we are allowed to transform
by passing through any non-satisfying labelings, but required to maximize the
minimum fraction of satisfied edges during transformation from
$\psi_\mathsf{s}$ to $\psi_\mathsf{t}$. Since the parallel repetition theorem
of Raz (SIAM J. Comput., 1998), which implies NP-hardness of Label Cover within
any constant factor, produces strong inapproximability results for many NP-hard
problems, one may think of using Maxmin Label Cover Reconfiguration to derive
inapproximability results for reconfiguration problems. We prove the following
results on Maxmin Label Cover Reconfiguration, which display different trends
from those of Label Cover and the parallel repetition theorem:
&lt;/p&gt;
&lt;p&gt;(1) Maxmin Label Cover Reconfiguration can be approximated within a factor of
nearly $\frac{1}{4}$ for restricted graph classes, including slightly dense
graphs and balanced bipartite graphs.
&lt;/p&gt;
&lt;p&gt;(2) A naive parallel repetition of Maxmin Label Cover Reconfiguration does
not decrease the optimal objective value.
&lt;/p&gt;
&lt;p&gt;(3) Label Cover Reconfiguration on projection games can be decided in
polynomial time.
&lt;/p&gt;
&lt;p&gt;The above results suggest that a reconfiguration analogue of the parallel
repetition theorem is unlikely.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Parallel Greedy Spanners</title>
    <link href="http://arxiv.org/abs/2304.08892"/>
    <id>http://arxiv.org/abs/2304.08892</id>
    <updated>2023-04-19T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Haeupler_B/0/1/0/all/0/1&quot;&gt;Bernhard Haeupler&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Hershkowitz_D/0/1/0/all/0/1&quot;&gt;D Ellis Hershkowitz&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Tan_Z/0/1/0/all/0/1&quot;&gt;Zihan Tan&lt;/a&gt;&lt;/p&gt;&lt;p&gt;A $t$-spanner of a graph is a subgraph that $t$-approximates pairwise
distances. The greedy algorithm is one of the simplest and most well-studied
algorithms for constructing a sparse spanner: it computes a $t$-spanner with
$n^{1+O(1/t)}$ edges by repeatedly choosing any edge which does not close a
cycle of chosen edges with $t+1$ or fewer edges.
&lt;/p&gt;
&lt;p&gt;We demonstrate that the greedy algorithm computes a $t$-spanner with $n^{1 +
O(1/t)}$ edges even when a matching of such edges are added in parallel. In
particular, it suffices to repeatedly add any matching where each individual
edge does not close a cycle with $t +1$ or fewer edges but where adding the
entire matching might. Our analysis makes use of and illustrates the power of
new advances in length-constrained expander decompositions.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Random Cuts are Optimal for Explainable k-Medians</title>
    <link href="http://arxiv.org/abs/2304.09113"/>
    <id>http://arxiv.org/abs/2304.09113</id>
    <updated>2023-04-19T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Makarychev_K/0/1/0/all/0/1&quot;&gt;Konstantin Makarychev&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Shan_L/0/1/0/all/0/1&quot;&gt;Liren Shan&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We show that the RandomCoordinateCut algorithm gives the optimal competitive
ratio for explainable k-medians in l1. The problem of explainable k-medians was
introduced by Dasgupta, Frost, Moshkovitz, and Rashtchian in 2020. Several
groups of authors independently proposed a simple polynomial-time randomized
algorithm for the problem and showed that this algorithm is O(log k loglog k)
competitive. We provide a tight analysis of the algorithm and prove that its
competitive ratio is upper bounded by 2ln k +2. This bound matches the
Omega(log k) lower bound by Dasgupta et al (2020).
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Optimal PAC Bounds Without Uniform Convergence</title>
    <link href="http://arxiv.org/abs/2304.09167"/>
    <id>http://arxiv.org/abs/2304.09167</id>
    <updated>2023-04-19T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Aden_Ali_I/0/1/0/all/0/1&quot;&gt;Ishaq Aden-Ali&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Cherapanamjeri_Y/0/1/0/all/0/1&quot;&gt;Yeshwanth Cherapanamjeri&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Shetty_A/0/1/0/all/0/1&quot;&gt;Abhishek Shetty&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Zhivotovskiy_N/0/1/0/all/0/1&quot;&gt;Nikita Zhivotovskiy&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In statistical learning theory, determining the sample complexity of
realizable binary classification for VC classes was a long-standing open
problem. The results of Simon and Hanneke established sharp upper bounds in
this setting. However, the reliance of their argument on the uniform
convergence principle limits its applicability to more general learning
settings such as multiclass classification. In this paper, we address this
issue by providing optimal high probability risk bounds through a framework
that surpasses the limitations of uniform convergence arguments.
&lt;/p&gt;
&lt;p&gt;Our framework converts the leave-one-out error of permutation invariant
predictors into high probability risk bounds. As an application, by adapting
the one-inclusion graph algorithm of Haussler, Littlestone, and Warmuth, we
propose an algorithm that achieves an optimal PAC bound for binary
classification. Specifically, our result shows that certain aggregations of
one-inclusion graph algorithms are optimal, addressing a variant of a classic
question posed by Warmuth.
&lt;/p&gt;
&lt;p&gt;We further instantiate our framework in three settings where uniform
convergence is provably suboptimal. For multiclass classification, we prove an
optimal risk bound that scales with the one-inclusion hypergraph density of the
class, addressing the suboptimality of the analysis of Daniely and
Shalev-Shwartz. For partial hypothesis classification, we determine the optimal
sample complexity bound, resolving a question posed by Alon, Hanneke, Holzman,
and Moran. For realizable bounded regression with absolute loss, we derive an
optimal risk bound that relies on a modified version of the scale-sensitive
dimension, refining the results of Bartlett and Long. Our rates surpass
standard uniform convergence-based results due to the smaller complexity
measure in our risk bound.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">ECCC Papers: TR23-048 |  A $d^{1/2+o(1)}$ Monotonicity Tester for Boolean Functions on $d$-Dimensional Hypergrids | 

	Hadley Black, 

	Deeparnab Chakrabarty, 

	C. Seshadhri</title>
    <link href="https://eccc.weizmann.ac.il/report/2023/048"/>
    <id>https://eccc.weizmann.ac.il/report/2023/048</id>
    <updated>2023-04-18T19:15:38+00:00</updated>
    <content type="html" xml:lang="en">
    Monotonicity testing of Boolean functions on the hypergrid, $f:[n]^d \to \{0,1\}$, is a classic topic in property testing. Determining the non-adaptive complexity of this problem is an important open question. For arbitrary $n$, [Black-Chakrabarty-Seshadhri, SODA 2020] describe a tester with query complexity $\widetilde{O}(\varepsilon^{-4/3}d^{5/6})$. This complexity is independent of $n$, but has a suboptimal dependence on $d$. Recently, [Braverman-Khot-Kindler-Minzer, ITCS 2023] and [Black-Chakrabarty-Seshadhri, STOC 2023] describe $\widetilde{O}(\varepsilon^{-2} n^3\sqrt{d})$ and $\widetilde{O}(\varepsilon^{-2} n\sqrt{d})$-query testers, respectively. These testers have an almost optimal dependence on $d$, but a suboptimal polynomial dependence on $n$. 

In this paper, we describe a non-adaptive, one-sided monotonicity tester with query complexity
$O(\varepsilon^{-2} d^{1/2 + o(1)})$, independent of $n$. Up to the $d^{o(1)}$-factors, our result resolves the non-adaptive complexity of monotonicity testing for Boolean functions on hypergrids. The independence of $n$ yields a non-adaptive, one-sided $O(\varepsilon^{-2} d^{1/2 + o(1)})$-query monotonicity tester for Boolean functions $f:\mathbb{R}^d \to \{0,1\}$ associated with an arbitrary product measure.
  </content>
    <author>
      <name>ECCC Papers</name>
      <uri>https://eccc.weizmann.ac.il/</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Regression and Algorithmic Information Theory</title>
    <link href="http://arxiv.org/abs/2304.07825"/>
    <id>http://arxiv.org/abs/2304.07825</id>
    <updated>2023-04-18T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Epstein_S/0/1/0/all/0/1&quot;&gt;Samuel Epstein&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In this paper we prove a theorem about regression, in that the shortest
description of a function consistent with a finite sample of data is less than
the combined conditional Kolmogorov complexities over the data in the sample.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Geometry: Efficient Incremental Penetration Depth Estimation between Convex Geometries</title>
    <link href="http://arxiv.org/abs/2304.07357"/>
    <id>http://arxiv.org/abs/2304.07357</id>
    <updated>2023-04-18T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Gao_W/0/1/0/all/0/1&quot;&gt;Wei Gao&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Penetration depth (PD) is essential for robotics due to its extensive
applications in dynamic simulation, motion planning, haptic rendering, etc. The
Expanding Polytope Algorithm (EPA) is the de facto standard for this problem,
which estimates PD by expanding an inner polyhedral approximation of an
implicit set. In this paper, we propose a novel optimization-based algorithm
that incrementally estimates minimum penetration depth and its direction. One
major advantage of our method is that it can be warm-started by exploiting the
spatial and temporal coherence, which emerges naturally in many robotic
applications (e.g., the temporal coherence between adjacent simulation time
knots). As a result, our algorithm achieves substantial speedup -- we
demonstrate it is 5-30x faster than EPA on several benchmarks. Moreover, our
approach is built upon the same implicit geometry representation as EPA, which
enables easy integration and deployment into existing software stacks. We also
provide an open-source implementation for further evaluations and experiments.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Geometry</name>
      <uri>https://arxiv.org/list/cs.CG/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Geometry: Random $\epsilon$-Cover on Compact Symmetric Space</title>
    <link href="http://arxiv.org/abs/2304.07622"/>
    <id>http://arxiv.org/abs/2304.07622</id>
    <updated>2023-04-18T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Chakraborty_S/0/1/0/all/0/1&quot;&gt;Somnath Chakraborty&lt;/a&gt;&lt;/p&gt;&lt;p&gt;A randomized scheme that succeeds with probability $1-\delta$ (for any
$\delta&amp;gt;0$) has been devised to construct (1) an equidistributed
$\epsilon$-cover of a compact Riemannian symmetric space $\mathbb M$ of
dimension $d_{\mathbb M}$ and antipodal dimension $\bar{d}_{\mathbb M}$, and
(2) an approximate $(\lambda_r,2)$-design, using $n(\epsilon,\delta)$-many
Haar-random isometries of $\mathbb M$, where
\begin{equation}n(\epsilon,\delta):=O_{\mathbb M}\left(d_{\mathbb M}\ln
\left(\frac 1\epsilon\right)+\log\left(\frac
1\delta\right)\right)\,,\end{equation} and $\lambda_r$ is the $r$-th smallest
eigenvalue of the Laplace-Beltrami operator on $\mathbb M$. The
$\epsilon$-cover so-produced can be used to compute the integral of 1-Lipschitz
functions within additive $\tilde O(\epsilon)$-error, as well as in comparing
persistence homology computed from data cloud to that of a hypothetical data
cloud sampled from the uniform measure.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Geometry</name>
      <uri>https://arxiv.org/list/cs.CG/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Simple Combinatorial Construction of the $k^{o(1)}$-Lower Bound for Approximating the Parameterized $k$-Clique</title>
    <link href="http://arxiv.org/abs/2304.07516"/>
    <id>http://arxiv.org/abs/2304.07516</id>
    <updated>2023-04-18T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Chen_Y/0/1/0/all/0/1&quot;&gt;Yijia Chen&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Feng_Y/0/1/0/all/0/1&quot;&gt;Yi Feng&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Laekhanukit_B/0/1/0/all/0/1&quot;&gt;Bundit Laekhanukit&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Liu_Y/0/1/0/all/0/1&quot;&gt;Yanlin Liu&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In the parameterized $k$-clique problem, or $k$-Clique for short, we are
given a graph $G$ and a parameter $k\ge 1$. The goal is to decide whether there
exist $k$ vertices in $G$ that induce a complete subgraph (i.e., a $k$-clique).
This problem plays a central role in the theory of parameterized intractability
as one of the first W[1]-complete problems. Existing research has shown that
even an FPT-approximation algorithm for $k$-Clique with arbitrary ratio does
not exist, assuming the Gap-Exponential-Time Hypothesis (Gap-ETH) [Chalermsook
et al., FOCS&#39;17 and SICOMP]. However, whether this inapproximability result can
be based on the standard assumption of $\mathrm{W} 1\ne \mathrm{FPT}$ remains
unclear. The recent breakthrough of Bingkai Lin [STOC&#39;21] and subsequent works
by Karthik C.S. and Khot [CCC&#39;22], and by Lin, Ren, Sun Wang [ICALP&#39;22] give a
technique that bypasses Gap-ETH, thus leading to the inapproximability ratio of
$O(1)$ and $k^{o(1)}$ under $\mathrm{W}[1]$-hardness (the first two) and ETH
(for the latter one). All the work along this line follows the framework
developed by Lin, which starts from the $k$-vector-sum problem and requires
some involved algebraic techniques.
&lt;/p&gt;
&lt;p&gt;This paper presents an alternative framework for proving the W[1]-hardness of
the $k^{o(1)}$-FPT-inapproximability of $k$-Clique. Using this framework, we
obtain a gap-producing self-reduction of $k$-Clique without any intermediate
algebraic problem. More precisely, we reduce from $(k,k-1)$-Gap Clique to
$(q^k, q^{k-1})$-Gap Clique, for any function $q$ depending only on the
parameter $k$, thus implying the $k^{o(1)}$-inapproximability result when $q$
is sufficiently large. Our proof is relatively simple and mostly combinatorial.
At the core of our construction is a novel encoding of $k$-element subset
stemming from the theory of &quot;network coding&quot; and a &quot;Sidon set&quot; representation
of a graph.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: On modeling NP-Complete problems as polynomial-sized linear programs: Escaping/Side-stepping the &quot;barriers&quot;</title>
    <link href="http://arxiv.org/abs/2304.07716"/>
    <id>http://arxiv.org/abs/2304.07716</id>
    <updated>2023-04-18T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Diaby_M/0/1/0/all/0/1&quot;&gt;Moustapha Diaby&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Karwan_M/0/1/0/all/0/1&quot;&gt;Mark Karwan&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Sun_L/0/1/0/all/0/1&quot;&gt;Lei Sun&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In view of the extended formulations (EFs) developments (e.g. &quot;Fiorini, S.,
S. Massar, S. Pokutta, H.R. Tiwary, and R. de Wolf [2015]. Exponential Lower
Bounds for Polytopes in Combinatorial Optimization. Journal of the ACM 62:2&quot;),
we focus in this paper on the question of whether it is possible to model an
NP-Complete problem as a polynomial-sized linear program. For the sake of
simplicity of exposition, the discussions are focused on the TSP. We show that
a finding that there exists no polynomial-sized extended formulation of &quot;the
TSP polytope&quot; does not (necessarily) imply that it is &quot;impossible&quot; for a
polynomial-sized linear program to solve the TSP optimization problem. We show
that under appropriate conditions the TSP optimization problem can be solved
without recourse to the traditional city-to-city (&quot;travel leg&quot;) variables,
thereby side-stepping/&quot;escaping from&quot; &quot;the TSP polytope&quot; and hence, the
barriers. Some illustrative examples are discussed.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Fully Scalable Massively Parallel Algorithms for Embedded Planar Graphs</title>
    <link href="http://arxiv.org/abs/2304.07441"/>
    <id>http://arxiv.org/abs/2304.07441</id>
    <updated>2023-04-18T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Chang_Y/0/1/0/all/0/1&quot;&gt;Yi-Jun Chang&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Zheng_D/0/1/0/all/0/1&quot;&gt;Da Wei Zheng&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We consider the \emph{massively parallel computation} (MPC) model, which is a
theoretical abstraction of large-scale parallel processing models such as
MapReduce. In this model, assuming the widely believed 1-vs-2-cycles
conjecture, it is not possible to solve many basic graph problems in constant
rounds with strongly sublinear memory size per machine.
&lt;/p&gt;
&lt;p&gt;Recently, Holm and T\v{e}tek [SODA 2023] showed that it is possible to get
around this barrier for planar graphs when a planar straight-line embedding of
the graph is given. For such inputs on $n$ vertices, they obtained
constant-round MPC algorithms for connected components, minimum spanning tree
(MST), and $O(1)$-approximation of $st$-shortest path, diameter, and radius, as
long as the memory size per machine is $\mathcal{S} = n^{2/3 + \Omega(1)}$.
&lt;/p&gt;
&lt;p&gt;In this work, we provide an improved recursive framework to obtain
constant-round algorithms in the more challenging \emph{fully scalable} regime
where memory size per machine can be $\mathcal{S} = n^\delta$ for any given
constant $\delta &amp;gt; 0$. This gives the first constant-round algorithms in this
regime for fundamental problems such as connected components, MST, and EMST.
&lt;/p&gt;
&lt;p&gt;Moreover, we show that $\varepsilon$-emulators can be incorporated into our
recursive framework to obtain constant-round $(1+\varepsilon)$-approximation
algorithms for single source shortest path (SSSP) and shortest cycle in
embedded planar graphs. We show that it is possible to construct a dual graph
of the given embedded planar graph in constant rounds, which allows us to solve
the $(1+\varepsilon)$-approximate $st$-maximum flow and minimum cut problem as
both reduce to a shortest cycle problem in the dual graph. Using $O(n^2)$ total
space, we also obtain constant-round algorithms for
$(1+\varepsilon)$-approximate all-pairs shortest paths (APSP), diameter, and
radius.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Fully Dynamic Shortest Path Reporting Against an Adaptive Adversary</title>
    <link href="http://arxiv.org/abs/2304.07403"/>
    <id>http://arxiv.org/abs/2304.07403</id>
    <updated>2023-04-18T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Alokhina_A/0/1/0/all/0/1&quot;&gt;Anastasiia Alokhina&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Brand_J/0/1/0/all/0/1&quot;&gt;Jan van den Brand&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Algebraic data structures are the main subroutine for maintaining distances
in fully dynamic graphs in subquadratic time. However, these dynamic algebraic
algorithms generally cannot maintain the shortest paths, especially against
adaptive adversaries. We present the first fully dynamic algorithm that
maintains the shortest paths against an adaptive adversary in subquadratic
update time. This is obtained via a combinatorial reduction that allows
reconstructing the shortest paths with only a few distance estimates. Using
this reduction, we obtain the following:
&lt;/p&gt;
&lt;p&gt;On weighted directed graphs with real edge weights in $[1,W]$, we can
maintain $(1+\epsilon)$ approximate shortest paths in
$\tilde{O}(n^{1.816}\epsilon^{-2} \log W)$ update and $\tilde{O}(n^{1.741}
\epsilon^{-2} \log W)$ query time. This improves upon the approximate distance
data structures from [v.d.Brand, Nanongkai, FOCS&#39;19], which only returned a
distance estimate, by matching their complexity and returning an approximate
shortest path.
&lt;/p&gt;
&lt;p&gt;On unweighted directed graphs, we can maintain exact shortest paths in
$\tilde{O}(n^{1.823})$ update and $\tilde{O}(n^{1.747})$ query time. This
improves upon [Bergamaschi, Henzinger, P.Gutenberg, V.Williams, Wein, SODA&#39;21]
who could report the path only against oblivious adversaries. We improve both
their update and query time while also handling adaptive adversaries.
&lt;/p&gt;
&lt;p&gt;On unweighted undirected graphs, our reduction holds not just against
adaptive adversaries but is also deterministic. We maintain a
$(1+\epsilon)$-approximate $st$-shortest path in $O(n^{1.529} / \epsilon^2)$
time per update, and $(1+\epsilon)$-approximate single source shortest paths in
$O(n^{1.764} / \epsilon^2)$ time per update. Previous deterministic results by
[v.d.Brand, Nazari, Forster, FOCS&#39;22] could only maintain distance estimates
but no paths.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


</feed>
