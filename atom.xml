<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Theory of Computing Report</title>
  <link rel="self" href=""/>
  <link href=""/>
  <id></id>
  <updated></updated>
  <generator uri="http://feedreader.github.io/">Pluto 1.6.2 on Ruby 3.0.6 (2023-03-30) [x86_64-linux]</generator>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">ECCC Papers: TR23-065 |  From Grassmannian to Simplicial High-Dimensional Expanders | 

	Louis Golowich</title>
    <link href="https://eccc.weizmann.ac.il/report/2023/065"/>
    <id>https://eccc.weizmann.ac.il/report/2023/065</id>
    <updated>2023-05-04T13:54:49+00:00</updated>
    <content type="html" xml:lang="en">
    In this paper, we present a new construction of simplicial complexes of subpolynomial degree with arbitrarily good local spectral expansion. Previously, the only known high-dimensional expanders (HDXs) with arbitrarily good expansion and less than polynomial degree were based on one of two constructions, namely Ramanujan complexes and coset complexes. In contrast, our construction is a Cayley complex over the group $\mathbb{F}_2^k$, with Cayley generating set given by a Grassmannian HDX.

  Our construction is in part motivated by a coding-theoretic interpretation of Grassmannian HDXs that we present, which provides a formal connection between Grassmannian HDXs, simplicial HDXs, and LDPC codes. We apply this interpretation to prove a general characterization of the 1-homology groups over $\mathbb{F}_2$ of Cayley simplicial complexes over $\mathbb{F}_2^k$. Using this result, we construct simplicial complexes on $N$ vertices with arbitrarily good local expansion for which the dimension of the 1-homology group grows as $\Omega(\log^2N)$. No prior constructions in the literature have been shown to achieve as large a 1-homology group.
  </content>
    <author>
      <name>ECCC Papers</name>
      <uri>https://eccc.weizmann.ac.il/</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">Computational Complexity: Breaking Ground in Isomorphism Testing: A Leap Forward for a Bottleneck Case of Group Isomorphism</title>
    <link href="https://blog.computationalcomplexity.org/2023/05/breaking-ground-in-isomorphism-testing.html"/>
    <id>tag:blogger.com,1999:blog-3722233.post-7182332023085822484</id>
    <updated>2023-05-04T11:12:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;&lt;i&gt;Guest post by Josh Grochow and &lt;/i&gt;&lt;/span&gt;&lt;span style=&quot;font-family: Arial;&quot;&gt;&lt;span style=&quot;font-size: 14.6667px; white-space: pre-wrap;&quot;&gt;&lt;i&gt;Youming Qiao&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;There has, quietly, been somewhat of a breakthrough in isomorphism testing. No, not as big as Babai&#39;s 2016 &lt;/span&gt;&lt;a href=&quot;https://arxiv.org/abs/1512.03547&quot; style=&quot;text-decoration-line: none;&quot;&gt;&lt;span style=&quot;color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Graph Isomorphism in Quasipolynomial Time&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;. But a first foothold in climbing a wall for which no one had gotten much off the ground before. The result, due to &lt;/span&gt;&lt;a href=&quot;https://arxiv.org/abs/2303.15412&quot; style=&quot;text-decoration-line: none;&quot;&gt;&lt;span style=&quot;color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Xiaorui Sun in this year&#39;s STOC&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;, is an algorithm for testing isomorphism of a certain class of groups - p-groups of class 2 and exponent p if you must know, but we&#39;ll get to that - in time \(n^{O(log^{5/6} n)}\) where n is the order of the group. To understand why we&#39;re excited about this we have to tell a bit of a story.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;span id=&quot;docs-internal-guid-259ecb6b-7fff-b1a3-e5ab-283b928791b9&quot;&gt;&lt;p dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;In the 1970s, when Graph Isomorphism was still a mystery, people also thought more widely about isomorphism testing of other combinatorial and algebraic structures. For finite groups of order n, Robert Tarjan realized that there is an \(n^{log n+O(1)}\)-time algorithm, simply because a group of order n has a generating set of size log n. This observation was recorded by Gary Miller in a &lt;/span&gt;&lt;a href=&quot;https://doi.org/10.1145/800133.804331&quot; style=&quot;text-decoration-line: none;&quot;&gt;&lt;span style=&quot;color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;paper in STOC&#39;78&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;, and independently realized by &lt;/span&gt;&lt;a href=&quot;https://www.sciencedirect.com/science/article/abs/pii/B9780080129754500114&quot; style=&quot;text-decoration-line: none;&quot;&gt;&lt;span style=&quot;color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Felsch and Neubüser&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;. A natural question is then whether Group Isomorphism can be solved in time poly(n) where n is the group order.&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Not only is this question natural from the perspective of studying groups computationally, it is also natural from the perspective of &lt;/span&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; font-style: italic; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Graph&lt;/span&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; Isomorphism. For Group Isomorphism reduces to Graph Isomorphism in polynomial-time (as does the isomorphism problem for any finite algebraic or relational structure, see &lt;/span&gt;&lt;a href=&quot;https://doi.org/10.1007/BF02104746&quot; style=&quot;text-decoration-line: none;&quot;&gt;&lt;span style=&quot;color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Zemlyachenko, Korneenko, &amp;amp; Tyshkevich&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;). While this has been known for a long time, Babai’s result on Graph Isomorphism brings the running times quite close: \(n^{O(log^2 n)}\) for graphs, and \(n^{O(log n)}\) for groups. So not only does Group Isomorphism stand in the way of getting Graph Isomorphism into P, but in our current state of knowledge, it even stands in the way of shaving off more than a single log in the exponent of the runtime.&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Since the general Group Isomorphism problem seems difficult, attention turned to special classes of groups. It was not hard to see that isomorphism of Abelian groups could be computed in polynomial time. However, a group class that is just “one step away” from Abelian - groups G where, when you mod out by the center Z(G), what’s left is Abelian -&amp;nbsp; turned out to be difficult. Such groups are called class-2 nilpotent, and in one sense, their&amp;nbsp; group-theoretic structure is relatively straightforward: both G/Z(G) and Z(G) are Abelian. Yet, to devise an efficient isomorphism testing procedure turned out to be extremely difficult (see e.g. &lt;/span&gt;&lt;a href=&quot;https://doi.org/10.1016/0022-0000(91)90012-T&quot; style=&quot;text-decoration-line: none;&quot;&gt;&lt;span style=&quot;color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Garzon-Zalcstein&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;, &lt;/span&gt;&lt;a href=&quot;https://doi.org/10.1016/j.tcs.2015.05.036&quot; style=&quot;text-decoration-line: none;&quot;&gt;&lt;span style=&quot;color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Rosenbaum-Wagner&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;, &lt;/span&gt;&lt;a href=&quot;https://www.math.auckland.ac.nz/~obrien/research/isom.pdf&quot; style=&quot;text-decoration-line: none;&quot;&gt;&lt;span style=&quot;color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;O’Brien&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;, &lt;/span&gt;&lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S0021869309004463&quot; style=&quot;text-decoration-line: none;&quot;&gt;&lt;span style=&quot;color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Wilson&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;), to the point that this is usually considered as a bottleneck for putting Group Isomorphism in P.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Among class-2 nilpotent groups, the “key case” to resolve is widely believed, &lt;/span&gt;&lt;a href=&quot;https://cstheory.stackexchange.com/a/42551/129&quot; style=&quot;text-decoration-line: none;&quot;&gt;&lt;span style=&quot;color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;for several reasons&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;, to be p-groups of class 2 and exponent p. In such groups, both the center Z(G) and quotient G/Z(G) are elementary abelian, i.e., of the form \((Z_p)^d\). Despite having an even simpler group-theoretic structure, this group class still turns out to be difficult! For a long time, the asymptotic growth of the exponent of the runtime for solving this restricted problem has not improved over the \(n^{log n+O(1)}\)-time algorithm, which works for all groups.[Footnote: &lt;/span&gt;&lt;a href=&quot;https://doi.org/10.1016/j.tcs.2015.05.036&quot; style=&quot;text-decoration-line: none;&quot;&gt;&lt;span style=&quot;color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Rosenbaum &amp;amp; Wagner&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; improved the exponent to \(\frac{1}{2}\log {p(n)} + O(1)\), and later improved to \(\frac{1}{4}\log {p(n)} + O(1)\) for all groups, see p.5 of &lt;/span&gt;&lt;a href=&quot;https://arxiv.org/abs/1609.08253&quot; style=&quot;text-decoration-line: none;&quot;&gt;&lt;span style=&quot;color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Le Gall &amp;amp; Rosenbaum&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;. In 2014, at a conference on Groups, Computation, and Geometry organized by Wilson, Brooksbank, Hulpke, Kantor, and Penttila, it was concluded that modern practical methods, such as those used in GAP and MAGMA, still take \(n^{O(log n)}\) steps in the worst case.]&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Xiaorui Sun’s result represents the first substantial improvement, cracking open this decades-old quest. His algorithm runs in time \(n^{O(log^{5/6} n)}\), and its techniques are indeed novel. The starting point of this algorithm is to consider the following equivalent problem in (multi)linear algebra: let \(f, g:Z_p^d \times Z_p^d \rightarrow Z_p^e\) be two skew-symmetric bilinear maps. Do there exist change of bases A in \(GL(d, p)\) and B in \(GL(e, p)\), such that for all \(u, v\) in \(Z_p^d\), \(f(A(u), A(v))=B(g(u, v))\)?&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;a href=&quot;https://www.jstor.org/stable/1989886&quot; style=&quot;text-decoration-line: none;&quot;&gt;&lt;span style=&quot;color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Baer’s Correspondence&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; sets up an equivalence of categories between p-groups of class 2 and exponent p, and skew-symmetric bilinear maps over \(Z_p\). This viewpoint allows Xiaorui to use multilinear algebra to study the structure of these bilinear maps. He also crucially depends on a result of &lt;/span&gt;&lt;a href=&quot;https://doi.org/10.1137/18M1165682&quot; style=&quot;text-decoration-line: none;&quot;&gt;&lt;span style=&quot;color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Ivanyos and Qiao&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;, which built on &lt;/span&gt;&lt;a href=&quot;https://doi.org/10.1016/j.jalgebra.2009.07.029&quot; style=&quot;text-decoration-line: none;&quot;&gt;&lt;span style=&quot;color: #1155cc; font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; text-decoration-line: underline; text-decoration-skip-ink: none; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;Wilson’s use&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt; of involutive algebras in this context. He also uses the individualization-and-refinement technique (but for matrix spaces, not graphs!), a characterization of spaces of matrices of low rank, and reducing a tensor to a “semi-canonical” form part of which is somewhat reminiscent of the Tucker decomposition.&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;All this results in an algorithm which solves the above problem on bilinear maps in time \(p^{(d+e)^{1.8} \log p}\). For groups of order \(p^n\) with \(\log_p(n)\) larger than \(\log^5 p\), Baer’s Correspondence then says that this algorithm does it; when \(\log_p n\) is smaller than \(log^5 p,\) he can fall back on the generator-enumerator algorithm, since the number of generators is at most \(log_p n\).&lt;/span&gt;&lt;/p&gt;&lt;br /&gt;&lt;p dir=&quot;ltr&quot; style=&quot;line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; font-variant-alternates: normal; font-variant-east-asian: normal; font-variant-numeric: normal; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;For us, who have been working on Group Isomorphism for more than a decade, Xiaorui’s result represents an exciting development on this classic algorithmic problem, and we look forward to seeing more progress in this direction in the near future.&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/span&gt;&lt;p class=&quot;authors&quot;&gt;By Lance Fortnow&lt;/p&gt;
  </content>
    <author>
      <name>Computational Complexity</name>
      <uri>http://blog.computationalcomplexity.org/</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">CCI: jobs: PhD Student at Department of Computer and Information Science, Linköping University (apply by May 28, 2023)</title>
    <link href="https://cstheory-jobs.org/2023/05/04/phd-student-at-department-of-computer-and-information-science-linkoping-university-apply-by-may-28-2023/"/>
    <id>http://cstheory-jobs.org/2023/05/04/phd-student-at-department-of-computer-and-information-science-linkoping-university-apply-by-may-28-2023/</id>
    <updated>2023-05-04T09:18:29+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;Linköping University advertises one (1) position as PhD student in Computer Science. The PhD student will be supervised by prof. Peter Jonsson. The research for the advertised position is in the area of parameterized complexity of constraint satisfaction problems (CSP).&lt;/p&gt;
&lt;p&gt;Website: &lt;a href=&quot;https://liu.se/en/work-at-liu/vacancies/21872&quot;&gt;https://liu.se/en/work-at-liu/vacancies/21872&lt;/a&gt;&lt;br /&gt;
Email: peter.jonsson@liu.se&lt;/p&gt;
&lt;p class=&quot;authors&quot;&gt;By shacharlovett&lt;/p&gt;
  </content>
    <author>
      <name>CCI: jobs</name>
      <uri>https://cstheory-jobs.org</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Construction of Decision Trees and Acyclic Decision Graphs from Decision Rule Systems</title>
    <link href="http://arxiv.org/abs/2305.01721"/>
    <id>http://arxiv.org/abs/2305.01721</id>
    <updated>2023-05-04T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Durdymyradov_K/0/1/0/all/0/1&quot;&gt;Kerven Durdymyradov&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Moshkov_M/0/1/0/all/0/1&quot;&gt;Mikhail Moshkov&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Decision trees and systems of decision rules are widely used as classifiers,
as a means for knowledge representation, and as algorithms. They are among the
most interpretable models for data analysis. The study of the relationships
between these two models can be seen as an important task of computer science.
Methods for transforming decision trees into systems of decision rules are
simple and well-known. In this paper, we consider the inverse transformation
problem, which is not trivial. We study the complexity of constructing decision
trees and acyclic decision graphs representing decision trees from decision
rule systems, and we discuss the possibility of not building the entire
decision tree, but describing the computation path in this tree for the given
input.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Complexity and Enumeration in Models of Genome Rearrangement</title>
    <link href="http://arxiv.org/abs/2305.01851"/>
    <id>http://arxiv.org/abs/2305.01851</id>
    <updated>2023-05-04T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/q-bio/1/au:+Bailey_L/0/1/0/all/0/1&quot;&gt;Lora Bailey&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/q-bio/1/au:+Blake_H/0/1/0/all/0/1&quot;&gt;Heather Smith Blake&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/q-bio/1/au:+Cochran_G/0/1/0/all/0/1&quot;&gt;Garner Cochran&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/q-bio/1/au:+Fox_N/0/1/0/all/0/1&quot;&gt;Nathan Fox&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/q-bio/1/au:+Levet_M/0/1/0/all/0/1&quot;&gt;Michael Levet&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/q-bio/1/au:+Mahmoud_R/0/1/0/all/0/1&quot;&gt;Reem Mahmoud&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/q-bio/1/au:+Matson_E/0/1/0/all/0/1&quot;&gt;Elizabeth Matson&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/q-bio/1/au:+Singgih_I/0/1/0/all/0/1&quot;&gt;Inne Singgih&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/q-bio/1/au:+Stadnyk_G/0/1/0/all/0/1&quot;&gt;Grace Stadnyk&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/q-bio/1/au:+Wang_X/0/1/0/all/0/1&quot;&gt;Xinyi Wang&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/q-bio/1/au:+Widemann_A/0/1/0/all/0/1&quot;&gt;Alexander Widemann&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In this paper, we examine the computational complexity of enumeration in
certain genome rearrangement models. We first show that the Pairwise
Rearrangement problem in the Single Cut-and-Join model (Bergeron, Medvedev, &amp;amp;
Stoye, J. Comput. Biol. 2010) is $\#\textsf{P}$-complete under polynomial-time
Turing reductions. Next, we show that in the Single Cut or Join model (Feijao &amp;amp;
Meidanis, IEEE ACM Trans. Comp. Biol. Bioinf. 2011), the problem of enumerating
all medians ($\#$Median) is logspace-computable ($\textsf{FL}$), improving upon
the previous polynomial-time ($\textsf{FP}$) bound of Mikl\&#39;os &amp;amp; Smith (RECOMB
2015).
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: $P\not=NP$ relative to a $P$-complete oracle</title>
    <link href="http://arxiv.org/abs/2305.02226"/>
    <id>http://arxiv.org/abs/2305.02226</id>
    <updated>2023-05-04T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Czerwinski_R/0/1/0/all/0/1&quot;&gt;Reiner Czerwinski&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The $P$ versus $NP$ problem is still unsolved. But there are several oracles
with $P$ unequal $NP$ relative to them. Here we will prove, that $P\not=NP$
relative to a $P$-complete oracle. In this paper, we use padding arguments as
the proof method. The padding arguments are not bounded by a computable
function. Such as we can use methods from computability theory to separate
complexity classes.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Geometry: The Impacts of Dimensionality, Diffusion, and Directedness on Intrinsic Cross-Model Simulation in Tile-Based Self-Assembly</title>
    <link href="http://arxiv.org/abs/2305.01877"/>
    <id>http://arxiv.org/abs/2305.01877</id>
    <updated>2023-05-04T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Hader_D/0/1/0/all/0/1&quot;&gt;Daniel Hader&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Patitz_M/0/1/0/all/0/1&quot;&gt;Matthew J. Patitz&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Algorithmic self-assembly occurs when disorganized components autonomously
combine to form structures and, by their design and the dynamics of the system,
are forced to follow the execution of algorithms. Motivated by applications in
DNA-nanotechnology, investigations in algorithmic tile-based self-assembly have
blossomed into a mature theory with research leveraging tools from
computability theory, complexity theory, information theory, and graph theory
to develop a wide range of models and show that many are computationally
universal, while also exposing powers and limitations of each. Beyond
computational universality, the abstract Tile Assembly Model (aTAM) was shown
to be intrinsically universal (IU), a strong notion of completeness where a
single tile set is capable of simulating all systems within the model; however,
this result required non-deterministic tile attachments. This was later
confirmed necessary when it was shown that the class of directed aTAM systems
is not IU. Building on these results to further investigate the impacts of
other dynamics, Hader et al. examined several tile-assembly models which varied
across (1) the numbers of dimensions used, (2) restrictions based on diffusion
of tiles through space, and (3) whether each system is directed, and showed
which models are IU. Such results have shed much light on the roles of various
aspects of the dynamics of tile-assembly and their effects on the intrinsic
universality of each model. Here we provide direct comparisons of the various
models by considering intrinsic simulations between models. We show that in
some cases one model is more powerful than another, and in others, pairs of
models have mutually exclusive capabilities. This comparison helps to expose
the impacts of these three important aspects and further helps define a
hierarchy of tile-assembly models.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Geometry</name>
      <uri>https://arxiv.org/list/cs.CG/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Geometry: A Lightweight CNN-Transformer Model for Learning Traveling Salesman Problems</title>
    <link href="http://arxiv.org/abs/2305.01883"/>
    <id>http://arxiv.org/abs/2305.01883</id>
    <updated>2023-05-04T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Jung_M/0/1/0/all/0/1&quot;&gt;Minseop Jung&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Lee_J/0/1/0/all/0/1&quot;&gt;Jaeseung Lee&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kim_J/0/1/0/all/0/1&quot;&gt;Jibum Kim&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Transformer-based models show state-of-the-art performance even for
large-scale Traveling Salesman Problems (TSPs). However, they are based on
fully-connected attention models and suffer from large computational complexity
and GPU memory usage. We propose a lightweight CNN-Transformer model based on a
CNN embedding layer and partial self-attention. Our CNN-Transformer model is
able to better learn spatial features from input data using a CNN embedding
layer compared with the standard Transformer models. It also removes
considerable redundancy in fully connected attention models using the proposed
partial self-attention. Experiments show that the proposed model outperforms
other state-of-the-art Transformer-based models in terms of TSP solution
quality, GPU memory usage, and inference time. Our model consumes approximately
20% less GPU memory usage and has 45% faster inference time compared with other
state-of-the-art Transformer-based models. Our code is publicly available at
https://github.com/cm8908/CNN_Transformer3
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Geometry</name>
      <uri>https://arxiv.org/list/cs.CG/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Approximate Evaluation of Quantitative Second Order Queries</title>
    <link href="http://arxiv.org/abs/2305.02056"/>
    <id>http://arxiv.org/abs/2305.02056</id>
    <updated>2023-05-04T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Dreier_J/0/1/0/all/0/1&quot;&gt;Jan Dreier&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Ganian_R/0/1/0/all/0/1&quot;&gt;Robert Ganian&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Hamm_T/0/1/0/all/0/1&quot;&gt;Thekla Hamm&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Courcelle&#39;s theorem and its adaptations to cliquewidth have shaped the field
of exact parameterized algorithms and are widely considered the archetype of
algorithmic meta-theorems. In the past decade, there has been growing interest
in developing parameterized approximation algorithms for problems which are not
captured by Courcelle&#39;s theorem and, in particular, are considered not
fixed-parameter tractable under the associated widths.
&lt;/p&gt;
&lt;p&gt;We develop a generalization of Courcelle&#39;s theorem that yields efficient
approximation schemes for any problem that can be captured by an expanded logic
we call Blocked CMSO, capable of making logical statements about the sizes of
set variables via so-called weight comparisons. The logic controls weight
comparisons via the quantifier-alternation depth of the involved variables,
allowing full comparisons for zero-alternation variables and limited
comparisons for one-alternation variables. We show that the developed framework
threads the very needle of tractability: on one hand it can describe a broad
range of approximable problems, while on the other hand we show that the
restrictions of our logic cannot be relaxed under well-established complexity
assumptions.
&lt;/p&gt;
&lt;p&gt;The running time of our approximation scheme is polynomial in
$1/\varepsilon$, allowing us to fully interpolate between faster approximate
algorithms and slower exact algorithms. This provides a unified framework to
explain the tractability landscape of graph problems parameterized by treewidth
and cliquewidth, as well as classical non-graph problems such as Subset Sum and
Knapsack.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: $L$ is unequal $NL$ under the Strong Exponential Time Hypothesis</title>
    <link href="http://arxiv.org/abs/2305.02271"/>
    <id>http://arxiv.org/abs/2305.02271</id>
    <updated>2023-05-04T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Czerwinski_R/0/1/0/all/0/1&quot;&gt;Reiner Czerwinski&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Due to Savitch&#39;s theorem we know $NL\subseteq DSPACE(\log^2(n))$. To show
this upper bound, Savitch constructed an algorithm with $O(\log^2(n))$ space on
the working tape. We will show that Savitch&#39;s algorithm also described a lower
bound under the Strong Exponential Time Hypothesis. Every algorithm for the
Connectivity Problem needs $O(\log^2(n))$ space in this case.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: On the Fine-Grained Complexity of Small-Size Geometric Set Cover and Discrete $k$-Center for Small $k$</title>
    <link href="http://arxiv.org/abs/2305.01892"/>
    <id>http://arxiv.org/abs/2305.01892</id>
    <updated>2023-05-04T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Chan_T/0/1/0/all/0/1&quot;&gt;Timothy M. Chan&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+He_Q/0/1/0/all/0/1&quot;&gt;Qizheng He&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Yu_Y/0/1/0/all/0/1&quot;&gt;Yuancheng Yu&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We study the time complexity of the discrete $k$-center problem and related
(exact) geometric set cover problems when $k$ or the size of the cover is
small. We obtain a plethora of new results:
&lt;/p&gt;
&lt;p&gt;- We give the first subquadratic algorithm for rectilinear discrete 3-center
in 2D, running in $\widetilde{O}(n^{3/2})$ time.
&lt;/p&gt;
&lt;p&gt;- We prove a lower bound of $\Omega(n^{4/3-\delta})$ for rectilinear discrete
3-center in 4D, for any constant $\delta&amp;gt;0$, under a standard hypothesis about
triangle detection in sparse graphs.
&lt;/p&gt;
&lt;p&gt;- Given $n$ points and $n$ weighted axis-aligned unit squares in 2D, we give
the first subquadratic algorithm for finding a minimum-weight cover of the
points by 3 unit squares, running in $\widetilde{O}(n^{8/5})$ time. We also
prove a lower bound of $\Omega(n^{3/2-\delta})$ for the same problem in 2D,
under the well-known APSP Hypothesis. For arbitrary axis-aligned rectangles in
2D, our upper bound is $\widetilde{O}(n^{7/4})$.
&lt;/p&gt;
&lt;p&gt;- We prove a lower bound of $\Omega(n^{2-\delta})$ for Euclidean discrete
2-center in 13D, under the Hyperclique Hypothesis. This lower bound nearly
matches the straightforward upper bound of $\widetilde{O}(n^\omega)$, if the
matrix multiplication exponent $\omega$ is equal to 2.
&lt;/p&gt;
&lt;p&gt;- We similarly prove an $\Omega(n^{k-\delta})$ lower bound for Euclidean
discrete $k$-center in $O(k)$ dimensions for any constant $k\ge 3$, under the
Hyperclique Hypothesis. This lower bound again nearly matches known upper
bounds if $\omega=2$.
&lt;/p&gt;
&lt;p&gt;- We also prove an $\Omega(n^{2-\delta})$ lower bound for the problem of
finding 2 boxes to cover the largest number of points, given $n$ points and $n$
boxes in 12D. This matches the straightforward near-quadratic upper bound.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Streaming Edge Coloring with Asymptotically Optimal Colors</title>
    <link href="http://arxiv.org/abs/2305.01714"/>
    <id>http://arxiv.org/abs/2305.01714</id>
    <updated>2023-05-04T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Behnezhad_S/0/1/0/all/0/1&quot;&gt;Soheil Behnezhad&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Saneian_M/0/1/0/all/0/1&quot;&gt;Mohammad Saneian&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Given a graph $G$, an edge-coloring is an assignment of colors to edges of
$G$ such that any two edges sharing an endpoint receive different colors. By
Vizing&#39;s celebrated theorem, any graph of maximum degree $\Delta$ needs at
least $\Delta$ and at most $(\Delta + 1)$ colors to be properly edge colored.
In this paper, we study edge colorings in the streaming setting. The edges
arrive one by one in an arbitrary order. The algorithm takes a single pass over
the input and must output a solution using a much smaller space than the input
size. Since the output of edge coloring is as large as its input, the assigned
colors should also be reported in a streaming fashion.
&lt;/p&gt;
&lt;p&gt;The streaming edge coloring problem has been studied in a series of works
over the past few years. The main challenge is that the algorithm cannot
&quot;remember&quot; all the color assignments that it returns. To ensure the validity of
the solution, existing algorithms use many more colors than Vizing&#39;s bound.
Namely, in $n$-vertex graphs, the state-of-the-art algorithm with
$\widetilde{O}(n s)$ space requires $O(\Delta^2/s + \Delta)$ colors. Note, in
particular, that for an asymptotically optimal $O(\Delta)$ coloring, this
algorithm requires $\Omega(n\Delta)$ space which is as large as the input.
Whether such a coloring can be achieved with sublinear space has been left
open.
&lt;/p&gt;
&lt;p&gt;In this paper, we answer this question in the affirmative. We present a
randomized algorithm that returns an asymptotically optimal $O(\Delta)$ edge
coloring using $\widetilde{O}(n \sqrt{\Delta})$ space. More generally, our
algorithm returns a proper $O(\Delta^{1.5}/s + \Delta)$ edge coloring with
$\widetilde{O}(n s)$ space, improving prior algorithms for the whole range of
$s$.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Connectivity Queries under Vertex Failures: Not Optimal, but Practical</title>
    <link href="http://arxiv.org/abs/2305.01756"/>
    <id>http://arxiv.org/abs/2305.01756</id>
    <updated>2023-05-04T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kosinas_E/0/1/0/all/0/1&quot;&gt;Evangelos Kosinas&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We revisit once more the problem of designing an oracle for answering
connectivity queries in undirected graphs in the presence of vertex failures.
Specifically, given an undirected graph $G$ with $n$ vertices and $m$ edges and
an integer $d_{\star}\ll n$, the goal is to preprocess the graph in order to
construct a data structure $\mathcal{D}$ such that, given a set of vertices $F$
with $|F|=d\leq d_{\star}$, we can derive an oracle from $\mathcal{D}$ that can
efficiently answer queries of the form &quot;is $x$ connected with $y$ in
$G\setminus F$?&quot;. Very recently, Long and Saranurak (FOCS 2022) provided a
solution to this problem that is almost optimal with respect to the
preprocessing time, the space usage, the update time, and the query time.
However, their solution is highly complicated, and it seems very difficult to
be implemented efficiently. Furthermore, it does not settle the complexity of
the problem in the regime where $d_{\star}$ is a constant. Here, we provide a
much simpler solution to this problem, that uses only textbook data structures.
Our algorithm is deterministic, it has preprocessing time and space complexity
$O(d_{\star}m\log n)$, update time $O(d^4 \log n)$, and query time $O(d)$.
These bounds compare very well with the previous best, especially considering
the simplicity of our approach. In fact, if we assume that $d_{\star}$ is a
constant ($d_{\star}\geq 4$), then our algorithm improves on the
state-of-the-art in every respect, except space. Nevertheless, even our space
usage in this case is almost linear. Finally, the data structure that we
provide is flexible with respect to $d_{\star}$: it can be adapted to increases
and decreases, in time and space that are almost proportional to the change in
$d_{\star}$ and the size of the graph.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Experimental Design for Any $p$-Norm</title>
    <link href="http://arxiv.org/abs/2305.01942"/>
    <id>http://arxiv.org/abs/2305.01942</id>
    <updated>2023-05-04T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Lau_L/0/1/0/all/0/1&quot;&gt;Lap Chi Lau&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Wang_R/0/1/0/all/0/1&quot;&gt;Robert Wang&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Zhou_H/0/1/0/all/0/1&quot;&gt;Hong Zhou&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We consider a general $p$-norm objective for experimental design problems
that captures some well-studied objectives (D/A/E-design) as special cases. We
prove that a randomized local search approach provides a unified algorithm to
solve this problem for all $p$. This provides the first approximation algorithm
for the general $p$-norm objective, and a nice interpolation of the best known
bounds of the special cases.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Computing paths of large rank in planar frameworks deterministically</title>
    <link href="http://arxiv.org/abs/2305.01993"/>
    <id>http://arxiv.org/abs/2305.01993</id>
    <updated>2023-05-04T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Fomin_F/0/1/0/all/0/1&quot;&gt;Fedor V. Fomin&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Golovach_P/0/1/0/all/0/1&quot;&gt;Petr A. Golovach&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Korhonen_T/0/1/0/all/0/1&quot;&gt;Tuukka Korhonen&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Stamoulis_G/0/1/0/all/0/1&quot;&gt;Giannos Stamoulis&lt;/a&gt;&lt;/p&gt;&lt;p&gt;A framework consists of an undirected graph $G$ and a matroid $M$ whose
elements correspond to the vertices of $G$. Recently, Fomin et al. [SODA 2023]
and Eiben et al. [ArXiV 2023] developed parameterized algorithms for computing
paths of rank $k$ in frameworks. More precisely, for vertices $s$ and $t$ of
$G$, and an integer $k$, they gave FPT algorithms parameterized by $k$ deciding
whether there is an $(s,t)$-path in $G$ whose vertex set contains a subset of
elements of $M$ of rank $k$. These algorithms are based on Schwartz-Zippel
lemma for polynomial identity testing and thus are randomized, and therefore
the existence of a deterministic FPT algorithm for this problem remains open.
We present the first deterministic FPT algorithm that solves the problem in
frameworks whose underlying graph $G$ is planar. While the running time of our
algorithm is worse than the running times of the recent randomized algorithms,
our algorithm works on more general classes of matroids. In particular, this is
the first FPT algorithm for the case when matroid $M$ is represented over
rationals. Our main technical contribution is the nontrivial adaptation of the
classic irrelevant vertex technique to frameworks to reduce the given instance
to one of bounded treewidth. This allows us to employ the toolbox of
representative sets to design a dynamic programming procedure solving the
problem efficiently on instances of bounded treewidth.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Approximating Long Cycle Above Dirac&#39;s Guarantee</title>
    <link href="http://arxiv.org/abs/2305.02011"/>
    <id>http://arxiv.org/abs/2305.02011</id>
    <updated>2023-05-04T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Fomin_F/0/1/0/all/0/1&quot;&gt;Fedor F. Fomin&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Golovach_P/0/1/0/all/0/1&quot;&gt;Petr A. Golovach&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Sagunov_D/0/1/0/all/0/1&quot;&gt;Danil Sagunov&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Simonov_K/0/1/0/all/0/1&quot;&gt;Kirill Simonov&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Parameterization above (or below) a guarantee is a successful concept in
parameterized algorithms. The idea is that many computational problems admit
``natural&#39;&#39; guarantees bringing to algorithmic questions whether a better
solution (above the guarantee) could be obtained efficiently. The above
guarantee paradigm has led to several exciting discoveries in the areas of
parameterized algorithms and kernelization. We argue that this paradigm could
bring forth fresh perspectives on well-studied problems in approximation
algorithms. Our example is the longest cycle problem. One of the oldest results
in extremal combinatorics is the celebrated Dirac&#39;s theorem from 1952. Dirac&#39;s
theorem provides the following guarantee on the length of the longest cycle:
for every 2-connected n-vertex graph G with minimum degree \delta(G)\leq n/2,
the length of a longest cycle L is at least 2\delta(G). Thus, the ``essential&#39;&#39;
part in finding the longest cycle is in approximating the ``offset&#39;&#39; k = L - 2
\delta(G). The main result of this paper is the above-guarantee approximation
theorem for k. Informally, the theorem says that approximating the offset k is
not harder than approximating the total length L of a cycle. In other words,
for any (reasonably well-behaved) function f, a polynomial time algorithm
constructing a cycle of length f(L) in an undirected graph with a cycle of
length L, yields a polynomial time algorithm constructing a cycle of length
2\delta(G)+\Omega(f(k)).
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Algorithmic Theory of Qubit Routing</title>
    <link href="http://arxiv.org/abs/2305.02059"/>
    <id>http://arxiv.org/abs/2305.02059</id>
    <updated>2023-05-04T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Ito_T/0/1/0/all/0/1&quot;&gt;Takehiro Ito&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kakimura_N/0/1/0/all/0/1&quot;&gt;Naonori Kakimura&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kamiyama_N/0/1/0/all/0/1&quot;&gt;Naoyuki Kamiyama&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kobayashi_Y/0/1/0/all/0/1&quot;&gt;Yusuke Kobayashi&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Okamoto_Y/0/1/0/all/0/1&quot;&gt;Yoshio Okamoto&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The qubit routing problem, also known as the swap minimization problem, is a
(classical) combinatorial optimization problem that arises in the design of
compilers of quantum programs. We study the qubit routing problem from the
viewpoint of theoretical computer science, while most of the existing studies
investigated the practical aspects. We concentrate on the linear nearest
neighbor (LNN) architectures of quantum computers, in which the graph topology
is a path. Our results are three-fold. (1) We prove that the qubit routing
problem is NP-hard. (2) We give a fixed-parameter algorithm when the number of
two-qubit gates is a parameter. (3) We give a polynomial-time algorithm when
each qubit is involved in at most one two-qubit gate.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: An Efficient Algorithm for All-Pairs Bounded Edge Connectivity</title>
    <link href="http://arxiv.org/abs/2305.02132"/>
    <id>http://arxiv.org/abs/2305.02132</id>
    <updated>2023-05-04T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Akmal_S/0/1/0/all/0/1&quot;&gt;Shyan Akmal&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Jin_C/0/1/0/all/0/1&quot;&gt;Ce Jin&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Our work concerns algorithms for an unweighted variant of Maximum Flow. In
the All-Pairs Connectivity (APC) problem, we are given a graph $G$ on $n$
vertices and $m$ edges, and are tasked with computing the maximum number of
edge-disjoint paths from $s$ to $t$ (equivalently, the size of a minimum
$(s,t)$-cut) in $G$, for all pairs of vertices $(s,t)$. Although over
undirected graphs APC can be solved in essentially optimal $n^{2+o(1)}$ time,
the true time complexity of APC over directed graphs remains open: this problem
can be solved in $\tilde{O}(m^\omega)$ time, where $\omega \in [2, 2.373)$ is
the exponent of matrix multiplication, but no matching conditional lower bound
is known.
&lt;/p&gt;
&lt;p&gt;We study a variant of APC called the $k$-Bounded All Pairs Connectivity
($k$-APC) problem. In this problem, we are given an integer $k$ and graph $G$,
and are tasked with reporting the size of a minimum $(s,t)$-cut only for pairs
$(s,t)$ of vertices with a minimum cut size less than $k$ (if the minimum
$(s,t)$-cut has size at least $k$, we just report it is &quot;large&quot; instead of
computing the exact value).
&lt;/p&gt;
&lt;p&gt;We present an algorithm solving $k$-APC in directed graphs in
$\tilde{O}((kn)^\omega)$ time. This runtime is $\tilde O(n^\omega)$ for all $k$
polylogarithmic in $n$, which is essentially optimal under popular conjectures
from fine-grained complexity. Previously, this runtime was only known for $k\le
2$ [Georgiadis et al., ICALP 2017].
&lt;/p&gt;
&lt;p&gt;We also study a variant of $k$-APC, the $k$-Bounded All-Pairs Vertex
Connectivity ($k$-APVC) problem, which considers internally vertex-disjoint
paths instead of edge-disjoint paths. We present an algorithm solving $k$-APVC
in directed graphs in $\tilde{O}(k^2n^\omega)$ time. Previous work solved an
easier version of the $k$-APVC problem in $\tilde O((kn)^\omega)$ time [Abboud
et al, ICALP 2019].
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Random Shreier graphs of the general linear group over finite fields and expanders</title>
    <link href="http://arxiv.org/abs/2305.02154"/>
    <id>http://arxiv.org/abs/2305.02154</id>
    <updated>2023-05-04T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Caillat_Grenier_G/0/1/0/all/0/1&quot;&gt;Geoffroy Caillat-Grenier&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In this paper we discuss potentially practical ways to produce expander
graphs with good spectral properties and a compact description. We focus on
several classes of uniform and bipartite expander graphs defined as random
Schreier graphs of the general linear group over the finite field of size two.
We perform numerical experiments and show that such constructions produce
spectral expanders that can be useful for practical applications. To find a
theoretical explanation of the observed experimental results, we used the
method of moments to prove upper bounds for the expected second largest
eigenvalue of the random Schreier graphs used in our constructions. We focus on
bounds for which it is difficult to study the asymptotic behaviour but it is
possible to compute non-trivial conclusions for relatively small graphs with
parameters from our numerical experiments (e.g., with less than 2^200 vertices
and degree at least logarithmic in the number of vertices).
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Minimum Chain Cover in Almost Linear Time</title>
    <link href="http://arxiv.org/abs/2305.02166"/>
    <id>http://arxiv.org/abs/2305.02166</id>
    <updated>2023-05-04T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Caceres_M/0/1/0/all/0/1&quot;&gt;Manuel Caceres&lt;/a&gt;&lt;/p&gt;&lt;p&gt;A minimum chain cover (MCC) of a $k$-width directed acyclic graph (DAG) $G =
(V, E)$ is a set of $k$ chains (paths in the transitive closure) of $G$ such
that every vertex appears in at least one chain in the cover. The
state-of-the-art solutions for MCC run in time $\tilde{O}(k(|V|+|E|))$
[M\&quot;akinen et at., TALG], $O(T_{MF}(|E|) + k|V|)$, $O(k^2|V| + |E|)$ [C\&#39;aceres
et al., SODA 2022], $\tilde{O}(|V|^{3/2} + |E|)$ [Kogan and Parter, ICALP 2022]
and $\tilde{O}(T_{MCF}(|E|) + \sqrt{k}|V|)$ [Kogan and Parter, SODA 2023],
where $T_{MF}(|E|)$ and $T_{MCF}(|E|)$ are the running times for solving
maximum flow (MF) and minimum-cost flow (MCF), respectively.
&lt;/p&gt;
&lt;p&gt;In this work we present an algorithm running in time $O(T_{MF}(|E|) +
(|V|+|E|)\log{k})$. By considering the recent result for solving MF [Chen et
al., FOCS 2022] our algorithm is the first running in almost linear time.
Moreover, our techniques are deterministic and derive a deterministic
near-linear time algorithm for MCC if the same is provided for MF. At the core
of our solution we use a modified version of the mergeable dictionaries [Farach
and Thorup, Algorithmica], [Iacono and \&quot;Ozkan, ICALP 2010] data structure
boosted with the SIZE-SPLIT operation and answering queries in amortized
logarithmic time, which can be of independent interest.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Learning-Augmented Online TSP on Rings, Trees, Flowers and (almost) Everywhere Else</title>
    <link href="http://arxiv.org/abs/2305.02169"/>
    <id>http://arxiv.org/abs/2305.02169</id>
    <updated>2023-05-04T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Bampis_E/0/1/0/all/0/1&quot;&gt;Evripidis Bampis&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Escoffier_B/0/1/0/all/0/1&quot;&gt;Bruno Escoffier&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Gouleakis_T/0/1/0/all/0/1&quot;&gt;Themis Gouleakis&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Hahn_N/0/1/0/all/0/1&quot;&gt;Niklas Hahn&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Lakis_K/0/1/0/all/0/1&quot;&gt;Kostas Lakis&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Shahkarami_G/0/1/0/all/0/1&quot;&gt;Golnoosh Shahkarami&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Xefteris_M/0/1/0/all/0/1&quot;&gt;Michalis Xefteris&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We study the Online Traveling Salesperson Problem (OLTSP) with predictions.
In OLTSP, a sequence of initially unknown requests arrive over time at points
(locations) of a metric space. The goal is, starting from a particular point of
the metric space (the origin), to serve all these requests while minimizing the
total time spent. The server moves with unit speed or is &quot;waiting&quot; (zero speed)
at some location. We consider two variants: in the open variant, the goal is
achieved when the last request is served. In the closed one, the server
additionally has to return to the origin. We adopt a prediction model,
introduced for OLTSP on the line, in which the predictions correspond to the
locations of the requests and extend it to more general metric spaces.
&lt;/p&gt;
&lt;p&gt;We first propose an oracle-based algorithmic framework, inspired by previous
work. This framework allows us to design online algorithms for general metric
spaces that provide competitive ratio guarantees which, given perfect
predictions, beat the best possible classical guarantee (consistency).
Moreover, they degrade gracefully along with the increase in error
(smoothness), but always within a constant factor of the best known competitive
ratio in the classical case (robustness).
&lt;/p&gt;
&lt;p&gt;Having reduced the problem to designing suitable efficient oracles, we
describe how to achieve this for general metric spaces as well as specific
metric spaces (rings, trees and flowers), the resulting algorithms being
tractable in the latter case. The consistency guarantees of our algorithms are
tight in almost all cases, and their smoothness guarantees only suffer a linear
dependency on the error, which we show is necessary. Finally, we provide
robustness guarantees improving previous results.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: A $4/3$ Approximation for $2$-Vertex-Connectivity</title>
    <link href="http://arxiv.org/abs/2305.02240"/>
    <id>http://arxiv.org/abs/2305.02240</id>
    <updated>2023-05-04T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Bosch_Calvo_M/0/1/0/all/0/1&quot;&gt;Miguel Bosch-Calvo&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Grandoni_F/0/1/0/all/0/1&quot;&gt;Fabrizio Grandoni&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Ameli_A/0/1/0/all/0/1&quot;&gt;Afrouz Jabal Ameli&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The 2-Vertex-Connected Spanning Subgraph problem (2VCSS) is among the most
basic NP-hard (Survivable) Network Design problems: we are given an
(unweighted) undirected graph $G$. Our goal is to find a subgraph $S$ of $G$
with the minimum number of edges which is $2$-vertex-connected, namely $S$
remains connected after the deletion of an arbitrary node. 2VCSS is
well-studied in terms of approximation algorithms, and the current best
(polynomial-time) approximation factor is $10/7$ by Heeger and Vygen [SIDMA&#39;17]
(improving on earlier results by Khuller and Vishkin [STOC&#39;92] and Garg,
Vempala and Singla [SODA&#39;93]).
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Triangle Counting with Local Edge Differential Privacy</title>
    <link href="http://arxiv.org/abs/2305.02263"/>
    <id>http://arxiv.org/abs/2305.02263</id>
    <updated>2023-05-04T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Eden_T/0/1/0/all/0/1&quot;&gt;Talya Eden&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Liu_Q/0/1/0/all/0/1&quot;&gt;Quanquan C. Liu&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Raskhodnikova_S/0/1/0/all/0/1&quot;&gt;Sofya Raskhodnikova&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Smith_A/0/1/0/all/0/1&quot;&gt;Adam Smith&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Many deployments of differential privacy in industry are in the local model,
where each party releases its private information via a differentially private
randomizer. We study triangle counting in the noninteractive and interactive
local model with edge differential privacy (that, intuitively, requires that
the outputs of the algorithm on graphs that differ in one edge be
indistinguishable). In this model, each party&#39;s local view consists of the
adjacency list of one vertex.
&lt;/p&gt;
&lt;p&gt;In the noninteractive model, we prove that additive $\Omega(n^2)$ error is
necessary, where $n$ is the number of nodes. This lower bound is our main
technical contribution. It uses a reconstruction attack with a new class of
linear queries and a novel mix-and-match strategy of running the local
randomizers with different completions of their adjacency lists. It matches the
additive error of the algorithm based on Randomized Response, proposed by
Imola, Murakami and Chaudhuri (USENIX2021) and analyzed by Imola, Murakami and
Chaudhuri (CCS2022) for constant $\varepsilon$. We use a different
postprocessing of Randomized Response and provide tight bounds on the variance
of the resulting algorithm.
&lt;/p&gt;
&lt;p&gt;In the interactive setting, we prove a lower bound of $\Omega(n^{3/2})$ on
the additive error. Previously, no hardness results were known for interactive,
edge-private algorithms in the local model, except for those that follow
trivially from the results for the central model. Our work significantly
improves on the state of the art in differentially private graph analysis in
the local model.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">Simons Institute Blog: Mechanisms: Inside or In-Between?</title>
    <link href="https://blog.simons.berkeley.edu/2023/05/mechanisms-inside-or-in-between/"/>
    <id>https://blog.simons.berkeley.edu/?p=920</id>
    <updated>2023-05-04T00:00:00+00:00</updated>
    <content type="html" xml:lang="en">
    by Issa Kohler-Hausmann (Senior Law and Society Fellow, Spring 2022, Simons Institute)1 This work was made possible by the Simons Institute’s Causality program in the spring of 2022, where I was the Law and Society fellow and had the opportunity &amp;#8230; &lt;a href=&quot;https://blog.simons.berkeley.edu/2023/05/mechanisms-inside-or-in-between/&quot;&gt;Continue reading &lt;span class=&quot;meta-nav&quot;&gt;&amp;#8594;&lt;/span&gt;&lt;/a&gt;&lt;p class=&quot;authors&quot;&gt;By Simons Institute Editor&lt;/p&gt;
  </content>
    <author>
      <name>Simons Institute Blog</name>
      <uri>https://blog.simons.berkeley.edu</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">CCI: jobs: Postdocs at Aalto University (apply by June 1, 2023)</title>
    <link href="https://cstheory-jobs.org/2023/05/03/postdocs-at-aalto-university-apply-by-june-1-2023/"/>
    <id>http://cstheory-jobs.org/2023/05/03/postdocs-at-aalto-university-apply-by-june-1-2023/</id>
    <updated>2023-05-03T20:30:59+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;The research group of Jukka Suomela at Aalto University is looking for postdoctoral researchers to work on the foundations of distributed and parallel computing.&lt;/p&gt;
&lt;p&gt;Website: &lt;a href=&quot;https://research.cs.aalto.fi/da/jobs/&quot;&gt;https://research.cs.aalto.fi/da/jobs/&lt;/a&gt;&lt;br /&gt;
Email: jukka.suomela@aalto.fi&lt;/p&gt;
&lt;p class=&quot;authors&quot;&gt;By shacharlovett&lt;/p&gt;
  </content>
    <author>
      <name>CCI: jobs</name>
      <uri>https://cstheory-jobs.org</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">ECCC Papers: TR23-064 |   On the Lower Bound on the Length of Relaxed Locally Decodable Codes | 

	Oded Goldreich</title>
    <link href="https://eccc.weizmann.ac.il/report/2023/064"/>
    <id>https://eccc.weizmann.ac.il/report/2023/064</id>
    <updated>2023-05-03T14:52:01+00:00</updated>
    <content type="html" xml:lang="en">
    We revisit the known proof of the lower bound on the length of relaxed locally decodable codes, providing an arguably simpler exposition that yields a slightly better lower bound for the non-adaptive case and a weaker bound in the general case.

Recall that a locally decodable code is an error correcting code that allows for the recovery of any desired bit in the message based on a constant number of randomly selected bits in the possibly corrupted codeword.
The relaxed version requires correct recovery only in case of actual codewords, while requiring that for strings that are (only) close to the code, with high probability, the local decoder outputs either the correct value or a special failure symbol (but not a wrong value). 

The lower bounds we prove are $n\geq k^{1+\Omega(1/q^2)}$ for the non-adaptive case and $n\geq k^{1+\Omega(1/q^3)}$ for the general case, where $k$ denotes the message length, $n$ denotes the length of the codewords, and $q$ denotes the (constant) number of queries.
  </content>
    <author>
      <name>ECCC Papers</name>
      <uri>https://eccc.weizmann.ac.il/</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Questions and Concerns About Google&#39;s Quantum Supremacy Claim</title>
    <link href="http://arxiv.org/abs/2305.01064"/>
    <id>http://arxiv.org/abs/2305.01064</id>
    <updated>2023-05-03T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/quant-ph/1/au:+Kalai_G/0/1/0/all/0/1&quot;&gt;Gil Kalai&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/quant-ph/1/au:+Rinott_Y/0/1/0/all/0/1&quot;&gt;Yosef Rinott&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/quant-ph/1/au:+Shoham_T/0/1/0/all/0/1&quot;&gt;Tomer Shoham&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In October 2019, Nature published a paper [6] describing an experimental work
that was performed at Google. The paper claims to demonstrate quantum
(computational) supremacy on a 53-qubit quantum computer. Since then we have
been involved in a long-term project to study various statistical aspects of
the Google experiment. In [30] we studied Google&#39;s statistical framework that
we found to be very sound and offered some technical improvements. This
document describes three main concerns (based on statistical analysis) about
the Google 2019 experiment. The first concern is that the data do not agree
with Google&#39;s noise model (or any other specific model). The second concern is
that a crucial simple formula for a priori estimation of the fidelity seems to
involve an unexpected independence assumption, and yet it gives very accurate
predictions. The third concern is about statistical properties of the
calibration process.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Coverability in VASS Revisited: Improving Rackoff&#39;s Bound to Obtain Conditional Optimality</title>
    <link href="http://arxiv.org/abs/2305.01581"/>
    <id>http://arxiv.org/abs/2305.01581</id>
    <updated>2023-05-03T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kunnemann_M/0/1/0/all/0/1&quot;&gt;Marvin K&amp;#xfc;nnemann&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Mazowiecki_F/0/1/0/all/0/1&quot;&gt;Filip Mazowiecki&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Schutze_L/0/1/0/all/0/1&quot;&gt;Lia Sch&amp;#xfc;tze&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Sinclair_Banks_H/0/1/0/all/0/1&quot;&gt;Henry Sinclair-Banks&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Wegrzycki_K/0/1/0/all/0/1&quot;&gt;Karol W&amp;#x119;grzycki&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Seminal results establish that the coverability problem for Vector Addition
Systems with States (VASS) is in EXPSPACE (Rackoff, &#39;78) and is EXPSPACE-hard
already under unary encodings (Lipton, &#39;76). More precisely, Rosier and Yen
later utilise Rackoff&#39;s bounding technique to show that if coverability holds
then there is a run of length at most $n^{2^{\mathcal{O}(d \log d)}}$, where
$d$ is the dimension and $n$ is the size of the given unary VASS. Earlier,
Lipton showed that there exist instances of coverability in $d$-dimensional
unary VASS that are only witnessed by runs of length at least
$n^{2^{\Omega(d)}}$. Our first result closes this gap. We improve the upper
bound by removing the twice-exponentiated $\log(d)$ factor, thus matching
Lipton&#39;s lower bound. This closes the corresponding gap for the exact space
required to decide coverability. This also yields a deterministic
$n^{2^{\mathcal{O}(d)}}$-time algorithm for coverability. Our second result is
a matching lower bound, that there does not exist a deterministic
$n^{2^{o(d)}}$-time algorithm, conditioned upon the Exponential Time
Hypothesis.
&lt;/p&gt;
&lt;p&gt;When analysing coverability, a standard proof technique is to consider VASS
with bounded counters. Bounded VASS make for an interesting and popular model
due to strong connections with timed automata. Withal, we study a natural
setting where the counter bound is linear in the size of the VASS. Here the
trivial exhaustive search algorithm runs in $\mathcal{O}(n^{d+1})$-time. We
give evidence to this being near-optimal. We prove that in dimension one this
trivial algorithm is conditionally optimal, by showing that $n^{2-o(1)}$-time
is required under the $k$-cycle hypothesis. In general fixed dimension $d$, we
show that $n^{d-2-o(1)}$-time is required under the 3-uniform hyperclique
hypothesis.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Geometry: A Quadtree for Hyperbolic Space</title>
    <link href="http://arxiv.org/abs/2305.01356"/>
    <id>http://arxiv.org/abs/2305.01356</id>
    <updated>2023-05-03T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kisfaludi_Bak_S/0/1/0/all/0/1&quot;&gt;S&amp;#xe1;ndor Kisfaludi-Bak&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Wordragen_G/0/1/0/all/0/1&quot;&gt;Geert van Wordragen&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We propose a data structure in d-dimensional hyperbolic space that can be
considered a natural counterpart to quadtrees in Euclidean spaces. Based on
this data structure we propose a so-called L-order for hyperbolic point sets,
which is an extension of the Z-order defined in Euclidean spaces. We
demonstrate the usefulness of our hyperbolic quadtree data structure by giving
an algorithm for constant-approximate closest pair and dynamic
constant-approximate nearest neighbours in hyperbolic space of constant
dimension d.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Geometry</name>
      <uri>https://arxiv.org/list/cs.CG/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Geometry: Folding Every Point on a Polygon Boundary to a Point</title>
    <link href="http://arxiv.org/abs/2305.01467"/>
    <id>http://arxiv.org/abs/2305.01467</id>
    <updated>2023-05-03T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Phetmak_N/0/1/0/all/0/1&quot;&gt;Nattawut Phetmak&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Fakcharoenphol_J/0/1/0/all/0/1&quot;&gt;Jittat Fakcharoenphol&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We consider a problem in computational origami. Given a piece of paper as a
convex polygon $P$ and a point $f$ located within, fold every point on a
boundary of $P$ to $f$ and compute a region that is safe from folding, i.e.,
the region with no creases. This problem is an extended version of a problem by
Akitaya, Ballinger, Demaine, Hull, and Schmidt~[CCCG&#39;21] that only folds
corners of the polygon. To find the region, we prove structural properties of
intersections of parabola-bounded regions and use them to devise a linear-time
algorithm. We also prove a structural result regarding the complexity of the
safe region as a variable of the location of point $f$, i.e., the number of
arcs of the safe region can be determined using the straight skeleton of the
polygon $P$.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Geometry</name>
      <uri>https://arxiv.org/list/cs.CG/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Complexity Framework for Forbidden Subgraphs IV: The Steiner Forest Problem</title>
    <link href="http://arxiv.org/abs/2305.01613"/>
    <id>http://arxiv.org/abs/2305.01613</id>
    <updated>2023-05-03T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Bodlaender_H/0/1/0/all/0/1&quot;&gt;Hans L. Bodlaender&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Johnson_M/0/1/0/all/0/1&quot;&gt;Matthew Johnson&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Martin_B/0/1/0/all/0/1&quot;&gt;Barnaby Martin&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Oostveen_J/0/1/0/all/0/1&quot;&gt;Jelle J. Oostveen&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Pandey_S/0/1/0/all/0/1&quot;&gt;Sukanya Pandey&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Paulusma_D/0/1/0/all/0/1&quot;&gt;Daniel Paulusma&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Smith_S/0/1/0/all/0/1&quot;&gt;Siani Smith&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Leeuwen_E/0/1/0/all/0/1&quot;&gt;Erik Jan van Leeuwen&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We study Steiner Forest on $H$-subgraph-free graphs, that is, graphs that do
not contain some fixed graph $H$ as a (not necessarily induced) subgraph. We
are motivated by a recent framework that completely characterizes the
complexity of many problems on $H$-subgraph-free graphs. However, in contrast
to e.g. the related Steiner Tree problem, Steiner Forest falls outside this
framework. Hence, the complexity of Steiner Forest on $H$-subgraph-free graphs
remained tantalizingly open. In this paper, we make significant progress
towards determining the complexity of Steiner Forest on $H$-subgraph-free
graphs. Our main results are four novel polynomial-time algorithms for
different excluded graphs $H$ that are central to further understand its
complexity. Along the way, we study the complexity of Steiner Forest for graphs
with a small $c$-deletion set, that is, a small set $S$ of vertices such that
each component of $G-S$ has size at most $c$. Using this parameter, we give two
noteworthy algorithms that we later employ as subroutines. First, we prove
Steiner Forest is FPT parameterized by $|S|$ when $c=1$ (i.e. the vertex cover
number). Second, we prove Steiner Forest is polynomial-time solvable for graphs
with a 2-deletion set of size at most 2. The latter result is tight, as the
problem is NP-complete for graphs with a 3-deletion set of size 2.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Collision Detection for Modular Robots -- it is easy to cause collisions and hard to avoid them</title>
    <link href="http://arxiv.org/abs/2305.01015"/>
    <id>http://arxiv.org/abs/2305.01015</id>
    <updated>2023-05-03T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Gupta_S/0/1/0/all/0/1&quot;&gt;Siddharth Gupta&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kreveld_M/0/1/0/all/0/1&quot;&gt;Marc van Kreveld&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Michail_O/0/1/0/all/0/1&quot;&gt;Othon Michail&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Padalkin_A/0/1/0/all/0/1&quot;&gt;Andreas Padalkin&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We consider geometric collision-detection problems for modular reconfigurable
robots. Assuming the nodes (modules) are connected squares on a grid, we
investigate the complexity of deciding whether collisions may occur, or can be
avoided, if a set of expansion and contraction operations is executed. We study
both discrete- and continuous-time models, and allow operations to be coupled
into a single parallel group. Our algorithms to decide if a collision may occur
run in $O(n^2\log^2 n)$ time, $O(n^2)$ time, or $O(n\log^2 n)$ time, depending
on the presence and type of coupled operations, in a continuous-time model for
a modular robot with $n$ nodes. To decide if collisions can be avoided, we show
that a very restricted version is already NP-complete in the discrete-time
model, while the same problem is polynomial in the continuous-time model. A
less restricted version is NP-hard in the continuous-time model.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Multi Layer Peeling for Linear Arrangement and Hierarchical Clustering</title>
    <link href="http://arxiv.org/abs/2305.01367"/>
    <id>http://arxiv.org/abs/2305.01367</id>
    <updated>2023-05-03T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Azar_Y/0/1/0/all/0/1&quot;&gt;Yossi Azar&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Vainstein_D/0/1/0/all/0/1&quot;&gt;Danny Vainstein&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We present a new multi-layer peeling technique to cluster points in a metric
space. A well-known non-parametric objective is to embed the metric space into
a simpler structured metric space such as a line (i.e., Linear Arrangement) or
a binary tree (i.e., Hierarchical Clustering). Points which are close in the
metric space should be mapped to close points/leaves in the line/tree;
similarly, points which are far in the metric space should be far in the line
or on the tree. In particular we consider the Maximum Linear Arrangement
problem \cite{Approximation_algorithms_for_maximum_linear_arrangement} and the
Maximum Hierarchical Clustering problem
\cite{Hierarchical_Clustering:_Objective_Functions_and_Algorithms} applied to
metrics.
&lt;/p&gt;
&lt;p&gt;We design approximation schemes ($1 - \epsilon$ approximation for any
constant $\epsilon &amp;gt; 0$) for these objectives. In particular this shows that by
considering metrics one may significantly improve former approximations ($0.5$
for Max Linear Arrangement and $0.74$ for Max Hierarchical Clustering). Our
main technique, which is called multi-layer peeling, consists of recursively
peeling off points which are far from the &quot;core&quot; of the metric space. The
recursion ends once the core becomes a sufficiently densely weighted metric
space (i.e. the average distance is at least a constant times the diameter) or
once it becomes negligible with respect to its inner contribution to the
objective. Interestingly, the algorithm in the Linear Arrangement case is much
more involved than that in the Hierarchical Clustering case, and uses a
significantly more delicate peeling.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Spectral clustering in the Gaussian mixture block model</title>
    <link href="http://arxiv.org/abs/2305.00979"/>
    <id>http://arxiv.org/abs/2305.00979</id>
    <updated>2023-05-03T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/stat/1/au:+Li_S/0/1/0/all/0/1&quot;&gt;Shuangping Li&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/stat/1/au:+Schramm_T/0/1/0/all/0/1&quot;&gt;Tselil Schramm&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Gaussian mixture block models are distributions over graphs that strive to
model modern networks: to generate a graph from such a model, we associate each
vertex $i$ with a latent feature vector $u_i \in \mathbb{R}^d$ sampled from a
mixture of Gaussians, and we add edge $(i,j)$ if and only if the feature
vectors are sufficiently similar, in that $\langle u_i,u_j \rangle \ge \tau$
for a pre-specified threshold $\tau$. The different components of the Gaussian
mixture represent the fact that there may be different types of nodes with
different distributions over features -- for example, in a social network each
component represents the different attributes of a distinct community. Natural
algorithmic tasks associated with these networks are embedding (recovering the
latent feature vectors) and clustering (grouping nodes by their mixture
component).
&lt;/p&gt;
&lt;p&gt;In this paper we initiate the study of clustering and embedding graphs
sampled from high-dimensional Gaussian mixture block models, where the
dimension of the latent feature vectors $d\to \infty$ as the size of the
network $n \to \infty$. This high-dimensional setting is most appropriate in
the context of modern networks, in which we think of the latent feature space
as being high-dimensional. We analyze the performance of canonical spectral
clustering and embedding algorithms for such graphs in the case of 2-component
spherical Gaussian mixtures, and begin to sketch out the
information-computation landscape for clustering and embedding in these models.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Approximating submodular $k$-partition via principle partition sequence</title>
    <link href="http://arxiv.org/abs/2305.01069"/>
    <id>http://arxiv.org/abs/2305.01069</id>
    <updated>2023-05-03T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Chandrasekaran_K/0/1/0/all/0/1&quot;&gt;Karthekeyan Chandrasekaran&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Wang_W/0/1/0/all/0/1&quot;&gt;Weihang Wang&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In submodular $k$-partition, the input is a non-negative submodular function
$f$ defined over a finite ground set $V$ (given by an evaluation oracle) along
with a positive integer $k$ and the goal is to find a partition of the ground
set $V$ into $k$ non-empty parts $V_1, V_2, ..., V_k$ in order to minimize
$\sum_{i=1}^k f(V_i)$. Narayanan, Roy, and Patkar (Journal of Algorithms, 1996)
designed an algorithm for submodular $k$-partition based on the principal
partition sequence and showed that the approximation factor of their algorithm
is $2$ for the special case of graph cut functions (subsequently rediscovered
by Ravi and Sinha (Journal of Operational Research, 2008)). In this work, we
study the approximation factor of their algorithm for three subfamilies of
submodular functions -- monotone, symmetric, and posimodular. We note that
graph and hypergraph cut functions are symmetric submodular and moreover, both
monotone submodular functions and symmetric submodular functions are
posimodular submodular. We analyze the approximation factor of Narayanan, Roy,
and Patkar&#39;s algorithm to show the following results:
&lt;/p&gt;
&lt;p&gt;1. The approximation factor of their algorithm for monotone submodular
$k$-partition is $4/3$. This result improves on the $2$-factor achievable via
other algorithms. Moreover, our upper bound of $4/3$ matches the recently shown
lower bound under polynomial number of function evaluation queries (Santiago,
IWOCA 2021).
&lt;/p&gt;
&lt;p&gt;2. The approximation factor of their algorithm for symmetric submodular
$k$-partition is $2$. This result generalizes their approximation factor
analysis beyond graph cut functions.
&lt;/p&gt;
&lt;p&gt;3. The approximation factor of their algorithm for posimodular submodular
$k$-partition is $2$.
&lt;/p&gt;
&lt;p&gt;We also construct an example to show that the approximation factor of their
algorithm for arbitrary submodular functions is $\Omega(n/k)$.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Robust Communication Complexity of Matching: EDCS Achieves 5/6 Approximation</title>
    <link href="http://arxiv.org/abs/2305.01070"/>
    <id>http://arxiv.org/abs/2305.01070</id>
    <updated>2023-05-03T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Azarmehr_A/0/1/0/all/0/1&quot;&gt;Amir Azarmehr&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Behnezhad_S/0/1/0/all/0/1&quot;&gt;Soheil Behnezhad&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We study the robust communication complexity of maximum matching. Edges of an
arbitrary $n$-vertex graph $G$ are randomly partitioned between Alice and Bob
independently and uniformly. Alice has to send a single message to Bob such
that Bob can find an (approximate) maximum matching of the whole graph $G$. We
specifically study the best approximation ratio achievable via protocols where
Alice communicates only $\widetilde{O}(n)$ bits to Bob.
&lt;/p&gt;
&lt;p&gt;There has been a growing interest on the robust communication model due to
its connections to the random-order streaming model. An algorithm of Assadi and
Behnezhad [ICALP&#39;21] implies a $(2/3+\epsilon_0 \sim .667)$-approximation for a
small constant $0 &amp;lt; \epsilon_0 &amp;lt; 10^{-18}$, which remains the best-known
approximation for general graphs. For bipartite graphs, Assadi and Behnezhad
[Random&#39;21] improved the approximation to .716 albeit with a computationally
inefficient (i.e., exponential time) protocol.
&lt;/p&gt;
&lt;p&gt;In this paper, we study a natural and efficient protocol implied by a
random-order streaming algorithm of Bernstein [ICALP&#39;20] which is based on
edge-degree constrained subgraphs (EDCS) [Bernstein and Stein; ICALP&#39;15]. The
result of Bernstein immediately implies that this protocol achieves an (almost)
$(2/3 \sim .666)$-approximation in the robust communication model. We present a
new analysis, proving that it achieves a much better (almost) $(5/6 \sim
.833)$-approximation. This significantly improves previous approximations both
for general and bipartite graphs. We also prove that our analysis of
Bernstein&#39;s protocol is tight.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Temporal Betweenness Centrality on Shortest Paths Variants</title>
    <link href="http://arxiv.org/abs/2305.01080"/>
    <id>http://arxiv.org/abs/2305.01080</id>
    <updated>2023-05-03T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Naima_M/0/1/0/all/0/1&quot;&gt;Mehdi Naima&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Latapy_M/0/1/0/all/0/1&quot;&gt;Matthieu Latapy&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Magnien_C/0/1/0/all/0/1&quot;&gt;Cl&amp;#xe9;mence Magnien&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Betweenness centrality has been extensively studied since its introduction in
1977 as a measure of node importance in graphs. This measure has found use in
various applications and has been extended to temporal graphs with time-labeled
edges. Recent research by Bu{\ss} et al. \cite{buss2020algorithmic} and Rymar
et al. \cite{rymar2021towards} has shown that it is possible to compute the
shortest path betweenness centrality of all nodes in a temporal graph in
$O(n^3\,T^2)$ and $O(n^2\,m\,T^2)$ time, respectively, where $T$ is the maximum
time, $m$ is the number of temporal edges, and $n$ is the number of nodes.
These approaches considered paths that do not take into account contributions
from intermediate temporal nodes.
&lt;/p&gt;
&lt;p&gt;In this paper, we study the classical temporal betweenness centrality paths
that we call \textit{passive} shortest paths, as well as an alternative variant
that we call \textit{active} shortest paths, which takes into account
contributions from all temporal nodes. We present an improved analysis of the
running time of the classical algorithm for computing betweenness centrality of
all nodes, reducing the time complexity to $O(n\,m\,T+ n^2\,T)$. Furthermore,
for active paths, we show that the betweenness centrality can be computed in
$O(n\,m\,T+ n^2\,T^2)$. We also show that our results hold for different
shortest paths variants.
&lt;/p&gt;
&lt;p&gt;Finally, we provide an open-source implementation of our algorithms and
conduct experiments on several real-world datasets. We compare the results of
the two variants on both the node and time dimensions of the temporal graph,
and we also compare the temporal betweenness centrality to its static
counterpart. Our experiments suggest that for the shortest foremost variant
looking only at the first $10\%$ of the temporal interaction is a very good
approximation for the overall top ranked nodes.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: An Update-intensive LSM-based R-tree Index</title>
    <link href="http://arxiv.org/abs/2305.01087"/>
    <id>http://arxiv.org/abs/2305.01087</id>
    <updated>2023-05-03T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Shin_J/0/1/0/all/0/1&quot;&gt;Jaewoo Shin&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Wang_J/0/1/0/all/0/1&quot;&gt;Jianguo Wang&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Aref_W/0/1/0/all/0/1&quot;&gt;Walid G. Aref&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Many applications require update-intensive workloads on spatial objects,
e.g., social-network services and shared-riding services that track moving
objects. By buffering insert and delete operations in memory, the Log
Structured Merge Tree (LSM) has been used widely in various systems because of
its ability to handle write-heavy workloads. While the focus on LSM has been on
key-value stores and their optimizations, there is a need to study how to
efficiently support LSM-based {\em secondary} indexes (e.g., location-based
indexes) as modern, heterogeneous data necessitates the use of secondary
indexes. In this paper, we investigate the augmentation of a main-memory-based
memo structure into an LSM secondary index structure to handle update-intensive
workloads efficiently. We conduct this study in the context of an R-tree-based
secondary index. In particular, we introduce the LSM RUM-tree that demonstrates
the use of an Update Memo in an LSM-based R-tree to enhance the performance of
the R-tree&#39;s insert, delete, update, and search operations. The LSM RUM-tree
introduces new strategies to control the size of the Update Memo to make sure
it always fits in memory for high performance. The Update Memo is a
light-weight in-memory structure that is suitable for handling update-intensive
workloads without introducing significant overhead. Experimental results using
real spatial data demonstrate that the LSM RUM-tree achieves up to 9.6x speedup
on update operations and up to 2400x speedup on query processing over existing
LSM R-tree implementations.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Complexity Framework for Forbidden Subgraphs III: When Problems are Tractable on Subcubic Graphs</title>
    <link href="http://arxiv.org/abs/2305.01104"/>
    <id>http://arxiv.org/abs/2305.01104</id>
    <updated>2023-05-03T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Johnson_M/0/1/0/all/0/1&quot;&gt;Matthew Johnson&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Martin_B/0/1/0/all/0/1&quot;&gt;Barnaby Martin&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Pandey_S/0/1/0/all/0/1&quot;&gt;Sukanya Pandey&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Paulusma_D/0/1/0/all/0/1&quot;&gt;Dani&amp;#xeb;l Paulusma&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Smith_S/0/1/0/all/0/1&quot;&gt;Siani Smith&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Leeuwen_E/0/1/0/all/0/1&quot;&gt;Erik Jan van Leeuwen&lt;/a&gt;&lt;/p&gt;&lt;p&gt;For any finite set $\mathcal{H} = \{H_1,\ldots,H_p\}$ of graphs, a graph is
$\mathcal{H}$-subgraph-free if it does not contain any of $H_1,\ldots,H_p$ as a
subgraph. In recent work, meta-classifications have been studied: these show
that if graph problems satisfy certain prescribed conditions, their complexity
is determined on classes of $\mathcal{H}$-subgraph-free graphs. We continue
this work and focus on problems that have polynomial-time solutions on classes
that have bounded treewidth or maximum degree at most~$3$ and examine their
complexity on $H$-subgraph-free graph classes where $H$ is a connected graph.
With this approach, we obtain comprehensive classifications for (Independent)
Feedback Vertex Set, Connected Vertex Cover, Colouring and Matching Cut. This
resolves a number of open problems.
&lt;/p&gt;
&lt;p&gt;We highlight that, to establish that Independent Feedback Vertex Set belongs
to this collection of problems, we first show that it can be solved in
polynomial time on graphs of maximum degree $3$. We demonstrate that, with the
exception of the complete graph on four vertices, each graph in this class has
a minimum size feedback vertex set that is also an independent set.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Unbounded Differentially Private Quantile and Maximum Estimation</title>
    <link href="http://arxiv.org/abs/2305.01177"/>
    <id>http://arxiv.org/abs/2305.01177</id>
    <updated>2023-05-03T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Durfee_D/0/1/0/all/0/1&quot;&gt;David Durfee&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In this work we consider the problem of differentially private computation of
quantiles for the data, especially the highest quantiles such as maximum, but
with an unbounded range for the dataset. We show that this can be done
efficiently through a simple invocation of $\texttt{AboveThreshold}$, a
subroutine that is iteratively called in the fundamental Sparse Vector
Technique, even when there is no upper bound on the data. In particular, we
show that this procedure can give more accurate and robust estimates on the
highest quantiles with applications towards clipping that is essential for
differentially private sum and mean estimation. In addition, we show how two
invocations can handle the fully unbounded data setting. Within our study, we
show that an improved analysis of $\texttt{AboveThreshold}$ can improve the
privacy guarantees for the widely used Sparse Vector Technique that is of
independent interest. We give a more general characterization of privacy loss
for $\texttt{AboveThreshold}$ which we immediately apply to our method for
improved privacy guarantees. Our algorithm only requires one $O(n)$ pass
through the data, which can be unsorted, and each subsequent query takes $O(1)$
time. We empirically compare our unbounded algorithm with the state-of-the-art
algorithms in the bounded setting. For inner quantiles, we find that our method
often performs better on non-synthetic datasets. For the maximal quantiles,
which we apply to differentially private sum computation, we find that our
method performs significantly better.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Incremental Maximization via Continuization</title>
    <link href="http://arxiv.org/abs/2305.01310"/>
    <id>http://arxiv.org/abs/2305.01310</id>
    <updated>2023-05-03T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Disser_Y/0/1/0/all/0/1&quot;&gt;Yann Disser&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Klimm_M/0/1/0/all/0/1&quot;&gt;Max Klimm&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Schewior_K/0/1/0/all/0/1&quot;&gt;Kevin Schewior&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Weckbecker_D/0/1/0/all/0/1&quot;&gt;David Weckbecker&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We consider the problem of finding an incremental solution to a
cardinality-constrained maximization problem that not only captures the
solution for a fixed cardinality, but also describes how to gradually grow the
solution as the cardinality bound increases. The goal is to find an incremental
solution that guarantees a good competitive ratio against the optimum solution
for all cardinalities simultaneously. The central challenge is to characterize
maximization problems where this is possible, and to determine the
best-possible competitive ratio that can be attained. A lower bound of $2.18$
and an upper bound of $\varphi + 1 \approx 2.618$ are known on the competitive
ratio for monotone and accountable objectives [Bernstein et al., Math. Prog.,
2022], which capture a wide range of maximization problems. We introduce a
continuization technique and identify an optimal incremental algorithm that
provides strong evidence that $\varphi + 1$ is the best-possible competitive
ratio. Using this continuization, we obtain an improved lower bound of $2.246$
by studying a particular recurrence relation whose characteristic polynomial
has complex roots exactly beyond the lower bound. Based on the optimal
continuous algorithm combined with a scaling approach, we also provide a
$1.772$-competitive randomized algorithm. We complement this by a randomized
lower bound of $1.447$ via Yao&#39;s principle.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Two-sets cut-uncut on planar graphs</title>
    <link href="http://arxiv.org/abs/2305.01314"/>
    <id>http://arxiv.org/abs/2305.01314</id>
    <updated>2023-05-03T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Bentert_M/0/1/0/all/0/1&quot;&gt;Matthias Bentert&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Drange_P/0/1/0/all/0/1&quot;&gt;P&amp;#xe5;l Gr&amp;#xf8;n&amp;#xe5;s Drange&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Fomin_F/0/1/0/all/0/1&quot;&gt;Fedor V. Fomin&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Golovach_P/0/1/0/all/0/1&quot;&gt;Petr A. Golovach&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Korhonen_T/0/1/0/all/0/1&quot;&gt;Tuukka Korhonen&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We study the following Two-Sets Cut-Uncut problem on planar graphs. Therein,
one is given an undirected planar graph $G$ and two sets of vertices $S$ and
$T$. The question is, what is the minimum number of edges to remove from $G$,
such that we separate all of $S$ from all of $T$, while maintaining that every
vertex in $S$, and respectively in $T$, stays in the same connected component.
We show that this problem can be solved in time $2^{|S|+|T|} n^{O(1)}$ with a
one-sided error randomized algorithm. Our algorithm implies a polynomial-time
algorithm for the network diversion problem on planar graphs, which resolves an
open question from the literature. More generally, we show that Two-Sets
Cut-Uncut remains fixed-parameter tractable even when parameterized by the
number $r$ of faces in the plane graph covering the terminals $S \cup T$, by
providing an algorithm of running time $4^{r + O(\sqrt r)} n^{O(1)}$.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: The Complexity of Distributed Approximation of Packing and Covering Integer Linear Programs</title>
    <link href="http://arxiv.org/abs/2305.01324"/>
    <id>http://arxiv.org/abs/2305.01324</id>
    <updated>2023-05-03T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Chang_Y/0/1/0/all/0/1&quot;&gt;Yi-Jun Chang&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Li_Z/0/1/0/all/0/1&quot;&gt;Zeyong Li&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In this paper, we present a low-diameter decomposition algorithm in the LOCAL
model of distributed computing that succeeds with probability $1 - 1/poly(n)$.
Specifically, we show how to compute an $\left(\epsilon, O\left(\frac{\log
n}{\epsilon}\right)\right)$ low-diameter decomposition in
$O\left(\frac{\log^3(1/\epsilon)\log n}{\epsilon}\right)$ round
&lt;/p&gt;
&lt;p&gt;Further developing our techniques, we show new distributed algorithms for
approximating general packing and covering integer linear programs in the LOCAL
model. For packing problems, our algorithm finds an $(1-\epsilon)$-approximate
solution in $O\left(\frac{\log^3 (1/\epsilon) \log n}{\epsilon}\right)$ rounds
with probability $1 - 1/poly(n)$. For covering problems, our algorithm finds an
$(1+\epsilon)$-approximate solution in $O\left(\frac{\left(\log \log n + \log
(1/\epsilon)\right)^3 \log n}{\epsilon}\right)$ rounds with probability $1 -
1/poly(n)$. These results improve upon the previous $O\left(\frac{\log^3
n}{\epsilon}\right)$-round algorithm by Ghaffari, Kuhn, and Maus [STOC 2017]
which is based on network decompositions.
&lt;/p&gt;
&lt;p&gt;Our algorithms are near-optimal for many fundamental combinatorial graph
optimization problems in the LOCAL model, such as minimum vertex cover and
minimum dominating set, as their $(1\pm \epsilon)$-approximate solutions
require $\Omega\left(\frac{\log n}{\epsilon}\right)$ rounds to compute.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Sample-based distance-approximation for subsequence-freeness</title>
    <link href="http://arxiv.org/abs/2305.01358"/>
    <id>http://arxiv.org/abs/2305.01358</id>
    <updated>2023-05-03T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Sidon_O/0/1/0/all/0/1&quot;&gt;Omer Cohen Sidon&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Ron_D/0/1/0/all/0/1&quot;&gt;Dana Ron&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In this work, we study the problem of approximating the distance to
subsequence-freeness in the sample-based distribution-free model. For a given
subsequence (word) $w = w_1 \dots w_k$, a sequence (text) $T = t_1 \dots t_n$
is said to contain $w$ if there exist indices $1 \leq i_1 &amp;lt; \dots &amp;lt; i_k \leq n$
such that $t_{i_{j}} = w_j$ for every $1 \leq j \leq k$. Otherwise, $T$ is
$w$-free. Ron and Rosin (ACM TOCT 2022) showed that the number of samples both
necessary and sufficient for one-sided error testing of subsequence-freeness in
the sample-based distribution-free model is $\Theta(k/\epsilon)$. Denoting by
$\Delta(T,w,p)$ the distance of $T$ to $w$-freeness under a distribution $p
:[n]\to [0,1]$, we are interested in obtaining an estimate $\widehat{\Delta}$,
such that $|\widehat{\Delta} - \Delta(T,w,p)| \leq \delta$ with probability at
least $2/3$, for a given distance parameter $\delta$. Our main result is an
algorithm whose sample complexity is $\tilde{O}(k^2/\delta^2)$. We first
present an algorithm that works when the underlying distribution $p$ is
uniform, and then show how it can be modified to work for any (unknown)
distribution $p$. We also show that a quadratic dependence on $1/\delta$ is
necessary.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: A Subquadratic Bound for Online Bisection</title>
    <link href="http://arxiv.org/abs/2305.01420"/>
    <id>http://arxiv.org/abs/2305.01420</id>
    <updated>2023-05-03T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Bienkowski_M/0/1/0/all/0/1&quot;&gt;Marcin Bienkowski&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Schmid_S/0/1/0/all/0/1&quot;&gt;Stefan Schmid&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In the online bisection problem one has to maintain a partition of $n$
elements into two clusters of cardinality $n/2$. During runtime, an online
algorithm is given a sequence of requests, each being a pair of elements: an
inter-cluster request costs one unit while an intra-cluster one is free. The
algorithm may change the partition, paying a unit cost for each element that
changes its cluster.
&lt;/p&gt;
&lt;p&gt;This natural problem admits a simple deterministic $O(n^2)$-competitive
algorithm [Avin et al., DISC 2016]. While several significant improvements over
this result have been obtained since the original work, all of them either
limit the generality of the input or assume some form of resource augmentation
(e.g., larger clusters). Moreover, the algorithm of Avin et al. achieves the
best known competitive ratio even if randomization is allowed.
&lt;/p&gt;
&lt;p&gt;In this paper, we present a first randomized online algorithm that breaks
this natural barrier and achieves a competitive ratio of $\tilde{O}(n^{27/14})$
without resource augmentation and for an arbitrary sequence of requests.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: FPT Approximations for Capacitated/Fair Clustering with Outliers</title>
    <link href="http://arxiv.org/abs/2305.01471"/>
    <id>http://arxiv.org/abs/2305.01471</id>
    <updated>2023-05-03T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Dabas_R/0/1/0/all/0/1&quot;&gt;Rajni Dabas&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Gupta_N/0/1/0/all/0/1&quot;&gt;Neelima Gupta&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Inamdar_T/0/1/0/all/0/1&quot;&gt;Tanmay Inamdar&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Clustering problems such as $k$-Median, and $k$-Means, are motivated from
applications such as location planning, unsupervised learning among others. In
such applications, it is important to find the clustering of points that is not
``skewed&#39;&#39; in terms of the number of points, i.e., no cluster should contain
too many points. This is modeled by capacity constraints on the sizes of
clusters. In an orthogonal direction, another important consideration in
clustering is how to handle the presence of outliers in the data. Indeed, these
clustering problems have been generalized in the literature to separately
handle capacity constraints and outliers. To the best of our knowledge, there
has been very little work on studying the approximability of clustering
problems that can simultaneously handle both capacities and outliers.
&lt;/p&gt;
&lt;p&gt;We initiate the study of the Capacitated $k$-Median with Outliers (C$k$MO)
problem. Here, we want to cluster all except $m$ outlier points into at most
$k$ clusters, such that (i) the clusters respect the capacity constraints, and
(ii) the cost of clustering, defined as the sum of distances of each
non-outlier point to its assigned cluster-center, is minimized.
&lt;/p&gt;
&lt;p&gt;We design the first constant-factor approximation algorithms for C$k$MO. In
particular, our algorithm returns a (3+\epsilon)-approximation for C$k$MO in
general metric spaces, and a (1+\epsilon)-approximation in Euclidean spaces of
constant dimension, that runs in time in time $f(k, m, \epsilon) \cdot
|I_m|^{O(1)}$, where $|I_m|$ denotes the input size. We can also extend these
results to a broader class of problems, including Capacitated
k-Means/k-Facility Location with Outliers, and Size-Balanced Fair Clustering
problems with Outliers. For each of these problems, we obtain an approximation
ratio that matches the best known guarantee of the corresponding outlier-free
problem.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Faster 0-1-Knapsack via Near-Convex Min-Plus-Convolution</title>
    <link href="http://arxiv.org/abs/2305.01593"/>
    <id>http://arxiv.org/abs/2305.01593</id>
    <updated>2023-05-03T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Bringmann_K/0/1/0/all/0/1&quot;&gt;Karl Bringmann&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Cassis_A/0/1/0/all/0/1&quot;&gt;Alejandro Cassis&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We revisit the classic 0-1-Knapsack problem, in which we are given $n$ items
with their weights and profits as well as a weight budget $W$, and the goal is
to find a subset of items of total weight at most $W$ that maximizes the total
profit. We study pseudopolynomial-time algorithms parameterized by the largest
profit of any item $p_{\max}$, and the largest weight of any item $w_{\max}$.
Our main result are algorithms for 0-1-Knapsack running in time
$\tilde{O}(n\,w_\max\,p_\max^{2/3})$ and $\tilde{O}(n\,p_\max\,w_\max^{2/3})$,
improving upon an algorithm in time $O(n\,p_\max\,w_\max)$ by Pisinger [J.
Algorithms &#39;99]. In the regime $p_\max \approx w_\max \approx n$ (and $W
\approx \mathrm{OPT} \approx n^2$) our algorithms are the first to break the
cubic barrier $n^3$.
&lt;/p&gt;
&lt;p&gt;To obtain our result, we give an efficient algorithm to compute the min-plus
convolution of near-convex functions. More precisely, we say that a function $f
\colon [n] \mapsto \mathbf{Z}$ is $\Delta$-near convex with $\Delta \geq 1$, if
there is a convex function $\breve{f}$ such that $\breve{f}(i) \leq f(i) \leq
\breve{f}(i) + \Delta$ for every $i$. We design an algorithm computing the
min-plus convolution of two $\Delta$-near convex functions in time
$\tilde{O}(n\Delta)$. This tool can replace the usage of the prediction
technique of Bateni, Hajiaghayi, Seddighin and Stein [STOC &#39;18] in all
applications we are aware of, and we believe it has wider applicability.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Randomized algorithms for fully online multiprocessor scheduling with testing</title>
    <link href="http://arxiv.org/abs/2305.01605"/>
    <id>http://arxiv.org/abs/2305.01605</id>
    <updated>2023-05-03T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Gong_M/0/1/0/all/0/1&quot;&gt;Mingyang Gong&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Chen_Z/0/1/0/all/0/1&quot;&gt;Zhi-Zhong Chen&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Lin_G/0/1/0/all/0/1&quot;&gt;Guohui Lin&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We contribute the first randomized algorithm that is an integration of
arbitrarily many deterministic algorithms for the fully online multiprocessor
scheduling with testing problem. When there are only two machines, we show that
with two component algorithms its expected competitive ratio is already
strictly smaller than the best proven deterministic competitive ratio lower
bound. Such algorithmic results are rarely seen in the literature.
&lt;/p&gt;
&lt;p&gt;Multiprocessor scheduling is one of the first combinatorial optimization
problems that have received numerous studies. Recently, several research groups
examined its testing variant, in which each job $J_j$ arrives with an upper
bound $u_j$ on the processing time and a testing operation of length $t_j$; one
can choose to execute $J_j$ for $u_j$ time, or to test $J_j$ for $t_j$ time to
obtain the exact processing time $p_j$ followed by immediately executing the
job for $p_j$ time. Our target problem is the fully online multiprocessor
scheduling with testing, in which the jobs arrive in sequence so that the
testing decision needs to be made at the job arrival as well as the designated
machine. We first use Yao&#39;s principle to prove lower bounds of 1.6682 and
1.6522 on the expected competitive ratio for any randomized algorithm at the
presence of at least three machines and only two machines, respectively, and
then propose an expected $(\sqrt{\varphi + 3} + 1) (\approx
3.1490)$-competitive randomized algorithm as a non-uniform probability
distribution over arbitrarily many deterministic algorithms, where $\varphi =
\frac{\sqrt{5} + 1}2$ is the Golden ratio. When there are only two machines, we
show that our randomized algorithm based on two deterministic algorithms is
already expected $\frac{3 \varphi + 3 \sqrt{13 - 7\varphi}}4 (\approx
2.1839)$-competitive, while proving a lower bound of 2.2117 on the competitive
ratio for any deterministic algorithm.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">Richard Lipton: Isbell Accepts</title>
    <link href="https://rjlipton.wpcomstaging.com/2023/05/02/isbell-accepts/"/>
    <id>https://rjlipton.wpcomstaging.com/?p=21528</id>
    <updated>2023-05-02T22:10:14+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;Charles Isbell was my colleague at Georgia Tech for a long time.  He has some news, which I am glad to convey in the words of the UW Madison Chancellor, Jennifer Mnookin:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
I am delighted to share the terrific news that Dr. Charles Lee Isbell Jr., the John P. Imlay Jr. Dean of the College of Computing at Georgia Institute of Technology, has accepted my offer to become our next provost at the University of Wisconsin&amp;#8212;Madison. He will begin his work with us on August 1.
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://rjlipton.wpcomstaging.com/2023/05/02/isbell-accepts/isbellmnookin/&quot; rel=&quot;attachment wp-att-21584&quot;&gt;&lt;img data-attachment-id=&quot;21584&quot; data-permalink=&quot;https://rjlipton.wpcomstaging.com/2023/05/02/isbell-accepts/isbellmnookin/&quot; data-orig-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/05/IsbellMnookin.png?fit=451%2C298&amp;amp;ssl=1&quot; data-orig-size=&quot;451,298&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;IsbellMnookin&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/05/IsbellMnookin.png?fit=300%2C198&amp;amp;ssl=1&quot; data-large-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/05/IsbellMnookin.png?fit=451%2C298&amp;amp;ssl=1&quot; decoding=&quot;async&quot; loading=&quot;lazy&quot; src=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/05/IsbellMnookin.png?resize=451%2C298&amp;#038;ssl=1&quot; alt=&quot;&quot; width=&quot;451&quot; height=&quot;298&quot; class=&quot;aligncenter size-full wp-image-21584&quot; srcset=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/05/IsbellMnookin.png?w=451&amp;amp;ssl=1 451w, https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/05/IsbellMnookin.png?resize=300%2C198&amp;amp;ssl=1 300w&quot; sizes=&quot;(max-width: 451px) 100vw, 451px&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Isbell will be the next provost:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
A &lt;a href=&quot;https://en.wikipedia.org/wiki/Provost_(education)&quot;&gt;provost&lt;/a&gt; is a senior academic administrator. At many institutions of higher education, they are the chief academic officer, a role that may be combined with being deputy to the chief executive officer. They may also be the chief executive officer of a university, of a branch campus of a university, or of a college within a university.
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;See &lt;a href=&quot;https://news.wisc.edu/charles-lee-isbell-jr-named-uw-madison-provost&quot;&gt;this&lt;/a&gt; for more details about the hiring of Isbell.&lt;/p&gt;
&lt;header&gt;
&lt;h2&gt;Chart&lt;/h2&gt;
&lt;/header&gt;
&lt;p&gt;Here is the level under Chancellor of the &lt;a href=&quot;https://www.wisc.edu/pdfs/UW-Madison-Leadership-Org-Chart.pdf&quot;&gt;org chart for UW Madison&lt;/a&gt;, with Charles&amp;#8217;s place in italics:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Provost and Vice Chancellor for Academic Affairs &lt;/em&gt;&lt;br /&gt;
Vice Chancellor for Finance and Administration&lt;br /&gt;
Vice Chancellor for Legal Affairs&lt;br /&gt;
Vice Chancellor for Research and Graduate Education&lt;br /&gt;
Vice Chancellor for Student Affairs&lt;br /&gt;
Vice Chancellor for University Relations&lt;br /&gt;
Chief Diversity Officer and Deputy Vice Chancellor for Diversity and Inclusion&lt;br /&gt;
Vice Chancellor for Medical Affairs and Dean, School of Medicine and Public Health&lt;/p&gt;
&lt;header&gt;
&lt;h2&gt;Open Problems&lt;/h2&gt;
&lt;/header&gt;
&lt;p&gt;Congrads Charles&amp;#8212;wonderful you are going to Madison. That is a wonderful place&amp;#8212;I spent many happy days being a visitor there over the years. He is following UW-Madison Provost John Scholz who was named as the new &lt;a href=&quot;https://ls.wisc.edu/about/scholz&quot;&gt;president&lt;/a&gt; of the University of Oregon in Eugene, Oregon.&lt;/p&gt;
&lt;p class=&quot;authors&quot;&gt;By rjlipton&lt;/p&gt;
  </content>
    <author>
      <name>Richard Lipton</name>
      <uri>https://rjlipton.wpcomstaging.com</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">Emanuele Viola: Mathematics of the impossible, Chapter 10, Constant-depth circuits</title>
    <link href="https://emanueleviola.wordpress.com/2023/05/02/mathematics-of-the-impossible-chapter-10-constant-depth-circuits/"/>
    <id>http://emanueleviola.wordpress.com/?p=1244</id>
    <updated>2023-05-02T21:37:15+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;In this chapter we further investigate circuits of constant depth, focusing on two pervasive classes, which indeed we have already encountered under different names.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Note on notation: I here use “AC” for AltCkt a.k.a.&amp;nbsp;alternating circuits. I also use AC for the class of functions &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; computable by an AC of depth &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt; and size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n^{d}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;h3 class=&quot;sectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;10.1   &lt;/span&gt; &lt;a id=&quot;x1-10700010.1&quot;&gt;&lt;/a&gt;Threshold circuits&lt;/h3&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-107001r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Definition&lt;/b&gt; 10.1.  &lt;/span&gt;A &lt;em&gt;threshold circuit, &lt;/em&gt;abbreviated TC, is a circuit made of Majority gates (of unbounded fan-in). We also denote by TC the class of functions &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; computable by a TC of depth &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt; and size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n^{d}&quot; class=&quot;latex&quot; /&gt; for some constant &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;TCs are one of the frontiers of our knowledge. It isn’t known how to prove impossibility results even for TCs of depth &lt;img src=&quot;https://s0.wp.com/latex.php?latex=3&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=3&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=3&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;3&quot; class=&quot;latex&quot; /&gt; and size, say, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%5E%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%5E%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%5E%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n^{2}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-107002r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 10.1.  &lt;/span&gt;Prove that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BAC%7D%5Csubseteq+%5Ctext+%7BTC%7D%5Csubseteq+%5Ctext+%7BNC%7D%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BAC%7D%5Csubseteq+%5Ctext+%7BTC%7D%5Csubseteq+%5Ctext+%7BNC%7D%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BAC%7D%5Csubseteq+%5Ctext+%7BTC%7D%5Csubseteq+%5Ctext+%7BNC%7D%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {AC}&amp;#92;subseteq &amp;#92;text {TC}&amp;#92;subseteq &amp;#92;text {NC}^{1}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-107003r2&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 10.2.  &lt;/span&gt;A function &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7B%2A%7D%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7B%2A%7D%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7B%2A%7D%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:&amp;#92;{0,1&amp;#92;} ^{*}&amp;#92;to &amp;#92;{0,1&amp;#92;} &quot; class=&quot;latex&quot; /&gt; is &lt;em&gt;symmetric&lt;/em&gt; if it only depends on the weight of the input. Prove that any symmetric function is in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BTC%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BTC%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BTC%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {TC}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The result &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BPH%7D%5Ctext+%7B%5Censuremath+%7B%5Csubseteq+%5Ctext+%7BMaj%7D%5Ccdot+%5Ctext+%7BMaj%7D%5Ccdot+%5Ctext+%7BP%7D%7D%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BPH%7D%5Ctext+%7B%5Censuremath+%7B%5Csubseteq+%5Ctext+%7BMaj%7D%5Ccdot+%5Ctext+%7BMaj%7D%5Ccdot+%5Ctext+%7BP%7D%7D%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BPH%7D%5Ctext+%7B%5Censuremath+%7B%5Csubseteq+%5Ctext+%7BMaj%7D%5Ccdot+%5Ctext+%7BMaj%7D%5Ccdot+%5Ctext+%7BP%7D%7D%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {PH}&amp;#92;text {&amp;#92;ensuremath {&amp;#92;subseteq &amp;#92;text {Maj}&amp;#92;cdot &amp;#92;text {Maj}&amp;#92;cdot &amp;#92;text {P}}}&quot; class=&quot;latex&quot; /&gt; obtained in &lt;a href=&quot;#x1-79001r13&quot;&gt;6.13&lt;!--tex4ht:ref: xca:power-of-majority --&gt;&lt;/a&gt; in particular yields the following.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-107004r1&quot;&gt;&lt;/a&gt;                                                                                                                                                                                     &lt;b&gt;Theorem&lt;/b&gt; 10.1.  &lt;/span&gt;&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#XAll89&quot;&gt;5&lt;/a&gt;]&lt;/span&gt;Any function &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; in AC has TCs of depth &lt;img src=&quot;https://s0.wp.com/latex.php?latex=3&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=3&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=3&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;3&quot; class=&quot;latex&quot; /&gt; and size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=2%5E%7B%5Clog+%5E%7Bc_%7Bf%7D%7Dn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=2%5E%7B%5Clog+%5E%7Bc_%7Bf%7D%7Dn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=2%5E%7B%5Clog+%5E%7Bc_%7Bf%7D%7Dn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;2^{&amp;#92;log ^{c_{f}}n}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-107005r2&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 10.2.  &lt;/span&gt; The following problems are in TC:&lt;/p&gt;
&lt;ol class=&quot;enumerate1&quot;&gt;
&lt;li class=&quot;enumerate&quot; id=&quot;x1-107007x1&quot;&gt;Addition of two input integers.&lt;/li&gt;
&lt;li class=&quot;enumerate&quot; id=&quot;x1-107009x2&quot;&gt;Iterated addition: Addition of any number of input integers.&lt;/li&gt;
&lt;li class=&quot;enumerate&quot; id=&quot;x1-107011x3&quot;&gt;Multiplication of two input integers.&lt;/li&gt;
&lt;li class=&quot;enumerate&quot; id=&quot;x1-107013x4&quot;&gt;Iterated multiplication: Multiplication of any number of input integers.&lt;/li&gt;
&lt;li class=&quot;enumerate&quot; id=&quot;x1-107015x5&quot;&gt;Division of two integers.&lt;/li&gt;
&lt;/ol&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;The proof follows closely that for NC&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;^{1}&quot; class=&quot;latex&quot; /&gt; in section&amp;nbsp;�&lt;a href=&quot;#x1-1020009.1&quot;&gt;9.1&lt;!--tex4ht:ref: sec:The-power-of-NC1-arithmetic --&gt;&lt;/a&gt; (which in turn was based on that for L). Only iterated addition requires a new idea.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-107016r3&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 10.3.  &lt;/span&gt;Prove the claim about iterated addition. (Hint: Write input as &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%5Ctimes+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%5Ctimes+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%5Ctimes+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&amp;#92;times n&quot; class=&quot;latex&quot; /&gt; matrix, one number per row. Divide columns into blocks of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%3Dc%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%3Dc%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%3Dc%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t=c&amp;#92;log n&quot; class=&quot;latex&quot; /&gt;.)&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h3 class=&quot;sectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;10.2   &lt;/span&gt; &lt;a id=&quot;x1-10800010.2&quot;&gt;&lt;/a&gt;TC vs.&amp;nbsp;NC&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;^{1}&quot; class=&quot;latex&quot; /&gt;&lt;/h3&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;Another great question is whether &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BTC%7D%3D%5Ctext+%7BNC%7D%5E%7B1%7D.&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BTC%7D%3D%5Ctext+%7BNC%7D%5E%7B1%7D.&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BTC%7D%3D%5Ctext+%7BNC%7D%5E%7B1%7D.&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {TC}=&amp;#92;text {NC}^{1}.&quot; class=&quot;latex&quot; /&gt; For any &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt;, we can show that functions in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNC%7D%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNC%7D%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BNC%7D%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {NC}^{1}&quot; class=&quot;latex&quot; /&gt;, such as Parity, require depth-&lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt; TCs of size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cge+n%5E%7B1%2Bc%5Clog+d%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cge+n%5E%7B1%2Bc%5Clog+d%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cge+n%5E%7B1%2Bc%5Clog+d%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;ge n^{1+c&amp;#92;log d}&quot; class=&quot;latex&quot; /&gt;, and this is tight up to constants.&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#XImpagliazzoPS97&quot;&gt;34&lt;/a&gt;]&lt;/span&gt; A natural question is whether we can prove stronger bounds for harder functions in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNC%7D%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BNC%7D%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BNC%7D%5E%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {NC}^{1}&quot; class=&quot;latex&quot; /&gt;. A natural candidate is iterated multiplication of 3&amp;#215;3 matrices. The following result shows that, in fact, stronger bounds would already prove “the whole thing,” that is, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BTC%7D%5Cne+%5Ctext+%7BNC%7D%5E%7B1%7D.&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BTC%7D%5Cne+%5Ctext+%7BNC%7D%5E%7B1%7D.&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BTC%7D%5Cne+%5Ctext+%7BNC%7D%5E%7B1%7D.&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {TC}&amp;#92;ne &amp;#92;text {NC}^{1}.&quot; class=&quot;latex&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-108001r3&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 10.3.  &lt;/span&gt;&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#XAllenderK10&quot;&gt;7&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;conf/stoc/ChenT19&quot;&gt;17&lt;/a&gt;]&lt;/span&gt; Let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=G&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=G&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=G&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;G&quot; class=&quot;latex&quot; /&gt; be the set of 3&amp;#215;3 matrices of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;mathbb {F}_{2}&quot; class=&quot;latex&quot; /&gt;. Suppose that the product of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt; elements in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=G&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=G&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=G&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;G&quot; class=&quot;latex&quot; /&gt; can be computed by TCs of size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%5E%7Bk%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%5E%7Bk%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%5E%7Bk%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n^{k}&quot; class=&quot;latex&quot; /&gt; and depth &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt;. Then for any &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cepsilon+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cepsilon+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cepsilon+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;epsilon &quot; class=&quot;latex&quot; /&gt; the product can also be computed by TCs of size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d%27n%5E%7B1%2B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d%27n%5E%7B1%2B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d%27n%5E%7B1%2B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&amp;#039;n^{1+&amp;#92;epsilon }&quot; class=&quot;latex&quot; /&gt; and depth &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d%27%3A%3Dcdk%5Clog+1%2F%5Cepsilon+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d%27%3A%3Dcdk%5Clog+1%2F%5Cepsilon+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d%27%3A%3Dcdk%5Clog+1%2F%5Cepsilon+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&amp;#039;:=cdk&amp;#92;log 1/&amp;#92;epsilon &quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The same result applies to any constant-size group &lt;img src=&quot;https://s0.wp.com/latex.php?latex=G&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=G&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=G&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;G&quot; class=&quot;latex&quot; /&gt; – we state it for matrices for concreteness.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;    &lt;b&gt;Proof&lt;/b&gt;.&amp;nbsp;&lt;/span&gt;Exploiting the associativity of the problem, we compute the product recursively according to a regular tree. The root is defined to have level &lt;img src=&quot;https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;0&quot; class=&quot;latex&quot; /&gt;. At Level &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&quot; class=&quot;latex&quot; /&gt; we compute &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n_{i}&quot; class=&quot;latex&quot; /&gt; products of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%28n%5E%7B1%2B%5Cepsilon+%7D%2Fn_%7Bi%7D%29%5E%7B1%2Fk%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%28n%5E%7B1%2B%5Cepsilon+%7D%2Fn_%7Bi%7D%29%5E%7B1%2Fk%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28n%5E%7B1%2B%5Cepsilon+%7D%2Fn_%7Bi%7D%29%5E%7B1%2Fk%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;(n^{1+&amp;#92;epsilon }/n_{i})^{1/k}&quot; class=&quot;latex&quot; /&gt; matrices. At the root &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%28i%3D0%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%28i%3D0%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28i%3D0%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;(i=0)&quot; class=&quot;latex&quot; /&gt; we have &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n_%7B0%7D%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n_%7B0%7D%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n_%7B0%7D%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n_{0}=1&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   By the assumption, each product at Level &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&quot; class=&quot;latex&quot; /&gt; has TCs of size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%5E%7B1%2B%5Cepsilon+%7D%2Fn_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%5E%7B1%2B%5Cepsilon+%7D%2Fn_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%5E%7B1%2B%5Cepsilon+%7D%2Fn_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n^{1+&amp;#92;epsilon }/n_{i}&quot; class=&quot;latex&quot; /&gt; and depth &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt;. Hence Level &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&quot; class=&quot;latex&quot; /&gt; can be computed by TCs of size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%5E%7B1%2B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%5E%7B1%2B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%5E%7B1%2B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n^{1+&amp;#92;epsilon }&quot; class=&quot;latex&quot; /&gt; and depth &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   We have the recursion&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+n_%7Bi%2B1%7D%3Dn_%7Bi%7D%5Ccdot+%28n%5E%7B1%2B%5Cepsilon+%7D%2Fn_%7Bi%7D%29%5E%7B1%2Fk%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+n_%7Bi%2B1%7D%3Dn_%7Bi%7D%5Ccdot+%28n%5E%7B1%2B%5Cepsilon+%7D%2Fn_%7Bi%7D%29%5E%7B1%2Fk%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+n_%7Bi%2B1%7D%3Dn_%7Bi%7D%5Ccdot+%28n%5E%7B1%2B%5Cepsilon+%7D%2Fn_%7Bi%7D%29%5E%7B1%2Fk%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} n_{i+1}=n_{i}&amp;#92;cdot (n^{1+&amp;#92;epsilon }/n_{i})^{1/k}. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The solution to this recursion is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n_%7Bi%7D%3Dn%5E%7B%281%2B%5Cepsilon+%29%281-%281-1%2Fk%29%5E%7Bi%7D%29%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n_%7Bi%7D%3Dn%5E%7B%281%2B%5Cepsilon+%29%281-%281-1%2Fk%29%5E%7Bi%7D%29%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n_%7Bi%7D%3Dn%5E%7B%281%2B%5Cepsilon+%29%281-%281-1%2Fk%29%5E%7Bi%7D%29%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n_{i}=n^{(1+&amp;#92;epsilon )(1-(1-1/k)^{i})}&quot; class=&quot;latex&quot; /&gt;, see below.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   For &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i%3Dck%5Clog+%281%2F%5Cepsilon+%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i%3Dck%5Clog+%281%2F%5Cepsilon+%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i%3Dck%5Clog+%281%2F%5Cepsilon+%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i=ck&amp;#92;log (1/&amp;#92;epsilon )&quot; class=&quot;latex&quot; /&gt; we have &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n_%7Bi%7D%3Dn%5E%7B%281%2B%5Cepsilon+%29%281-%5Cepsilon+%5E%7B2%7D%29%7D%3En&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n_%7Bi%7D%3Dn%5E%7B%281%2B%5Cepsilon+%29%281-%5Cepsilon+%5E%7B2%7D%29%7D%3En&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n_%7Bi%7D%3Dn%5E%7B%281%2B%5Cepsilon+%29%281-%5Cepsilon+%5E%7B2%7D%29%7D%3En&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n_{i}=n^{(1+&amp;#92;epsilon )(1-&amp;#92;epsilon ^{2})}&amp;gt;n&quot; class=&quot;latex&quot; /&gt;; this means that we can compute a product of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cge+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cge+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cge+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;ge n&quot; class=&quot;latex&quot; /&gt; matrices, as required.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Hence the total depth of the circuit is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d%5Ccdot+ck%5Clog+%281%2F%5Cepsilon+%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d%5Ccdot+ck%5Clog+%281%2F%5Cepsilon+%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d%5Ccdot+ck%5Clog+%281%2F%5Cepsilon+%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&amp;#92;cdot ck&amp;#92;log (1/&amp;#92;epsilon )&quot; class=&quot;latex&quot; /&gt;, and the total size is the depth times &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%5E%7B1%2B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%5E%7B1%2B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%5E%7B1%2B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n^{1+&amp;#92;epsilon }&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   It remains to solve the recurrence. Letting &lt;img src=&quot;https://s0.wp.com/latex.php?latex=a_%7Bi%7D%3A%3D%5Clog+_%7Bn%7Dn_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=a_%7Bi%7D%3A%3D%5Clog+_%7Bn%7Dn_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=a_%7Bi%7D%3A%3D%5Clog+_%7Bn%7Dn_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;a_{i}:=&amp;#92;log _{n}n_{i}&quot; class=&quot;latex&quot; /&gt; we have the following recurrence for the exponents of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n_{i}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+a_%7B0%7D+%26+%3D0%5C%5C+a_%7Bi%2B1%7D+%26+%3Da_%7Bi%7D%281-1%2Fk%29%2B%281%2B%5Cepsilon+%29%2Fk%3Da_%7Bi%7D%5Calpha+%2B%5Cgamma+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+a_%7B0%7D+%26+%3D0%5C%5C+a_%7Bi%2B1%7D+%26+%3Da_%7Bi%7D%281-1%2Fk%29%2B%281%2B%5Cepsilon+%29%2Fk%3Da_%7Bi%7D%5Calpha+%2B%5Cgamma+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+a_%7B0%7D+%26+%3D0%5C%5C+a_%7Bi%2B1%7D+%26+%3Da_%7Bi%7D%281-1%2Fk%29%2B%281%2B%5Cepsilon+%29%2Fk%3Da_%7Bi%7D%5Calpha+%2B%5Cgamma+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} a_{0} &amp;amp; =0&amp;#92;&amp;#92; a_{i+1} &amp;amp; =a_{i}(1-1/k)+(1+&amp;#92;epsilon )/k=a_{i}&amp;#92;alpha +&amp;#92;gamma &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   where &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Calpha+%3A%3D%281-1%2Fk%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Calpha+%3A%3D%281-1%2Fk%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Calpha+%3A%3D%281-1%2Fk%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;alpha :=(1-1/k)&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cgamma+%3A%3D%281%2B%5Cepsilon+%29%2Fk&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cgamma+%3A%3D%281%2B%5Cepsilon+%29%2Fk&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cgamma+%3A%3D%281%2B%5Cepsilon+%29%2Fk&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;gamma :=(1+&amp;#92;epsilon )/k&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   This gives&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+a_%7Bi%7D%3D%5Cgamma+%5Csum+_%7Bj%5Cle+i%7D%5Calpha+%7B%7D%5E%7Bj%7D%3D%5Cgamma+%5Cfrac+%7B1-%5Calpha+%5E%7Bi%2B1%7D%7D%7B1-%5Calpha+%7D%3D%281%2B%5Cepsilon+%29%281-%5Calpha+%5E%7Bi%2B1%7D%29.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+a_%7Bi%7D%3D%5Cgamma+%5Csum+_%7Bj%5Cle+i%7D%5Calpha+%7B%7D%5E%7Bj%7D%3D%5Cgamma+%5Cfrac+%7B1-%5Calpha+%5E%7Bi%2B1%7D%7D%7B1-%5Calpha+%7D%3D%281%2B%5Cepsilon+%29%281-%5Calpha+%5E%7Bi%2B1%7D%29.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+a_%7Bi%7D%3D%5Cgamma+%5Csum+_%7Bj%5Cle+i%7D%5Calpha+%7B%7D%5E%7Bj%7D%3D%5Cgamma+%5Cfrac+%7B1-%5Calpha+%5E%7Bi%2B1%7D%7D%7B1-%5Calpha+%7D%3D%281%2B%5Cepsilon+%29%281-%5Calpha+%5E%7Bi%2B1%7D%29.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} a_{i}=&amp;#92;gamma &amp;#92;sum _{j&amp;#92;le i}&amp;#92;alpha {}^{j}=&amp;#92;gamma &amp;#92;frac {1-&amp;#92;alpha ^{i+1}}{1-&amp;#92;alpha }=(1+&amp;#92;epsilon )(1-&amp;#92;alpha ^{i+1}). &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Were the recursion of the form &lt;img src=&quot;https://s0.wp.com/latex.php?latex=a%27_%7Bi%2B1%7D%3Da%27_%7Bi%7D%2B%281%2B%5Cepsilon+%29%2Fk&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=a%27_%7Bi%2B1%7D%3Da%27_%7Bi%7D%2B%281%2B%5Cepsilon+%29%2Fk&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=a%27_%7Bi%2B1%7D%3Da%27_%7Bi%7D%2B%281%2B%5Cepsilon+%29%2Fk&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;a&amp;#039;_{i+1}=a&amp;#039;_{i}+(1+&amp;#92;epsilon )/k&quot; class=&quot;latex&quot; /&gt; then obviously &lt;img src=&quot;https://s0.wp.com/latex.php?latex=a%27_%7Bck%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=a%27_%7Bck%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=a%27_%7Bck%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;a&amp;#039;_{ck}&quot; class=&quot;latex&quot; /&gt; would already be &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cge+1%2B%5Cepsilon+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cge+1%2B%5Cepsilon+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cge+1%2B%5Cepsilon+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;ge 1+&amp;#92;epsilon &quot; class=&quot;latex&quot; /&gt;. Instead for &lt;img src=&quot;https://s0.wp.com/latex.php?latex=a_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=a_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=a_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;a_{i}&quot; class=&quot;latex&quot; /&gt; we need to get to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=ck%5Clog+%281%2F%5Cepsilon+%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=ck%5Clog+%281%2F%5Cepsilon+%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=ck%5Clog+%281%2F%5Cepsilon+%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;ck&amp;#92;log (1/&amp;#92;epsilon )&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h3 class=&quot;sectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;10.3   &lt;/span&gt; &lt;a id=&quot;x1-10900010.3&quot;&gt;&lt;/a&gt;Impossibility results for AC&lt;/h3&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;In this section we prove impossibility results for ACs, matching several settings of parameters mentioned earlier (cf.&amp;nbsp;section&amp;nbsp;�&lt;a href=&quot;#x1-910007.3&quot;&gt;7.3&lt;!--tex4ht:ref: sec:Checkpoints --&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   To set the stage, let’s prove strong results for depth 2, that is, DNFs.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-109001r4&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 10.4.  &lt;/span&gt;Prove that Majority requires DNFs of size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cge+2%5E%7Bcn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cge+2%5E%7Bcn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cge+2%5E%7Bcn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;ge 2^{cn}&quot; class=&quot;latex&quot; /&gt;. Hint: What if you have a term with less than &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n &quot; class=&quot;latex&quot; /&gt; variables?&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   As discussed, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=2%5E%7Bcn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=2%5E%7Bcn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=2%5E%7Bcn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;2^{cn}&quot; class=&quot;latex&quot; /&gt; bounds even for depth 3 ACs are unknown, and would imply major separations. The following is close to the state-of-the-art for depth &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-109002r4&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 10.4.  &lt;/span&gt;&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#XRaz87&quot;&gt;52&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;#XSmo87&quot;&gt;63&lt;/a&gt;]&lt;/span&gt;  Let C be an AC of depth &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt; and size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&quot; class=&quot;latex&quot; /&gt; computing Majority on &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt; bits. Then &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Clog+%5E%7Bd%7Ds%5Cge+c%5Csqrt+%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Clog+%5E%7Bd%7Ds%5Cge+c%5Csqrt+%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Clog+%5E%7Bd%7Ds%5Cge+c%5Csqrt+%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;log ^{d}s&amp;#92;ge c&amp;#92;sqrt {n}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Recall from section&amp;nbsp;�&lt;a href=&quot;#x1-910007.3&quot;&gt;7.3&lt;!--tex4ht:ref: sec:Checkpoints --&gt;&lt;/a&gt; that a stronger bound for an explicit function would have major consequences; in particular the function cannot be in L.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The proof uses the simulation of circuits by low-degree polynomials which we saw in Theorem &lt;a href=&quot;#x1-77004r5&quot;&gt;6.5&lt;!--tex4ht:ref: thm:AC0-Razborov-approx --&gt;&lt;/a&gt;. Specifically, we use the following corollary:&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-109003r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Corollary&lt;/b&gt; 10.1.  &lt;/span&gt;Let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C:&amp;#92;{0,1&amp;#92;} ^{n}&amp;#92;to &amp;#92;{0,1&amp;#92;} &quot; class=&quot;latex&quot; /&gt; be an alternating circuit of depth &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt; and size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&quot; class=&quot;latex&quot; /&gt;. Then there is a polynomial &lt;img src=&quot;https://s0.wp.com/latex.php?latex=p&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=p&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=p&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;p&quot; class=&quot;latex&quot; /&gt; over &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;mathbb {F}_{2}&quot; class=&quot;latex&quot; /&gt; of degree &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Clog+%5E%7Bd%7Ds%2F%5Cepsilon+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Clog+%5E%7Bd%7Ds%2F%5Cepsilon+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Clog+%5E%7Bd%7Ds%2F%5Cepsilon+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;log ^{d}s/&amp;#92;epsilon &quot; class=&quot;latex&quot; /&gt; such that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BP%7D_%7Bx%7D%5BC%28x%29%5Cne+p%28x%29%5D%5Cle+%5Cepsilon+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BP%7D_%7Bx%7D%5BC%28x%29%5Cne+p%28x%29%5D%5Cle+%5Cepsilon+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BP%7D_%7Bx%7D%5BC%28x%29%5Cne+p%28x%29%5D%5Cle+%5Cepsilon+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;mathbb {P}_{x}[C(x)&amp;#92;ne p(x)]&amp;#92;le &amp;#92;epsilon &quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;    &lt;b&gt;Proof&lt;/b&gt;.&amp;nbsp;&lt;/span&gt;Theorem &lt;a href=&quot;#x1-77004r5&quot;&gt;6.5&lt;!--tex4ht:ref: thm:AC0-Razborov-approx --&gt;&lt;/a&gt; gave a distribution &lt;img src=&quot;https://s0.wp.com/latex.php?latex=P&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=P&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=P&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;P&quot; class=&quot;latex&quot; /&gt; on polynomials s.t.&amp;nbsp;for every &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt; we have&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb+%7BP%7D_%7BP%7D%5BC%28x%29%5Cne+P%28x%29%5D%5Cle+%5Cepsilon+.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb+%7BP%7D_%7BP%7D%5BC%28x%29%5Cne+P%28x%29%5D%5Cle+%5Cepsilon+.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb+%7BP%7D_%7BP%7D%5BC%28x%29%5Cne+P%28x%29%5D%5Cle+%5Cepsilon+.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} &amp;#92;mathbb {P}_{P}[C(x)&amp;#92;ne P(x)]&amp;#92;le &amp;#92;epsilon . &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Averaging over &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt; we also have&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb+%7BP%7D_%7Bx%2CP%7D%5BC%28x%29%5Cne+P%28x%29%5D%5Cle+%5Cepsilon+.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb+%7BP%7D_%7Bx%2CP%7D%5BC%28x%29%5Cne+P%28x%29%5D%5Cle+%5Cepsilon+.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb+%7BP%7D_%7Bx%2CP%7D%5BC%28x%29%5Cne+P%28x%29%5D%5Cle+%5Cepsilon+.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} &amp;#92;mathbb {P}_{x,P}[C(x)&amp;#92;ne P(x)]&amp;#92;le &amp;#92;epsilon . &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Hence we can fix a particular polynomial &lt;img src=&quot;https://s0.wp.com/latex.php?latex=p&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=p&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=p&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;p&quot; class=&quot;latex&quot; /&gt; s.t.&amp;nbsp;the probability over &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt; is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+%5Cepsilon+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+%5Cepsilon+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+%5Cepsilon+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le &amp;#92;epsilon &quot; class=&quot;latex&quot; /&gt;, yielding the result. &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   We then show that Majority cannot be approximated by such low-degree polynomials.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The key result is the following:&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-109004r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Lemma&lt;/b&gt; 10.1.  &lt;/span&gt;Every function &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D%5En+%5Cto+%5C%7B0%2C1%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D%5En+%5Cto+%5C%7B0%2C1%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D%5En+%5Cto+%5C%7B0%2C1%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:&amp;#92;{0,1&amp;#92;}^n &amp;#92;to &amp;#92;{0,1&amp;#92;}&quot; class=&quot;latex&quot; /&gt; can be written as &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%28x%29%3Dp_%7B0%7D%28x%29%2Bp_%7B1%7D%28x%29%5Ccdot+%5Ctext+%7BMaj%7D%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%28x%29%3Dp_%7B0%7D%28x%29%2Bp_%7B1%7D%28x%29%5Ccdot+%5Ctext+%7BMaj%7D%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%28x%29%3Dp_%7B0%7D%28x%29%2Bp_%7B1%7D%28x%29%5Ccdot+%5Ctext+%7BMaj%7D%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f(x)=p_{0}(x)+p_{1}(x)&amp;#92;cdot &amp;#92;text {Maj}(x)&quot; class=&quot;latex&quot; /&gt;, for some polynomials &lt;img src=&quot;https://s0.wp.com/latex.php?latex=p_%7B0%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=p_%7B0%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=p_%7B0%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;p_{0}&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=p_%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=p_%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=p_%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;p_{1}&quot; class=&quot;latex&quot; /&gt; of degree &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+n%2F2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+n%2F2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+n%2F2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le n/2&quot; class=&quot;latex&quot; /&gt;. This holds for every odd &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;    &lt;b&gt;Proof&lt;/b&gt;.&amp;nbsp;&lt;/span&gt;Let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M_%7B0%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M_%7B0%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M_%7B0%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M_{0}&quot; class=&quot;latex&quot; /&gt; be the set of strings with weight &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+n%2F2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+n%2F2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+n%2F2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le n/2&quot; class=&quot;latex&quot; /&gt;. We claim that for every function &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3AM_%7B0%7D%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3AM_%7B0%7D%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3AM_%7B0%7D%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:M_{0}&amp;#92;to &amp;#92;{0,1&amp;#92;} &quot; class=&quot;latex&quot; /&gt; there is a polynomial &lt;img src=&quot;https://s0.wp.com/latex.php?latex=p_%7B0%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=p_%7B0%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=p_%7B0%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;p_{0}&quot; class=&quot;latex&quot; /&gt; of degree &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+n%2F2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+n%2F2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+n%2F2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le n/2&quot; class=&quot;latex&quot; /&gt; s.t.&amp;nbsp;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=p_%7B0%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=p_%7B0%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=p_%7B0%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;p_{0}&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; agree on &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M_%7B0%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M_%7B0%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M_%7B0%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M_{0}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   To verify this, consider the monomials of degree &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+n%2F2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+n%2F2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+n%2F2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le n/2&quot; class=&quot;latex&quot; /&gt;. We claim that (the vectors corresponding to) their truth tables over &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M_%7B0%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M_%7B0%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M_%7B0%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M_{0}&quot; class=&quot;latex&quot; /&gt; are linearly independent. This means that any polynomial gives a different function over &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M_%7B0%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M_%7B0%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M_%7B0%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M_{0}&quot; class=&quot;latex&quot; /&gt;, and because the number of polynomials is the same as the number of functions, the result follows. &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-109005r5&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 10.5.  &lt;/span&gt;Prove the claim in the proof.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;    &lt;b&gt;Proof of Theorem &lt;a href=&quot;#x1-109002r4&quot;&gt;10.4&lt;!--tex4ht:ref: thm:-Majority-not-in-acz --&gt;&lt;/a&gt;&lt;/b&gt;.&amp;nbsp;&lt;/span&gt; Apply Corollary &lt;a href=&quot;#x1-109003r1&quot;&gt;10.1&lt;!--tex4ht:ref: cor:Raz-approx-fixed-p --&gt;&lt;/a&gt; with &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cepsilon+%3D1%2F10&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cepsilon+%3D1%2F10&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cepsilon+%3D1%2F10&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;epsilon =1/10&quot; class=&quot;latex&quot; /&gt; to obtain &lt;img src=&quot;https://s0.wp.com/latex.php?latex=p&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=p&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=p&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;p&quot; class=&quot;latex&quot; /&gt;. Let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;S&quot; class=&quot;latex&quot; /&gt; be the set of inputs on which &lt;img src=&quot;https://s0.wp.com/latex.php?latex=p%28x%29%3DC%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=p%28x%29%3DC%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=p%28x%29%3DC%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;p(x)=C(x)&quot; class=&quot;latex&quot; /&gt;. By Lemma &lt;a href=&quot;#x1-109004r1&quot;&gt;10.1&lt;!--tex4ht:ref: lem:Maj-versatile --&gt;&lt;/a&gt;, any function &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3AS%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3AS%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3AS%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:S&amp;#92;to &amp;#92;{0,1&amp;#92;} &quot; class=&quot;latex&quot; /&gt; ca be written as&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+f%28x%29%3Dp_%7B0%7D%28x%29%2Bp_%7B1%7D%28x%29%5Ccdot+p%28x%29.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+f%28x%29%3Dp_%7B0%7D%28x%29%2Bp_%7B1%7D%28x%29%5Ccdot+p%28x%29.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+f%28x%29%3Dp_%7B0%7D%28x%29%2Bp_%7B1%7D%28x%29%5Ccdot+p%28x%29.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} f(x)=p_{0}(x)+p_{1}(x)&amp;#92;cdot p(x). &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The right-hand size is a polynomial of degree &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+d%27%3A%3Dn%2F2%2B%5Clog+%5E%7Bd%7D%28cs%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+d%27%3A%3Dn%2F2%2B%5Clog+%5E%7Bd%7D%28cs%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+d%27%3A%3Dn%2F2%2B%5Clog+%5E%7Bd%7D%28cs%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le d&amp;#039;:=n/2+&amp;#92;log ^{d}(cs)&quot; class=&quot;latex&quot; /&gt;. The number of such polynomials is the number of possible choices for each monomial of degree &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&quot; class=&quot;latex&quot; /&gt;, for any &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&quot; class=&quot;latex&quot; /&gt; up to the degree. This number is&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cprod+_%7Bi%3D0%7D%5E%7Bd%27%7D2%5E%7B%7Bn+%5Cchoose+i%7D%7D%3D2%5E%7B%5Csum+_%7Bi%7D%5E%7Bd%27%7D%7Bn+%5Cchoose+i%7D%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cprod+_%7Bi%3D0%7D%5E%7Bd%27%7D2%5E%7B%7Bn+%5Cchoose+i%7D%7D%3D2%5E%7B%5Csum+_%7Bi%7D%5E%7Bd%27%7D%7Bn+%5Cchoose+i%7D%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cprod+_%7Bi%3D0%7D%5E%7Bd%27%7D2%5E%7B%7Bn+%5Cchoose+i%7D%7D%3D2%5E%7B%5Csum+_%7Bi%7D%5E%7Bd%27%7D%7Bn+%5Cchoose+i%7D%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} &amp;#92;prod _{i=0}^{d&amp;#039;}2^{{n &amp;#92;choose i}}=2^{&amp;#92;sum _{i}^{d&amp;#039;}{n &amp;#92;choose i}}. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   On the other hand, the number of possible functions &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3AS%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3AS%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3AS%5Cto+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:S&amp;#92;to &amp;#92;{0,1&amp;#92;} &quot; class=&quot;latex&quot; /&gt; is&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+2%5E%7B%7CS%7C%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+2%5E%7B%7CS%7C%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+2%5E%7B%7CS%7C%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} 2^{|S|}. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Since a polynomial computes at most one function, taking logs we have&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%7CS%7C%5Cle+%5Csum+_%7Bi%7D%5E%7Bd%27%7D%7Bn+%5Cchoose+i%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%7CS%7C%5Cle+%5Csum+_%7Bi%7D%5E%7Bd%27%7D%7Bn+%5Cchoose+i%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%7CS%7C%5Cle+%5Csum+_%7Bi%7D%5E%7Bd%27%7D%7Bn+%5Cchoose+i%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} |S|&amp;#92;le &amp;#92;sum _{i}^{d&amp;#039;}{n &amp;#92;choose i}. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The right-hand side is at most &lt;img src=&quot;https://s0.wp.com/latex.php?latex=2%5E%7Bn%7D%281%2F2%2Bc%5Clog+%5E%7Bd%7D%28s%29%2F%5Csqrt+%7Bn%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=2%5E%7Bn%7D%281%2F2%2Bc%5Clog+%5E%7Bd%7D%28s%29%2F%5Csqrt+%7Bn%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=2%5E%7Bn%7D%281%2F2%2Bc%5Clog+%5E%7Bd%7D%28s%29%2F%5Csqrt+%7Bn%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;2^{n}(1/2+c&amp;#92;log ^{d}(s)/&amp;#92;sqrt {n})&quot; class=&quot;latex&quot; /&gt;, since each binomial coefficient is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+c2%5E%7Bn%7D%2F%5Csqrt+%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+c2%5E%7Bn%7D%2F%5Csqrt+%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+c2%5E%7Bn%7D%2F%5Csqrt+%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le c2^{n}/&amp;#92;sqrt {n}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   On the other hand, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7CS%7C%5Cge+0.9%5Ccdot+2%5E%7Bn%7D.&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7CS%7C%5Cge+0.9%5Ccdot+2%5E%7Bn%7D.&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7CS%7C%5Cge+0.9%5Ccdot+2%5E%7Bn%7D.&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;|S|&amp;#92;ge 0.9&amp;#92;cdot 2^{n}.&quot; class=&quot;latex&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Combining this we get&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+0.9%5Ccdot+2%5E%7Bn%7D%5Cle+2%5E%7Bn%7D%281%2F2%2Bc%5Clog+%5E%7Bd%7D%28s%29%2F%5Csqrt+%7Bn%7D%29.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+0.9%5Ccdot+2%5E%7Bn%7D%5Cle+2%5E%7Bn%7D%281%2F2%2Bc%5Clog+%5E%7Bd%7D%28s%29%2F%5Csqrt+%7Bn%7D%29.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+0.9%5Ccdot+2%5E%7Bn%7D%5Cle+2%5E%7Bn%7D%281%2F2%2Bc%5Clog+%5E%7Bd%7D%28s%29%2F%5Csqrt+%7Bn%7D%29.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} 0.9&amp;#92;cdot 2^{n}&amp;#92;le 2^{n}(1/2+c&amp;#92;log ^{d}(s)/&amp;#92;sqrt {n}). &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;This implies&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+0.4%5Cle+c%5Clog+%5E%7Bd%7D%28s%29%2F%5Csqrt+%7Bn%7D%2C+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+0.4%5Cle+c%5Clog+%5E%7Bd%7D%28s%29%2F%5Csqrt+%7Bn%7D%2C+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+0.4%5Cle+c%5Clog+%5E%7Bd%7D%28s%29%2F%5Csqrt+%7Bn%7D%2C+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} 0.4&amp;#92;le c&amp;#92;log ^{d}(s)/&amp;#92;sqrt {n}, &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;proving the theorem. &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-109006r6&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 10.6.  &lt;/span&gt;Explain why Theorem &lt;a href=&quot;#x1-109002r4&quot;&gt;10.4&lt;!--tex4ht:ref: thm:-Majority-not-in-acz --&gt;&lt;/a&gt; holds even if the circuits have Parity gates (in addition to Or and And gates).&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;thebibliography&quot;&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [1]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:conf/focs/AbboudBW15&quot;&gt;&lt;/a&gt;Amir Abboud, Arturs Backurs, and Virginia&amp;nbsp;Vassilevska Williams. Tight hardness      results for LCS and other sequence similarity measures.  In Venkatesan Guruswami,      editor, IEEE 56th Annual Symposium on Foundations of Computer Science, FOCS      2015, Berkeley, CA, USA, 17-20 October, 2015, pages 59–78. IEEE Computer Society,      2015.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [2]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAdleman78&quot;&gt;&lt;/a&gt;Leonard  Adleman.   Two  theorems  on  random  polynomial  time.   In  19th IEEE      Symp.&amp;nbsp;on Foundations of Computer Science (FOCS), pages 75–83. 1978.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [3]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAjt83&quot;&gt;&lt;/a&gt;Mikl�s Ajtai.  &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5CSigma+%5Csp+%7B1%7D%5Csb+%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5CSigma+%5Csp+%7B1%7D%5Csb+%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CSigma+%5Csp+%7B1%7D%5Csb+%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;Sigma &amp;#92;sp {1}&amp;#92;sb {1}&quot; class=&quot;latex&quot; /&gt;-formulae on finite structures.  Annals of Pure and Applied Logic,      24(1):1–48, 1983.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [4]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAjtai05&quot;&gt;&lt;/a&gt;Mikl�s Ajtai. A non-linear time lower bound for boolean branching programs. Theory      of Computing, 1(1):149–176, 2005.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [5]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAll89&quot;&gt;&lt;/a&gt;Eric  Allender.   A  note  on  the  power  of  threshold  circuits.   In  30th Symposium      on Foundations of Computer Science, pages 580–584, Research Triangle Park, North      Carolina, 30 October–1 November 1989. IEEE.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [6]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAllender01&quot;&gt;&lt;/a&gt;Eric Allender. The division breakthroughs. Bulletin of the EATCS, 74:61–77, 2001.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [7]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAllenderK10&quot;&gt;&lt;/a&gt;Eric  Allender  and  Michal  Koucký.     Amplifying  lower  bounds  by  means  of      self-reducibility. J.&amp;nbsp;of the ACM, 57(3), 2010.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [8]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAGHP92&quot;&gt;&lt;/a&gt;Noga Alon, Oded Goldreich, Johan H�stad, and Ren� Peralta. Simple constructions      of  almost  &lt;img src=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;k&quot; class=&quot;latex&quot; /&gt;-wise  independent  random  variables.   Random  Structures  &amp;amp;  Algorithms,      3(3):289–304, 1992.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [9]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/jcss/AngluinV79&quot;&gt;&lt;/a&gt;Dana Angluin and Leslie&amp;nbsp;G. Valiant. Fast probabilistic algorithms for hamiltonian      circuits and matchings. J. Comput. Syst. Sci., 18(2):155–193, 1979.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [10]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAroraLuMoSuSz98&quot;&gt;&lt;/a&gt;Sanjeev Arora, Carsten Lund, Rajeev Motwani, Madhu Sudan, and Mario Szegedy.      Proof  verification  and  the  hardness  of  approximation  problems.    J.&amp;nbsp;of  the  ACM,      45(3):501–555, May 1998.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [11]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/siamcomp/BackursI18&quot;&gt;&lt;/a&gt;Arturs Backurs and Piotr Indyk.  Edit distance cannot be computed in strongly      subquadratic time (unless SETH is false). SIAM J. Comput., 47(3):1087–1097, 2018.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [12]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XBatcher68&quot;&gt;&lt;/a&gt;Kenneth&amp;nbsp;E. Batcher.  Sorting networks and their applications.  In AFIPS Spring      Joint Computing Conference, volume&amp;nbsp;32, pages 307–314, 1968.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [13]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XBeameCH86&quot;&gt;&lt;/a&gt;Paul  Beame,  Stephen&amp;nbsp;A.  Cook,  and  H.&amp;nbsp;James  Hoover.   Log  depth  circuits  for      division and related problems. SIAM J. Comput., 15(4):994–1003, 1986.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [14]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XBSSV03&quot;&gt;&lt;/a&gt;Paul Beame, Michael Saks, Xiaodong Sun, and Erik Vee.   Time-space trade-off      lower  bounds  for  randomized  computation  of  decision  problems.   J.&amp;nbsp;of  the  ACM,      50(2):154–195, 2003.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [15]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XBen-OrC92&quot;&gt;&lt;/a&gt;Michael Ben-Or and Richard Cleve. Computing algebraic formulas using a constant      number of registers. SIAM J.&amp;nbsp;on Computing, 21(1):54–58, 1992.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [16]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/cc/BussW15&quot;&gt;&lt;/a&gt;Samuel&amp;nbsp;R.  Buss  and  Ryan  Williams.   Limits  on  alternation  trading  proofs  for      time-space lower bounds. Comput. Complex., 24(3):533–600, 2015.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [17]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:conf/stoc/ChenT19&quot;&gt;&lt;/a&gt;Lijie Chen and Roei Tell. Bootstrapping results for threshold circuits &amp;#8220;just beyond&amp;#8221;      known lower bounds.  In Moses Charikar and Edith Cohen, editors, Proceedings of the      51st Annual ACM SIGACT Symposium on Theory of Computing, STOC 2019, Phoenix,      AZ, USA, June 23-26, 2019, pages 34–41. ACM, 2019.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [18]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XCleve91&quot;&gt;&lt;/a&gt;Richard  Cleve.    Towards  optimal  simulations  of  formulas  by  bounded-width                                                                                                                                                                                          programs. Computational Complexity, 1:91–105, 1991.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [19]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XCook73&quot;&gt;&lt;/a&gt;Stephen&amp;nbsp;A. Cook. A hierarchy for nondeterministic time complexity. J.&amp;nbsp;of Computer      and System Sciences, 7(4):343–353, 1973.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [20]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/siamcomp/Csanky76&quot;&gt;&lt;/a&gt;L.&amp;nbsp;Csanky.     Fast  parallel  matrix  inversion  algorithms.     SIAM  J.  Comput.,      5(4):618–623, 1976.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [21]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/jcss/Fortnow00&quot;&gt;&lt;/a&gt;Lance  Fortnow.   Time-space  tradeoffs  for  satisfiability.   J.  Comput.  Syst.  Sci.,      60(2):337–353, 2000.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [22]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/jct/FraenkelL81&quot;&gt;&lt;/a&gt;Aviezri&amp;nbsp;S. Fraenkel and David Lichtenstein. Computing a perfect strategy for n x n      chess requires time exponential in n. J. Comb. Theory, Ser. A, 31(2):199–214, 1981.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [23]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XFredmanS89&quot;&gt;&lt;/a&gt;Michael&amp;nbsp;L. Fredman and Michael&amp;nbsp;E. Saks.  The cell probe complexity of dynamic      data structures. In ACM Symp.&amp;nbsp;on the Theory of Computing (STOC), pages 345–354,      1989.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [24]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XGajentaanO95&quot;&gt;&lt;/a&gt;Anka Gajentaan and Mark&amp;nbsp;H. Overmars. On a class of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7BO%7D%28n%5E2%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7BO%7D%28n%5E2%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7BO%7D%28n%5E2%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;{O}(n^2)&quot; class=&quot;latex&quot; /&gt; problems in computational      geometry. Comput. Geom., 5:165–185, 1995.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [25]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XGareyJ79&quot;&gt;&lt;/a&gt;M.&amp;nbsp;R. Garey and David&amp;nbsp;S. Johnson. Computers and Intractability: A Guide to the      Theory of NP-Completeness. W. H. Freeman, 1979.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [26]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XMR1549939&quot;&gt;&lt;/a&gt;K.&amp;nbsp;G�del.   �ber  formal  unentscheidbare  s�tze  der  Principia  Mathematica  und      verwandter systeme I. Monatsh. Math. Phys., 38, 1931.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [27]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XGoldreich08Complexity&quot;&gt;&lt;/a&gt;Oded Goldreich. Computational Complexity: A Conceptual Perspective. Cambridge      University Press, 2008.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [28]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XGreenlawHR-Limits&quot;&gt;&lt;/a&gt;Raymond  Greenlaw,  H.&amp;nbsp;James  Hoover,  and  Walter  Ruzzo.   Limits  to  Parallel      Computation: P-Completeness Theory. 02 2001.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [29]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;X10.4007/annals.2021.193.2.4&quot;&gt;&lt;/a&gt;David Harvey and Joris van&amp;nbsp;der Hoeven. Integer multiplication in time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=O%28n%5Cmathrm+%7Blog%7D%5C%2C+n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=O%28n%5Cmathrm+%7Blog%7D%5C%2C+n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=O%28n%5Cmathrm+%7Blog%7D%5C%2C+n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;O(n&amp;#92;mathrm {log}&amp;#92;, n)&quot; class=&quot;latex&quot; /&gt;. Annals of      Mathematics, 193(2):563 – 617, 2021.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [30]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/iandc/Hennie65&quot;&gt;&lt;/a&gt;F.&amp;nbsp;C. Hennie.  One-tape, off-line turing machine computations.  Information and      Control, 8(6):553–578, 1965.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [31]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XHennieS66&quot;&gt;&lt;/a&gt;Fred  Hennie  and  Richard  Stearns.    Two-tape  simulation  of  multitape  turing      machines. J.&amp;nbsp;of the ACM, 13:533–546, October 1966.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [32]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/jacm/HopcroftPV77&quot;&gt;&lt;/a&gt;John&amp;nbsp;E. Hopcroft, Wolfgang&amp;nbsp;J. Paul, and Leslie&amp;nbsp;G. Valiant. On time versus space.      J. ACM, 24(2):332–337, 1977.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [33]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XIP99&quot;&gt;&lt;/a&gt;Russell Impagliazzo and Ramamohan Paturi.   The complexity of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;k&quot; class=&quot;latex&quot; /&gt;-sat.   In IEEE      Conf.&amp;nbsp;on Computational Complexity (CCC), pages 237–, 1999.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [34]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XImpagliazzoPS97&quot;&gt;&lt;/a&gt;Russell Impagliazzo, Ramamohan Paturi, and Michael&amp;nbsp;E. Saks. Size-depth tradeoffs      for threshold circuits. SIAM J. Comput., 26(3):693–707, 1997.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [35]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XIPZ01&quot;&gt;&lt;/a&gt;Russell Impagliazzo, Ramamohan Paturi, and Francis Zane.  Which problems have      strongly exponential complexity? J. Computer &amp;amp; Systems Sciences, 63(4):512–530, Dec      2001.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [36]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XImW97&quot;&gt;&lt;/a&gt;Russell  Impagliazzo  and  Avi  Wigderson.    &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cmathit+%7BP%7D+%3D+%5Cmathit+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cmathit+%7BP%7D+%3D+%5Cmathit+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathit+%7BP%7D+%3D+%5Cmathit+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;mathit {P} = &amp;#92;mathit {BPP}&quot; class=&quot;latex&quot; /&gt;  if  &lt;img src=&quot;https://s0.wp.com/latex.php?latex=E&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=E&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=E&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;E&quot; class=&quot;latex&quot; /&gt;  requires  exponential  circuits:      Derandomizing the XOR lemma.  In 29th ACM Symp.&amp;nbsp;on the Theory of Computing      (STOC), pages 220–229. ACM, 1997.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [37]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XKarpLi82&quot;&gt;&lt;/a&gt;Richard&amp;nbsp;M.  Karp  and  Richard&amp;nbsp;J.  Lipton.    Turing  machines  that  take  advice.      L’Enseignement Math�matique. Revue Internationale. IIe S�rie, 28(3-4):191–209, 1982.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [38]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XKobayashi1985OnTS&quot;&gt;&lt;/a&gt;Kojiro Kobayashi.  On the structure of one-tape nondeterministic turing machine      time hierarchy. Theor. Comput. Sci., 40:175–193, 1985.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [39]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/siamcomp/LarsenWY20&quot;&gt;&lt;/a&gt;Kasper&amp;nbsp;Green Larsen, Omri Weinstein, and Huacheng Yu. Crossing the logarithmic      barrier for dynamic boolean data structure lower bounds.  SIAM J. Comput., 49(5),      2020.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [40]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XLevin73&quot;&gt;&lt;/a&gt;Leonid&amp;nbsp;A.  Levin.    Universal  sequential  search  problems.    Problemy  Peredachi      Informatsii, 9(3):115–116, 1973.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [41]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XLundFoKaNi92&quot;&gt;&lt;/a&gt;Carsten Lund, Lance Fortnow, Howard Karloff, and Noam Nisan. Algebraic methods      for interactive proof systems. J.&amp;nbsp;of the ACM, 39(4):859–868, October 1992.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [42]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XLupanov58&quot;&gt;&lt;/a&gt;O.&amp;nbsp;B. Lupanov. A method of circuit synthesis. Izv. VUZ Radiofiz., 1:120–140, 1958.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [43]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XMaS87&quot;&gt;&lt;/a&gt;Wolfgang Maass and Amir Schorr. Speed-up of Turing machines with one work tape      and a two-way input tape. SIAM J.&amp;nbsp;on Computing, 16(1):195–202, 1987.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [44]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XBarrington89&quot;&gt;&lt;/a&gt;David&amp;nbsp;A.  Mix  Barrington.   Bounded-width  polynomial-size  branching  programs      recognize  exactly  those  languages  in  NC&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5E1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5E1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5E1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;^1&quot; class=&quot;latex&quot; /&gt;.    J.&amp;nbsp;of  Computer  and  System  Sciences,      38(1):150–164, 1989.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [45]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XNaN93&quot;&gt;&lt;/a&gt;Joseph Naor and Moni Naor.  Small-bias probability spaces: efficient constructions      and applications. SIAM J.&amp;nbsp;on Computing, 22(4):838–856, 1993.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [46]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XNechiporuk66&quot;&gt;&lt;/a&gt;E.&amp;nbsp;I. Nechiporuk. A boolean function. Soviet Mathematics-Doklady, 169(4):765–766,      1966.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [47]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XNep70&quot;&gt;&lt;/a&gt;Valery&amp;nbsp;A. Nepomnjaščiĭ. Rudimentary predicates and Turing calculations. Soviet      Mathematics-Doklady, 11(6):1462–1465, 1970.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [48]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XViolaNEU-ram2sat-neu-author&quot;&gt;&lt;/a&gt;NEU. From RAM to SAT. Available at &lt;a href=&quot;http://www.ccs.neu.edu/home/viola/&quot; rel=&quot;nofollow&quot;&gt;http://www.ccs.neu.edu/home/viola/&lt;/a&gt;, 2012.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;                                                                                                                                                                                      [49]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/jcss/PapadimitriouY91&quot;&gt;&lt;/a&gt;Christos&amp;nbsp;H. Papadimitriou and Mihalis Yannakakis. Optimization, approximation,      and complexity classes. J. Comput. Syst. Sci., 43(3):425–440, 1991.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [50]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XPPST83&quot;&gt;&lt;/a&gt;Wolfgang&amp;nbsp;J. Paul, Nicholas Pippenger, Endre Szemer�di, and William&amp;nbsp;T. Trotter.      On determinism versus non-determinism and related problems (preliminary version). In      IEEE Symp.&amp;nbsp;on Foundations of Computer Science (FOCS), pages 429–438, 1983.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [51]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XPippengerF79&quot;&gt;&lt;/a&gt;Nicholas Pippenger and Michael&amp;nbsp;J. Fischer. Relations among complexity measures.      J.&amp;nbsp;of the ACM, 26(2):361–381, 1979.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [52]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XRaz87&quot;&gt;&lt;/a&gt;Alexander Razborov. Lower bounds on the dimension of schemes of bounded depth      in a complete basis containing the logical addition function.  Akademiya Nauk SSSR.      Matematicheskie Zametki, 41(4):598–607, 1987.  English translation in Mathematical      Notes of the Academy of Sci. of the USSR, 41(4):333-338, 1987.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [53]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XReingold08&quot;&gt;&lt;/a&gt;Omer Reingold. Undirected connectivity in log-space. J.&amp;nbsp;of the ACM, 55(4), 2008.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [54]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/siamcomp/Robson84&quot;&gt;&lt;/a&gt;J.&amp;nbsp;M.  Robson.    N  by  N  checkers  is  exptime  complete.    SIAM  J.  Comput.,      13(2):252–267, 1984.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [55]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:conf/coco/Santhanam01&quot;&gt;&lt;/a&gt;Rahul Santhanam.   On separators, segregators and time versus space.   In IEEE      Conf.&amp;nbsp;on Computational Complexity (CCC), pages 286–294, 2001.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [56]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XSAVITCH1970177&quot;&gt;&lt;/a&gt;Walter&amp;nbsp;J. Savitch.  Relationships between nondeterministic and deterministic tape      complexities. Journal of Computer and System Sciences, 4(2):177–192, 1970.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [57]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/siamcomp/Schonhage80&quot;&gt;&lt;/a&gt;Arnold Sch�nhage. Storage modification machines. SIAM J. Comput., 9(3):490–508,      1980.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [58]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XShamir92&quot;&gt;&lt;/a&gt;Adi Shamir. IP = PSPACE. J.&amp;nbsp;of the ACM, 39(4):869–877, October 1992.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [59]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XMR29860&quot;&gt;&lt;/a&gt;Claude&amp;nbsp;E. Shannon. The synthesis of two-terminal switching circuits. Bell System                                                                                                                                                                                          Tech. J., 28:59–98, 1949.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [60]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XSho90&quot;&gt;&lt;/a&gt;Victor Shoup. New algorithms for finding irreducible polynomials over finite fields.      Mathematics of Computation, 54(189):435–447, 1990.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [61]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XSiegel04&quot;&gt;&lt;/a&gt;Alan Siegel. On universal classes of extremely random constant-time hash functions.      SIAM J.&amp;nbsp;on Computing, 33(3):505–543, 2004.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [62]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XSip83b&quot;&gt;&lt;/a&gt;Michael Sipser. A complexity theoretic approach to randomness. In ACM Symp.&amp;nbsp;on      the Theory of Computing (STOC), pages 330–335, 1983.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [63]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XSmo87&quot;&gt;&lt;/a&gt;Roman Smolensky.  Algebraic methods in the theory of lower bounds for Boolean      circuit complexity.  In 19th ACM Symp.&amp;nbsp;on the Theory of Computing (STOC), pages      77–82. ACM, 1987.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [64]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XMR2145856&quot;&gt;&lt;/a&gt;Larry Stockmeyer and Albert&amp;nbsp;R. Meyer.  Cosmological lower bound on the circuit      complexity of a small problem in logic. J. ACM, 49(6):753–784, 2002.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [65]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XToda91&quot;&gt;&lt;/a&gt;Seinosuke Toda.   PP is as hard as the polynomial-time hierarchy.   SIAM J.&amp;nbsp;on      Computing, 20(5):865–877, 1991.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [66]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/x/Turing37&quot;&gt;&lt;/a&gt;Alan&amp;nbsp;M.   Turing.      On   computable   numbers,   with   an   application   to   the      entscheidungsproblem. Proc. London Math. Soc., s2-42(1):230–265, 1937.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [67]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XVal77&quot;&gt;&lt;/a&gt;Leslie&amp;nbsp;G.  Valiant.   Graph-theoretic  arguments  in  low-level  complexity.   In  6th      Symposium on Mathematical Foundations of Computer Science, volume&amp;nbsp;53 of Lecture      Notes in Computer Science, pages 162–176. Springer, 1977.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [68]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/tcs/ValiantV86&quot;&gt;&lt;/a&gt;Leslie&amp;nbsp;G. Valiant and Vijay&amp;nbsp;V. Vazirani. NP is as easy as detecting unique solutions.      Theor. Comput. Sci., 47(3):85–93, 1986.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [69]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XMelkebeek06&quot;&gt;&lt;/a&gt;Dieter  van  Melkebeek.   A  survey  of  lower  bounds  for  satisfiability  and  related                                                                                                                                                                                          problems. Foundations and Trends in Theoretical Computer Science, 2(3):197–303, 2006.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [70]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/tcs/MelkebeekR05&quot;&gt;&lt;/a&gt;Dieter van Melkebeek and Ran Raz.  A time lower bound for satisfiability.  Theor.      Comput. Sci., 348(2-3):311–320, 2005.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [71]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/tcs/Vinodchandran05&quot;&gt;&lt;/a&gt;N.&amp;nbsp;V. Vinodchandran.  A note on the circuit complexity of PP.  Theor. Comput.      Sci., 347(1-2):415–418, 2005.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [72]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XViolaBPvsE&quot;&gt;&lt;/a&gt;Emanuele Viola.  On approximate majority and probabilistic time.  Computational      Complexity, 18(3):337–375, 2009.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [73]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;Xviola-FTTCS09&quot;&gt;&lt;/a&gt;Emanuele Viola. On the power of small-depth computation. Foundations and Trends      in Theoretical Computer Science, 5(1):1–72, 2009.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [74]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XViola-xxx&quot;&gt;&lt;/a&gt;Emanuele Viola.  Reducing 3XOR to listing triangles, an exposition.  Available at      &lt;a href=&quot;http://www.ccs.neu.edu/home/viola/&quot; rel=&quot;nofollow&quot;&gt;http://www.ccs.neu.edu/home/viola/&lt;/a&gt;, 2011.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [75]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;Xviola-datastructurelb-implies-cclb&quot;&gt;&lt;/a&gt;Emanuele Viola.  Lower bounds for data structures with space close to maximum      imply  circuit  lower  bounds.    Theory  of  Computing,  15:1–9,  2019.    Available  at      &lt;a href=&quot;http://www.ccs.neu.edu/home/viola/&quot; rel=&quot;nofollow&quot;&gt;http://www.ccs.neu.edu/home/viola/&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [76]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;Xviola-tm&quot;&gt;&lt;/a&gt;Emanuele  Viola.   Pseudorandom  bits  and  lower  bounds  for  randomized  turing      machines. Theory of Computing, 18(10):1–12, 2022.&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&quot;authors&quot;&gt;By Manu&lt;/p&gt;
  </content>
    <author>
      <name>Emanuele Viola</name>
      <uri>https://emanueleviola.wordpress.com</uri>
    </author>
  </entry>


</feed>
