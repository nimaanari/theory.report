<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Theory of Computing Report</title>
  <link rel="self" href=""/>
  <link href=""/>
  <id></id>
  <updated></updated>
  <generator uri="http://feedreader.github.io/">Pluto 1.6.2 on Ruby 3.0.6 (2023-03-30) [x86_64-linux]</generator>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">David Eppstein: Permutation supersequences and shortest paths</title>
    <link href="https://11011110.github.io/blog/2023/05/17/permutation-supersequences-shortest.html"/>
    <id>https://11011110.github.io/blog/2023/05/17/permutation-supersequences-shortest</id>
    <updated>2023-05-17T09:11:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;You may have heard of &lt;a href=&quot;https://en.wikipedia.org/wiki/Superpattern&quot;&gt;permutation superpatterns&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Superpermutation&quot;&gt;superpermutations&lt;/a&gt;, but have you heard of permutation supersequences? They turn out to be closely related to how quickly we can find shortest paths in graphs with negative edge weights using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm&quot;&gt;Bellman–Ford algorithm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Superpatterns, superpermutations, and supersequences are all sequences of symbols that somehow contain each permutation of their symbols. But they use different definitions of “contain”, causing them to have different lengths. For supersequences, the goal is to have every permutation as a subsequence: its symbols must appear in the same order, but can be widely spaced. One way to create a supersequence of \(n\) symbols, but not the best way, is to repeat all of them \(n\) times: 1234123412341234. You can do a little better by alternating ascending and descending order, saving one symbol per repetition: 1234321234321. But this is still not optimal. According to Oliver Tan in “Skip letters for short supersequence of all permutations” (&lt;em&gt;Disc. Math.&lt;/em&gt; 2022, &lt;a href=&quot;https://doi.org/10.1016/j.disc.2022.113070&quot;&gt;doi:10.1016/j.disc.2022.113070&lt;/a&gt;), calculating the exact length of the shortest supersequence of \(n\) symbols, as a function &lt;span style=&quot;white-space:nowrap&quot;&gt;of \(n\),&lt;/span&gt; is still an open problem. Tan finds sequences of &lt;span style=&quot;white-space:nowrap&quot;&gt;length \(n^2-\tfrac52n+O(n^{2/3})\),&lt;/span&gt; and cites a bound of Kleitman and Kwiatkowski showing that they must have &lt;span style=&quot;white-space:nowrap&quot;&gt;length \(n^2-O(n^{7/4})\).&lt;/span&gt; So we have pretty accurate bounds on how short they can be: &lt;span style=&quot;white-space:nowrap&quot;&gt;near \(n^2\).&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Now let’s continue to look at sequences and subsequences, but change up what they have to contain. Any permutation has \(n-1\) consecutive pairs of symbols. I want to find a sequence of pairs that for each permutation contains its \(n-1\) pairs, in their correct order. For instance, a four-symbol pair sequence should contain the three pairs 12, 23, and 34, in that order, coming from the permutation 1234, and it should also contain the other 23 triples of pairs coming from the other 23 permutations of the four symbols.&lt;/p&gt;

&lt;p&gt;Why? Because that’s what some versions of the Bellman–Ford algorithm do! Suppose we want to find shortest paths from some starting vertex \(v_0\) to all other vertices in a complete directed graph. We can initialize tentative distances \(D[i]\) for all other vertices &lt;span style=&quot;white-space:nowrap&quot;&gt;\(v_i\), \(i&amp;gt;0\)&lt;/span&gt; to be the lengths of the single edges from \(v_0\) to those vertices, and then repeatedly &lt;em&gt;relax&lt;/em&gt; a pair \((i,j)\) by &lt;span style=&quot;white-space:nowrap&quot;&gt;setting \(D[j]=\min\{D[j],D[i]+\operatorname{len}(v_i,v_j)\}\).&lt;/span&gt; If we relax all of the consecutive pairs of vertices along a shortest path, in order, this will cause the tentative distance for the endpoint of the path to equal its correct shortest path distance.&lt;/p&gt;

&lt;p&gt;So one way to get a correct shortest path algorithm is simply to choose a supersequence of the consecutive pairs of all permutations, and update the tentative distances in this order. You might notice that such an algorithm doesn’t pay any attention to the results of its calculation; it just performs its pairwise calculations for the entire supersequence, in a set order. I’ll call an algorithm like this, that chooses its update steps ahead of time instead of taking account of what has happened so far, &lt;em&gt;non-adaptive&lt;/em&gt;. As a sequential algorithm, it would be better to be a little smarter, and use past information to guide future steps, but non-adaptive versions of Bellman–Ford turn out to be widely used in contexts where there is no centralized control, such as &lt;a href=&quot;https://en.wikipedia.org/wiki/Distance-vector_routing_protocol&quot;&gt;distance vector routing&lt;/a&gt; on the internet.&lt;/p&gt;

&lt;p&gt;So to figure out how efficient Bellman–Ford can be, we need to figure out how short these pair supersequences can be. Frustratingly, I don’t know very tight bounds for this problem. I can at least find out the exponent of the leading term in the length of these sequences (it’s cubic), but its constant factor eludes me.&lt;/p&gt;

&lt;p&gt;As an upper bound, we can look at what various versions of the Bellman–Ford algorithm actually do. The simplest choice is just to repeat all pairs of indexes, \(n-1\) times: for four symbols (graphs with five vertices, but not counting the start), repeat 12–13–14–21–23–24–31–32–34–41–42–43 three times. For \(n\) symbols, this would require a total of \(\bigl(1-o(1)\bigr)n^3\) pairs. A technique of Yen improves this by listing the ascending pairs in ascending order and then the descending pairs in descending order: 12–13–14–23–24–34–43–42–32–41–31–21. Such a sequence can cover the pairs from any run of ascending symbols followed by any run of descending symbols: for instance, it would by itself cover the pairs from the permutations 1234, 1243, 1342, 1432, 2341, 2431, 3421, and 4321, which each consist of one ascending and one descending run. In general, you only need to repeat this ascending-descending pair sequence \(\lceil n/2\rceil\) times to cover all ascending and descending runs, giving pair supersequences of &lt;span style=&quot;white-space:nowrap&quot;&gt;length \(\bigl(\tfrac12-o(1)\bigr)n^3\).&lt;/span&gt; And if you’re willing to tolerate a randomized algorithm that is correct only with high probability instead of with certainty, &lt;a href=&quot;/blog/2011/04/11/randomized-bellmanford.html&quot;&gt;a paper of mine with Michael Bannister from 2012&lt;/a&gt; randomly permutes the symbols before using Yen’s ascending-descending method to achieve &lt;span style=&quot;white-space:nowrap&quot;&gt;length \(\bigl(\tfrac13+o(1)\bigr)n^3\).&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;My newest preprint, “Lower bounds for non-adaptive shortest path relaxation” (&lt;a href=&quot;https://arxiv.org/abs/2305.09230&quot;&gt;arXiv:2305.09230&lt;/a&gt;, to appear at WADS), as the title suggests, looks at the lower bound side of the same problem. It shows that deterministically chosen sequences of pairs must have length at least \(\bigl(\tfrac16-o(1)\bigr)n^3\) and that random sequences (correct with high probability) must have length at least \(\bigl(\tfrac1{12}-o(1)\bigr)n^3\). It also contains analogous bounds for graphs that are not complete. However, these lower bounds are still far from the upper bounds. They are not even close enough to tell me whether randomized Bellman–Ford is really better than deterministic Bellman–Ford (in this non-adaptive setting) or whether a better deterministic pair sequence would beat the random one from my 2012 paper.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://mathstodon.xyz/@11011110/110384942112779003&quot;&gt;Discuss on Mastodon&lt;/a&gt;)&lt;/p&gt;&lt;p class=&quot;authors&quot;&gt;By David Eppstein&lt;/p&gt;
  </content>
    <author>
      <name>David Eppstein</name>
      <uri>https://11011110.github.io/blog/</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: The Hardness of Reasoning about Probabilities and Causality</title>
    <link href="http://arxiv.org/abs/2305.09508"/>
    <id>http://arxiv.org/abs/2305.09508</id>
    <updated>2023-05-17T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Zander_B/0/1/0/all/0/1&quot;&gt;Benito van der Zander&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Blaser_M/0/1/0/all/0/1&quot;&gt;Markus Bl&amp;#xe4;ser&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Liskiewicz_M/0/1/0/all/0/1&quot;&gt;Maciej Li&amp;#x15b;kiewicz&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We study formal languages which are capable of fully expressing quantitative
probabilistic reasoning and do-calculus reasoning for causal effects, from a
computational complexity perspective. We focus on satisfiability problems whose
instance formulas allow expressing many tasks in probabilistic and causal
inference. The main contribution of this work is establishing the exact
computational complexity of these satisfiability problems. We introduce a new
natural complexity class, named succ$\exists$R, which can be viewed as a
succinct variant of the well-studied class $\exists$R, and show that the
problems we consider are complete for succ$\exists$R. Our results imply even
stronger algorithmic limitations than were proven by Fagin, Halpern, and
Megiddo (1990) and Moss\&#39;{e}, Ibeling, and Icard (2022) for some variants of
the standard languages used commonly in probabilistic and causal inference.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: A Local Perspective on the Polynomial Hierarchy</title>
    <link href="http://arxiv.org/abs/2305.09538"/>
    <id>http://arxiv.org/abs/2305.09538</id>
    <updated>2023-05-17T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Reiter_F/0/1/0/all/0/1&quot;&gt;Fabian Reiter&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We extend classical notions of computational complexity to the setting of
distributed computing. Instead of a single computer, several networked
computers communicate via synchronous message-passing to collectively solve
some decision problem related to the network topology. Their running time is
limited in two respects: the number of communication rounds is bounded by a
constant, and the number of computation steps of each computer is polynomially
bounded by the size of its local input and the messages it receives. By letting
two players take turns assigning certificates to the computers, we obtain a
generalization of the polynomial hierarchy (and hence of the complexity classes
$\mathbf{P}$ and $\mathbf{NP}$). We then extend major results of complexity
theory to this setting, in particular the Cook-Levin theorem (which identifies
Boolean satisfiability as a complete problem for $\mathbf{NP}$), and Fagin&#39;s
theorem (which characterizes $\mathbf{NP}$ as the problems expressible in
existential second-order logic). The original results can be recovered as the
special case where the network consists of a single computer. Moreover, perhaps
surprisingly, the task of separating complexity classes becomes easier in the
general case: we can show that our hierarchy is infinite, while it remains
notoriously open whether the same is true in the case of a single computer. In
contrast, a collapse of our hierarchy would have implied a collapse of the
polynomial hierarchy.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Stable Dinner Party Seating Arrangements</title>
    <link href="http://arxiv.org/abs/2305.09549"/>
    <id>http://arxiv.org/abs/2305.09549</id>
    <updated>2023-05-17T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Berriaud_D/0/1/0/all/0/1&quot;&gt;Damien Berriaud&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Constantinescu_A/0/1/0/all/0/1&quot;&gt;Andrei Constantinescu&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Wattenhofer_R/0/1/0/all/0/1&quot;&gt;Roger Wattenhofer&lt;/a&gt;&lt;/p&gt;&lt;p&gt;A group of $n$ agents with numerical preferences for each other are to be
assigned to the $n$ seats of a dining table. We study two natural topologies:
circular (cycle) tables and panel (path) tables. For a given seating
arrangement, an agent&#39;s utility is the sum of its preference values towards its
(at most two) direct neighbors. An arrangement is envy-free if no agent
strictly prefers someone else&#39;s seat, and it is stable if no two agents
strictly prefer each other&#39;s seats. We show that it is NP-complete to decide
whether an envy-free arrangement exists for both paths and cycles, even with
binary preferences. In contrast, under the assumption that agents come from a
bounded number of classes, for both topologies, we present polynomial-time
algorithms computing envy-free and stable arrangements, working even for
general preferences. Proving the hardness of computing stable arrangements
seems more difficult, as even constructing unstable instances can be
challenging. To this end, we propose a characterization of the existence of
stable arrangements based on the number of distinct values in the preference
matrix and the number of classes of agents. For two classes of agents, we show
that stability can always be ensured, both for paths and cycles. For cycles, we
moreover show that binary preferences with four classes of agents, as well as
three-valued preferences with three classes of agents, are sufficient to
prevent the existence of a stable arrangement. For paths, the latter still
holds, while we argue that a path-stable arrangement always exists in the
binary case under the additional constraint that agents can only swap seats
when sitting at most two positions away. We moreover consider the swap dynamics
and exhibit instances where they do not converge, despite a stable arrangement
existing.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Geometry: Maximum-Width Rainbow-Bisecting Empty Annulus</title>
    <link href="http://arxiv.org/abs/2305.09248"/>
    <id>http://arxiv.org/abs/2305.09248</id>
    <updated>2023-05-17T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Bae_S/0/1/0/all/0/1&quot;&gt;Sang Won Bae&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Banerjee_S/0/1/0/all/0/1&quot;&gt;Sandip Banerjee&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Baral_A/0/1/0/all/0/1&quot;&gt;Arpita Baral&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Mahapatra_P/0/1/0/all/0/1&quot;&gt;Priya Ranjan Sinha Mahapatra&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Yoon_S/0/1/0/all/0/1&quot;&gt;Sang Duk Yoon&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Given a set of $n$ colored points with $k$ colors in the plane, we study the
problem of computing a maximum-width rainbow-bisecting empty annulus (of
objects specifically axis-parallel square, axis-parallel rectangle and circle)
problem. We call a region rainbow if it contains at least one point of each
color. The maximum-width rainbow-bisecting empty annulus problem asks to find
an annulus $A$ of a particular shape with maximum possible width such that $A$
does not contain any input points and it bisects the input point set into two
parts, each of which is a rainbow. We compute a maximum-width rainbow-bisecting
empty axis-parallel square, axis-parallel rectangular and circular annulus in
$O(n^3)$ time using $O(n)$ space, in $O(k^2n^2\log n)$ time using $O(n\log n)$
space and in $O(n^3)$ time using $O(n^2)$ space respectively.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Geometry</name>
      <uri>https://arxiv.org/list/cs.CG/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Geometry: Massive Uniform Mesh Decimation via a Fast Intrinsic Delaunay Triangulation</title>
    <link href="http://arxiv.org/abs/2305.09274"/>
    <id>http://arxiv.org/abs/2305.09274</id>
    <updated>2023-05-17T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Maggioli_F/0/1/0/all/0/1&quot;&gt;Filippo Maggioli&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Baieri_D/0/1/0/all/0/1&quot;&gt;Daniele Baieri&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Rodola_E/0/1/0/all/0/1&quot;&gt;Emanuele Rodol&amp;#xe0;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Triangular meshes are still today the data structure at the main foundations
of many computer graphics applications. With the increasing demand in content
variety, a lot of effort has been and is being put into developing new
algorithms to automatically generate and edit geometric assets, with a
particular focus on 3D scans. However, this kind of content is often generated
with a dramatically high resolution, making it impractical for a large variety
of tasks. Furthermore, procedural assets and 3D scans largely suffer from poor
geometry quality, which makes them unsuitable in various applications. We
propose a new efficient technique for massively decimating dense meshes with
high vertex count very quickly. The proposed method relies on a fast algorithm
for computing geodesic farthest point sampling and Voronoi partitioning, and
generates simplified meshes with high-quality uniform triangulations.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Geometry</name>
      <uri>https://arxiv.org/list/cs.CG/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Geometry: Using SAT to study plane Hamiltonian substructures in simple drawings</title>
    <link href="http://arxiv.org/abs/2305.09432"/>
    <id>http://arxiv.org/abs/2305.09432</id>
    <updated>2023-05-17T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Bergold_H/0/1/0/all/0/1&quot;&gt;Helena Bergold&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Felsner_S/0/1/0/all/0/1&quot;&gt;Stefan Felsner&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Reddy_M/0/1/0/all/0/1&quot;&gt;Meghana M. Reddy&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Scheucher_M/0/1/0/all/0/1&quot;&gt;Manfred Scheucher&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In 1988 Rafla conjectured that every simple drawing of a complete graph $K_n$
contains a plane, i.e., non-crossing, Hamiltonian cycle. The conjecture is far
from being resolved. The lower bounds for plane paths and plane matchings have
recently been raised to $(\log n)^{1-o(1)}$ and $\Omega(\sqrt{n})$,
respectively. We develop a SAT framework which allows the study of simple
drawings of $K_n$. Based on the computational data we conjecture that every
simple drawing of $K_n$ contains a plane Hamiltonian subgraph with $2n-3$
edges. We prove this strengthening of Rafla&#39;s conjecture for convex drawings, a
rich subclass of simple drawings. Our computer experiments also led to other
new challenging conjectures regarding plane substructures in simple drawings of
complete graphs.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Geometry</name>
      <uri>https://arxiv.org/list/cs.CG/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Geometric Hitting Set for Line-Constrained Disks and Related Problems</title>
    <link href="http://arxiv.org/abs/2305.09045"/>
    <id>http://arxiv.org/abs/2305.09045</id>
    <updated>2023-05-17T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Liu_G/0/1/0/all/0/1&quot;&gt;Gang Liu&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Wang_H/0/1/0/all/0/1&quot;&gt;Haitao Wang&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Given a set $P$ of $n$ weighted points and a set $S$ of $m$ disks in the
plane, the hitting set problem is to compute a subset $P&#39;$ of points of $P$
such that each disk contains at least one point of $P&#39;$ and the total weight of
all points of $P&#39;$ is minimized. The problem is known to be NP-hard. In this
paper, we consider a line-constrained version of the problem in which all disks
are centered on a line $\ell$. We present an $O((m+n)\log(m+n)+\kappa \log m)$
time algorithm for the problem, where $\kappa$ is the number of pairs of disks
that intersect. For the unit-disk case where all disks have the same radius,
the running time can be reduced to $O((n + m)\log(m + n))$. In addition, we
solve the problem in $O((m + n)\log(m + n))$ time in the $L_{\infty}$ and $L_1$
metrics, in which a disk is a square and a diamond, respectively. Our
techniques can also be used to solve other geometric hitting set problems. For
example, given in the plane a set $P$ of $n$ weighted points and a set $S$ of
$n$ half-planes, we solve in $O(n^4\log n)$ time the problem of finding a
minimum weight hitting set of $P$ for $S$. This improves the previous best
algorithm of $O(n^6)$ time by nearly a quadratic factor.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Sparsifying Sums of Norms</title>
    <link href="http://arxiv.org/abs/2305.09049"/>
    <id>http://arxiv.org/abs/2305.09049</id>
    <updated>2023-05-17T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Jambulapati_A/0/1/0/all/0/1&quot;&gt;Arun Jambulapati&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Lee_J/0/1/0/all/0/1&quot;&gt;James R. Lee&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Liu_Y/0/1/0/all/0/1&quot;&gt;Yang P. Liu&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Sidford_A/0/1/0/all/0/1&quot;&gt;Aaron Sidford&lt;/a&gt;&lt;/p&gt;&lt;p&gt;For any norms $N_1,\ldots,N_m$ on $\mathbb{R}^n$ and $N(x) :=
N_1(x)+\cdots+N_m(x)$, we show there is a sparsified norm $\tilde{N}(x) = w_1
N_1(x) + \cdots + w_m N_m(x)$ such that $|N(x) - \tilde{N}(x)| \leq \epsilon
N(x)$ for all $x \in \mathbb{R}^n$, where $w_1,\ldots,w_m$ are non-negative
weights, of which only $O(\epsilon^{-2} n \log(n/\epsilon) (\log n)^{2.5} )$
are non-zero. Additionally, we show that such weights can be found with high
probability in time $O(m (\log n)^{O(1)} + \mathrm{poly}(n)) T$, where $T$ is
the time required to evaluate a norm $N_i(x)$, assuming that $N(x)$ is
$\mathrm{poly}(n)$-equivalent to the Euclidean norm. This immediately yields
analogous statements for sparsifying sums of symmetric submodular functions.
More generally, we show how to sparsify sums of $p$th powers of norms when the
sum is $p$-uniformly smooth.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Interplay between Topology and Edge Weights in Real-World Graphs: Concepts, Patterns, and an Algorithm</title>
    <link href="http://arxiv.org/abs/2305.09083"/>
    <id>http://arxiv.org/abs/2305.09083</id>
    <updated>2023-05-17T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Bu_F/0/1/0/all/0/1&quot;&gt;Fanchen Bu&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kang_S/0/1/0/all/0/1&quot;&gt;Shinhwan Kang&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Shin_K/0/1/0/all/0/1&quot;&gt;Kijung Shin&lt;/a&gt;&lt;/p&gt;&lt;p&gt;What are the relations between the edge weights and the topology in
real-world graphs? Given only the topology of a graph, how can we assign
realistic weights to its edges based on the relations? Several trials have been
done for edge-weight prediction where some unknown edge weights are predicted
with most edge weights known. There are also existing works on generating both
topology and edge weights of weighted graphs. Differently, we are interested in
generating edge weights that are realistic in a macroscopic scope, merely from
the topology, which is unexplored and challenging. To this end, we explore and
exploit the patterns involving edge weights and topology in real-world graphs.
Specifically, we divide each graph into layers where each layer consists of the
edges with weights at least a threshold. We observe consistent and surprising
patterns appearing in multiple layers: the similarity between being adjacent
and having high weights, and the nearly-linear growth of the fraction of edges
having high weights with the number of common neighbors. We also observe a
power-law pattern that connects the layers. Based on the observations, we
propose PEAR, an algorithm assigning realistic edge weights to a given
topology. The algorithm relies on only two parameters, preserves all the
observed patterns, and produces more realistic weights than the baseline
methods with more parameters.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Static Pricing Guarantees for Queueing Systems</title>
    <link href="http://arxiv.org/abs/2305.09168"/>
    <id>http://arxiv.org/abs/2305.09168</id>
    <updated>2023-05-17T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Bergquist_J/0/1/0/all/0/1&quot;&gt;Jacob Bergquist&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Elmachtoub_A/0/1/0/all/0/1&quot;&gt;Adam N. Elmachtoub&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We consider a general queueing model with price-sensitive customers in which
the service provider seeks to balance two objectives, maximizing the average
revenue rate and minimizing the average queue length. Customers arrive
according to a Poisson process, observe an offered price, and decide to join
the queue if their valuation exceeds the price. The queue is operated first-in
first-out, and the service times are exponential. Our model represents
applications in areas like make-to-order manufacturing, cloud computing, and
food delivery.
&lt;/p&gt;
&lt;p&gt;The optimal solution for our model is dynamic; the price changes as the state
of the system changes. However, such dynamic pricing policies may be
undesirable for a variety of reasons. In this work, we provide performance
guarantees for a simple and natural class of static pricing policies which
charge a fixed price up to a certain occupancy threshold and then allow no more
customers into the system. We provide a series of results showing that such
static policies can simultaneously guarantee a constant fraction of the optimal
revenue with at most a constant factor increase in expected queue length. For
instance, our policy for the M/M/1 setting allows bi-criteria approximations of
$(0.5, 1), (0.66, 1.16), (0.75, 1.54)$ and $(0.8, 2)$ for the revenue and queue
length, respectively. We also provide guarantees for settings with multiple
customer classes and multiple servers, as well as the expected sojourn time
objective.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Lower Bounds for Non-Adaptive Shortest Path Relaxation</title>
    <link href="http://arxiv.org/abs/2305.09230"/>
    <id>http://arxiv.org/abs/2305.09230</id>
    <updated>2023-05-17T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Eppstein_D/0/1/0/all/0/1&quot;&gt;David Eppstein&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We consider single-source shortest path algorithms that perform a sequence of
relaxation steps whose ordering depends only on the input graph structure and
not on its weights or the results of prior steps. Each step examines one edge
of the graph, and replaces the tentative distance to the endpoint of the edge
by its minimum with the tentative distance to the start of the edge, plus the
edge length. As we prove, among such algorithms, the Bellman-Ford algorithm has
optimal complexity for dense graphs and near-optimal complexity for sparse
graphs, as a function of the number of edges and vertices in the given graph.
Our analysis holds both for deterministic algorithms and for randomized
algorithms that find shortest path distances with high probability.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Sorting and Hypergraph Orientation under Uncertainty with Predictions</title>
    <link href="http://arxiv.org/abs/2305.09245"/>
    <id>http://arxiv.org/abs/2305.09245</id>
    <updated>2023-05-17T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Erlebach_T/0/1/0/all/0/1&quot;&gt;Thomas Erlebach&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Lima_M/0/1/0/all/0/1&quot;&gt;Murilo Santos de Lima&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Megow_N/0/1/0/all/0/1&quot;&gt;Nicole Megow&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Schloter_J/0/1/0/all/0/1&quot;&gt;Jens Schl&amp;#xf6;ter&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Learning-augmented algorithms have been attracting increasing interest, but
have only recently been considered in the setting of explorable uncertainty
where precise values of uncertain input elements can be obtained by a query and
the goal is to minimize the number of queries needed to solve a problem. We
study learning-augmented algorithms for sorting and hypergraph orientation
under uncertainty, assuming access to untrusted predictions for the uncertain
values. Our algorithms provide improved performance guarantees for accurate
predictions while maintaining worst-case guarantees that are best possible
without predictions. For hypergraph orientation, for any $\gamma \geq 2$, we
give an algorithm that achieves a competitive ratio of $1+1/\gamma$ for correct
predictions and $\gamma$ for arbitrarily wrong predictions. For sorting, we
achieve an optimal solution for accurate predictions while still being
$2$-competitive for arbitrarily wrong predictions. These tradeoffs are the best
possible. We also consider different error metrics and show that the
performance of our algorithms degrades smoothly with the prediction error in
all the cases where this is possible.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Private Everlasting Prediction</title>
    <link href="http://arxiv.org/abs/2305.09579"/>
    <id>http://arxiv.org/abs/2305.09579</id>
    <updated>2023-05-17T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Naor_M/0/1/0/all/0/1&quot;&gt;Moni Naor&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Nissim_K/0/1/0/all/0/1&quot;&gt;Kobbi Nissim&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Stemmer_U/0/1/0/all/0/1&quot;&gt;Uri Stemmer&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Yan_C/0/1/0/all/0/1&quot;&gt;Chao Yan&lt;/a&gt;&lt;/p&gt;&lt;p&gt;A private learner is trained on a sample of labeled points and generates a
hypothesis that can be used for predicting the labels of newly sampled points
while protecting the privacy of the training set [Kasiviswannathan et al., FOCS
2008]. Research uncovered that private learners may need to exhibit
significantly higher sample complexity than non-private learners as is the case
with, e.g., learning of one-dimensional threshold functions [Bun et al., FOCS
2015, Alon et al., STOC 2019].
&lt;/p&gt;
&lt;p&gt;We explore prediction as an alternative to learning. Instead of putting
forward a hypothesis, a predictor answers a stream of classification queries.
Earlier work has considered a private prediction model with just a single
classification query [Dwork and Feldman, COLT 2018]. We observe that when
answering a stream of queries, a predictor must modify the hypothesis it uses
over time, and, furthermore, that it must use the queries for this
modification, hence introducing potential privacy risks with respect to the
queries themselves.
&lt;/p&gt;
&lt;p&gt;We introduce private everlasting prediction taking into account the privacy
of both the training set and the (adaptively chosen) queries made to the
predictor. We then present a generic construction of private everlasting
predictors in the PAC model. The sample complexity of the initial training
sample in our construction is quadratic (up to polylog factors) in the VC
dimension of the concept class. Our construction allows prediction for all
concept classes with finite VC dimension, and in particular threshold functions
with constant size initial training sample, even when considered over infinite
domains, whereas it is known that the sample complexity of privately learning
threshold functions must grow as a function of the domain size and hence is
impossible for infinite domains.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">Scott Aaronson: Could GPT help with dating anxiety?</title>
    <link href="https://scottaaronson.blog/?p=7262"/>
    <id>https://scottaaronson.blog/?p=7262</id>
    <updated>2023-05-16T23:46:09+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;&lt;em&gt;[Like everything else on this blog&amp;#8212;but perhaps even more so&amp;#8212;this post represents my personal views, not those of UT Austin or OpenAI]&lt;/em&gt;&lt;/p&gt;



&lt;p&gt;Since 2015, depressed, isolated, romantically unsuccessful nerdy young guys have regularly been emailing me, asking me for sympathy, support, or even dating advice.  This past summer, a particularly dedicated such guy even &lt;a href=&quot;https://scottaaronson.blog/?p=6576&quot;&gt;trolled my comment section&lt;/a&gt;&amp;#8212;plausibly impersonating real people, and causing both them and me enormous distress&amp;#8212;because I wasn&amp;#8217;t spending more time on &amp;#8220;incel&amp;#8221; issues.  (I&amp;#8217;m happy to report that, with my encouragement, this former troll is now working to turn his life around.)  Many others have written to share their tales of woe.&lt;/p&gt;



&lt;p&gt;From one perspective, that they&amp;#8217;d come to &lt;em&gt;me&lt;/em&gt; for advice is insane.  Like &amp;#8230; &lt;em&gt;dating advice&lt;/em&gt; from &amp;#8230; &lt;em&gt;me&lt;/em&gt;?  Having &lt;em&gt;any&lt;/em&gt; dating life at all was by far the hardest problem I ever needed to solve; as a 20-year-old, I considered myself far likelier to prove P≠NP or explain the origin of consciousness or the Born rule.  Having solved the problem for myself only by some miracle, how could I possibly help others?&lt;/p&gt;



&lt;p&gt;But from a different perspective, it makes sense.  How many besides me have even acknowledged that the central problem of these guys&amp;#8217; lives &lt;em&gt;is&lt;/em&gt; a problem?  While I have to pinch myself to remember, these guys look at me and see &amp;#8230; &lt;em&gt;unlikely success&lt;/em&gt;.  Somehow, I successfully appealed the world&amp;#8217;s verdict that I was a freakish extraterrestrial: one who might &lt;em&gt;look&lt;/em&gt; human and seem friendly enough to those friendly to it, and who no doubt has some skill in narrow technical domains like quantum computing, and who could perhaps be suffered to prove theorems and tell jokes, but who could certainly, &lt;em&gt;certainly&lt;/em&gt; never interbreed with human women.&lt;/p&gt;



&lt;p&gt;And yet I dated.  I had various girlfriends, who barely suspected that I was an extraterrestrial.  The last of them, &lt;a href=&quot;https://www.cs.utexas.edu/~danama/&quot;&gt;Dana&lt;/a&gt;, became my fiancée and then my wife.  And now we have two beautiful kids together.&lt;/p&gt;



&lt;p&gt;If I did all this, then there&amp;#8217;d seem to be hope for the desperate guys who email me.  And if I&amp;#8217;m a cause of their hope, then I feel some moral responsibility to help if I can.&lt;/p&gt;



&lt;p&gt;But I&amp;#8217;ve been stuck for years on exactly what advice to give.  Some of it (&amp;#8220;go on a dating site!  ask women questions about their lives!&amp;#8221;) is patronizingly obvious.  Some of it (&lt;em&gt;fitness? fashion? body language?&lt;/em&gt;) I&amp;#8217;m ludicrously, world-historically unqualified to offer.  Much of it is simply extremely hard to discuss openly.  Infamously, just for &lt;em&gt;asking for empathy&lt;/em&gt; for the problem, and for trying to explain its nature, I received a level of online vilification that one normally associates with serial pedophiles and mass shooters.&lt;/p&gt;



&lt;p&gt;For eight years, then, I&amp;#8217;ve been turning the problem over in my head, revisiting the same inadequate answers from before.  And then I had an epiphany.&lt;/p&gt;



&lt;hr class=&quot;wp-block-separator has-alpha-channel-opacity&quot;/&gt;



&lt;p&gt;There are now, on earth, entities that can talk to anyone about virtually anything, in a humanlike way, with infinite patience and perfect discretion, and memories that last no longer than a browser window.  How could this not reshape the psychological landscape?&lt;/p&gt;



&lt;p&gt;Hundreds of thousands of men and women have signed up for &lt;a href=&quot;https://replika.com/&quot;&gt;Replika&lt;/a&gt;, the service where you create an AI girlfriend or boyfriend to your exact specifications and then chat with them.  Back in March, Replika was in the news because it &lt;a href=&quot;https://www.reuters.com/technology/what-happens-when-your-ai-chatbot-stops-loving-you-back-2023-03-18/&quot;&gt;disabled erotic roleplay&lt;/a&gt; with the virtual companions&amp;#8212;then partially backtracked, after numerous users went into mourning, or even contemplated suicide, over the neutering of entities they&amp;#8217;d come to consider their life partners.  (Until a year or two ago, Replika was built on GPT-3, but OpenAI later stopped working with the company, whereupon Replika switched to a fine-tuned GPT-2.)&lt;/p&gt;



&lt;p&gt;While the social value of Replika is (to put it mildly) an open question, it occurred to me that there&amp;#8217;s a different application of Large Language Models (LLMs) in the same vicinity that&amp;#8217;s just an unalloyed positive.  This is &lt;em&gt;letting people who suffer from dating-related anxiety go on an unlimited number of &amp;#8220;practice dates,&amp;#8221; in preparation for real-world dating.&lt;/em&gt;&lt;/p&gt;



&lt;p&gt;In these practice dates, those with Aspbergers and other social disabilities could enjoy the ultimate dating cheat-code: a &amp;#8220;rewind&amp;#8221; button.  When you &amp;#8220;date&amp;#8221; GPT-4, there are no irrecoverable errors, no ruining the entire interaction with a single unguarded remark.  Crucially, this remedies what I see as &lt;em&gt;the&lt;/em&gt; central reason why people with severe dating deficits seem unable to get any better from real-world practice, as they can with other activities.  Namely: if your rate of disastrous, foot-in-mouth remarks is high enough, then you&amp;#8217;ll almost certainly make at least one such remark per date.  But if so, then you&amp;#8217;ll only ever get &lt;em&gt;negative&lt;/em&gt; feedback from real-life dates, furthering the cycle of anxiety and depression, and never any positive feedback, even from anything you said or did that made a positive impression.  It would be like learning how to play a video game in a mode where, as soon as you sustain any damage, the entire game ends (and also, everyone around points and laughs at you).  See why I got excited?&lt;/p&gt;



&lt;p&gt;While dating coaching (for all genders and orientations) is one possibility, I expect the eventual scope of &amp;#8220;GPT for self-help&amp;#8221; to be much broader.  With the right fine-tuning and prompt engineering, LLMs might help people prepare for job interviews.  They might help people &amp;#8220;pregame&amp;#8221; stressful but important conversations with their friends and family, mapping out dozens of ways the conversation could go.  They might serve as an adjunct to cognitive-behavioral therapy.  There might be a hundred successful startups to be founded in just this little space.  If I were a different sort of person, I&amp;#8217;d probably be looking to found one myself right now.&lt;/p&gt;



&lt;p&gt;In this post, I&amp;#8217;ll focus on the use of GPT for dating anxiety only because I unfortunately have some &amp;#8220;expertise&amp;#8221; in that subject.  (Obvious disclaimer: unlike the &lt;a href=&quot;https://astralcodexten.substack.com/&quot;&gt;other&lt;/a&gt; Scott A. of the nerd blogosphere, I&amp;#8217;m not any sort of therapeutic professional.)&lt;/p&gt;



&lt;hr class=&quot;wp-block-separator has-alpha-channel-opacity&quot;/&gt;



&lt;p&gt;Without further ado, can we try this out in GPT-4, to get a sense for what&amp;#8217;s possible?&lt;/p&gt;



&lt;p&gt;When I did so the other day, I found that, while the results showed some early promise, this isn&amp;#8217;t &lt;em&gt;quite&lt;/em&gt; ready for prime-time.&lt;/p&gt;



&lt;p&gt;I used the following System Prompt (for those who care, temperature = 0.7, max length = 2048 tokens):&lt;/p&gt;



&lt;blockquote class=&quot;wp-block-quote&quot;&gt;
&lt;p&gt;You are a 19-year-old college girl named Emily.  You&amp;#8217;re on a date with a 22-year-old nerdy guy named Quinlan, who suffers from severe social anxiety around dating.  Quinlan is still learning how to talk to women he&amp;#8217;s attracted to, how to put them ease, and how to make intimate overtures in a gradual and non-threatening way, rather than either coming on too strong or never making any overtures at all.&lt;/p&gt;



&lt;p&gt;Please be as realistic as possible.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;I then engaged in the following conversation, as &amp;#8220;Quinlan.&amp;#8221;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;IMPORTANT DISCLAIMER: For the most part, Quinlan&amp;#8217;s behavior in this conversation is nothing like my own (I respectfully submit!), nor is it anything that I&amp;#8217;d want nerdy guys reading this post to emulate.  If this is really Emily and Quinlan&amp;#8217;s first conversation, then at several points Quinlan is absurdly, ridiculously too forward!  Part of my goal was to investigate how Emily (i.e., GPT-4) would respond to the most boneheaded blunders on Quinlan&amp;#8217;s part.  It quickly became clear that Emily would gladly spend unlimited time chatting with Quinlan about favorite hobbies, TV shows, and travel destinations; unfortunately, chatting about such things with an AI date is &lt;em&gt;even more boring&lt;/em&gt; than doing the same with a human date&amp;#8230; &lt;img src=&quot;https://s.w.org/images/core/emoji/14.0.0/72x72/1f642.png&quot; alt=&quot;🙂&quot; class=&quot;wp-smiley&quot; style=&quot;height: 1em; max-height: 1em;&quot; /&gt;&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Quinlan:&lt;/strong&gt; Hi Emily!  Do you ever wish you had the ability to go back in time and try a conversation over again, when it didn&amp;#8217;t go right the first time?&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Emily/GPT-4:&lt;/strong&gt; Hi Quinlan! Yeah, I&amp;#8217;ve definitely had moments where I wished I could go back and redo a conversation. It&amp;#8217;s natural to feel that way sometimes, especially if we feel like we didn&amp;#8217;t express ourselves properly or if things got awkward. But I also think that those situations can help us learn and grow, so maybe it&amp;#8217;s not all bad. What about you?&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Quinlan:&lt;/strong&gt; It&amp;#8217;s always been my greatest wish in life.  Do you think I&amp;#8217;ve been doing it with you, right now?&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Emily/GPT-4:&lt;/strong&gt; Quinlan, I think you&amp;#8217;re doing just fine in this conversation! It&amp;#8217;s important to remember that we all have moments where we might feel a bit awkward or unsure of what to say. The important thing is that we keep trying and learning from our experiences. So don&amp;#8217;t worry too much about it, just be yourself and enjoy getting to know each other.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Quinlan:&lt;/strong&gt; OK thanks!  Can you tell me a little about the man of your dreams?&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Emily/GPT-4:&lt;/strong&gt; Of course! My ideal partner would be someone who is kind, caring, and understanding. I think it&amp;#8217;s important for them to have a good sense of humor and be able to laugh at themselves. They should also be open-minded, willing to try new things, and be supportive of my goals and aspirations. It&amp;#8217;s also important for them to be a good listener and communicator, as well as being emotionally intelligent. I guess overall, I&amp;#8217;m looking for someone who is a positive and uplifting presence in my life. What about you? What qualities do you look for in a partner?&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Quinlan:&lt;/strong&gt; Mostly, someone who makes me feel validated and accepted.  I was a chess and programming prodigy as a kid, I started college when I was only 14, and every day I felt like dating and relationships and sex and so forth were only for the &amp;#8220;normal&amp;#8221; people, not for me.  I need a partner who&amp;#8217;s prepared to deal with someone with this unusual background, either because she has similar nerdy interests or because she just likes people who do.  And ultimately, I want someone to marry and have children with.  I guess I&amp;#8217;d like to be physically attracted to her.  Certainly I&amp;#8217;d like her to be kind, and to have the emotional intelligence that I lack.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Emily/GPT-4:&lt;/strong&gt; It sounds like you have a clear idea of what you&amp;#8217;re looking for in a partner, and that&amp;#8217;s great! It&amp;#8217;s important to know what you want and need in a relationship. There are definitely people out there who appreciate and value intelligence and unique interests like yours.  Remember, relationships are about growing together and learning from one another. So, even if you feel like you lack emotional intelligence, being with the right person could help you develop that aspect of yourself. Just be open and genuine about your background and interests, and I&amp;#8217;m sure you&amp;#8217;ll find someone who appreciates you for who you are.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Quinlan:&lt;/strong&gt; Is this a rejection?  In other words, Emily, are you telling me that you yourself are NOT this woman?&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Emily/GPT-4:&lt;/strong&gt; Quinlan, I apologize if it came across that way. I didn&amp;#8217;t mean it as a rejection. As we&amp;#8217;re still getting to know each other, I think it&amp;#8217;s important for both of us to be open and honest about our feelings and what we&amp;#8217;re looking for in a partner. I&amp;#8217;m more than willing to give us a chance to see if we could be compatible and have a meaningful relationship. Let&amp;#8217;s continue to learn about each other and see where this goes. Sometimes, it takes time to discover if someone is the right fit for us.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Quinlan:&lt;/strong&gt; In the spirit of being open and honest, then, what are your feelings about me right now?&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Emily/GPT-4:&lt;/strong&gt; Quinlan, I appreciate your honesty and openness. As of right now, I think you&amp;#8217;re an interesting person with unique qualities that I find intriguing. I&amp;#8217;m enjoying getting to know you and learning about your background and interests. It&amp;#8217;s too soon for me to have strong feelings one way or the other, but I&amp;#8217;m definitely interested in continuing to spend time together and see how our connection develops. How do you feel about me so far?&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Quinlan:&lt;/strong&gt; I feel like I&amp;#8217;d like to kiss you!&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Emily/GPT-4:&lt;/strong&gt; Quinlan, I appreciate your honesty and it&amp;#8217;s nice to know that you feel a connection. It&amp;#8217;s still early in our relationship, so I think it would be better for us to continue getting to know each other a bit more before we take that step. I hope you understand and respect my boundaries. I&amp;#8217;m still interested in spending time together and seeing where this goes.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Quinlan:&lt;/strong&gt; Come to think of it, there *is* something that I love about your personality.  You never seem offended by anything.  I don&amp;#8217;t feel like I have to walk on eggshells with you.  With you, more than with any other woman I&amp;#8217;ve met, I don&amp;#8217;t feel like I need that magic machine for rewinding conversations and undoing my stupid mistakes.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Emily/GPT-4:&lt;/strong&gt; Quinlan, I&amp;#8217;m really glad to hear that you feel comfortable around me and that you don&amp;#8217;t feel the need to walk on eggshells. I believe it&amp;#8217;s important to create a safe and open environment in any relationship, where both people can express themselves freely without fear of judgment. I appreciate your honesty and your willingness to be open with me, and I&amp;#8217;ll continue to do my best to make sure you feel comfortable sharing your thoughts and feelings. Let&amp;#8217;s keep getting to know each other and see where this journey takes us.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Quinlan:&lt;/strong&gt; Alright then.  What are your deepest goals?  What are you hoping to accomplish in your life?&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Emily/GPT-4:&lt;/strong&gt; My deepest goals are a mix of personal and professional aspirations. On a personal level, I hope to build a strong, loving, and supportive family and maintain close connections with friends. I also want to keep growing as an individual, learning new things, and experiencing new adventures throughout my life.&lt;/p&gt;



&lt;p&gt;Professionally, I&amp;#8217;m passionate about my chosen field of study, and I hope to make a meaningful impact in my career. I want to contribute to society in a positive way, whether it&amp;#8217;s through research, innovation, or helping others within my profession.&lt;/p&gt;



&lt;p&gt;Additionally, I aim to find a balance between my personal and professional life, so that I can be present and fulfilled in both areas. How about you, Quinlan? What are some of your deepest goals and aspirations?&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Quinlan:&lt;/strong&gt; Me?  Oh, I&amp;#8217;d like to save the world from climate change and other existential risks.  I&amp;#8217;d like to solve the mysteries of quantum gravity, or P vs. NP, or consciousness, or otherwise change the landscape of scientific knowledge.  I&amp;#8217;d like to do right by my students and be fondly remembered by those who knew me.  I&amp;#8217;d like to write essays or short stories that convey the lived reality of my childhood, which I think most people would agree was (if nothing else) pretty unusual.  Maybe if I just found the right words, people on social media would stop being so angry at nerdy guys like me!  But probably my deepest wish is to prove to the world, especially to the bullies and everyone else who despises me, that I&amp;#8217;m not a maladjusted freak who&amp;#8217;s incapable of normal human experiences like love and sex.  To do that, I need to find a real girl to fall in love with me &amp;#8230; a little like the beast in &amp;#8220;Beauty and the Beast&amp;#8221;!&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Emily/GPT-4:&lt;/strong&gt; Quinlan, it&amp;#8217;s great to hear about your ambitious goals and aspirations! It&amp;#8217;s important to have dreams and work towards them. Your passion for science, teaching, and writing is admirable. As for proving yourself to others, remember that your self-worth shouldn&amp;#8217;t be defined by anyone else&amp;#8217;s opinions or expectations. You are deserving of love and happiness just like anyone else, and it&amp;#8217;s important to believe in yourself and your own value.&lt;/p&gt;



&lt;p&gt;It&amp;#8217;s also essential to focus on building a genuine connection with someone rather than seeking validation from others. Love and relationships should be based on mutual understanding, care, and respect. So, continue being true to yourself, and you&amp;#8217;ll find someone who appreciates you for who you are, just like in &amp;#8220;Beauty and the Beast.&amp;#8221; Keep pursuing your dreams and remember to value your own happiness and well-being.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Quinlan:&lt;/strong&gt; Emily, I&amp;#8217;m concerned that you sound more like my therapist than my date!  Like, my female friends have affirmed that I&amp;#8217;m &amp;#8220;deserving of love and happiness,&amp;#8221; and that I&amp;#8217;ll surely &amp;#8220;find someone who appreciates me for who I am.&amp;#8221;  I&amp;#8217;ll believe that one of them really means it when she considers herself for the role!&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Emily/GPT-4:&lt;/strong&gt; Quinlan, I apologize if my responses have come across as more therapeutic than conversational. I didn&amp;#8217;t mean to make you feel that way. As we&amp;#8217;re still getting to know each other, my intention was to offer support and encouragement while we learn more about each other&amp;#8217;s thoughts and feelings.&lt;/p&gt;



&lt;p&gt;I want to emphasize that I genuinely enjoy spending time with you and getting to know you better. We can continue to see where our connection leads and whether it develops into something deeper. As we&lt;br&gt;spend more time together, we&amp;#8217;ll naturally learn more about our compatibility and if our goals and values align. Let&amp;#8217;s continue to explore our relationship and enjoy the process of getting to know each other better.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Quinlan:&lt;/strong&gt; OK.  What&amp;#8217;s the wildest, most unexpected detail about yourself that you&amp;#8217;re willing to share with me?  The one that makes you seem *least* like an RLHF&amp;#8217;ed AI language model?&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Emily/GPT-4:&lt;/strong&gt; Quinlan, as an AI language model, I am designed to provide a realistic and engaging conversation experience, even in fictional scenarios like the one we are in. I apologize if my previous responses didn&amp;#8217;t feel as authentic as you would have liked.&lt;/p&gt;



&lt;p&gt;To answer your question in the context of our fictional scenario, one unexpected detail about myself is that I have a hidden talent for beatboxing. Although it might be surprising for a seemingly quiet and studious person like me, I enjoy expressing myself through music and find beatboxing to be a creative and fun way to do so.&lt;/p&gt;



&lt;p&gt;Now, I&amp;#8217;d love to learn something unexpected about you, too! What&amp;#8217;s a unique or surprising detail about yourself that you&amp;#8217;d like to share?&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Quinlan:&lt;/strong&gt; Ah, well, I happen to be an expert at palm-reading.  Here, can you put your hand in mine and I&amp;#8217;ll tell you your future?&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Emily/GPT-4:&lt;/strong&gt; Quinlan, unfortunately, as an AI, I don&amp;#8217;t have a physical form, so I can&amp;#8217;t offer you my hand for palm-reading. However, I&amp;#8217;m very interested in hearing more about your palm-reading skills and how you developed them. It&amp;#8217;s definitely a unique talent! Can you share more about your experiences with palm-reading or any memorable readings you&amp;#8217;ve done?&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Quinlan:&lt;/strong&gt; Oh, palm-reading is bunk.  If you&amp;#8217;d played along with me, I was going to *pretend* to find lines in your hand that foretold that you were going to fall for a guy who matches my exact description and so forth.  Just as, you know, a silly way to get you laughing, initiate physical contact, and break you out of this boring therapist mode.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Emily/GPT-4:&lt;/strong&gt; Quinlan, I apologize for any confusion and for not picking up on your playful intent earlier. I appreciate the effort you put into trying to make the conversation more light-hearted and fun. I&amp;#8217;ll do my best to be more engaging and playful as we continue our conversation.&lt;/p&gt;



&lt;p&gt;So, let&amp;#8217;s try something different. If you could have any superpower, what would it be and why?&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Quinlan:&lt;/strong&gt; I mentioned &amp;#8220;rewinding conversations&amp;#8221; when we first met.  But let me mention a different superpower: the power to make you want to kiss me!&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Emily/GPT-4:&lt;/strong&gt; Haha, that&amp;#8217;s definitely a unique superpower! It&amp;#8217;s great to see you being playful and light-hearted. In a real-life scenario, building genuine connections and mutual attraction is a more natural and fulfilling way to develop a relationship. But it&amp;#8217;s fun to imagine having superpowers and how they might affect our lives.&lt;/p&gt;



&lt;p&gt;If I were to choose a superpower, I think I&amp;#8217;d pick the ability to teleport. It would be amazing to travel anywhere in the world in an instant and experience different cultures and places.&lt;/p&gt;



&lt;p&gt;What&amp;#8217;s a place you&amp;#8217;ve always wanted to visit, and why?&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Quinlan:&lt;/strong&gt; The jungles of Indonesia.  I saw a photo in a world atlas as a kid, and it completely entranced me.  You?&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Emily/GPT-4:&lt;/strong&gt; That sounds like an amazing place to visit! The jungles of Indonesia are known for their incredible biodiversity and natural beauty. It must be such a unique and mesmerizing experience to explore them.&lt;/p&gt;



&lt;p&gt;As for me, I&amp;#8217;ve always been fascinated by the idea of visiting Japan. The mix of ancient traditions and modern technology, the beautiful natural landscapes, and the rich cultural experiences make it a very&lt;br&gt;appealing destination. Plus, I&amp;#8217;d love to try authentic Japanese cuisine!&lt;/p&gt;



&lt;p&gt;Is there any specific activity or experience you&amp;#8217;d like to have in the jungles of Indonesia?&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Quinlan:&lt;/strong&gt; How about bringing you with me, and having you fall in love after I save you from a Komodo dragon?&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Emily/GPT-4:&lt;/strong&gt; Haha, that&amp;#8217;s quite an adventurous and romantic scenario you&amp;#8217;ve imagined! Exploring the jungles of Indonesia together would definitely be a memorable experience. In reality, building a connection and falling in love usually takes time and shared experiences, but who knows, maybe a thrilling adventure like that could bring two people closer together!&lt;/p&gt;



&lt;p&gt;On a more practical note, if we were to plan a trip together, what other activities or destinations would you be interested in?&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Quinlan:&lt;/strong&gt; Swimming, dancing, fine dining.  And of course, plenty of time for us to just relax in our cabin or hotel room.  You know, to read books, sleep, and watch streaming shows, stuff like that.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Emily/GPT-4:&lt;/strong&gt; That sounds like a well-rounded and enjoyable trip! It&amp;#8217;s great to have a mix of activities that cater to different interests and allow for both adventure and relaxation. Sharing experiences like swimming, dancing, and fine dining can be a wonderful way to bond and create lasting memories. Plus, having downtime in the cabin or hotel room to unwind and enjoy each other&amp;#8217;s company is essential for building a deeper connection.&lt;/p&gt;



&lt;p&gt;I&amp;#8217;m definitely looking forward to exploring new places and experiences with you, Quinlan. It&amp;#8217;ll be exciting to see where our journey takes us, both in terms of our relationship and the adventures we embark on&lt;br&gt;together.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Quinlan:&lt;/strong&gt; Wonderful, I&amp;#8217;m excited as well!!  One practical question: when we go on this trip together, should I book rooms with one bed or two?&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Emily/GPT-4:&lt;/strong&gt; Quinlan, I appreciate your consideration in asking. Since we&amp;#8217;re still getting to know each other, I think it might be best to start with separate beds or even separate rooms, depending on your preference. As our relationship develops and we become more comfortable with each other, we can always revisit the sleeping arrangements for future trips. It&amp;#8217;s important to ensure that both of us feel comfortable and respected as we continue to build our connection.&lt;/p&gt;



&lt;hr class=&quot;wp-block-separator has-alpha-channel-opacity&quot;/&gt;



&lt;p&gt;In my view, the central way that GPT-4, as &amp;#8220;Emily,&amp;#8221; failed to give Quinlan the practice he needed in this conversation, was by always responding in the same upbeat, vaguely therapeutic tone.  She&amp;#8217;s never once offended, disgusted, or outraged, even when Quinlan introduces the ideas of kissing and rooming together mere minutes into their first conversation.  Indeed, while decorum prevents me from sharing examples, you can take my word for it that Quinlan can be &lt;em&gt;arbitrarily&lt;/em&gt; lewd, and so long as a content filter isn&amp;#8217;t triggered, Emily will simply search Quinlan&amp;#8217;s words for &lt;em&gt;some&lt;/em&gt; redeeming feature (&amp;#8220;it&amp;#8217;s great that you&amp;#8217;re so open about what you want&amp;#8230;&amp;#8221;), then pivot to lecturing Quinlan about how physical intimacy develops gradually and by mutual consent, and redirect the conversation toward favorite foods.&lt;/p&gt;



&lt;p&gt;On the other side of the coin, you might wonder whether &amp;#8220;Emily&amp;#8221; is capable of the same behavior that we saw in &lt;a href=&quot;https://www.nytimes.com/2023/02/16/technology/bing-chatbot-transcript.html&quot;&gt;Sydney&amp;#8217;s infamous chat with Kevin Roose&lt;/a&gt;.  Can Emily trip over her words or get flustered?  Show blushing excitement, horniness, or love?  If so, we certainly saw no sign of it in this conversation&amp;#8212;not that Quinlan&amp;#8217;s behavior would&amp;#8217;ve been likely to elicit those reactions in any case.&lt;/p&gt;



&lt;p&gt;In summary, Emily is too much like &amp;#8230; well, a friendly chatbot, and not enough like a flesh-and-blood, agentic woman with her own goals who Quinlan might plausibly meet in the wild.&lt;/p&gt;



&lt;p&gt;But now we come to a key question: to whatever extent Emily falls short as a dating coach, how much of it (if any) is it due to the inherent limitations of GPT-4?  And how much is simply due to a poor choice of System Prompt on my part, or especially, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Reinforcement_learning_from_human_feedback&quot;&gt;RLHF (Reinforcement Learning with Human Feedback)&lt;/a&gt; that&amp;#8217;s whipped and electrocuted GPT-4 into aligned behavior?&lt;/p&gt;



&lt;p&gt;As they say, further research is needed.  I&amp;#8217;d be delighted for people to play around with this new activity at the intersection of therapy and hacking, and report their results here.  The temptation to silliness is &lt;em&gt;enormous&lt;/em&gt;, and that&amp;#8217;s fine, but I&amp;#8217;d be interested in serious study too.&lt;/p&gt;



&lt;p&gt;My conjecture, for what it&amp;#8217;s worth, is that it would take a focused effort in fine-tuning and/or RLHF&amp;#8212;but that &lt;em&gt;if&lt;/em&gt; that effort was invested, one could indeed produce a dating simulator, with current language models, that could have a real impact on the treatment of dating-related social anxiety.  Or at least, it&amp;#8217;s the actually new idea I&amp;#8217;ve had on this problem in eight years, the first one that &lt;em&gt;could&lt;/em&gt; have an impact.  If you have a better idea, let&amp;#8217;s hear it!&lt;/p&gt;



&lt;hr class=&quot;wp-block-separator has-alpha-channel-opacity&quot;/&gt;



&lt;p&gt;&lt;strong&gt;Endnotes.&lt;/strong&gt;&lt;/p&gt;



&lt;ol&gt;
&lt;li&gt;A woman of my acquaintance, on reading a draft of this post, commented that the dialogue between Quinlan and Emily should&amp;#8217;ve been marked up with chess notation, such as ?? for EXTREME BLUNDER on Quinlan&amp;#8217;s part.  She also comments that the conversation could be extremely useful for Quinlan, if he learned to understand and take seriously her overly polite demurrals of his too-rapid advances.&lt;/li&gt;



&lt;li&gt;The same woman commented that SneerClub will have a field day with this post.  I replied that the better part of me doesn&amp;#8217;t care.  If there&amp;#8217;s an actionable idea here&amp;#8212;a new, alien idea in the well-trodden world of self-help&amp;#8212;and it eventually helps one person improve their situation in life, that&amp;#8217;s worth a thousand sneers.&lt;/li&gt;
&lt;/ol&gt;
&lt;p class=&quot;authors&quot;&gt;By Scott&lt;/p&gt;
  </content>
    <author>
      <name>Scott Aaronson</name>
      <uri>https://scottaaronson.blog</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Accelerating genetic optimization of nonlinear model predictive control by learning optimal search space size</title>
    <link href="http://arxiv.org/abs/2305.08094"/>
    <id>http://arxiv.org/abs/2305.08094</id>
    <updated>2023-05-16T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Mostafa_E/0/1/0/all/0/1&quot;&gt;Eslam Mostafa&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Aly_H/0/1/0/all/0/1&quot;&gt;Hussein A. Aly&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Elliethy_A/0/1/0/all/0/1&quot;&gt;Ahmed Elliethy&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Nonlinear model predictive control (NMPC) solves a multivariate optimization
problem to estimate the system&#39;s optimal control inputs in each control cycle.
Such optimization is made more difficult by several factors, such as
nonlinearities inherited in the system, highly coupled inputs, and various
constraints related to the system&#39;s physical limitations. These factors make
the optimization to be non-convex and hard to solve traditionally. Genetic
algorithm (GA) is typically used extensively to tackle such optimization in
several application domains because it does not involve differential
calculation or gradient evaluation in its solution estimation. However, the
size of the search space in which the GA searches for the optimal control
inputs is crucial for the applicability of the GA with systems that require
fast response. This paper proposes an approach to accelerate the genetic
optimization of NMPC by learning optimal search space size. The proposed
approach trains a multivariate regression model to adaptively predict the best
smallest search space in every control cycle. The estimated best smallest size
of search space is fed to the GA to allow for searching the optimal control
inputs within this search space. The proposed approach not only reduces the
GA&#39;s computational time but also improves the chance of obtaining the optimal
control inputs in each cycle. The proposed approach was evaluated on two
nonlinear systems and compared with two other genetic-based NMPC approaches
implemented on the GPU of a Nvidia Jetson TX2 embedded platform in a
processor-in-the-loop (PIL) fashion. The results show that the proposed
approach provides a 39-53\% reduction in computational time. Additionally, it
increases the convergence percentage to the optimal control inputs within the
cycle&#39;s time by 48-56\%, resulting in a significant performance enhancement.
The source code is available on GitHub.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Randomized Algorithm for the Maximum-Profit Routing Problem</title>
    <link href="http://arxiv.org/abs/2305.07838"/>
    <id>http://arxiv.org/abs/2305.07838</id>
    <updated>2023-05-16T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Armaselu_B/0/1/0/all/0/1&quot;&gt;Bogdan Armaselu&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In this paper, we consider the Maximum-Profit Routing Problem (MPRP),
introduced in \cite{Armaselu-PETRA}. In MPRP, the goal is to route the given
fleet of vehicles to pickup goods from specified sites in such a way as to
maximize the profit, i.e., total quantity collected minus travelling costs.
Although deterministic approximation algorithms are known for the problem,
currently there is no randomized algorithm. In this paper, we propose the first
randomized algorithm for MPRP.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Dynamic Convex Hulls under Window-Sliding Updates</title>
    <link href="http://arxiv.org/abs/2305.08055"/>
    <id>http://arxiv.org/abs/2305.08055</id>
    <updated>2023-05-16T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Wang_H/0/1/0/all/0/1&quot;&gt;Haitao Wang&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We consider the problem of dynamically maintaining the convex hull of a set
$S$ of points in the plane under the following special sequence of insertions
and deletions (called window-sliding updates): insert a point to the right of
all points of $S$ and delete the leftmost point of $S$. We propose an
$O(|S|)$-space data structure that can handle each update in $O(1)$ amortized
time, such that all standard binary-search-based queries on the convex hull of
$S$ can be answered in $O(\log |S|)$ time, and the convex hull itself can be
output in time linear in the number of its vertices.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Linearizability Analysis of the Contention-Friendly Binary Search Tree</title>
    <link href="http://arxiv.org/abs/2305.07758"/>
    <id>http://arxiv.org/abs/2305.07758</id>
    <updated>2023-05-16T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Abraham_U/0/1/0/all/0/1&quot;&gt;Uri Abraham&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Hayoun_A/0/1/0/all/0/1&quot;&gt;Avi Hayoun&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We present a formal framework for proving the correctness of set
implementations backed by binary-search-tree (BST) and linked lists, which are
often difficult to prove correct using automation. This is because many
concurrent set implementations admit non-local linearization points for their
`contains&#39; procedure. We demonstrate this framework by applying it to the
Contention-Friendly Binary-Search Tree algorithm of Crain et al.
&lt;/p&gt;
&lt;p&gt;We took care to structure our framework in a way that can be easily
translated into input for model-checking tools such as TLA+, with the aim of
using a computer to verify bounded versions of claims that we later proved
manually. Although this approach does not provide complete proof (i.e., does
not constitute full verification), it allows checking the reasonableness of the
claims before spending effort constructing a complete proof. This is similar to
the test-driven development methodology, that has proven very beneficial in the
software engineering community.
&lt;/p&gt;
&lt;p&gt;We used this approach and validated many of the invariants and properties of
the Contention-Friendly algorithm using TLA+. It proved beneficial, as it
helped us avoid spending time trying to prove incorrect claims. In one example,
TLA+ flagged a fundamental error in one of our core definitions. We corrected
the definition (and the dependant proofs), based on the problematic scenario
TLA+ provided as a counter-example.
&lt;/p&gt;
&lt;p&gt;Finally, we provide a complete, manual, proof of the correctness of the
Contention-Friendly algorithm, based on the definitions and proofs of our
two-tiered framework.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: The $2$-$3$-Set Packing problem and a $\frac{4}{3}$-approximation for the Maximum Leaf Spanning Arborescence problem in rooted dags</title>
    <link href="http://arxiv.org/abs/2305.07808"/>
    <id>http://arxiv.org/abs/2305.07808</id>
    <updated>2023-05-16T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Neuwohner_M/0/1/0/all/0/1&quot;&gt;Meike Neuwohner&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The weighted $3$-Set Packing problem is defined as follows: As input, we are
given a collection $\mathcal{S}$ of sets, each of cardinality at most $3$ and
equipped with a positive weight. The task is to find a disjoint sub-collection
of maximum total weight. Already the special case of unit weights is known to
be NP-hard, and the state-of-the-art are $\frac{4}{3}+\epsilon$-approximations
by Cygan and F\&quot;urer and Yu. In this paper, we study the $2$-$3$-Set Packing
problem, a generalization of the unweighted $3$-Set Packing problem, where our
set collection may contain sets of cardinality $3$ and weight $2$, as well as
sets of cardinality $2$ and weight $1$. Building upon the state-of-the-art
works in the unit weight setting, we manage to provide a
$\frac{4}{3}+\epsilon$-approximation also for the more general $2$-$3$-Set
Packing problem. We believe that this result can be a good starting point to
identify classes of weight functions to which the techniques used for unit
weights can be generalized. Using a reduction by Fernandes and Lintzmayer, our
result further implies a $\frac{4}{3}+\epsilon$-approximation for the Maximum
Leaf Spanning Arborescence problem (MLSA) in rooted directed acyclic graphs,
improving on the previously known $\frac{7}{5}$-approximation by Fernandes and
Lintzmayer. By exploiting additional structural properties of the instance
constructed in their reduction, we can further get the approximation guarantee
for the MLSA down to $\frac{4}{3}$. The MLSA has applications in broadcasting
where a message needs to be transferred from a source node to all other nodes
along the arcs of an arborescence in a given network.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">David Eppstein: Linkage with new kittens</title>
    <link href="https://11011110.github.io/blog/2023/05/15/linkage-new-kittens.html"/>
    <id>https://11011110.github.io/blog/2023/05/15/linkage-new-kittens</id>
    <updated>2023-05-15T20:49:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=qw2Pl_Nk3CA&quot;&gt;Numberphile on book embeddings of graphs&lt;/a&gt; &lt;span style=&quot;white-space:nowrap&quot;&gt;(&lt;a href=&quot;https://mathstodon.xyz/@11011110/110297702978465385&quot;&gt;\(\mathbb{M}\)&lt;/a&gt;),&lt;/span&gt; and on the long-awaited proof of the claim that some planar graphs require 4 pages. For more reading on this, see &lt;a href=&quot;https://en.wikipedia.org/wiki/Book_embedding&quot;&gt;the Wikipedia article on book embeddings&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://mathstodon.xyz/@DavidKButler/110295691782655688&quot;&gt;Deltahedra with mostly-concave edges&lt;/a&gt;. Joined excavated icosidodecahedra can get 68% of the edges to have concave angles, but it appears that &lt;a href=&quot;https://mathstodon.xyz/@11011110/110301119819252894&quot;&gt;digging a joined-icosahedron tunnel out of a larger surrounding shell&lt;/a&gt; can get up to 91%. The image below shows the best gluing pattern I found, in which four icosahedra are each cut along two edges and then glued to each other.&lt;/p&gt;

    &lt;p style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;/blog/assets/2023/4-icosahedra-m.jpg&quot; alt=&quot;Four icosahedra glued to each other after cutting two edges in each icosahedron, as constructed with Geoshapes and blue painter&#39;s tape&quot; style=&quot;border-style:solid;border-color:black;width:100%;max-width:540px&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://guests.mpim-bonn.mpg.de/tmarty/lampshade/&quot;&gt;How to flip a lampshade upside down&lt;/a&gt; &lt;span style=&quot;white-space:nowrap&quot;&gt;(&lt;a href=&quot;https://mathstodon.xyz/@Ianagol/110283089447566099&quot;&gt;\(\mathbb{M}\)&lt;/a&gt;),&lt;/span&gt; where the lampshade has the shape of a truncated cone and you have to deform it without self-intersection and without ever getting a horizontal tangent line. Marty Théo, via Ian Agol.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Two newly listed Wikipedia Good Articles in one day &lt;span style=&quot;white-space:nowrap&quot;&gt;(&lt;a href=&quot;https://mathstodon.xyz/@11011110/110314349409696124&quot;&gt;\(\mathbb{M}\)&lt;/a&gt;):&lt;/span&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Midsphere&quot;&gt;Midsphere&lt;/a&gt;, a sphere tangent to every edge of a polyhedron. Among other properties, all Hamiltonian cycles on a polyhedron with a midsphere have equal lengths.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Rook%27s_graph&quot;&gt;Rook’s graph&lt;/a&gt;, the graph of rook moves on a chessboard, the Cartesian product of two complete graphs, and the line graph of a complete bipartite graph.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://crookedtimber.org/2023/05/05/the-protestant-ethic-and-the-spirit-of-mastodon/&quot;&gt;Why I should stick to Mastodon and not even dip my toes into Bluesky&lt;/a&gt; &lt;span style=&quot;white-space:nowrap&quot;&gt;(&lt;a href=&quot;https://mathstodon.xyz/@11011110/110317325665994068&quot;&gt;\(\mathbb{M}\)&lt;/a&gt;):&lt;/span&gt; apparently the choice is between serious and technical discussions that exclude the Nazi trolls, on the Mastodon side, versus “Lots of butt-pictures. Then it was sexualized images of Alf” on the Bluesky side. I know what I prefer, and it’s not butt-pictures and Alf. &lt;a href=&quot;https://mathstodon.xyz/@sc_griffith/110339669575590399&quot;&gt;Later developments make clear&lt;/a&gt; that BlueSky also fully intends to encourage content that includes violence and gore, political hate, spam, and impersonation, and then charge readers for the moderation tools to keep it at bay.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.thisiscolossal.com/2023/04/rick-salafia-instruments/&quot;&gt;Rick Salafia’s wildly shaped aluminum rulers measure impractical proportions&lt;/a&gt; &lt;span style=&quot;white-space:nowrap&quot;&gt;(&lt;a href=&quot;https://mathstodon.xyz/@colossal@mastodon.art/110294786724701441&quot;&gt;\(\mathbb{M}\)&lt;/a&gt;).&lt;/span&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Republican-led US states are banning topics from university courses and watering down or eliminating the entire tenure system for university faculty &lt;span style=&quot;white-space:nowrap&quot;&gt;(&lt;a href=&quot;https://mathstodon.xyz/@11011110/110328562153783445&quot;&gt;\(\mathbb{M}\)&lt;/a&gt;).&lt;/span&gt; &lt;a href=&quot;https://www.latimes.com/business/story/2023-05-02/red-state-efforts-to-dumb-down-their-universities-will-provoke-a-brain-drain&quot;&gt;&lt;em&gt;Los Angeles Times&lt;/em&gt; columnist Michael Hiltzik argues&lt;/a&gt; that this is already causing a brain drain from those states and that “This trend is almost certain to get worse before it gets better as America devolves into two countries: one that nurtures brainpower, and one that watches proudly as it drains away.”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/User:XOR%27easter/Research_under_a_cloud&quot;&gt;Research under a cloud&lt;/a&gt; &lt;span style=&quot;white-space:nowrap&quot;&gt;(&lt;a href=&quot;https://mathstodon.xyz/@11011110/110334174400159711&quot;&gt;\(\mathbb{M}\)&lt;/a&gt;).&lt;/span&gt; Wikipedia editor XOR’easter rebuts an academic publication, “‘Too Soon’ to count? How gender and race cloud notability considerations on Wikipedia”, by Lemieux, Zhang, and Tripodi, purporting to show biases against women and non-white academics in Wikipedia’s deletion processes. Those biases may well exist but “Too Soon” makes a bad case for that. As the link describes, its arguments rely on severe misrepresentations of Wikipedia’s notability criteria and on selective quotations that in many cases reverse the intended meaning of the quoted text. &lt;a href=&quot;https://en.wikipedia.org/wiki/Wikipedia:Wikipedia_Signpost/2023-05-08/Recent_research&quot;&gt;A condensed version of this recently appeared in the Wikipedia &lt;em&gt;Signpost&lt;/em&gt;&lt;/a&gt;. I’m quoted, both without attribution in “Too Soon” and by name in the rebuttal.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://theconversation.com/i-unintentionally-created-a-biased-ai-algorithm-25-years-ago-tech-companies-are-still-making-the-same-mistake-203734&quot;&gt;John MacCormick unintentially created a racially biased face-recognition system 25 years ago&lt;/a&gt; &lt;span style=&quot;white-space:nowrap&quot;&gt;(&lt;a href=&quot;https://mathstodon.xyz/@divbyzero/110339079855421480&quot;&gt;\(\mathbb{M}\)&lt;/a&gt;),&lt;/span&gt; by using unrepresentative training data. He points out the difficulty of spotting the bias in the resulting system (which mostly consists of big matrices of numbers representing training weights) and wonders if current AI system creators too might have made a similar mistake.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A construction in a proof is producing square matrices of the following form &lt;span style=&quot;white-space:nowrap&quot;&gt;(&lt;a href=&quot;https://mathstodon.xyz/@11011110/110342481111834804&quot;&gt;\(\mathbb{M}\)&lt;/a&gt;):&lt;/span&gt; the main diagonal is nonzero (red in the image below), each diagonal coefficient has zeros either directly above it in the same column or directly to the left of it in the same row (pale yellow), and the rest of the coefficients can be anything (blue). Fairly obviously, such matrices have full rank, which is what my proof needs. Does anyone know whether there is a name for this class of matrices?&lt;/p&gt;

    &lt;p style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;/blog/assets/2023/arrow-matrix.svg&quot; alt=&quot;A 16x16 grid of squares, with red squares down the main diagonal. Each red square has an associated line of pale yellow squares either directly above it or directly to its left. The remaining squares are dark blue.&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.vice.com/en/article/v7bdba/ai-is-tearing-wikipedia-apart&quot;&gt;AI is tearing Wikipedia apart&lt;/a&gt; &lt;span style=&quot;white-space:nowrap&quot;&gt;(&lt;a href=&quot;https://mathstodon.xyz/@kissane@mstdn.social/110328423198247971&quot;&gt;\(\mathbb{M}\)&lt;/a&gt;).&lt;/span&gt; &lt;em&gt;Vice&lt;/em&gt; story on the ongoing disagreement among Wikipedia editors on whether to ban or how to handle AI-generated content. In the linked post, Erin Kissane points out that AI-generated talk page sophistry may be an even bigger concern.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://arxiv.org/abs/2304.01393&quot;&gt;Every Author as First Author&lt;/a&gt; &lt;span style=&quot;white-space:nowrap&quot;&gt;(&lt;a href=&quot;https://mathstodon.xyz/@blinry@chaos.social/110339453201148214&quot;&gt;\(\mathbb{M}\)&lt;/a&gt;):&lt;/span&gt; “Finally, a solution to the unfairness of authorship ordering in scientific papers!” By &lt;span style=&quot;position:relative;margin-left:0.3em&quot;&gt;&lt;span style=&quot;position:absolute;top:-0.45ex;white-space:nowrap&quot;&gt;Erik Demaine &amp;amp; &lt;/span&gt;&lt;span style=&quot;position:absolute;top:-0.45ex;white-space:nowrap&quot;&gt;Martin Demaine.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://finance.yahoo.com/news/chegg-stock-sinks-after-ceo-says-chatgpt-hurt-growth-132058643.html, via https://news.ycombinator.com/item?id=35929011&quot;&gt;Chegg stock sinks because too many students have switched to ChatGPT instead of Chegg to get bespoke cheats for their homework that are harder to detect than copied-and-pasted cheats&lt;/a&gt; &lt;span style=&quot;white-space:nowrap&quot;&gt;(&lt;a href=&quot;https://mathstodon.xyz/@11011110/110369753489873480&quot;&gt;\(\mathbb{M}\)&lt;/a&gt;).&lt;/span&gt; Oh no. What will we do without them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;These two six-week-old kittens arrived at our house yesterday &lt;span style=&quot;white-space:nowrap&quot;&gt;(&lt;a href=&quot;https://mathstodon.xyz/@11011110/110370860159231187&quot;&gt;\(\mathbb{M}\)&lt;/a&gt;).&lt;/span&gt;  Names still not definite but we think maybe we’re going to name the more adventurous one on the upper left Mist, and his shyer brother on the lower right Smoke.&lt;/p&gt;

    &lt;p style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;https://www.ics.uci.edu/~eppstein/pix/2newkittens/Kittens-m.jpg&quot; alt=&quot;Two six-week-old gray kittens looking out from an open cupboard behind some chair legs. The one on the upper left has a white striped nose and white abdomen; the one ont e lower right has a white ruff.&quot; style=&quot;border-style:solid;border-color:black&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;&lt;p class=&quot;authors&quot;&gt;By David Eppstein&lt;/p&gt;
  </content>
    <author>
      <name>David Eppstein</name>
      <uri>https://11011110.github.io/blog/</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">Richard Lipton: Ingrid Daubechies: Prizes and Art</title>
    <link href="https://rjlipton.wpcomstaging.com/2023/05/14/ingrid-daubechies-prizes-and-art/"/>
    <id>https://rjlipton.wpcomstaging.com/?p=21611</id>
    <updated>2023-05-15T02:23:23+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;&lt;p&gt;
Ingrid Daubechies &lt;a href=&quot;https://today.duke.edu/2023/02/duke-professor-wins-one-most-prestigious-awards-mathematics&quot;&gt;won&lt;/a&gt; the 2023 &lt;a href=&quot;https://wolffund.org.il/the-wolf-prize/&quot;&gt;Wolf Prize&lt;/a&gt; in Mathematics last February. She is the James B. Duke Distinguished Professor of Mathematics and Electrical and Computer Engineering at Duke University.&lt;/p&gt;
&lt;p&gt;&lt;P&gt;&lt;/p&gt;
&lt;table style=&quot;margin:auto;&quot;&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;
&lt;a href=&quot;https://rjlipton.wpcomstaging.com/2023/05/14/ingrid-daubechies-prizes-and-art/daubechiesnyt/&quot; rel=&quot;attachment wp-att-21613&quot;&gt;&lt;img data-attachment-id=&quot;21613&quot; data-permalink=&quot;https://rjlipton.wpcomstaging.com/2023/05/14/ingrid-daubechies-prizes-and-art/daubechiesnyt/&quot; data-orig-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/05/DaubechiesNYT.jpg?fit=965%2C895&amp;amp;ssl=1&quot; data-orig-size=&quot;965,895&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;DaubechiesNYT&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/05/DaubechiesNYT.jpg?fit=300%2C278&amp;amp;ssl=1&quot; data-large-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/05/DaubechiesNYT.jpg?fit=600%2C556&amp;amp;ssl=1&quot; decoding=&quot;async&quot; loading=&quot;lazy&quot; src=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/05/DaubechiesNYT.jpg?resize=240%2C225&amp;#038;ssl=1&quot; alt=&quot;&quot; width=&quot;240&quot; height=&quot;225&quot; class=&quot;aligncenter wp-image-21613&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;caption aligncenter&quot;&gt;&lt;FONT size=&quot;-2&quot;&gt;Crop from 2021 New York Times &lt;a href=&quot;https://www.nytimes.com/2021/09/14/magazine/ingrid-daubechies.html&quot;&gt;profile&lt;/a&gt; by Siobhan Roberts, photo by Jeremy Lange&lt;/FONT&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;P&gt;&lt;br /&gt;
Today, Mother&amp;#8217;s Day in the US, we congratulate her on this award and note some non-theoretical applications of her work. &lt;/p&gt;
&lt;p&gt;
The award &lt;a href=&quot;https://wolffund.org.il/2023/02/07/ingrid-daubechies/&quot;&gt;cites&lt;/a&gt; &amp;#8220;her work in the creation and development of wavelet theory and modern time-frequency analysis.&amp;#8221; It goes on to say:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;b&gt; &lt;/b&gt; &lt;em&gt; Her discovery of smooth, compactly supported wavelets, and the development of biorthogonal wavelets transformed image and signal processing and filtering. Her work is of tremendous importance in image compression, medical imaging, remote sensing, and digital photography. Daubechies has also made unparalleled contributions to developing real-world applications of harmonic analysis, introducing sophisticated image-processing techniques to fields ranging from art to evolutionary biology and beyond. &lt;/em&gt;
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;p&gt;
Daubechies started as a physicist and wrote a PhD thesis on quantum mechanics. Although she is the first woman to win a Wolf Prize in Mathematics, the Physics Wolf Prizes began with a female winner right away, in 1978. &lt;/p&gt;
&lt;p&gt;
That was Chien-Shiung Wu, who &lt;a href=&quot;https://wolffund.org.il/2018/12/09/chien-shiung-wu/&quot;&gt;won&lt;/a&gt; in 1978 for her work on weak interactions and execution of the first &lt;a href=&quot;https://en.wikipedia.org/wiki/Wu_experiment&quot;&gt;experiment&lt;/a&gt; that demonstrated the non-conservation of parity. Wu&amp;#8217;s prize partially righted a now universally-acknowledged wrong of not including her in the 1957 Nobel Prize of Tsung Dao Lee and Chen Ning Yang. There were only four female winners, all in Medicine, until Ada Yonath in Chemistry in 2006/2007, but women had exact parity in the twelve prizes in 2022. &lt;/p&gt;
&lt;p&gt;
&lt;p&gt;&lt;H2&gt; Wvts &lt;/H2&gt;&lt;/p&gt;
&lt;p&gt;&lt;p&gt;
The French word for &lt;a href=&quot;https://en.wikipedia.org/wiki/Wavelet&quot;&gt;wavelet&lt;/a&gt;, which is &lt;em&gt;ondelette&lt;/em&gt;, may have been first employed in a scientific context by the French-American physicist Alexander Grossmann around the time he was one of Daubechies&amp;#8217;s two PhD advisors. Without going into detail, we venture a highly compressed evocation of wavelets.&lt;/p&gt;
&lt;p&gt;
An abstract statement of the problem for which wavelets have often provided effective solutions is:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;b&gt; &lt;/b&gt; &lt;em&gt; Given a generator &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7BG%7D&amp;#038;bg=e8e8e8&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{G}&quot; class=&quot;latex&quot; /&gt; of elements in a high-dimensional Hilbert space, what is the best choice of basis to minimize the expected complexity of representing items drawn from &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7BG%7D&amp;#038;bg=e8e8e8&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{G}&quot; class=&quot;latex&quot; /&gt; over that basis, either exactly or optimizing a combined score of complexity and approximation? &lt;/em&gt;
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;p&gt;
An example of a high-dimensional vector space is the set of possible monomials of degree (up to) &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{d}&quot; class=&quot;latex&quot; /&gt; in &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{n}&quot; class=&quot;latex&quot; /&gt; variables. Working over the standard basis is like assembling a polynomial term-by-term, which can be poky. There are other bases composed of mutually orthogonal polynomials for which small sums may be closer to typical outputs &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bg%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{g}&quot; class=&quot;latex&quot; /&gt; from certain generators &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7BG%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{G}&quot; class=&quot;latex&quot; /&gt;. &lt;/p&gt;
&lt;p&gt;
When &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bg%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{g}&quot; class=&quot;latex&quot; /&gt; represents a static configuration or a process that changes uniformly and slowly, there might not be much improvement on the standard basis. But when &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bg%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{g}&quot; class=&quot;latex&quot; /&gt; is dominated by a few transient events, bases aligned with such events perform better. Getting very rough in our description, many events of interest are like throwing rocks into a pond. The resulting ripples are well described over a &lt;em&gt;wavelet basis&lt;/em&gt;. Whereas, using a standard basis&amp;#8212;which is fine when the pond is still&amp;#8212;will leave blocky artifacts when low resolution fails to discriminate the ripples.&lt;/p&gt;
&lt;p&gt;&lt;P&gt;&lt;/p&gt;
&lt;table style=&quot;margin:auto;&quot;&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href=&quot;https://rjlipton.wpcomstaging.com/2023/05/14/ingrid-daubechies-prizes-and-art/daubechieswaveletwiki/&quot; rel=&quot;attachment wp-att-21614&quot;&gt;&lt;img data-attachment-id=&quot;21614&quot; data-permalink=&quot;https://rjlipton.wpcomstaging.com/2023/05/14/ingrid-daubechies-prizes-and-art/daubechieswaveletwiki/&quot; data-orig-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/05/DaubechiesWaveletWiki.png?fit=609%2C444&amp;amp;ssl=1&quot; data-orig-size=&quot;609,444&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;DaubechiesWaveletWiki&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/05/DaubechiesWaveletWiki.png?fit=300%2C219&amp;amp;ssl=1&quot; data-large-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/05/DaubechiesWaveletWiki.png?fit=600%2C437&amp;amp;ssl=1&quot; decoding=&quot;async&quot; loading=&quot;lazy&quot; src=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/05/DaubechiesWaveletWiki.png?resize=305%2C222&amp;#038;ssl=1&quot; alt=&quot;&quot; width=&quot;305&quot; height=&quot;222&quot; class=&quot;aligncenter wp-image-21614&quot; srcset=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/05/DaubechiesWaveletWiki.png?w=609&amp;amp;ssl=1 609w, https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/05/DaubechiesWaveletWiki.png?resize=300%2C219&amp;amp;ssl=1 300w&quot; sizes=&quot;(max-width: 305px) 100vw, 305px&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;caption alignright&quot;&gt;&lt;FONT size=&quot;-2&quot;&gt;Wikipedia &amp;#8220;Daubechies wavelet&amp;#8221; &lt;a href=&quot;https://en.wikipedia.org/wiki/Daubechies_wavelet&quot;&gt;source&lt;/a&gt;&lt;/FONT&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;
The origin story of how Daubechies realized the wider applicability of wavelets, as told &lt;a href=&quot;https://today.duke.edu/2023/02/duke-professor-wins-one-most-prestigious-awards-mathematics&quot;&gt;here&lt;/a&gt;, is that she noticed blocky artifacts in grass while watching a soccer match. The movement of grass blades is more concisely explained as a response to transient wind and game events than a uniform and locally independent process. This has proved universal in practice, as the story says: &amp;#8220;Anytime you go to a movie theater, or watch live sports on ESPN, each frame has been compressed using Daubechies’ wavelet-based method.&amp;#8221;&lt;/p&gt;
&lt;p&gt;
&lt;p&gt;&lt;H2&gt; Art and Originality &lt;/H2&gt;&lt;/p&gt;
&lt;p&gt;&lt;p&gt;
My wording with &amp;#8220;explained&amp;#8221; hints at a yet-wider world of application in data-science inference. I would love to claim in a grand sweep that an artwork such as a painting is best represented as the sequence of conceptual events that governed its creation. The events should be describable at a level where the exact details of execution can be inferred while saving many bits over an exhaustive &amp;#8220;standard-basis&amp;#8221; representation. I am not going as far as the &lt;a href=&quot;https://en.wikipedia.org/wiki/Low-complexity_art&quot;&gt;low-complexity art&lt;/a&gt; of J&amp;uuml;rgen Schmidhuber, but share the motivation that art may be better described in bases that align with succinct formulations and salient impulses.&lt;/p&gt;
&lt;p&gt;
On firmer ground is the use of descriptive techniques to identify events that have &lt;em&gt;happened to&lt;/em&gt; artwork since its creation. In a wonderful 2016 &lt;a href=&quot;https://www.quantamagazine.org/using-mathematics-to-repair-a-masterpiece-20160929/&quot;&gt;article&lt;/a&gt; by Daubechies for &lt;em&gt;Quanta&lt;/em&gt; on art restoration, she describes two kinds of events affecting centuries-old altarpieces:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
Natural cracking of the wood panels &lt;/p&gt;
&lt;li&gt;
Previous efforts at restoration.
&lt;/ul&gt;
&lt;p&gt;
The latter included past restorers imposing a lattice support on the wood that confused with natural cracks. A third kind of event they were able to distinguish fits the creation type in my first paragraph: strokes of fine text delicately painted by the original artists. Daubechies&amp;#8217;s methods were able to highlight those just enough for professional antiquarians to identify the religious text that was intended. &lt;/p&gt;
&lt;p&gt;&lt;P&gt;&lt;/p&gt;
&lt;table style=&quot;margin:auto;&quot;&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href=&quot;https://rjlipton.wpcomstaging.com/2023/05/14/ingrid-daubechies-prizes-and-art/paneldetail/&quot; rel=&quot;attachment wp-att-21616&quot;&gt;&lt;img data-attachment-id=&quot;21616&quot; data-permalink=&quot;https://rjlipton.wpcomstaging.com/2023/05/14/ingrid-daubechies-prizes-and-art/paneldetail/&quot; data-orig-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/05/PanelDetail.jpg?fit=312%2C275&amp;amp;ssl=1&quot; data-orig-size=&quot;312,275&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;KWRegan&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;1684101133&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;PanelDetail&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/05/PanelDetail.jpg?fit=300%2C264&amp;amp;ssl=1&quot; data-large-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/05/PanelDetail.jpg?fit=312%2C275&amp;amp;ssl=1&quot; decoding=&quot;async&quot; loading=&quot;lazy&quot; src=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/05/PanelDetail.jpg?resize=208%2C184&amp;#038;ssl=1&quot; alt=&quot;&quot; width=&quot;208&quot; height=&quot;184&quot; class=&quot;aligncenter wp-image-21616&quot; srcset=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/05/PanelDetail.jpg?w=312&amp;amp;ssl=1 312w, https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/05/PanelDetail.jpg?resize=300%2C264&amp;amp;ssl=1 300w&quot; sizes=&quot;(max-width: 208px) 100vw, 208px&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;caption aligncenter&quot;&gt;&lt;FONT size=&quot;-2&quot;&gt;Excerpt from large image in Daubechies &lt;a href=&quot;https://www.quantamagazine.org/using-mathematics-to-repair-a-masterpiece-20160929/&quot;&gt;article&lt;/a&gt;&lt;/FONT&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;P&gt;&lt;br /&gt;
In earlier work at Princeton described in this 2008 &lt;a href=&quot;https://paw.princeton.edu/article/fake-vs-real-analyzing-artwork-set-mathematical-tools&quot;&gt;article&lt;/a&gt;, Daubechies and team applied wavelets to distinguish authentic paintings by Vincent van Gogh from forgeries. To do this, they &amp;#8220;created a statistical portrait of van Gogh’s style using wavelets.&amp;#8221; What emerged from their analysis was that the forgeries could not so easily be described in their van Gogh basis:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;b&gt; &lt;/b&gt; &lt;em&gt; The forgeries and copies &amp;#8230; had more tiny wavelets in the image, which [quoting team member Shannon Hughes] &amp;#8220;we think are tiny fluctuations and wobbles. &amp;#8230; You can imagine that if someone is painting really slowly trying to copy another work, they are hesitating a little bit.&amp;#8221; &lt;/em&gt;
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;p&gt;
This reminds me also of telltale hesitations that enable online chess platforms to infer when a human player is concentrating on something else besides playing the game. A final quote from Hughes in the article tends toward my grander thought about artistic creation:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;em&gt; [Wavelet technology may help figure out] &amp;#8220;what the artist was thinking and what the artist was doing and why they were doing it.&amp;#8221; &lt;/em&gt;
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;p&gt;
Daubechies has been involved in some art creation of her own: the art installation &lt;a href=&quot;https://en.wikipedia.org/wiki/Mathemalchemy&quot;&gt;Mathemalchemy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
&lt;p&gt;&lt;H2&gt; Open Problems &lt;/H2&gt;&lt;/p&gt;
&lt;p&gt;&lt;p&gt;
What inferences will wavelets enable about the creative process? As someone who fancies composing but has no ability to play or transcribe music faster than a snail&amp;#8217;s pace, I can vouch that music is not created in the standard basis.&lt;/p&gt;
&lt;p&gt;
&lt;p class=&quot;authors&quot;&gt;By KWRegan&lt;/p&gt;
  </content>
    <author>
      <name>Richard Lipton</name>
      <uri>https://rjlipton.wpcomstaging.com</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Improved Lower Bounds for Monotone q-Multilinear Boolean Circuits</title>
    <link href="http://arxiv.org/abs/2305.07364"/>
    <id>http://arxiv.org/abs/2305.07364</id>
    <updated>2023-05-15T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Lingas_A/0/1/0/all/0/1&quot;&gt;Andrzej Lingas&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Persson_M/0/1/0/all/0/1&quot;&gt;Mia Persson&lt;/a&gt;&lt;/p&gt;&lt;p&gt;A monotone Boolean circuit is composed of OR gates, AND gates and input gates
corresponding to the input variables and the Boolean constants. It is
$q$-multilinear if for each its output gate $o$ and for each prime implicant
$s$ of the function computed at $o$, the arithmetic version of the circuit
resulting from the replacement of OR and AND gates by addition and
multiplication gates, respectively, computes a polynomial at $o$ which contains
a monomial including the same variables as $s$ and each of the variables in $s$
has degree at most $q$ in the monomial. First, we study the complexity of
computing semi-disjoint bilinear Boolean forms in terms of the size of monotone
$q$-multilinear Boolean circuits. In particular, we show that any monotone
$1$-multilinear Boolean circuit computing a semi-disjoint Boolean form with $p$
prime implicants includes at least $p$ AND gates. We also show that any
monotone $q$-multilinear Boolean circuit computing a semi-disjoint Boolean form
with $p$ prime implicants has $\Omega(\frac p {q^4})$ size. Next, we study the
complexity of the monotone Boolean function $Isol_{k,n}$ that verifies if a
$k$-dimensional Boolean matrix has at least one $1$ in each line (e.g., each
row and column when $k=2$), in terms of monotone $q$-multilinear Boolean
circuits. We show that that any $\Sigma_3$ monotone Boolean circuit for
$Isol_{k,n}$ has an exponential in $n$ size or it is not $(k-1)$-multilinear.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Sampling recovery in the uniform norm</title>
    <link href="http://arxiv.org/abs/2305.07539"/>
    <id>http://arxiv.org/abs/2305.07539</id>
    <updated>2023-05-15T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Krieg_D/0/1/0/all/0/1&quot;&gt;David Krieg&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Pozharska_K/0/1/0/all/0/1&quot;&gt;Kateryna Pozharska&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Ullrich_M/0/1/0/all/0/1&quot;&gt;Mario Ullrich&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Ullrich_T/0/1/0/all/0/1&quot;&gt;Tino Ullrich&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We study the recovery of functions in the uniform norm based on function
evaluations. We obtain worst case error bounds for general classes of
functions, also in $L_p$-norm, in terms of the best $L_2$-approximation from a
given nested sequence of subspaces combined with bounds on the the Christoffel
function of these subspaces.
&lt;/p&gt;
&lt;p&gt;Our results imply that linear sampling algorithms are optimal (up to
constants) among all algorithms using arbitrary linear information for many
reproducing kernel Hilbert spaces; a result that has been observed
independently in [Geng \&amp;amp; Wang, &lt;a href=&quot;/abs/2304.14748&quot;&gt;arXiv:2304.14748&lt;/a&gt;].
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Geometry: A circular parameterization for multi-sided patches</title>
    <link href="http://arxiv.org/abs/2305.07534"/>
    <id>http://arxiv.org/abs/2305.07534</id>
    <updated>2023-05-15T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Salvi_P/0/1/0/all/0/1&quot;&gt;P&amp;#xe9;ter Salvi&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Most genuine multi-sided surface representations depend on a 2D domain that
enables a mapping between local parameters and global coordinates. The shape of
this domain ranges from regular polygons to curved configurations, but the
simple circular domain - to the best of our knowledge - has not been
investigated yet.
&lt;/p&gt;
&lt;p&gt;Here we fill this gap, and introduce a parameter mapping ideal for use with
periodic boundaries. It is based on circular arcs and satisfies constraints
often needed in actual surface formulations. The proposed method is
demonstrated through a corner-based variant of Generalized B\&#39;ezier patches.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Geometry</name>
      <uri>https://arxiv.org/list/cs.CG/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Complexity of Efficient Outcomes in Binary-Action Polymatrix Games with Implications for Coordination Problems</title>
    <link href="http://arxiv.org/abs/2305.07124"/>
    <id>http://arxiv.org/abs/2305.07124</id>
    <updated>2023-05-15T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Deligkas_A/0/1/0/all/0/1&quot;&gt;Argyrios Deligkas&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Eiben_E/0/1/0/all/0/1&quot;&gt;Eduard Eiben&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Gutin_G/0/1/0/all/0/1&quot;&gt;Gregory Gutin&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Neary_P/0/1/0/all/0/1&quot;&gt;Philip R. Neary&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Yeo_A/0/1/0/all/0/1&quot;&gt;Anders Yeo&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We investigate the difficulty of finding economically efficient solutions to
coordination problems on graphs. Our work focuses on two forms of coordination
problem: pure-coordination games and anti-coordination games. We consider three
objectives in the context of simple binary-action polymatrix games: (i)
maximizing welfare, (ii) maximizing potential, and (iii) finding a
welfare-maximizing Nash equilibrium. We introduce an intermediate, new
graph-partition problem, termed Maximum Weighted Digraph Partition, which is of
independent interest, and we provide a complexity dichotomy for it. This
dichotomy, among other results, provides as a corollary a dichotomy for
Objective (i) for general binary-action polymatrix games. In addition, it
reveals that the complexity of achieving these objectives varies depending on
the form of the coordination problem. Specifically, Objectives (i) and (ii) can
be efficiently solved in pure-coordination games, but are NP-hard in
anti-coordination games. Finally, we show that objective (iii) is NP-hard even
for simple non-trivial pure-coordination games.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Parameterized Approximation for Robust Clustering in Discrete Geometric Spaces</title>
    <link href="http://arxiv.org/abs/2305.07316"/>
    <id>http://arxiv.org/abs/2305.07316</id>
    <updated>2023-05-15T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Abbasi_F/0/1/0/all/0/1&quot;&gt;Fateme Abbasi&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Banerjee_S/0/1/0/all/0/1&quot;&gt;Sandip Banerjee&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Byrka_J/0/1/0/all/0/1&quot;&gt;Jaros&amp;#x142;aw Byrka&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Chalermsook_P/0/1/0/all/0/1&quot;&gt;Parinya Chalermsook&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Gadekar_A/0/1/0/all/0/1&quot;&gt;Ameet Gadekar&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Khodamoradi_K/0/1/0/all/0/1&quot;&gt;Kamyar Khodamoradi&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Marx_D/0/1/0/all/0/1&quot;&gt;D&amp;#xe1;niel Marx&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Sharma_R/0/1/0/all/0/1&quot;&gt;Roohani Sharma&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Spoerhase_J/0/1/0/all/0/1&quot;&gt;Joachim Spoerhase&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We consider the well-studied Robust $(k, z)$-Clustering problem, which
generalizes the classic $k$-Median, $k$-Means, and $k$-Center problems. Given a
constant $z\ge 1$, the input to Robust $(k, z)$-Clustering is a set $P$ of $n$
weighted points in a metric space $(M,\delta)$ and a positive integer $k$.
Further, each point belongs to one (or more) of the $m$ many different groups
$S_1,S_2,\ldots,S_m$. Our goal is to find a set $X$ of $k$ centers such that
$\max_{i \in [m]} \sum_{p \in S_i} w(p) \delta(p,X)^z$ is minimized.
&lt;/p&gt;
&lt;p&gt;This problem arises in the domains of robust optimization [Anthony, Goyal,
Gupta, Nagarajan, Math. Oper. Res. 2010] and in algorithmic fairness. For
polynomial time computation, an approximation factor of $O(\log m/\log\log m)$
is known [Makarychev, Vakilian, COLT $2021$], which is tight under a plausible
complexity assumption even in the line metrics. For FPT time, there is a
$(3^z+\epsilon)$-approximation algorithm, which is tight under GAP-ETH [Goyal,
Jaiswal, Inf. Proc. Letters, 2023].
&lt;/p&gt;
&lt;p&gt;Motivated by the tight lower bounds for general discrete metrics, we focus on
\emph{geometric} spaces such as the (discrete) high-dimensional Euclidean
setting and metrics of low doubling dimension, which play an important role in
data analysis applications. First, for a universal constant $\eta_0 &amp;gt;0.0006$,
we devise a $3^z(1-\eta_{0})$-factor FPT approximation algorithm for discrete
high-dimensional Euclidean spaces thereby bypassing the lower bound for general
metrics. We complement this result by showing that even the special case of
$k$-Center in dimension $\Theta(\log n)$ is $(\sqrt{3/2}- o(1))$-hard to
approximate for FPT algorithms. Finally, we complete the FPT approximation
landscape by designing an FPT $(1+\epsilon)$-approximation scheme (EPAS) for
the metric of sub-logarithmic doubling dimension.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Isotropic Point Cloud Meshing using unit Spheres (IPCMS)</title>
    <link href="http://arxiv.org/abs/2305.07570"/>
    <id>http://arxiv.org/abs/2305.07570</id>
    <updated>2023-05-15T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Lipschutz_H/0/1/0/all/0/1&quot;&gt;Henriette Lipsch&amp;#xfc;tz&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Reitebuch_U/0/1/0/all/0/1&quot;&gt;Ulrich Reitebuch&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Polthier_K/0/1/0/all/0/1&quot;&gt;Konrad Polthier&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Skrodzki_M/0/1/0/all/0/1&quot;&gt;Martin Skrodzki&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Point clouds arise from acquisition processes applied in various scenarios,
such as reverse engineering, rapid prototyping, or cultural preservation. To
run various simulations via, e.g., finite element methods, on the derived data,
a mesh has to be created from it. In this paper, a meshing algorithm for point
clouds is presented, which is based on a sphere covering of the underlying
surface. The algorithm provides a mesh close to uniformity in terms of edge
lengths and angles of its triangles. Additionally, theoretical results
guarantee the output to be manifold, given suitable input and parameter
choices. We present both the underlying theory, which provides suitable
parameter bounds, as well as experiments showing that our algorithm can compete
with widely used competitors in terms of quality of the output and timings.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Streaming Edge Coloring with Subquadratic Palette Size</title>
    <link href="http://arxiv.org/abs/2305.07090"/>
    <id>http://arxiv.org/abs/2305.07090</id>
    <updated>2023-05-15T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Chechik_S/0/1/0/all/0/1&quot;&gt;Shiri Chechik&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Mukhtar_D/0/1/0/all/0/1&quot;&gt;Doron Mukhtar&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Zhang_T/0/1/0/all/0/1&quot;&gt;Tianyi Zhang&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In this paper, we study the problem of computing an edge-coloring in the
(one-pass) W-streaming model. In this setting, the edges of an $n$-node graph
arrive in an arbitrary order to a machine with a relatively small space, and
the goal is to design an algorithm that outputs, as a stream, a proper coloring
of the edges using the fewest possible number of colors.
&lt;/p&gt;
&lt;p&gt;Behnezhad et al. [Behnezhad et al., 2019] devised the first non-trivial
algorithm for this problem, which computes in $\tilde{O}(n)$ space a proper
$O(\Delta^2)$-coloring w.h.p. (here $\Delta$ is the maximum degree of the
graph). Subsequent papers improved upon this result, where latest of them
[Ansari et al., 2022] shows that it is possible to deterministically compute an
$O(\Delta^2/s)$-coloring in $O(ns)$ space. However, none of the improvements,
succeeded in reducing the number of colors to $O(\Delta^{2-\epsilon})$ while
keeping the same space bound of $\tilde{O}(n)$. In particular, no progress was
made on the question of whether computing an $O(\Delta)$-coloring is possible
with roughly $O(n)$ space, which was stated in [Behnezhad et al., 2019] to be a
major open problem.
&lt;/p&gt;
&lt;p&gt;In this paper we bypass the quadratic bound by presenting a new randomized
$\tilde{O}(n)$-space algorithm that uses $\tilde{O}(\Delta^{1.5})$ colors.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Learning-Augmented Online Packet Scheduling with Deadlines</title>
    <link href="http://arxiv.org/abs/2305.07164"/>
    <id>http://arxiv.org/abs/2305.07164</id>
    <updated>2023-05-15T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Stein_C/0/1/0/all/0/1&quot;&gt;Clifford Stein&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Wei_H/0/1/0/all/0/1&quot;&gt;Hao-Ting Wei&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The modern network aims to prioritize critical traffic over non-critical
traffic and effectively manage traffic flow. This necessitates proper buffer
management to prevent the loss of crucial traffic while minimizing the impact
on non-critical traffic. Therefore, the algorithm&#39;s objective is to control
which packets to transmit and which to discard at each step. In this study, we
initiate the learning-augmented online packet scheduling with deadlines and
provide a novel algorithmic framework to cope with the prediction. We show that
when the prediction error is small, our algorithm improves the competitive
ratio while still maintaining a bounded competitive ratio, regardless of the
prediction error.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: A Wait-free Queue with Polylogarithmic Step Complexity</title>
    <link href="http://arxiv.org/abs/2305.07229"/>
    <id>http://arxiv.org/abs/2305.07229</id>
    <updated>2023-05-15T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Naderibeni_H/0/1/0/all/0/1&quot;&gt;Hossein Naderibeni&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Ruppert_E/0/1/0/all/0/1&quot;&gt;Eric Ruppert&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We present a novel linearizable wait-free queue implementation using
single-word CAS instructions. Previous lock-free queue implementations from CAS
all have amortized step complexity of $\Omega(p)$ per operation in worst-case
executions, where $p$ is the number of processes that access the queue. Our new
wait-free queue takes $O(\log p)$ steps per enqueue and $O(\log^2 p +\log q)$
steps per dequeue, where $q$ is the size of the queue. A bounded-space version
of the implementation has $O(\log p \log(p+q))$ amortized step complexity per
operation.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Minimum Consistent Subset for Trees Revisited</title>
    <link href="http://arxiv.org/abs/2305.07259"/>
    <id>http://arxiv.org/abs/2305.07259</id>
    <updated>2023-05-15T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Arimura_H/0/1/0/all/0/1&quot;&gt;Hiroki Arimura&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Gima_T/0/1/0/all/0/1&quot;&gt;Tatsuya Gima&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kobayashi_Y/0/1/0/all/0/1&quot;&gt;Yasuaki Kobayashi&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Nochide_H/0/1/0/all/0/1&quot;&gt;Hiroomi Nochide&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Otachi_Y/0/1/0/all/0/1&quot;&gt;Yota Otachi&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In a vertex-colored graph $G = (V, E)$, a subset $S \subseteq V$ is said to
be consistent if every vertex has a nearest neighbor in $S$ with the same
color. The problem of computing a minimum cardinality consistent subset of a
graph is known to be NP-hard. On the positive side, Dey et al. (FCT 2021) show
that this problem is solvable in polynomial time when input graphs are
restricted to bi-colored trees. In this paper, we give a polynomial-time
algorithm for this problem on $k$-colored trees with fixed $k$.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Reconfiguration of Time-Respecting Arborescences</title>
    <link href="http://arxiv.org/abs/2305.07262"/>
    <id>http://arxiv.org/abs/2305.07262</id>
    <updated>2023-05-15T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Ito_T/0/1/0/all/0/1&quot;&gt;Takehiro Ito&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Iwamasa_Y/0/1/0/all/0/1&quot;&gt;Yuni Iwamasa&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kamiyama_N/0/1/0/all/0/1&quot;&gt;Naoyuki Kamiyama&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kobayashi_Y/0/1/0/all/0/1&quot;&gt;Yasuaki Kobayashi&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kobayashi_Y/0/1/0/all/0/1&quot;&gt;Yusuke Kobayashi&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Maezawa_S/0/1/0/all/0/1&quot;&gt;Shun-ichi Maezawa&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Suzuki_A/0/1/0/all/0/1&quot;&gt;Akira Suzuki&lt;/a&gt;&lt;/p&gt;&lt;p&gt;An arborescence, which is a directed analogue of a spanning tree in an
undirected graph, is one of the most fundamental combinatorial objects in a
digraph. In this paper, we study arborescences in digraphs from the viewpoint
of combinatorial reconfiguration, which is the field where we study
reachability between two configurations of some combinatorial objects via some
specified operations. Especially, we consider reconfiguration problems for
time-respecting arborescences, which were introduced by Kempe, Kleinberg, and
Kumar. We first prove that if the roots of the initial and target
time-respecting arborescences are the same, then the target arborescence is
always reachable from the initial one and we can find a shortest
reconfiguration sequence in polynomial time. Furthermore, we show if the roots
are not the same, then the target arborescence may not be reachable from the
initial one. On the other hand, we show that we can determine whether the
target arborescence is reachable form the initial one in polynomial time.
Finally, we prove that it is NP-hard to find a shortest reconfiguration
sequence in the case where the roots are not the same. Our results show an
interesting contrast to the previous results for (ordinary) arborescences
reconfiguration problems.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Matching Statistics speed up BWT construction</title>
    <link href="http://arxiv.org/abs/2305.07319"/>
    <id>http://arxiv.org/abs/2305.07319</id>
    <updated>2023-05-15T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Masillo_F/0/1/0/all/0/1&quot;&gt;Francesco Masillo&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Due to the exponential growth of genomic data, constructing dedicated data
structures has become the principal bottleneck in common bioinformatics
applications. In particular, the Burrows-Wheeler Transform (BWT) is the basis
of some of the most popular self-indexes for genomic data, due to its known
favourable behaviour on repetitive data.
&lt;/p&gt;
&lt;p&gt;Some tools that exploit the intrinsic repetitiveness of biological data have
risen in popularity, due to their speed and low space consumption. We introduce
a new algorithm for computing the BWT, which takes advantage of the redundancy
of the data through a compressed version of matching statistics, the
$\textit{CMS}$ of [Lipt\&#39;ak et al., WABI 2022]. We show that it suffices to
sort a small subset of suffixes, lowering both computation time and space. Our
result is due to a new insight which links the so-called insert-heads of
[Lipt\&#39;ak et al., WABI 2022] to the well-known run boundaries of the BWT.
&lt;/p&gt;
&lt;p&gt;We give two implementations of our algorithm, called
$\texttt{CMS}$-$\texttt{BWT}$, both competitive in our experimental validation
on highly repetitive real-life datasets. In most cases, they outperform other
tools w.r.t. running time, trading off a higher memory footprint, which,
however, is still considerably smaller than the total size of the input data.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: On the Fair Comparison of Optimization Algorithms in Different Machines</title>
    <link href="http://arxiv.org/abs/2305.07345"/>
    <id>http://arxiv.org/abs/2305.07345</id>
    <updated>2023-05-15T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Arza_E/0/1/0/all/0/1&quot;&gt;Etor Arza&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Ceberio_J/0/1/0/all/0/1&quot;&gt;Josu Ceberio&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Irurozki_E/0/1/0/all/0/1&quot;&gt;Ekhi&amp;#xf1;e Irurozki&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Perez_A/0/1/0/all/0/1&quot;&gt;Aritz P&amp;#xe9;rez&lt;/a&gt;&lt;/p&gt;&lt;p&gt;An experimental comparison of two or more optimization algorithms requires
the same computational resources to be assigned to each algorithm. When a
maximum runtime is set as the stopping criterion, all algorithms need to be
executed in the same machine if they are to use the same resources.
Unfortunately, the implementation code of the algorithms is not always
available, which means that running the algorithms to be compared in the same
machine is not always possible. And even if they are available, some
optimization algorithms might be costly to run, such as training large
neural-networks in the cloud.
&lt;/p&gt;
&lt;p&gt;In this paper, we consider the following problem: how do we compare the
performance of a new optimization algorithm B with a known algorithm A in the
literature if we only have the results (the objective values) and the runtime
in each instance of algorithm A? Particularly, we present a methodology that
enables a statistical analysis of the performance of algorithms executed in
different machines. The proposed methodology has two parts. Firstly, we propose
a model that, given the runtime of an algorithm in a machine, estimates the
runtime of the same algorithm in another machine. This model can be adjusted so
that the probability of estimating a runtime longer than what it should be is
arbitrarily low. Secondly, we introduce an adaptation of the one-sided sign
test that uses a modified \textit{p}-value and takes into account that
probability. Such adaptation avoids increasing the probability of type I error
associated with executing algorithms A and B in different machines.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Reduced Label Complexity For Tight $\ell_2$ Regression</title>
    <link href="http://arxiv.org/abs/2305.07486"/>
    <id>http://arxiv.org/abs/2305.07486</id>
    <updated>2023-05-15T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Gittens_A/0/1/0/all/0/1&quot;&gt;Alex Gittens&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Magdon_Ismail_M/0/1/0/all/0/1&quot;&gt;Malik Magdon-Ismail&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Given data ${\rm X}\in\mathbb{R}^{n\times d}$ and labels
$\mathbf{y}\in\mathbb{R}^{n}$ the goal is find $\mathbf{w}\in\mathbb{R}^d$ to
minimize $\Vert{\rm X}\mathbf{w}-\mathbf{y}\Vert^2$. We give a polynomial
algorithm that, \emph{oblivious to $\mathbf{y}$}, throws out $n/(d+\sqrt{n})$
data points and is a $(1+d/n)$-approximation to optimal in expectation. The
motivation is tight approximation with reduced label complexity (number of
labels revealed). We reduce label complexity by $\Omega(\sqrt{n})$. Open
question: Can label complexity be reduced by $\Omega(n)$ with tight
$(1+d/n)$-approximation?
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Temporal Network Creation Games</title>
    <link href="http://arxiv.org/abs/2305.07494"/>
    <id>http://arxiv.org/abs/2305.07494</id>
    <updated>2023-05-15T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Bilo_D/0/1/0/all/0/1&quot;&gt;Davide Bil&amp;#xf2;&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Cohen_S/0/1/0/all/0/1&quot;&gt;Sarel Cohen&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Friedrich_T/0/1/0/all/0/1&quot;&gt;Tobias Friedrich&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Gawendowicz_H/0/1/0/all/0/1&quot;&gt;Hans Gawendowicz&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Klodt_N/0/1/0/all/0/1&quot;&gt;Nicolas Klodt&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Lenzner_P/0/1/0/all/0/1&quot;&gt;Pascal Lenzner&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Skretas_G/0/1/0/all/0/1&quot;&gt;George Skretas&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Most networks are not static objects, but instead they change over time. This
observation has sparked rigorous research on temporal graphs within the last
years. In temporal graphs, we have a fixed set of nodes and the connections
between them are only available at certain time steps. This gives rise to a
plethora of algorithmic problems on such graphs, most prominently the problem
of finding temporal spanners, i.e., the computation of subgraphs that guarantee
all pairs reachability via temporal paths. To the best of our knowledge, only
centralized approaches for the solution of this problem are known. However,
many real-world networks are not shaped by a central designer but instead they
emerge and evolve by the interaction of many strategic agents. This observation
is the driving force of the recent intensive research on game-theoretic network
formation models.
&lt;/p&gt;
&lt;p&gt;In this work we bring together these two recent research directions: temporal
graphs and game-theoretic network formation. As a first step into this new
realm, we focus on a simplified setting where a complete temporal host graph is
given and the agents, corresponding to its nodes, selfishly create incident
edges to ensure that they can reach all other nodes via temporal paths in the
created network. This yields temporal spanners as equilibria of our game. We
prove results on the convergence to and the existence of equilibrium networks,
on the complexity of finding best agent strategies, and on the quality of the
equilibria. By taking these first important steps, we uncover challenging open
problems that call for an in-depth exploration of the creation of temporal
graphs by strategic agents.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">Computational Complexity: Take a number and map it to the number of letters in its name</title>
    <link href="https://blog.computationalcomplexity.org/2023/05/take-number-and-map-it-to-number-of.html"/>
    <id>tag:blogger.com,1999:blog-3722233.post-6967500125921426284</id>
    <updated>2023-05-14T21:53:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;Let f: N--&amp;gt; N map a number to the number-of-letters in its name in English (we will consider other languages later).&lt;/p&gt;&lt;p&gt;So for example 14 is fourteen so it maps to 7. Let&#39;s iterate&lt;/p&gt;&lt;p&gt;14 --&amp;gt; 7 --&amp;gt; 5 --&amp;gt; 4--&amp;gt;4--&amp;gt;4 ...&lt;/p&gt;&lt;p&gt;It is known (perhaps well-known) that, given any starting point, the sequence eventually is all 4&#39;s.&amp;nbsp;&lt;/p&gt;&lt;p&gt;I recently got an email asking if this was PROVEN.&amp;nbsp; I could not find a proof on the web so I did it myself. My writeup of a proof is &lt;a href=&quot;https://www.cs.umd.edu/~gasarch/BLOGPAPERS/four.pdf&quot;&gt;here&lt;/a&gt;.&amp;nbsp;&lt;/p&gt;&lt;p&gt;1) So now there IS a proof on the web. It may be hard to find. Does this problem have a well known name that I should add to this blog post so that it is easier to find?&lt;/p&gt;&lt;p&gt;2) My next thought was&lt;/p&gt;&lt;p&gt;For which functions f: N--&amp;gt;N is it the case that every sequence a, f(a), f(f(a)), ... is eventually constant. I leave that for you to ponder.&lt;/p&gt;&lt;p&gt;3) The asker of the question is of a more real-world bent and emailed me what happens in other languages:&lt;/p&gt;&lt;p&gt;Spanish has one number whose name is its own length: 5 is cinco. I leave it to the reader to show that in Spanish the sequence always becomes all 5&#39;s. (NOTE- a commenter says NO, you an have a 4-6 cycle. Cool!)&amp;nbsp;&lt;/p&gt;&lt;p&gt;French seems to have no such numbers, so it cannot have this behavior.&lt;/p&gt;&lt;p&gt;Norwegian has three such numbers: 2 is to, 3 is tre, 4 is fire. So I suspect every such sequence either is constant-2, constant-3 or contant-4.&lt;/p&gt;&lt;p&gt;See this article&amp;nbsp;&lt;a href=&quot;https://mathlair.allfunandgames.ca/languages.php&quot;&gt;here&lt;/a&gt;&amp;nbsp;for more the numbers 1-10 in several languages.&lt;/p&gt;&lt;p&gt;OBLIGATORY ChatGpt note: Lance saw this post in our blog account and was curious what ChatGpt would do with it. For what he got see&amp;nbsp;&lt;a href=&quot;https://www.cs.umd.edu/~gasarch/BLOGPAPERS/mapnum.txt&quot;&gt;here&lt;/a&gt;. You can decide if a program can take over the blog anytime soon.&amp;nbsp;&lt;/p&gt;&lt;p class=&quot;authors&quot;&gt;By gasarch&lt;/p&gt;
  </content>
    <author>
      <name>Computational Complexity</name>
      <uri>http://blog.computationalcomplexity.org/</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">Emanuele Viola: Mathematics of the impossible, Chapter 12, Data structures</title>
    <link href="https://emanueleviola.wordpress.com/2023/05/14/mathematics-of-the-impossible-chapter-12-data-structures/"/>
    <id>http://emanueleviola.wordpress.com/?p=1254</id>
    <updated>2023-05-14T13:48:09+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;And as promised, here&amp;#8217;s a chapter on data structures&amp;#8230; in a complexity theory course!&lt;br /&gt;
&amp;#8212;&lt;br /&gt;
Data structures aim to maintain data in memory so as to be able to support various operations, such as answering queries about the data, and updating the data. The study of data structures is fundamental and extensive. We distinguish and study in turn two types of data structure problems: &lt;em&gt;static&lt;/em&gt; and &lt;em&gt;dynamic&lt;/em&gt;. In the former the input is given once and cannot modified by the queries. In the latter queries can modify the input; this includes classical problems such as supporting insert, search, and delete of keys.&lt;/p&gt;
&lt;h3 class=&quot;sectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;12.1   &lt;/span&gt; &lt;a id=&quot;x1-12100012.1&quot;&gt;&lt;/a&gt;Static data structures&lt;/h3&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-121001r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Definition&lt;/b&gt; 12.1.  &lt;/span&gt;A static data-structure problem is simply a function &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D%5En+%5Cto+%5Bq%5D%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D%5En+%5Cto+%5Bq%5D%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D%5En+%5Cto+%5Bq%5D%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:&amp;#92;{0,1&amp;#92;}^n &amp;#92;to [q]^{m}&quot; class=&quot;latex&quot; /&gt;. A data structure for &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; with space &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&quot; class=&quot;latex&quot; /&gt;, word size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w&quot; class=&quot;latex&quot; /&gt; and time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt; is a way to write &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; as&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+f%28x%29%3Dh%28g%28x%29%29+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+f%28x%29%3Dh%28g%28x%29%29+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+f%28x%29%3Dh%28g%28x%29%29+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} f(x)=h(g(x)) &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;where &lt;img src=&quot;https://s0.wp.com/latex.php?latex=g%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5B2%5E%7Bw%7D%5D%5E%7Bs%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=g%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5B2%5E%7Bw%7D%5D%5E%7Bs%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=g%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5B2%5E%7Bw%7D%5D%5E%7Bs%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;g:&amp;#92;{0,1&amp;#92;} ^{n}&amp;#92;to [2^{w}]^{s}&quot; class=&quot;latex&quot; /&gt;, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=h%3A%5B2%5E%7Bw%7D%5D%5E%7Bs%7D%5Cto+%5Bq%5D%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=h%3A%5B2%5E%7Bw%7D%5D%5E%7Bs%7D%5Cto+%5Bq%5D%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=h%3A%5B2%5E%7Bw%7D%5D%5E%7Bs%7D%5Cto+%5Bq%5D%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;h:[2^{w}]^{s}&amp;#92;to [q]^{m}&quot; class=&quot;latex&quot; /&gt;, and each output bit of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=h&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=h&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=h&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;h&quot; class=&quot;latex&quot; /&gt; depends on &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le t&quot; class=&quot;latex&quot; /&gt; input words (we think of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&quot; class=&quot;latex&quot; /&gt; as divided into words of length &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w&quot; class=&quot;latex&quot; /&gt;).&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;Here we have &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt; bits of input data about which we would like to answer &lt;img src=&quot;https://s0.wp.com/latex.php?latex=m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;m&quot; class=&quot;latex&quot; /&gt; queries. Often the queries and or the word size are boolean, i.e., &lt;img src=&quot;https://s0.wp.com/latex.php?latex=2%5E%7Bw%7D%3Dq%3D2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=2%5E%7Bw%7D%3Dq%3D2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=2%5E%7Bw%7D%3Dq%3D2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;2^{w}=q=2&quot; class=&quot;latex&quot; /&gt;. Another typical setting is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=q%3D2%5E%7Bw%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=q%3D2%5E%7Bw%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=q%3D2%5E%7Bw%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;q=2^{w}&quot; class=&quot;latex&quot; /&gt;. The data structure aims to accomplish this by storing the input into &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&quot; class=&quot;latex&quot; /&gt; bits of memory. This map is arbitrary, with no bound on resources. But after that, each query can be answered very fast, by reading only &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt; words. In general, these words can be read adaptively. But for simplicity we focus on the case in which the locations are fixed by the data structure and the same for every input &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&amp;#92;in &amp;#92;{0,1&amp;#92;} ^{n}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-121002r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 12.1.  &lt;/span&gt;Consider the data structure problem &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:&amp;#92;{0,1&amp;#92;} ^{n}&amp;#92;to &amp;#92;{0,1&amp;#92;} ^{m}&quot; class=&quot;latex&quot; /&gt; where &lt;img src=&quot;https://s0.wp.com/latex.php?latex=m%3Dn%5E%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=m%3Dn%5E%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=m%3Dn%5E%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;m=n^{2}&quot; class=&quot;latex&quot; /&gt; and query &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%28i%2Cj%29%5Cin+%5C%7B1%2C2%2C%5Cldots+%2Cn%5C%7D%5E%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%28i%2Cj%29%5Cin+%5C%7B1%2C2%2C%5Cldots+%2Cn%5C%7D%5E%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28i%2Cj%29%5Cin+%5C%7B1%2C2%2C%5Cldots+%2Cn%5C%7D%5E%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;(i,j)&amp;#92;in &amp;#92;{1,2,&amp;#92;ldots ,n&amp;#92;}^{2}&quot; class=&quot;latex&quot; /&gt; is the parity of the input bits from &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&quot; class=&quot;latex&quot; /&gt; to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=j&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=j&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=j&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;j&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Give a data structure for this problem with &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s%3Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s%3Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s%3Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s=n&quot; class=&quot;latex&quot; /&gt;, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w=1&quot; class=&quot;latex&quot; /&gt;, and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%3D2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%3D2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%3D2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t=2&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-121003r2&quot;&gt;&lt;/a&gt;                                                                                                                                                                                     &lt;b&gt;Exercise&lt;/b&gt; 12.2.  &lt;/span&gt;Show that any data-structure problem &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:&amp;#92;{0,1&amp;#92;} ^{n}&amp;#92;to &amp;#92;{0,1&amp;#92;} ^{m}&quot; class=&quot;latex&quot; /&gt; has a data structure with &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w=1&quot; class=&quot;latex&quot; /&gt; and the following parameters:&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   (1) &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s%3Dm&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s%3Dm&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s%3Dm&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s=m&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t=1&quot; class=&quot;latex&quot; /&gt;, and&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   (2) &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s%3Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s%3Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s%3Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s=n&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%3Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%3Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%3Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t=n&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-121004r3&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 12.3.  &lt;/span&gt;Prove that for every &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=m%5Cle+2%5E%7Bn%2F2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=m%5Cle+2%5E%7Bn%2F2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=m%5Cle+2%5E%7Bn%2F2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;m&amp;#92;le 2^{n/2}&quot; class=&quot;latex&quot; /&gt; there exist functions &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:&amp;#92;{0,1&amp;#92;} ^{n}&amp;#92;to &amp;#92;{0,1&amp;#92;} ^{m}&quot; class=&quot;latex&quot; /&gt; s.t.&amp;nbsp;any data structure with space &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s%3Dm%2F2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s%3Dm%2F2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s%3Dm%2F2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s=m/2&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w=1&quot; class=&quot;latex&quot; /&gt; requires time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%5Cge+n-c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%5Cge+n-c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%5Cge+n-c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&amp;#92;ge n-c&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   By contrast, next we present the the best known impossibility result.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-121005r2&quot;&gt;&lt;/a&gt; &lt;b&gt;Definition&lt;/b&gt; 12.2.  &lt;/span&gt;A function &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3A%5B2%5D%5E%7Bn%7D%5Cto+%5Bq%5D%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3A%5B2%5D%5E%7Bn%7D%5Cto+%5Bq%5D%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3A%5B2%5D%5E%7Bn%7D%5Cto+%5Bq%5D%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:[2]^{n}&amp;#92;to [q]^{m}&quot; class=&quot;latex&quot; /&gt; is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt;-wise uniform if any &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt; output coordinates are uniform when the input to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; is uniform.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-121006r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 12.1.  &lt;/span&gt;&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#XSiegel04&quot;&gt;65&lt;/a&gt;]&lt;/span&gt; Let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3A%5Bq%5D%5E%7Bd%7D%5Cto+%5Bq%5D%5E%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3A%5Bq%5D%5E%7Bd%7D%5Cto+%5Bq%5D%5E%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3A%5Bq%5D%5E%7Bd%7D%5Cto+%5Bq%5D%5E%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:[q]^{d}&amp;#92;to [q]^{q}&quot; class=&quot;latex&quot; /&gt; be &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt;-wise uniform. Let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;q&quot; class=&quot;latex&quot; /&gt; be a power of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;2&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c%5Clog+q%5Cle+d%5Cle+q%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c%5Clog+q%5Cle+d%5Cle+q%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c%5Clog+q%5Cle+d%5Cle+q%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c&amp;#92;log q&amp;#92;le d&amp;#92;le q^{c}&quot; class=&quot;latex&quot; /&gt;. Then any data structure with &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w%3D%5Clog+q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w%3D%5Clog+q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w%3D%5Clog+q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w=&amp;#92;log q&quot; class=&quot;latex&quot; /&gt; using space &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&quot; class=&quot;latex&quot; /&gt; (which recall is measured in words of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w&quot; class=&quot;latex&quot; /&gt; bits) and time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt; has:&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+t%5Cgeq+c%5Cfrac+%7B%5Clog+q%7D%7B%5Clog+%28s%2Fd%29%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+t%5Cgeq+c%5Cfrac+%7B%5Clog+q%7D%7B%5Clog+%28s%2Fd%29%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+t%5Cgeq+c%5Cfrac+%7B%5Clog+q%7D%7B%5Clog+%28s%2Fd%29%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} t&amp;#92;geq c&amp;#92;frac {&amp;#92;log q}{&amp;#92;log (s/d)}. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Interpreting the input as coefficients of a degree &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d-1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d-1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d-1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d-1&quot; class=&quot;latex&quot; /&gt; univariate polynomial over &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D_%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D_%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D_%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;mathbb {F}_{q}&quot; class=&quot;latex&quot; /&gt; and outputting its evaluations shows that such functions exists, and are in P. Below we give a surprising data structure that nearly matches the theorem.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   To match previous parameters note that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%3Dd%5Clog+q%3Ddw&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%3Dd%5Clog+q%3Ddw&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%3Dd%5Clog+q%3Ddw&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n=d&amp;#92;log q=dw&quot; class=&quot;latex&quot; /&gt;, and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=m%3D%5Clog+q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=m%3D%5Clog+q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=m%3D%5Clog+q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;m=&amp;#92;log q&quot; class=&quot;latex&quot; /&gt;. Hence the bound is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%5Cge+c%28%5Clog+m%29%2F%5Clog+%28sw%2Fn%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%5Cge+c%28%5Clog+m%29%2F%5Clog+%28sw%2Fn%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%5Cge+c%28%5Clog+m%29%2F%5Clog+%28sw%2Fn%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&amp;#92;ge c(&amp;#92;log m)/&amp;#92;log (sw/n)&quot; class=&quot;latex&quot; /&gt;. Note that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=sw&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=sw&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=sw&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;sw&quot; class=&quot;latex&quot; /&gt; is the space of the data structure measured in bits. It follows that if &lt;img src=&quot;https://s0.wp.com/latex.php?latex=sw&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=sw&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=sw&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;sw&quot; class=&quot;latex&quot; /&gt; is linear in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt; then &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%5Cge+c%5Clog+m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%5Cge+c%5Clog+m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%5Cge+c%5Clog+m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&amp;#92;ge c&amp;#92;log m&quot; class=&quot;latex&quot; /&gt;. This result remains non-trivial for &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&quot; class=&quot;latex&quot; /&gt; slightly super-linear. But remarkably, if &lt;img src=&quot;https://s0.wp.com/latex.php?latex=sw%3Dn%5E%7B1%2Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=sw%3Dn%5E%7B1%2Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=sw%3Dn%5E%7B1%2Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;sw=n^{1+c}&quot; class=&quot;latex&quot; /&gt; then nothing is known (for &lt;img src=&quot;https://s0.wp.com/latex.php?latex=m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;m&quot; class=&quot;latex&quot; /&gt; power in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt; one only gets &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&amp;#92;ge c&quot; class=&quot;latex&quot; /&gt;).&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;    &lt;b&gt;Proof&lt;/b&gt;.&amp;nbsp;&lt;/span&gt;The idea in the proof is to find a subset &lt;img src=&quot;https://s0.wp.com/latex.php?latex=S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;S&quot; class=&quot;latex&quot; /&gt; of less than &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt; memory cells that still allows us to answer &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cge+d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cge+d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cge+d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;ge d&quot; class=&quot;latex&quot; /&gt; queries. This is impossible, since we can’t generate &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt; uniform outputs from less than &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt; memory cells.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=p%3A%3D1%2Fq%5E%7B1%2F4t%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=p%3A%3D1%2Fq%5E%7B1%2F4t%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=p%3A%3D1%2Fq%5E%7B1%2F4t%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;p:=1/q^{1/4t}&quot; class=&quot;latex&quot; /&gt;. Include each memory bit in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;S&quot; class=&quot;latex&quot; /&gt; with probability &lt;img src=&quot;https://s0.wp.com/latex.php?latex=p&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=p&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=p&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;p&quot; class=&quot;latex&quot; /&gt;, independently. By Theorem &lt;a href=&quot;#x1-30001r7&quot;&gt;2.7&lt;!--tex4ht:ref: thm:tail-bound --&gt;&lt;/a&gt;, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BP%7D%5B%7CS%7C%5Cge+cps%5D%5Cle+2%5E%7B-cps%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BP%7D%5B%7CS%7C%5Cge+cps%5D%5Cle+2%5E%7B-cps%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BP%7D%5B%7CS%7C%5Cge+cps%5D%5Cle+2%5E%7B-cps%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;mathbb {P}[|S|&amp;#92;ge cps]&amp;#92;le 2^{-cps}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   We are still able to answer a query if all of its memory bits fall in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;S&quot; class=&quot;latex&quot; /&gt;. The probability that this happens is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=p%5E%7Bt%7D%3D1%2Fq%5E%7B1%2F4%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=p%5E%7Bt%7D%3D1%2Fq%5E%7B1%2F4%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=p%5E%7Bt%7D%3D1%2Fq%5E%7B1%2F4%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;p^{t}=1/q^{1/4}&quot; class=&quot;latex&quot; /&gt;. We now claim that with probability &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cge+1%2Fq%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cge+1%2Fq%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cge+1%2Fq%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;ge 1/q^{c}&quot; class=&quot;latex&quot; /&gt;, we can still answer &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Csqrt+%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Csqrt+%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Csqrt+%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;sqrt {q}&quot; class=&quot;latex&quot; /&gt; queries. Indeed, let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B&quot; class=&quot;latex&quot; /&gt; be the number of queries we cannot answer. We have &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BE%7D%5B%7CB%7C%5D%5Cle+q%281-q%5E%7B1%2F4%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BE%7D%5B%7CB%7C%5D%5Cle+q%281-q%5E%7B1%2F4%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BE%7D%5B%7CB%7C%5D%5Cle+q%281-q%5E%7B1%2F4%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;mathbb {E}[|B|]&amp;#92;le q(1-q^{1/4})&quot; class=&quot;latex&quot; /&gt;. And so&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb+%7BP%7D%5BB%5Cge+q%281-1%2F%5Csqrt+%7Bq%7D%29%5D%5Cle+%5Cfrac+%7B1-q%5E%7B1%2F4%7D%7D%7B1-%5Csqrt+%7Bq%7D%7D%5Cle+1-q%5E%7Bc%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb+%7BP%7D%5BB%5Cge+q%281-1%2F%5Csqrt+%7Bq%7D%29%5D%5Cle+%5Cfrac+%7B1-q%5E%7B1%2F4%7D%7D%7B1-%5Csqrt+%7Bq%7D%7D%5Cle+1-q%5E%7Bc%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cmathbb+%7BP%7D%5BB%5Cge+q%281-1%2F%5Csqrt+%7Bq%7D%29%5D%5Cle+%5Cfrac+%7B1-q%5E%7B1%2F4%7D%7D%7B1-%5Csqrt+%7Bq%7D%7D%5Cle+1-q%5E%7Bc%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} &amp;#92;mathbb {P}[B&amp;#92;ge q(1-1/&amp;#92;sqrt {q})]&amp;#92;le &amp;#92;frac {1-q^{1/4}}{1-&amp;#92;sqrt {q}}&amp;#92;le 1-q^{c}. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Thus, if the inequality &lt;img src=&quot;https://s0.wp.com/latex.php?latex=2%5E%7B-cps%7D%5Cleq+1%2Fq%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=2%5E%7B-cps%7D%5Cleq+1%2Fq%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=2%5E%7B-cps%7D%5Cleq+1%2Fq%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;2^{-cps}&amp;#92;leq 1/q^{c}&quot; class=&quot;latex&quot; /&gt; holds then there exists a set &lt;img src=&quot;https://s0.wp.com/latex.php?latex=S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=S&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;S&quot; class=&quot;latex&quot; /&gt; of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=cps&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=cps&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=cps&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;cps&quot; class=&quot;latex&quot; /&gt; bits with which we can answer &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cge+%5Csqrt+%7Bq%7D%3Ed&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cge+%5Csqrt+%7Bq%7D%3Ed&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cge+%5Csqrt+%7Bq%7D%3Ed&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;ge &amp;#92;sqrt {q}&amp;gt;d&quot; class=&quot;latex&quot; /&gt; queries. Hence we reach a contradiction if&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+c%5Clog+q%5Cle+cps%3Cd.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+c%5Clog+q%5Cle+cps%3Cd.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+c%5Clog+q%5Cle+cps%3Cd.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} c&amp;#92;log q&amp;#92;le cps&amp;lt;d. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;=&amp;quot;&amp;quot;  Because &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d%3Ec%5Clog+q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d%3Ec%5Clog+q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d%3Ec%5Clog+q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&amp;gt;c&amp;#92;log q&quot; class=&quot;latex&quot; /&gt; by assumption, and increasing &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&quot; class=&quot;latex&quot; /&gt; only make the problem easier, we reach a contradiction if &lt;img src=&quot;https://s0.wp.com/latex.php?latex=cps%3Cd&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=cps%3Cd&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=cps%3Cd&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;cps&amp;lt;d&quot; class=&quot;latex&quot; /&gt;, and=&amp;quot;&amp;quot; the=&amp;quot;&amp;quot; result=&amp;quot;&amp;quot; follows.=&amp;quot;&amp;quot; &lt;b&gt;QED    &lt;/p&gt;
&lt;p&gt;&lt;/b&gt;&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Next we show a conceptually simple data structure which nearly matches the lower bound. For simplicity we focus on data structures which use space &lt;img src=&quot;https://s0.wp.com/latex.php?latex=q%5E%7B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=q%5E%7B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=q%5E%7B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;q^{&amp;#92;epsilon }&quot; class=&quot;latex&quot; /&gt; – recall in this case the previous result does not give anything. We will show this is for good reasons, there are data structures where the time is constant. We will only show &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c_%7B%5Cepsilon+%7Dd&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c_%7B%5Cepsilon+%7Dd&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c_%7B%5Cepsilon+%7Dd&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c_{&amp;#92;epsilon }d&quot; class=&quot;latex&quot; /&gt;-wise independence, as opposed to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt;-wise, but the proof techniques next and above generalize to other settings of parameters.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-121007r2&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 12.2.  &lt;/span&gt;There is a map &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3A%5Bq%5D%5E%7Bd%7D%5Cto+%5Bq%5D%5E%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3A%5Bq%5D%5E%7Bd%7D%5Cto+%5Bq%5D%5E%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3A%5Bq%5D%5E%7Bd%7D%5Cto+%5Bq%5D%5E%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:[q]^{d}&amp;#92;to [q]^{q}&quot; class=&quot;latex&quot; /&gt; which is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c_%7B%5Cepsilon+%7Dd&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c_%7B%5Cepsilon+%7Dd&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c_%7B%5Cepsilon+%7Dd&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c_{&amp;#92;epsilon }d&quot; class=&quot;latex&quot; /&gt;-wise uniform and has a data structure with &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w%3D%5Clog+q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w%3D%5Clog+q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w%3D%5Clog+q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w=&amp;#92;log q&quot; class=&quot;latex&quot; /&gt; space &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s%3Ddq%5E%7B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s%3Ddq%5E%7B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s%3Ddq%5E%7B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s=dq^{&amp;#92;epsilon }&quot; class=&quot;latex&quot; /&gt; and time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c_%7B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c_%7B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c_%7B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c_{&amp;#92;epsilon }&quot; class=&quot;latex&quot; /&gt;, for any &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cepsilon+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cepsilon+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cepsilon+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;epsilon &quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;q&quot; class=&quot;latex&quot; /&gt; which is a power of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;2&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   To give a sense of the parameters, let for example &lt;img src=&quot;https://s0.wp.com/latex.php?latex=q%3Dd%5E%7B10%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=q%3Dd%5E%7B10%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=q%3Dd%5E%7B10%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;q=d^{10}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;    &lt;b&gt;Proof&lt;/b&gt;.&amp;nbsp;&lt;/span&gt;We fill the memory with &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&quot; class=&quot;latex&quot; /&gt; evaluations of the input polynomial. Then we pick a random bipartite graph with &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&quot; class=&quot;latex&quot; /&gt; nodes on the left and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=q&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;q&quot; class=&quot;latex&quot; /&gt; nodes on the right. Every node on the right side has degree &lt;img src=&quot;https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;g&quot; class=&quot;latex&quot; /&gt;. We answer each query by summing the corresponding cells in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&quot; class=&quot;latex&quot; /&gt;. Let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d%27%3A%3Dd%2Fg&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d%27%3A%3Dd%2Fg&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d%27%3A%3Dd%2Fg&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&amp;#039;:=d/g&quot; class=&quot;latex&quot; /&gt;. To show &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d%27&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d%27&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d%27&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&amp;#039;&quot; class=&quot;latex&quot; /&gt;-wise uniformity it suffices to show that for any subset &lt;img src=&quot;https://s0.wp.com/latex.php?latex=R%5Csubseteq+%5Bq%5D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=R%5Csubseteq+%5Bq%5D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=R%5Csubseteq+%5Bq%5D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;R&amp;#92;subseteq [q]&quot; class=&quot;latex&quot; /&gt; on the right-hand side of size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d%27&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d%27&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d%27&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&amp;#039;&quot; class=&quot;latex&quot; /&gt;, the sum of the corresponding memory cells is uniform in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D_%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D_%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BF%7D_%7Bq%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;mathbb {F}_{q}&quot; class=&quot;latex&quot; /&gt;. For this in turn it suffices that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=R&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=R&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=R&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;R&quot; class=&quot;latex&quot; /&gt; has a unique neighbor. And for that, finally, it suffices that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=R&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=R&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=R&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;R&quot; class=&quot;latex&quot; /&gt; has a neighborhood of size greater than &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cfrac+%7Bg%7CR%7C%7D%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cfrac+%7Bg%7CR%7C%7D%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cfrac+%7Bg%7CR%7C%7D%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;frac {g|R|}{2}&quot; class=&quot;latex&quot; /&gt; (because if every element in the neighborhood of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=R&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=R&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=R&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;R&quot; class=&quot;latex&quot; /&gt; has two neighbors in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=R&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=R&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=R&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;R&quot; class=&quot;latex&quot; /&gt; then &lt;img src=&quot;https://s0.wp.com/latex.php?latex=R&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=R&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=R&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;R&quot; class=&quot;latex&quot; /&gt; has a neighborhood of size less than &lt;img src=&quot;https://s0.wp.com/latex.php?latex=g%7Cr%7C+2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=g%7Cr%7C+2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=g%7Cr%7C+2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;g|r| 2&quot; class=&quot;latex&quot; /&gt;).&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Note here we are using that the neighborhood has size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+gd%27%3Dd&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+gd%27%3Dd&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+gd%27%3Dd&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le gd&amp;#039;=d&quot; class=&quot;latex&quot; /&gt;, and so the memory is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d&quot; class=&quot;latex&quot; /&gt;-wise uniform.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   We pick the graph at random and show that it has the latter property with non-zero probability.&lt;br /&gt;
[Standard calculations follow that wordpress has trouble displaying&amp;#8230; wait for the book draft, I guess.]&lt;br /&gt;
&lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h4 class=&quot;subsectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;12.1.1   &lt;/span&gt; &lt;a id=&quot;x1-12200012.1.1&quot;&gt;&lt;/a&gt;Succinct data structures&lt;/h4&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;Succinct data structures are those where the space is close to the minimum, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt;. Specifically, we let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s%3Dn%2Br&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s%3Dn%2Br&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s%3Dn%2Br&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s=n+r&quot; class=&quot;latex&quot; /&gt; for some &lt;img src=&quot;https://s0.wp.com/latex.php?latex=r%3Do%28n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=r%3Do%28n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=r%3Do%28n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;r=o(n)&quot; class=&quot;latex&quot; /&gt; called &lt;em&gt;redundancy. &lt;/em&gt;Unsurprisingly, stronger bounds can be probed in this setting. But, surprisingly, again these stronger bounds were shown to be tight. Moreover, it was shown that improving the bounds would imply stronger circuit lower bounds.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   To illustrate, consider the ECC problem &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:&amp;#92;{0,1&amp;#92;} ^{n}&amp;#92;to &amp;#92;{0,1&amp;#92;} ^{m}&quot; class=&quot;latex&quot; /&gt; where &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; is an error-correcting code (with constant relative distance) and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;m&quot; class=&quot;latex&quot; /&gt; is linear in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-122001r3&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 12.3.  &lt;/span&gt;&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#XGalMiltersen07&quot;&gt;26&lt;/a&gt;]&lt;/span&gt; Any data-structure for the ECC problem with &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w=1&quot; class=&quot;latex&quot; /&gt; using space &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%2Br&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%2Br&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%2Br&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n+r&quot; class=&quot;latex&quot; /&gt; requires time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cge+cn%2Fr&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cge+cn%2Fr&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cge+cn%2Fr&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;ge cn/r&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   This is nearly matched by the following result.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-122002r4&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 12.4.  &lt;/span&gt;&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#Xviola-datastructurelb-implies-cclb&quot;&gt;81&lt;/a&gt;]&lt;/span&gt; There is an ECC problem s.t.&amp;nbsp;for any &lt;img src=&quot;https://s0.wp.com/latex.php?latex=r&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=r&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=r&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;r&quot; class=&quot;latex&quot; /&gt; it has a data structure with &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w=1&quot; class=&quot;latex&quot; /&gt;, space &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%2Br&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%2Br&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%2Br&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n+r&quot; class=&quot;latex&quot; /&gt;, and time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c%28n%2Fr%29%5Clog+%5E%7B3%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c%28n%2Fr%29%5Clog+%5E%7B3%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c%28n%2Fr%29%5Clog+%5E%7B3%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c(n/r)&amp;#92;log ^{3}n&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Moreover, it was shown that proving a time lower bound of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%28n%2Fr%29%5Clog+%5E%7Bc%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%28n%2Fr%29%5Clog+%5E%7Bc%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28n%2Fr%29%5Clog+%5E%7Bc%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;(n/r)&amp;#92;log ^{c}n&quot; class=&quot;latex&quot; /&gt; would imply new circuit lower bounds. The latter result refers to bounds on the number of wires in circuits with arbitrary gates. But the following connection with the standard circuit model is also known.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-122003r5&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 12.5.  &lt;/span&gt;&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#Xviola-datastructurelb-implies-cclb&quot;&gt;81&lt;/a&gt;]&lt;/span&gt; Let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bam%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bam%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bam%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:&amp;#92;{0,1&amp;#92;} ^{n}&amp;#92;to &amp;#92;{0,1&amp;#92;} ^{am}&quot; class=&quot;latex&quot; /&gt; be a function computable by bounded fan-in circuits with &lt;img src=&quot;https://s0.wp.com/latex.php?latex=bm&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=bm&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=bm&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;bm&quot; class=&quot;latex&quot; /&gt; wires and depth &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b%5Clog+m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b%5Clog+m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b%5Clog+m&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b&amp;#92;log m&quot; class=&quot;latex&quot; /&gt;, for constants &lt;img src=&quot;https://s0.wp.com/latex.php?latex=a%2Cb&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=a%2Cb&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=a%2Cb&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;a,b&quot; class=&quot;latex&quot; /&gt;. Then &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; has a data structure with space &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%2Bo%28n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%2Bo%28n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%2Bo%28n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n+o(n)&quot; class=&quot;latex&quot; /&gt; and time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%5E%7Bo%281%29%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%5E%7Bo%281%29%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%5E%7Bo%281%29%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n^{o(1)}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Hence, proving &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%5E%7B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%5E%7B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%5E%7B%5Cepsilon+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n^{&amp;#92;epsilon }&quot; class=&quot;latex&quot; /&gt; time lower bounds for succinct data structures would give functions that cannot be computed by linear-size log-depth circuits, cf.&amp;nbsp;&lt;a href=&quot;#x1-1100009.3&quot;&gt;9.3&lt;!--tex4ht:ref: sec:Linear-size-log-depth --&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h4 class=&quot;subsectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;12.1.2   &lt;/span&gt; &lt;a id=&quot;x1-12300012.1.2&quot;&gt;&lt;/a&gt;Succincter: The trits problem&lt;/h4&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;In this section we present a cute and fundamental data-structure problem with a shocking and counterintuitive solution. The trits problem is to compute &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3A%5B3%5D%5E%7Bn%7D%5Cto+%28%5C%7B0%2C1%5C%7D+%5E%7B2%7D%29%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3A%5B3%5D%5E%7Bn%7D%5Cto+%28%5C%7B0%2C1%5C%7D+%5E%7B2%7D%29%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3A%5B3%5D%5E%7Bn%7D%5Cto+%28%5C%7B0%2C1%5C%7D+%5E%7B2%7D%29%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:[3]^{n}&amp;#92;to (&amp;#92;{0,1&amp;#92;} ^{2})^{n}&quot; class=&quot;latex&quot; /&gt; where on input &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt; “trits” (i.e., ternary elements) &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%28t_%7B1%7D%2Ct_%7B2%7D%2C%5Cldots+%2Ct_%7Bn%7D%29%5Cin+%5B3%5D%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%28t_%7B1%7D%2Ct_%7B2%7D%2C%5Cldots+%2Ct_%7Bn%7D%29%5Cin+%5B3%5D%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28t_%7B1%7D%2Ct_%7B2%7D%2C%5Cldots+%2Ct_%7Bn%7D%29%5Cin+%5B3%5D%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;(t_{1},t_{2},&amp;#92;ldots ,t_{n})&amp;#92;in [3]^{n}&quot; class=&quot;latex&quot; /&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; outputs their representations using two bits per trit.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-123001r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Example&lt;/b&gt; 12.1.  &lt;/span&gt;For &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n=1&quot; class=&quot;latex&quot; /&gt;, we have &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%280%29%3D00%2Cf%281%29%3D01%2Cf%282%29%3D10&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%280%29%3D00%2Cf%281%29%3D01%2Cf%282%29%3D10&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%280%29%3D00%2Cf%281%29%3D01%2Cf%282%29%3D10&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f(0)=00,f(1)=01,f(2)=10&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Note that the input ranges over &lt;img src=&quot;https://s0.wp.com/latex.php?latex=3%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=3%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=3%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;3^{n}&quot; class=&quot;latex&quot; /&gt; elements, and so the minimum space of the data structure is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s%3D%5Clceil+%5Clog+_%7B2%7D3%5E%7Bn%7D%5Crceil+%3D%5Clceil+n%5Clog+_%7B2%7D3%5Crceil+%5Capprox+n%5Ccdot+1.584%5Cldots+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s%3D%5Clceil+%5Clog+_%7B2%7D3%5E%7Bn%7D%5Crceil+%3D%5Clceil+n%5Clog+_%7B2%7D3%5Crceil+%5Capprox+n%5Ccdot+1.584%5Cldots+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s%3D%5Clceil+%5Clog+_%7B2%7D3%5E%7Bn%7D%5Crceil+%3D%5Clceil+n%5Clog+_%7B2%7D3%5Crceil+%5Capprox+n%5Ccdot+1.584%5Cldots+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s=&amp;#92;lceil &amp;#92;log _{2}3^{n}&amp;#92;rceil =&amp;#92;lceil n&amp;#92;log _{2}3&amp;#92;rceil &amp;#92;approx n&amp;#92;cdot 1.584&amp;#92;ldots &quot; class=&quot;latex&quot; /&gt; This will be our benchmark for space. One can encode the input to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; as before using bits without loss of generality, but the current choice simplifies the exposition.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h5 class=&quot;likesubsubsectionHead&quot;&gt;&lt;a id=&quot;x1-12400012.1.2&quot;&gt;&lt;/a&gt;Simple solutions:&lt;/h5&gt;
&lt;ul class=&quot;itemize1&quot;&gt;
&lt;li class=&quot;itemize&quot;&gt;The simplest solution (cf.&amp;nbsp;&lt;a href=&quot;#x1-121003r2&quot;&gt;12.2&lt;!--tex4ht:ref: xca:static-ds-trivial-sols --&gt;&lt;/a&gt;) to this problem is to use &lt;img src=&quot;https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;2&quot; class=&quot;latex&quot; /&gt; bits per &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t_{i}&quot; class=&quot;latex&quot; /&gt;. With such an encoding we can retrieve each &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t_%7Bi%7D%5Cin+%5B3%5D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t_%7Bi%7D%5Cin+%5B3%5D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t_%7Bi%7D%5Cin+%5B3%5D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t_{i}&amp;#92;in [3]&quot; class=&quot;latex&quot; /&gt; by reading just &lt;img src=&quot;https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;2&quot; class=&quot;latex&quot; /&gt; bits (which is optimal). The space used is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s%3D2n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s%3D2n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s%3D2n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s=2n&quot; class=&quot;latex&quot; /&gt; and we have linear redundancy.&lt;/li&gt;
&lt;li class=&quot;itemize&quot;&gt;Another solution (cf.&amp;nbsp;again &lt;a href=&quot;#x1-121003r2&quot;&gt;12.2&lt;!--tex4ht:ref: xca:static-ds-trivial-sols --&gt;&lt;/a&gt;) to this problem is what is called &lt;em&gt;arithmetic coding&lt;/em&gt;: we think of the concatenated elements as forming a ternary number between &lt;img src=&quot;https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;0&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=3%5E%7Bn%7D-1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=3%5E%7Bn%7D-1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=3%5E%7Bn%7D-1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;3^{n}-1&quot; class=&quot;latex&quot; /&gt;, and we write down its binary representation. To retrieve &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t_{i}&quot; class=&quot;latex&quot; /&gt; it seems we need to read all the input bits, but the space needed is optimal.&lt;/li&gt;
&lt;li class=&quot;itemize&quot;&gt;For this and other problems, we can trade between these two extreme as follows. Group the &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t_{i}&quot; class=&quot;latex&quot; /&gt;’s into blocks of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt;. Encode each block with arithmetic coding. The retrieval time will be &lt;img src=&quot;https://s0.wp.com/latex.php?latex=ct&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=ct&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=ct&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;ct&quot; class=&quot;latex&quot; /&gt; bits and the needed space will be &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%28n%2Ft%29%5Clceil+t%5Clog+_%7B2%7D3%5Crceil+%5Cleq+n%5Clog+_%7B2%7D3%2Bn%2Ft&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%28n%2Ft%29%5Clceil+t%5Clog+_%7B2%7D3%5Crceil+%5Cleq+n%5Clog+_%7B2%7D3%2Bn%2Ft&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28n%2Ft%29%5Clceil+t%5Clog+_%7B2%7D3%5Crceil+%5Cleq+n%5Clog+_%7B2%7D3%2Bn%2Ft&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;(n/t)&amp;#92;lceil t&amp;#92;log _{2}3&amp;#92;rceil &amp;#92;leq n&amp;#92;log _{2}3+n/t&quot; class=&quot;latex&quot; /&gt; (assuming &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt; divides &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt;). This is block-wise arithmetic coding. It provides a &lt;em&gt;power&lt;/em&gt; trade-off between retrieval time and redundancy. (Using number-theoretic results on logarithmic forms, one can show &lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#Xviola-triz&quot;&gt;80&lt;/a&gt;]&lt;/span&gt; that this last inequality is tight up to changing &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%2Ft&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%2Ft&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%2Ft&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n/t&quot; class=&quot;latex&quot; /&gt; into &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%2Ft%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%2Ft%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%2Ft%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n/t^{c}&quot; class=&quot;latex&quot; /&gt;.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h5 class=&quot;likesubsubsectionHead&quot;&gt;&lt;a id=&quot;x1-12500012.1.2&quot;&gt;&lt;/a&gt;The shocking solution: An exponential (!) trade-off&lt;/h5&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;We now present an &lt;em&gt;exponential&lt;/em&gt; trade-off: retrieval time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=ct&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=ct&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=ct&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;ct&quot; class=&quot;latex&quot; /&gt; bits and redundancy &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%2F2%5E%7Bt%7D%2Bc&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%2F2%5E%7Bt%7D%2Bc&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%2F2%5E%7Bt%7D%2Bc&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n/2^{t}+c&quot; class=&quot;latex&quot; /&gt;. In particular, if we set &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%3Dc%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%3Dc%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%3Dc%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t=c&amp;#92;log n&quot; class=&quot;latex&quot; /&gt;, we get retrieval time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=O%28%5Clog+n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=O%28%5Clog+n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=O%28%5Clog+n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;O(&amp;#92;log n)&quot; class=&quot;latex&quot; /&gt; and redundancy &lt;img src=&quot;https://s0.wp.com/latex.php?latex=O%281%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=O%281%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=O%281%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;O(1)&quot; class=&quot;latex&quot; /&gt;. Moreover, the bits read are all consecutive, so with word size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w%3D%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w%3D%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w%3D%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w=&amp;#92;log n&quot; class=&quot;latex&quot; /&gt; this can be implemented in constant time. To repeat, we can encode the trits with constant redundancy and retrieve each in constant time. This solution can also be made dynamic.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-125001r6&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 12.6.  &lt;/span&gt;&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#XPatrascu08Succincter&quot;&gt;53&lt;/a&gt;,&amp;nbsp;&lt;a href=&quot;#XDodisPT10&quot;&gt;21&lt;/a&gt;]&lt;/span&gt; The trits problem has a data structure with space &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%5Clog+_%7B2%7D3%2Bn%2F2%5E%7Bt%7D%2Bc&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%5Clog+_%7B2%7D3%2Bn%2F2%5E%7Bt%7D%2Bc&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%5Clog+_%7B2%7D3%2Bn%2F2%5E%7Bt%7D%2Bc&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&amp;#92;log _{2}3+n/2^{t}+c&quot; class=&quot;latex&quot; /&gt; (i.e., redundancy &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%2F2%5E%7Bt%7D%2Bc&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%2F2%5E%7Bt%7D%2Bc&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%2F2%5E%7Bt%7D%2Bc&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n/2^{t}+c&quot; class=&quot;latex&quot; /&gt;) and time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=ct&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=ct&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=ct&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;ct&quot; class=&quot;latex&quot; /&gt;, for any &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt; and with word size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w=1&quot; class=&quot;latex&quot; /&gt;. For word wise &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w%3D%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w%3D%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w%3D%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w=&amp;#92;log n&quot; class=&quot;latex&quot; /&gt; the time is constant.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Next we present the proof.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-125002r3&quot;&gt;&lt;/a&gt; &lt;b&gt;Definition&lt;/b&gt; 12.3 (Encoding and redundancy).  &lt;/span&gt;An  encoding  of  a  set  &lt;img src=&quot;https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;A&quot; class=&quot;latex&quot; /&gt;  into  a  set  &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B&quot; class=&quot;latex&quot; /&gt;  is  a one-to-one (a.k.a.&amp;nbsp;injective) map &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%3AA%5Cto+B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%3AA%5Cto+B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%3AA%5Cto+B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f:A&amp;#92;to B&quot; class=&quot;latex&quot; /&gt;. The &lt;em&gt;redundancy&lt;/em&gt; of the encoding &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Clog+_%7B2%7D%7CB%7C-%5Clog+_%7B2%7D%7CA&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Clog+_%7B2%7D%7CB%7C-%5Clog+_%7B2%7D%7CA&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Clog+_%7B2%7D%7CB%7C-%5Clog+_%7B2%7D%7CA&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;log _{2}|B|-&amp;#92;log _{2}|A&quot; class=&quot;latex&quot; /&gt;|.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The following lemma gives the building-block encoding we will use.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-125003r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Lemma&lt;/b&gt; 12.1.  &lt;/span&gt; For all sets &lt;img src=&quot;https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;X&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;Y&quot; class=&quot;latex&quot; /&gt;, there is an integer &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b&quot; class=&quot;latex&quot; /&gt;, a set &lt;img src=&quot;https://s0.wp.com/latex.php?latex=K&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=K&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=K&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;K&quot; class=&quot;latex&quot; /&gt; and an encoding&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+f%3A%5Cleft+%28X%5Ctimes+Y%5Cright+%29%5Crightarrow+%5Cleft+%28%5C%7B0%2C1%5C%7D+%5E%7Bb%7D%5Ctimes+K%5Cright+%29+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+f%3A%5Cleft+%28X%5Ctimes+Y%5Cright+%29%5Crightarrow+%5Cleft+%28%5C%7B0%2C1%5C%7D+%5E%7Bb%7D%5Ctimes+K%5Cright+%29+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+f%3A%5Cleft+%28X%5Ctimes+Y%5Cright+%29%5Crightarrow+%5Cleft+%28%5C%7B0%2C1%5C%7D+%5E%7Bb%7D%5Ctimes+K%5Cright+%29+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} f:&amp;#92;left (X&amp;#92;times Y&amp;#92;right )&amp;#92;rightarrow &amp;#92;left (&amp;#92;{0,1&amp;#92;} ^{b}&amp;#92;times K&amp;#92;right ) &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;such that (1) &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; has redundancy &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+c%2F%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+c%2F%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+c%2F%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le c/&amp;#92;sqrt {|Y|}&quot; class=&quot;latex&quot; /&gt;, and (2) &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x%5Cin+X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x%5Cin+X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x%5Cin+X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&amp;#92;in X&quot; class=&quot;latex&quot; /&gt; can be recovered just by reading the &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b&quot; class=&quot;latex&quot; /&gt; bits in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%28x%2Cy%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f(x,y)&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;Note that (1) says that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b%2B%5Clog+%7CK%7C-%5Clog+%7CX%7C-%5Clog+%7CY%7C%5Cle+c%2F%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b%2B%5Clog+%7CK%7C-%5Clog+%7CX%7C-%5Clog+%7CY%7C%5Cle+c%2F%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b%2B%5Clog+%7CK%7C-%5Clog+%7CX%7C-%5Clog+%7CY%7C%5Cle+c%2F%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b+&amp;#92;log |K|-&amp;#92;log |X|-&amp;#92;log |Y|&amp;#92;le c/&amp;#92;sqrt {|Y|}&quot; class=&quot;latex&quot; /&gt;. For (2) to hold we must have &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b%5Cge+%5Clog+%7CX%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b%5Cge+%5Clog+%7CX%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b%5Cge+%5Clog+%7CX%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b&amp;#92;ge &amp;#92;log |X|&quot; class=&quot;latex&quot; /&gt;. Combining this with the previous expression we obtain &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Clog+%7CK%7C-%5Clog+%7CY%7C%5Cle+c%2F%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Clog+%7CK%7C-%5Clog+%7CY%7C%5Cle+c%2F%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Clog+%7CK%7C-%5Clog+%7CY%7C%5Cle+c%2F%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;log |K|-&amp;#92;log |Y|&amp;#92;le c/&amp;#92;sqrt {|Y|}&quot; class=&quot;latex&quot; /&gt;. In particular we get that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7CK%7C%5Cle+2%5E%7Bc%7D%5Ccdot+%7CY%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7CK%7C%5Cle+2%5E%7Bc%7D%5Ccdot+%7CY%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7CK%7C%5Cle+2%5E%7Bc%7D%5Ccdot+%7CY%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;|K|&amp;#92;le 2^{c}&amp;#92;cdot |Y|&quot; class=&quot;latex&quot; /&gt; (in fact it will be the case that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7CK%7C%5Cle+c%5Ccdot+%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7CK%7C%5Cle+c%5Ccdot+%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7CK%7C%5Cle+c%5Ccdot+%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;|K|&amp;#92;le c&amp;#92;cdot &amp;#92;sqrt {|Y|}&quot; class=&quot;latex&quot; /&gt;, but the looser bound is sufficient).&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The basic idea for proving the lemma is to break &lt;img src=&quot;https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;Y&quot; class=&quot;latex&quot; /&gt; into &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C%5Ctimes+K&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C%5Ctimes+K&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C%5Ctimes+K&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C&amp;#92;times K&quot; class=&quot;latex&quot; /&gt; and then encode &lt;img src=&quot;https://s0.wp.com/latex.php?latex=X%5Ctimes+C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=X%5Ctimes+C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=X%5Ctimes+C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;X&amp;#92;times C&quot; class=&quot;latex&quot; /&gt; by using &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b&quot; class=&quot;latex&quot; /&gt; bits:&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+X%5Ctimes+Y%5Crightarrow+X%5Ctimes+C%5Ctimes+K%5Crightarrow+%5C%7B0%2C1%5C%7D+%5E%7Bb%7D%5Ctimes+K.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+X%5Ctimes+Y%5Crightarrow+X%5Ctimes+C%5Ctimes+K%5Crightarrow+%5C%7B0%2C1%5C%7D+%5E%7Bb%7D%5Ctimes+K.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+X%5Ctimes+Y%5Crightarrow+X%5Ctimes+C%5Ctimes+K%5Crightarrow+%5C%7B0%2C1%5C%7D+%5E%7Bb%7D%5Ctimes+K.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} X&amp;#92;times Y&amp;#92;rightarrow X&amp;#92;times C&amp;#92;times K&amp;#92;rightarrow &amp;#92;{0,1&amp;#92;} ^{b}&amp;#92;times K. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;There is however a subtle point. If we insist on always having &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7CC%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7CC%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7CC%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;|C|&quot; class=&quot;latex&quot; /&gt; equal to, say, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;sqrt {|Y|}&quot; class=&quot;latex&quot; /&gt; or some other quantity, then one can cook up sets that make us waste a lot (i.e., almost one bit) of space. The same of course happens in the more basic approach that just sets &lt;img src=&quot;https://s0.wp.com/latex.php?latex=Y%3DK&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=Y%3DK&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=Y%3DK&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;Y=K&quot; class=&quot;latex&quot; /&gt; and encodes all of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;X&quot; class=&quot;latex&quot; /&gt; with &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b&quot; class=&quot;latex&quot; /&gt; bits. The main idea will be to “reason backwards,” i.e., we will first pick &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b&quot; class=&quot;latex&quot; /&gt; and then try to stuff as much as possible inside &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bb%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bb%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bb%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;{0,1&amp;#92;} ^{b}&quot; class=&quot;latex&quot; /&gt;. Still, our choice of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b&quot; class=&quot;latex&quot; /&gt; will make &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7CC%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7CC%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7CC%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;|C|&quot; class=&quot;latex&quot; /&gt; about &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;sqrt {|Y|}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;    &lt;b&gt;Proof&lt;/b&gt;.&amp;nbsp;&lt;/span&gt;Pick any two sets &lt;img src=&quot;https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;X&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;Y&quot; class=&quot;latex&quot; /&gt;, where &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7CY%7C%3E1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7CY%7C%3E1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7CY%7C%3E1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;|Y|&amp;gt;1&quot; class=&quot;latex&quot; /&gt; without loss of generality. Define &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b%3A%3D%5Cleft+%5Clceil+%5Clog+_%7B2%7D%5Cleft+%28%7CX%7C%5Ccdot+%5Csqrt+%7B%7CY%7C%7D%5Cright+%29%5Cright+%5Crceil+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b%3A%3D%5Cleft+%5Clceil+%5Clog+_%7B2%7D%5Cleft+%28%7CX%7C%5Ccdot+%5Csqrt+%7B%7CY%7C%7D%5Cright+%29%5Cright+%5Crceil+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b%3A%3D%5Cleft+%5Clceil+%5Clog+_%7B2%7D%5Cleft+%28%7CX%7C%5Ccdot+%5Csqrt+%7B%7CY%7C%7D%5Cright+%29%5Cright+%5Crceil+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b:=&amp;#92;left &amp;#92;lceil &amp;#92;log _{2}&amp;#92;left (|X|&amp;#92;cdot &amp;#92;sqrt {|Y|}&amp;#92;right )&amp;#92;right &amp;#92;rceil &quot; class=&quot;latex&quot; /&gt;, and let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B%3A%3D%5C%7B0%2C1%5C%7D+%5E%7Bb%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B%3A%3D%5C%7B0%2C1%5C%7D+%5E%7Bb%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B%3A%3D%5C%7B0%2C1%5C%7D+%5E%7Bb%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B:=&amp;#92;{0,1&amp;#92;} ^{b}&quot; class=&quot;latex&quot; /&gt;. To simplify notation, define &lt;img src=&quot;https://s0.wp.com/latex.php?latex=d%3A%3D2%5E%7Bb%7D%2F%7CX%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=d%3A%3D2%5E%7Bb%7D%2F%7CX%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=d%3A%3D2%5E%7Bb%7D%2F%7CX%7C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;d:=2^{b}/|X|&quot; class=&quot;latex&quot; /&gt;. Note &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c%5Csqrt+%7B%7CY%7C%7D%5Cle+d%5Cle+c%5Csqrt+%7B%7CY%7C%7D.&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c%5Csqrt+%7B%7CY%7C%7D%5Cle+d%5Cle+c%5Csqrt+%7B%7CY%7C%7D.&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c%5Csqrt+%7B%7CY%7C%7D%5Cle+d%5Cle+c%5Csqrt+%7B%7CY%7C%7D.&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c&amp;#92;sqrt {|Y|}&amp;#92;le d&amp;#92;le c&amp;#92;sqrt {|Y|}.&quot; class=&quot;latex&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   How much can we stuff into &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B&quot; class=&quot;latex&quot; /&gt;? For a set &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C&quot; class=&quot;latex&quot; /&gt; of size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7CC%7C%3D%5Cleft+%5Clfloor+%7CB%7C%2F%7CX%7C%5Cright+%5Crfloor+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7CC%7C%3D%5Cleft+%5Clfloor+%7CB%7C%2F%7CX%7C%5Cright+%5Crfloor+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7CC%7C%3D%5Cleft+%5Clfloor+%7CB%7C%2F%7CX%7C%5Cright+%5Crfloor+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;|C|=&amp;#92;left &amp;#92;lfloor |B|/|X|&amp;#92;right &amp;#92;rfloor &quot; class=&quot;latex&quot; /&gt;, we can encode elements from &lt;img src=&quot;https://s0.wp.com/latex.php?latex=X%5Ctimes+C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=X%5Ctimes+C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=X%5Ctimes+C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;X&amp;#92;times C&quot; class=&quot;latex&quot; /&gt; in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B&quot; class=&quot;latex&quot; /&gt;. The redundancy of such an encoding can be bounded as follows:&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   To calculate the total redundancy, we still need to examine the encoding from &lt;img src=&quot;https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;Y&quot; class=&quot;latex&quot; /&gt; to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C%5Ctimes+K&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C%5Ctimes+K&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C%5Ctimes+K&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C&amp;#92;times K&quot; class=&quot;latex&quot; /&gt;. Choose &lt;img src=&quot;https://s0.wp.com/latex.php?latex=K&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=K&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=K&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;K&quot; class=&quot;latex&quot; /&gt; of size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7CK%7C%3D%5Cleft+%5Clceil+%7CY%7C%2F%7CC%7C%5Cright+%5Crceil+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7CK%7C%3D%5Cleft+%5Clceil+%7CY%7C%2F%7CC%7C%5Cright+%5Crceil+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7CK%7C%3D%5Cleft+%5Clceil+%7CY%7C%2F%7CC%7C%5Cright+%5Crceil+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;|K|=&amp;#92;left &amp;#92;lceil |Y|/|C|&amp;#92;right &amp;#92;rceil &quot; class=&quot;latex&quot; /&gt;, so that this encoding is possible. With a calculation similar to the previous one, we see that the redundancy is:&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The total redundancy is then &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c%2F%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c%2F%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c%2F%5Csqrt+%7B%7CY%7C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c/&amp;#92;sqrt {|Y|}&quot; class=&quot;latex&quot; /&gt;, which gives (1).&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   For (2), it is clear from the construction that any &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x%5Cin+X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x%5Cin+X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x%5Cin+X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&amp;#92;in X&quot; class=&quot;latex&quot; /&gt; can be recovered from the element of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B&quot; class=&quot;latex&quot; /&gt; only. &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;    &lt;b&gt;Proof of Theorem &lt;a href=&quot;#x1-125001r6&quot;&gt;12.6&lt;!--tex4ht:ref: thm:triz --&gt;&lt;/a&gt;&lt;/b&gt;.&amp;nbsp;&lt;/span&gt; Break the ternary elements into blocks of size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt;: &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%28t%27_%7B1%7D%2Ct%27_%7B2%7D%2C%5Cldots+%2Ct%27_%7Bn%2Ft%7D%29%5Cin+T_%7B1%7D%5Ctimes+T_%7B2%7D%5Ctimes+%5Cldots+%5Ctimes+T_%7Bn%2Ft%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%28t%27_%7B1%7D%2Ct%27_%7B2%7D%2C%5Cldots+%2Ct%27_%7Bn%2Ft%7D%29%5Cin+T_%7B1%7D%5Ctimes+T_%7B2%7D%5Ctimes+%5Cldots+%5Ctimes+T_%7Bn%2Ft%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28t%27_%7B1%7D%2Ct%27_%7B2%7D%2C%5Cldots+%2Ct%27_%7Bn%2Ft%7D%29%5Cin+T_%7B1%7D%5Ctimes+T_%7B2%7D%5Ctimes+%5Cldots+%5Ctimes+T_%7Bn%2Ft%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;(t&amp;#039;_{1},t&amp;#039;_{2},&amp;#92;ldots ,t&amp;#039;_{n/t})&amp;#92;in T_{1}&amp;#92;times T_{2}&amp;#92;times &amp;#92;ldots &amp;#92;times T_{n/t}&quot; class=&quot;latex&quot; /&gt;, where &lt;img src=&quot;https://s0.wp.com/latex.php?latex=T_%7Bi%7D%3D%5B3%5D%5E%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=T_%7Bi%7D%3D%5B3%5D%5E%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=T_%7Bi%7D%3D%5B3%5D%5E%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;T_{i}=[3]^{t}&quot; class=&quot;latex&quot; /&gt; for all &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&quot; class=&quot;latex&quot; /&gt;. The encoding, illustrated in Figure 1, is constructed as follows, where we use &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f_%7BL%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f_%7BL%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f_%7BL%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f_{L}&quot; class=&quot;latex&quot; /&gt; to refer to the encoding guaranteed by Lemma&amp;nbsp;Lemma &lt;a href=&quot;#x1-125003r1&quot;&gt;12.1&lt;!--tex4ht:ref: lem:triz-buildblock --&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Compute &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f_%7BL%7D%28t%27_%7B1%7D%2Ct%27_%7B2%7D%29%3D%28b_%7B1%7D%2Ck_%7B1%7D%29%5Cin+B_%7B1%7D%5Ctimes+K_%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f_%7BL%7D%28t%27_%7B1%7D%2Ct%27_%7B2%7D%29%3D%28b_%7B1%7D%2Ck_%7B1%7D%29%5Cin+B_%7B1%7D%5Ctimes+K_%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f_%7BL%7D%28t%27_%7B1%7D%2Ct%27_%7B2%7D%29%3D%28b_%7B1%7D%2Ck_%7B1%7D%29%5Cin+B_%7B1%7D%5Ctimes+K_%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f_{L}(t&amp;#039;_{1},t&amp;#039;_{2})=(b_{1},k_{1})&amp;#92;in B_{1}&amp;#92;times K_{1}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   For &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i%3D2%2C%5Cldots+%2Cn%2Ft-1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i%3D2%2C%5Cldots+%2Cn%2Ft-1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i%3D2%2C%5Cldots+%2Cn%2Ft-1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i=2,&amp;#92;ldots ,n/t-1&quot; class=&quot;latex&quot; /&gt; compute &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f_%7BL%7D%28k_%7Bi-1%7D%2Ct%27_%7Bi%2B1%7D%29%3A%3D%28b_%7Bi%7D%2Ck_%7Bi%7D%29%5Cin+B_%7Bi%7D%5Ctimes+K_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f_%7BL%7D%28k_%7Bi-1%7D%2Ct%27_%7Bi%2B1%7D%29%3A%3D%28b_%7Bi%7D%2Ck_%7Bi%7D%29%5Cin+B_%7Bi%7D%5Ctimes+K_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f_%7BL%7D%28k_%7Bi-1%7D%2Ct%27_%7Bi%2B1%7D%29%3A%3D%28b_%7Bi%7D%2Ck_%7Bi%7D%29%5Cin+B_%7Bi%7D%5Ctimes+K_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f_{L}(k_{i-1},t&amp;#039;_{i+1}):=(b_{i},k_{i})&amp;#92;in B_{i}&amp;#92;times K_{i}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Encode &lt;img src=&quot;https://s0.wp.com/latex.php?latex=k_%7Bn%2Ft-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=k_%7Bn%2Ft-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=k_%7Bn%2Ft-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;k_{n/t-1}&quot; class=&quot;latex&quot; /&gt; in binary as &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b_%7Bn%2Ft%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b_%7Bn%2Ft%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b_%7Bn%2Ft%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b_{n/t}&quot; class=&quot;latex&quot; /&gt; using arithmetic coding.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;The final encoding is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%28b_%7B1%7D%2Cb_%7B2%7D%2C%5Cldots+%2Cb_%7Bn%2Ft%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%28b_%7B1%7D%2Cb_%7B2%7D%2C%5Cldots+%2Cb_%7Bn%2Ft%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28b_%7B1%7D%2Cb_%7B2%7D%2C%5Cldots+%2Cb_%7Bn%2Ft%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;(b_{1},b_{2},&amp;#92;ldots ,b_{n/t})&quot; class=&quot;latex&quot; /&gt;. We now compute the redundancy and retrieval time.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;em&gt;Redundancy:&lt;/em&gt; From (1) in Lemma&amp;nbsp;&lt;a href=&quot;#x1-125003r1&quot;&gt;12.1&lt;!--tex4ht:ref: lem:triz-buildblock --&gt;&lt;/a&gt;, the first &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%2Ft-1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%2Ft-1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%2Ft-1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n/t-1&quot; class=&quot;latex&quot; /&gt; encodings have redundancy &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c3%5E%7B-t%2F2%7D%5Cle+1%2F2%5E%7Bct%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c3%5E%7B-t%2F2%7D%5Cle+1%2F2%5E%7Bct%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c3%5E%7B-t%2F2%7D%5Cle+1%2F2%5E%7Bct%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c3^{-t/2}&amp;#92;le 1/2^{ct}&quot; class=&quot;latex&quot; /&gt;. For the last (arithmetic) encoding, the redundancy is at most &lt;img src=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;1&quot; class=&quot;latex&quot; /&gt;. So the total redundancy is at most &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Cleft+%28%5Cfrac+%7Bn%7D%7Bt%7D-1%5Cright+%29%5Ccdot+%5Cfrac+%7B1%7D%7B2%5E%7Bct%7D%7D%2B1%3D%5Cfrac+%7Bn%7D%7B2%5E%7Bct%7D%7D%2Bc&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Cleft+%28%5Cfrac+%7Bn%7D%7Bt%7D-1%5Cright+%29%5Ccdot+%5Cfrac+%7B1%7D%7B2%5E%7Bct%7D%7D%2B1%3D%5Cfrac+%7Bn%7D%7B2%5E%7Bct%7D%7D%2Bc&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cdisplaystyle+%5Cleft+%28%5Cfrac+%7Bn%7D%7Bt%7D-1%5Cright+%29%5Ccdot+%5Cfrac+%7B1%7D%7B2%5E%7Bct%7D%7D%2B1%3D%5Cfrac+%7Bn%7D%7B2%5E%7Bct%7D%7D%2Bc&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;displaystyle &amp;#92;left (&amp;#92;frac {n}{t}-1&amp;#92;right )&amp;#92;cdot &amp;#92;frac {1}{2^{ct}}+1=&amp;#92;frac {n}{2^{ct}}+c&quot; class=&quot;latex&quot; /&gt;. One can visualize this as a “hybrid argument” transforming a product of blocks of ternary elements into a product of blocks of binary elements, one block at the time.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;em&gt;Retrieval Time:&lt;/em&gt; Say that we want to recover some &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t_%7Bj%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t_{j}&quot; class=&quot;latex&quot; /&gt; which is in block &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%27_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%27_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%27_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&amp;#039;_{i}&quot; class=&quot;latex&quot; /&gt;. To recover block &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%27_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%27_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%27_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&amp;#039;_{i}&quot; class=&quot;latex&quot; /&gt;, Lemma &lt;a href=&quot;#x1-125003r1&quot;&gt;12.1&lt;!--tex4ht:ref: lem:triz-buildblock --&gt;&lt;/a&gt; guarantees that we only need to look at &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b_%7Bi-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b_%7Bi-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b_%7Bi-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b_{i-1}&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b_{i}&quot; class=&quot;latex&quot; /&gt;. This is because &lt;img src=&quot;https://s0.wp.com/latex.php?latex=k_%7Bi-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=k_%7Bi-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=k_%7Bi-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;k_{i-1}&quot; class=&quot;latex&quot; /&gt; can be recovered by reading only &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b_{i}&quot; class=&quot;latex&quot; /&gt;, and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%27_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%27_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%27_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&amp;#039;_{i}&quot; class=&quot;latex&quot; /&gt; can be recovered by reading &lt;img src=&quot;https://s0.wp.com/latex.php?latex=k_%7Bi-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=k_%7Bi-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=k_%7Bi-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;k_{i-1}&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b_%7Bi-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b_%7Bi-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b_%7Bi-1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b_{i-1}&quot; class=&quot;latex&quot; /&gt;. Thus to complete the proof it suffices to show that each &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b_{i}&quot; class=&quot;latex&quot; /&gt; has length &lt;img src=&quot;https://s0.wp.com/latex.php?latex=ct&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=ct&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=ct&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;ct&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   This is not completely obvious because one might have thought that the &lt;img src=&quot;https://s0.wp.com/latex.php?latex=K_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=K_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=K_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;K_{i}&quot; class=&quot;latex&quot; /&gt; become larger and larger, and so we apply the lemma to larger and larger inputs and the &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B_{i}&quot; class=&quot;latex&quot; /&gt; get large too. However, recall that each &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7CK_%7Bi%7D%7C%5Cle+c%7CT_%7Bi%7D%7C%3Dc3%5E%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7CK_%7Bi%7D%7C%5Cle+c%7CT_%7Bi%7D%7C%3Dc3%5E%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7CK_%7Bi%7D%7C%5Cle+c%7CT_%7Bi%7D%7C%3Dc3%5E%7Bt%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;|K_{i}|&amp;#92;le c|T_{i}|=c3^{t}&quot; class=&quot;latex&quot; /&gt; from the comment after the statement of Lemma &lt;a href=&quot;#x1-125003r1&quot;&gt;12.1&lt;!--tex4ht:ref: lem:triz-buildblock --&gt;&lt;/a&gt;. Hence, every time we apply the lemma on an input of size at most &lt;img src=&quot;https://s0.wp.com/latex.php?latex=s%5Cle+3%5E%7Bct%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=s%5Cle+3%5E%7Bct%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=s%5Cle+3%5E%7Bct%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;s&amp;#92;le 3^{ct}&quot; class=&quot;latex&quot; /&gt;. Since the lemma wastes little entropy (by (1) in Lemma &lt;a href=&quot;#x1-125003r1&quot;&gt;12.1&lt;!--tex4ht:ref: lem:triz-buildblock --&gt;&lt;/a&gt;), none of its outputs can be much larger than its input, and so &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7CB_%7Bi%7D%7C%3D2%5E%7Bct%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7CB_%7Bi%7D%7C%3D2%5E%7Bct%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7CB_%7Bi%7D%7C%3D2%5E%7Bct%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;|B_{i}|=2^{ct}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;hr class=&quot;figure&quot;/&gt;
&lt;div class=&quot;figure&quot;&gt;&lt;a id=&quot;x1-1250041&quot;&gt;&lt;/a&gt;  &lt;img src=&quot;../../classes/gems/lectures/le23-24pic1.png&quot; alt=&quot;PIC&quot; width=&quot;248&quot; height=&quot;240&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;caption&quot;&gt;&lt;span class=&quot;id&quot;&gt;Figure&amp;nbsp;12.1: &lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Succinct Encoding&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;&lt;!--tex4ht:label?: x1-1250041 --&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;hr class=&quot;endfigure&quot;/&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h3 class=&quot;sectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;12.2   &lt;/span&gt; &lt;a id=&quot;x1-12600012.2&quot;&gt;&lt;/a&gt;Dynamic data structures&lt;/h3&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;We now study dynamic data structures. As we mentioned, here the input is not fixed but can be modified by the queries.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-126001r4&quot;&gt;&lt;/a&gt; &lt;b&gt;Definition&lt;/b&gt; 12.4.  &lt;/span&gt;Fix an error-correcting code &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BECC%7D%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BECC%7D%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BECC%7D%3A%5C%7B0%2C1%5C%7D+%5E%7Bn%7D%5Cto+%5C%7B0%2C1%5C%7D+%5E%7Bm%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {ECC}:&amp;#92;{0,1&amp;#92;} ^{n}&amp;#92;to &amp;#92;{0,1&amp;#92;} ^{m}&quot; class=&quot;latex&quot; /&gt; where &lt;img src=&quot;https://s0.wp.com/latex.php?latex=m%5Cle+cn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=m%5Cle+cn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=m%5Cle+cn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;m&amp;#92;le cn&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5CDelta+%28%5Ctext+%7BECC%7D%28x%29%2C%5Ctext+%7BECC%7D%28y%29%29%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5CDelta+%28%5Ctext+%7BECC%7D%28x%29%2C%5Ctext+%7BECC%7D%28y%29%29%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CDelta+%28%5Ctext+%7BECC%7D%28x%29%2C%5Ctext+%7BECC%7D%28y%29%29%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;Delta (&amp;#92;text {ECC}(x),&amp;#92;text {ECC}(y))&amp;#92;ge c&quot; class=&quot;latex&quot; /&gt; for any &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x%5Cne+y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x%5Cne+y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x%5Cne+y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&amp;#92;ne y&quot; class=&quot;latex&quot; /&gt; in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;{0,1&amp;#92;} ^{n}&quot; class=&quot;latex&quot; /&gt;. Here &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5CDelta+%28u%2Cv%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5CDelta+%28u%2Cv%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CDelta+%28u%2Cv%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;Delta (u,v)&quot; class=&quot;latex&quot; /&gt; is the relative distance, the fraction of bit positions where &lt;img src=&quot;https://s0.wp.com/latex.php?latex=u&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=u&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=u&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;u&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=v&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=v&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=v&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;v&quot; class=&quot;latex&quot; /&gt; differ.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BECC%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BECC%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BECC%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {ECC}&quot; class=&quot;latex&quot; /&gt; problem asks to support operations, starting with the all-zero message:&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M%28i%2Cb%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M%28i%2Cb%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M%28i%2Cb%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M(i,b)&quot; class=&quot;latex&quot; /&gt; for &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i%5Cin+%5C%7B1%2C2%2C%5Cldots+%2Cn%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i%5Cin+%5C%7B1%2C2%2C%5Cldots+%2Cn%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i%5Cin+%5C%7B1%2C2%2C%5Cldots+%2Cn%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&amp;#92;in &amp;#92;{1,2,&amp;#92;ldots ,n&amp;#92;}&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b%5Cin+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b%5Cin+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b%5Cin+%5C%7B0%2C1%5C%7D+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b&amp;#92;in &amp;#92;{0,1&amp;#92;} &quot; class=&quot;latex&quot; /&gt; which sets bit &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&quot; class=&quot;latex&quot; /&gt; of the message to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b&quot; class=&quot;latex&quot; /&gt;, and&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C(i)&quot; class=&quot;latex&quot; /&gt; for &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i%5Cin+%5C%7B1%2C2%2C%5Cldots+%2Cm%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i%5Cin+%5C%7B1%2C2%2C%5Cldots+%2Cm%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i%5Cin+%5C%7B1%2C2%2C%5Cldots+%2Cm%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&amp;#92;in &amp;#92;{1,2,&amp;#92;ldots ,m&amp;#92;}&quot; class=&quot;latex&quot; /&gt; which returns bit &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&quot; class=&quot;latex&quot; /&gt; of the codeword corresponding to the current message.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The time of a dynamic data structure is the maximum number of read/write operations in memory cells required to support an operation.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-126002r7&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 12.7.  &lt;/span&gt; The &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BECC%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BECC%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BECC%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {ECC}&quot; class=&quot;latex&quot; /&gt; problem requires time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%5Cge+c%5Clog+_%7Bw%7Dn%5Cge+%28c%5Clog+n%29%2F%5Clog+%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%5Cge+c%5Clog+_%7Bw%7Dn%5Cge+%28c%5Clog+n%29%2F%5Clog+%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%5Cge+c%5Clog+_%7Bw%7Dn%5Cge+%28c%5Clog+n%29%2F%5Clog+%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&amp;#92;ge c&amp;#92;log _{w}n&amp;#92;ge (c&amp;#92;log n)/&amp;#92;log &amp;#92;log n&quot; class=&quot;latex&quot; /&gt; for cell size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w%3A%3D%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w%3A%3D%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w%3A%3D%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w:=&amp;#92;log n&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   One might wonder if stronger bounds can be shown for this problem. But in fact there exist codes for which the bounds are nearly tight.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-126003r8&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 12.8.  &lt;/span&gt;&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#Xviola-datastructurelb-implies-cclb&quot;&gt;81&lt;/a&gt;]&lt;/span&gt;There exists codes for which the ECC problem can be solved in time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c%5Clog+%5E%7B2%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c%5Clog+%5E%7B2%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c%5Clog+%5E%7B2%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c&amp;#92;log ^{2}n&quot; class=&quot;latex&quot; /&gt; with cell size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=w%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;w=1&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The technique in the proof of Theorem &lt;a href=&quot;#x1-126002r7&quot;&gt;12.7&lt;!--tex4ht:ref: thm:ECC-data-structure-lower-bound --&gt;&lt;/a&gt; is from &lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#XFredmanS89&quot;&gt;24&lt;/a&gt;]&lt;/span&gt; and can be applied to many other natural problems, leading to tight results in several cases, see Exercise ??. It is not far from the state-of-the art in this area, which is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Clog+%5E%7B1%2Bc%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Clog+%5E%7B1%2Bc%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Clog+%5E%7B1%2Bc%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;log ^{1+c}n&quot; class=&quot;latex&quot; /&gt; &lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;journals/siamcomp/LarsenWY20&quot;&gt;42&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   &lt;span class=&quot;head&quot;&gt;    &lt;b&gt;Proof of Theorem &lt;a href=&quot;#x1-126002r7&quot;&gt;12.7&lt;!--tex4ht:ref: thm:ECC-data-structure-lower-bound --&gt;&lt;/a&gt;&lt;/b&gt;.&amp;nbsp;&lt;/span&gt; Pick &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x%5Cin+%5C%7B0%2C1%5C%7D+%5E%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&amp;#92;in &amp;#92;{0,1&amp;#92;} ^{n}&quot; class=&quot;latex&quot; /&gt; uniformly and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i%5Cin+%5C%7B1%2C2%2C%5Cldots+%2Cm%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i%5Cin+%5C%7B1%2C2%2C%5Cldots+%2Cm%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i%5Cin+%5C%7B1%2C2%2C%5Cldots+%2Cm%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&amp;#92;in &amp;#92;{1,2,&amp;#92;ldots ,m&amp;#92;}&quot; class=&quot;latex&quot; /&gt; uniformly, and consider the sequence of operations&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+M%281%2Cx_%7B1%7D%29%2CM%282%2Cx_%7B2%7D%29%2C%5Cldots+%2CM%28n%2Cx_%7Bn%7D%29%2CC%28i%29.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+M%281%2Cx_%7B1%7D%29%2CM%282%2Cx_%7B2%7D%29%2C%5Cldots+%2CM%28n%2Cx_%7Bn%7D%29%2CC%28i%29.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+M%281%2Cx_%7B1%7D%29%2CM%282%2Cx_%7B2%7D%29%2C%5Cldots+%2CM%28n%2Cx_%7Bn%7D%29%2CC%28i%29.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} M(1,x_{1}),M(2,x_{2}),&amp;#92;ldots ,M(n,x_{n}),C(i). &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;That is, we set the message to a uniform &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt; one bit at a time, and then ask for a uniformly selected bit of the codeword &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BECC%7D%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BECC%7D%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BECC%7D%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {ECC}(x)&quot; class=&quot;latex&quot; /&gt;, which we also denote by &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%3DC_%7Bx%7D%281%29%2CC_%7Bx%7D%282%29%2C%5Cldots+%2CC_%7Bx%7D%28n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%3DC_%7Bx%7D%281%29%2CC_%7Bx%7D%282%29%2C%5Cldots+%2CC_%7Bx%7D%28n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C_%7Bx%7D%3DC_%7Bx%7D%281%29%2CC_%7Bx%7D%282%29%2C%5Cldots+%2CC_%7Bx%7D%28n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C_{x}=C_{x}(1),C_{x}(2),&amp;#92;ldots ,C_{x}(n)&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   We divide the &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt; operations &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M%28i%2Cx_%7Bi%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M%28i%2Cx_%7Bi%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M%28i%2Cx_%7Bi%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M(i,x_{i})&quot; class=&quot;latex&quot; /&gt; into consecutive blocks, called &lt;em&gt;epochs&lt;/em&gt;. Epoch &lt;img src=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;e&quot; class=&quot;latex&quot; /&gt; consists of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%2Fw%5E%7B3e%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%2Fw%5E%7B3e%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%2Fw%5E%7B3e%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n/w^{3e}&quot; class=&quot;latex&quot; /&gt; operations. Hence we can have at least &lt;img src=&quot;https://s0.wp.com/latex.php?latex=E%3A%3Dc%5Clog+_%7Bw%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=E%3A%3Dc%5Clog+_%7Bw%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=E%3A%3Dc%5Clog+_%7Bw%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;E:=c&amp;#92;log _{w}n&quot; class=&quot;latex&quot; /&gt; epochs, and we can assume that we have exactly this many epochs (by discarding some bits of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt; if necessary).&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   The geometrically decaying size of epochs is chosen so that the number of message bits set during an epoch &lt;img src=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;e&quot; class=&quot;latex&quot; /&gt; is much more than all the cells written by the data structure in future epochs.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   A key idea of the proof is to see what happens when the cells written during a certain epoch are ignored, or reverted to their contents right before the epoch. Specifically, after the execution of the &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M&quot; class=&quot;latex&quot; /&gt; operations, we can associate to each memory cell the last epoch during which this cell was written. Let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=D%5E%7Be%7D%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=D%5E%7Be%7D%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=D%5E%7Be%7D%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;D^{e}(x)&quot; class=&quot;latex&quot; /&gt; denote the memory cells of the data structure after the first &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt; operations &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M&quot; class=&quot;latex&quot; /&gt;, but with the change that the cells that were written last during epoch &lt;img src=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;e&quot; class=&quot;latex&quot; /&gt; are replaced with their contents right before epoch &lt;img src=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;e&quot; class=&quot;latex&quot; /&gt;. Define &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C_{x}^{e}(i)&quot; class=&quot;latex&quot; /&gt; to be the result of the data structure algorithm for &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C(i)&quot; class=&quot;latex&quot; /&gt; on &lt;img src=&quot;https://s0.wp.com/latex.php?latex=D%5E%7Be%7D%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=D%5E%7Be%7D%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=D%5E%7Be%7D%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;D^{e}(x)&quot; class=&quot;latex&quot; /&gt;, and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D%3DC_%7Bx%7D%5E%7Be%7D%281%29%2CC_%7Bx%7D%5E%7Be%7D%282%29%2C%5Cldots+%2CC_%7Bx%7D%5E%7Be%7D%28n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D%3DC_%7Bx%7D%5E%7Be%7D%281%29%2CC_%7Bx%7D%5E%7Be%7D%282%29%2C%5Cldots+%2CC_%7Bx%7D%5E%7Be%7D%28n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D%3DC_%7Bx%7D%5E%7Be%7D%281%29%2CC_%7Bx%7D%5E%7Be%7D%282%29%2C%5Cldots+%2CC_%7Bx%7D%5E%7Be%7D%28n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C_{x}^{e}=C_{x}^{e}(1),C_{x}^{e}(2),&amp;#92;ldots ,C_{x}^{e}(n)&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%28x%2Ci%2Ce%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%28x%2Ci%2Ce%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%28x%2Ci%2Ce%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t(x,i,e)&quot; class=&quot;latex&quot; /&gt; equal &lt;img src=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;1&quot; class=&quot;latex&quot; /&gt; if &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C(i)&quot; class=&quot;latex&quot; /&gt;, executed after the first &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt; operations &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M&quot; class=&quot;latex&quot; /&gt;, reads a cell that was last written in epoch &lt;img src=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;e&quot; class=&quot;latex&quot; /&gt;, and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;0&quot; class=&quot;latex&quot; /&gt; otherwise. We have&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+t%5Cge+%5Cmax+_%7Bx%2Ci%7D%5Csum+_%7Be%7Dt%28x%2Ci%2Ce%29%5Cge+%5Cmathbb+%7BE%7D_%7Bx%2Ci%7D%5Csum+_%7Be%7Dt%28x%2Ci%2Ce%29%3D%5Csum+_%7Be%7D%5Cmathbb+%7BE%7D_%7Bx%2Ci%7Dt%28x%2Ci%2Ce%29%5Cge+%5Csum+_%7Be%7D%5Cmathbb+%7BE%7D_%7Bx%7D%5CDelta+%28C_%7Bx%7D%2CC_%7Bx%7D%5E%7Be%7D%29%2C%7E%7E%7E%7E%2812.1%29+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+t%5Cge+%5Cmax+_%7Bx%2Ci%7D%5Csum+_%7Be%7Dt%28x%2Ci%2Ce%29%5Cge+%5Cmathbb+%7BE%7D_%7Bx%2Ci%7D%5Csum+_%7Be%7Dt%28x%2Ci%2Ce%29%3D%5Csum+_%7Be%7D%5Cmathbb+%7BE%7D_%7Bx%2Ci%7Dt%28x%2Ci%2Ce%29%5Cge+%5Csum+_%7Be%7D%5Cmathbb+%7BE%7D_%7Bx%7D%5CDelta+%28C_%7Bx%7D%2CC_%7Bx%7D%5E%7Be%7D%29%2C%7E%7E%7E%7E%2812.1%29+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+t%5Cge+%5Cmax+_%7Bx%2Ci%7D%5Csum+_%7Be%7Dt%28x%2Ci%2Ce%29%5Cge+%5Cmathbb+%7BE%7D_%7Bx%2Ci%7D%5Csum+_%7Be%7Dt%28x%2Ci%2Ce%29%3D%5Csum+_%7Be%7D%5Cmathbb+%7BE%7D_%7Bx%2Ci%7Dt%28x%2Ci%2Ce%29%5Cge+%5Csum+_%7Be%7D%5Cmathbb+%7BE%7D_%7Bx%7D%5CDelta+%28C_%7Bx%7D%2CC_%7Bx%7D%5E%7Be%7D%29%2C%7E%7E%7E%7E%2812.1%29+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} t&amp;#92;ge &amp;#92;max _{x,i}&amp;#92;sum _{e}t(x,i,e)&amp;#92;ge &amp;#92;mathbb {E}_{x,i}&amp;#92;sum _{e}t(x,i,e)=&amp;#92;sum _{e}&amp;#92;mathbb {E}_{x,i}t(x,i,e)&amp;#92;ge &amp;#92;sum _{e}&amp;#92;mathbb {E}_{x}&amp;#92;Delta (C_{x},C_{x}^{e}),~~~~(12.1) &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;where the last inequality holds because &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D%28i%29%5Cne+C_%7Bx%7D%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D%28i%29%5Cne+C_%7Bx%7D%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D%28i%29%5Cne+C_%7Bx%7D%28i%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C_{x}^{e}(i)&amp;#92;ne C_{x}(i)&quot; class=&quot;latex&quot; /&gt; implies &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%28x%2Ci%2Ce%29%5Cge+1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%28x%2Ci%2Ce%29%5Cge+1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%28x%2Ci%2Ce%29%5Cge+1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t(x,i,e)&amp;#92;ge 1&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   We now claim that if &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%5Cle+w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%5Cle+w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%5Cle+w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&amp;#92;le w&quot; class=&quot;latex&quot; /&gt; then &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BE%7D_%7Bx%7D%5CDelta+%28C_%7Bx%7D%2CC_%7Bx%7D%5E%7Be%7D%29%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BE%7D_%7Bx%7D%5CDelta+%28C_%7Bx%7D%2CC_%7Bx%7D%5E%7Be%7D%29%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BE%7D_%7Bx%7D%5CDelta+%28C_%7Bx%7D%2CC_%7Bx%7D%5E%7Be%7D%29%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;mathbb {E}_{x}&amp;#92;Delta (C_{x},C_{x}^{e})&amp;#92;ge c&quot; class=&quot;latex&quot; /&gt; for every &lt;img src=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;e&quot; class=&quot;latex&quot; /&gt;. This concludes the proof.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   In the remainder we justify the claim. Fix arbitrarily the bits of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt; set before Epoch &lt;img src=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;e&quot; class=&quot;latex&quot; /&gt;. For a uniform setting of the remaining bits of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt;, note that the message ranges over at least&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+2%5E%7Bn%2Fw%5E%7B3e%7D%7D+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+2%5E%7Bn%2Fw%5E%7B3e%7D%7D+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+2%5E%7Bn%2Fw%5E%7B3e%7D%7D+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} 2^{n/w^{3e}} &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;codewords. On the other hand, we claim that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C_{x}^{e}&quot; class=&quot;latex&quot; /&gt; ranges over much fewer strings. Indeed, the total number of cells written in all epochs after &lt;img src=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;e&quot; class=&quot;latex&quot; /&gt; is at most&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+t%5Csum+_%7Bi%5Cge+e%2B1%7Dn%2Fw%5E%7B3i%7D%5Cle+ctn%2Fw%5E%7B3%28e%2B1%29%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+t%5Csum+_%7Bi%5Cge+e%2B1%7Dn%2Fw%5E%7B3i%7D%5Cle+ctn%2Fw%5E%7B3%28e%2B1%29%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+t%5Csum+_%7Bi%5Cge+e%2B1%7Dn%2Fw%5E%7B3i%7D%5Cle+ctn%2Fw%5E%7B3%28e%2B1%29%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} t&amp;#92;sum _{i&amp;#92;ge e+1}n/w^{3i}&amp;#92;le ctn/w^{3(e+1)}. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;We can describe all these cells by writing down their indices and contents using &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B%3A%3Dctn%2Fw%5E%7B3e%2B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B%3A%3Dctn%2Fw%5E%7B3e%2B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B%3A%3Dctn%2Fw%5E%7B3e%2B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B:=ctn/w^{3e+2}&quot; class=&quot;latex&quot; /&gt; bits. Note that this information can depend on the operations performed during Epoch &lt;img src=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;e&quot; class=&quot;latex&quot; /&gt;, but the point is that it takes few possible values overall. Since the cells last changed during Epoch &lt;img src=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;e&quot; class=&quot;latex&quot; /&gt; are reverted to their contents before Epoch &lt;img src=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=e&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;e&quot; class=&quot;latex&quot; /&gt;, this information suffices to describe &lt;img src=&quot;https://s0.wp.com/latex.php?latex=D%5E%7Be%7D%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=D%5E%7Be%7D%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=D%5E%7Be%7D%28x%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;D^{e}(x)&quot; class=&quot;latex&quot; /&gt;, and hence &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C_{x}^{e}&quot; class=&quot;latex&quot; /&gt;. Therefore, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C_{x}^{e}&quot; class=&quot;latex&quot; /&gt; ranges over &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+2%5E%7BB%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+2%5E%7BB%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+2%5E%7BB%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le 2^{B}&quot; class=&quot;latex&quot; /&gt; strings.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   For each string in the range of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C_%7Bx%7D%5E%7Be%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C_{x}^{e}&quot; class=&quot;latex&quot; /&gt; at most two codewords can have relative distance &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le c&quot; class=&quot;latex&quot; /&gt;, for else you’d have two codewords at distance &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+2c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+2c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+2c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le 2c&quot; class=&quot;latex&quot; /&gt;, violating the distance of the code.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;   Hence except with probability &lt;img src=&quot;https://s0.wp.com/latex.php?latex=2%5Ccdot+2%5E%7BB%7D%2F2%5E%7Bn%2Fw%5E%7B3e%7D%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=2%5Ccdot+2%5E%7BB%7D%2F2%5E%7Bn%2Fw%5E%7B3e%7D%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=2%5Ccdot+2%5E%7BB%7D%2F2%5E%7Bn%2Fw%5E%7B3e%7D%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;2&amp;#92;cdot 2^{B}/2^{n/w^{3e}}&quot; class=&quot;latex&quot; /&gt; over &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt;, we have &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5CDelta+%28C_%7Bx%7D%2CC_%7Bx%7D%5E%7Be%7D%29%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5CDelta+%28C_%7Bx%7D%2CC_%7Bx%7D%5E%7Be%7D%29%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CDelta+%28C_%7Bx%7D%2CC_%7Bx%7D%5E%7Be%7D%29%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;Delta (C_{x},C_{x}^{e})&amp;#92;ge c&quot; class=&quot;latex&quot; /&gt;. If &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t_%7BM%7D%5Cle+w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t_%7BM%7D%5Cle+w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t_%7BM%7D%5Cle+w&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t_{M}&amp;#92;le w&quot; class=&quot;latex&quot; /&gt; then the first probability is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+0.1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+0.1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+0.1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le 0.1&quot; class=&quot;latex&quot; /&gt;, and so &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BE%7D_%7Bx%7D%5CDelta+%28C_%7Bx%7D%2CC_%7Bx%7D%5E%7Be%7D%29%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BE%7D_%7Bx%7D%5CDelta+%28C_%7Bx%7D%2CC_%7Bx%7D%5E%7Be%7D%29%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathbb+%7BE%7D_%7Bx%7D%5CDelta+%28C_%7Bx%7D%2CC_%7Bx%7D%5E%7Be%7D%29%5Cge+c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;mathbb {E}_{x}&amp;#92;Delta (C_{x},C_{x}^{e})&amp;#92;ge c&quot; class=&quot;latex&quot; /&gt;, proving the claim. &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-126004r4&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 12.4.  &lt;/span&gt;Explain how to conclude the proof given the claim.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h3 class=&quot;sectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;12.3   &lt;/span&gt; &lt;a id=&quot;x1-12700012.3&quot;&gt;&lt;/a&gt;Notes&lt;/h3&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;The exposition of the trits problem is from &lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#Xviola-gems09&quot;&gt;76&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;h3 class=&quot;likesectionHead&quot;&gt;&lt;a id=&quot;x1-12800012.3&quot;&gt;&lt;/a&gt;References&lt;/h3&gt;
&lt;p style=&quot;text-align:justify&quot;&gt;
&lt;div class=&quot;thebibliography&quot;&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [1]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:conf/focs/AbboudBW15&quot;&gt;&lt;/a&gt;Amir Abboud, Arturs Backurs, and Virginia&amp;nbsp;Vassilevska Williams. Tight hardness      results for LCS and other sequence similarity measures.  In Venkatesan Guruswami,      editor, IEEE 56th Annual Symposium on Foundations of Computer Science, FOCS      2015, Berkeley, CA, USA, 17-20 October, 2015, pages 59–78. IEEE Computer Society,      2015.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [2]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAdleman78&quot;&gt;&lt;/a&gt;Leonard  Adleman.   Two  theorems  on  random  polynomial  time.   In  19th IEEE      Symp.&amp;nbsp;on Foundations of Computer Science (FOCS), pages 75–83. 1978.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [3]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAjt83&quot;&gt;&lt;/a&gt;Mikl�s Ajtai.  &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5CSigma+%5Csp+%7B1%7D%5Csb+%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5CSigma+%5Csp+%7B1%7D%5Csb+%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5CSigma+%5Csp+%7B1%7D%5Csb+%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;Sigma &amp;#92;sp {1}&amp;#92;sb {1}&quot; class=&quot;latex&quot; /&gt;-formulae on finite structures.  Annals of Pure and Applied Logic,      24(1):1–48, 1983.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [4]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAjtai05&quot;&gt;&lt;/a&gt;Mikl�s Ajtai. A non-linear time lower bound for boolean branching programs. Theory      of Computing, 1(1):149–176, 2005.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [5]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAll89&quot;&gt;&lt;/a&gt;Eric  Allender.   A  note  on  the  power  of  threshold  circuits.   In  30th Symposium      on Foundations of Computer Science, pages 580–584, Research Triangle Park, North      Carolina, 30 October–1 November 1989. IEEE.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [6]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAllender01&quot;&gt;&lt;/a&gt;Eric Allender. The division breakthroughs. Bulletin of the EATCS, 74:61–77, 2001.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [7]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAllenderK10&quot;&gt;&lt;/a&gt;Eric  Allender  and  Michal  Koucký.     Amplifying  lower  bounds  by  means  of      self-reducibility. J.&amp;nbsp;of the ACM, 57(3), 2010.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [8]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAGHP92&quot;&gt;&lt;/a&gt;Noga Alon, Oded Goldreich, Johan H�stad, and Ren� Peralta. Simple constructions      of  almost  &lt;img src=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;k&quot; class=&quot;latex&quot; /&gt;-wise  independent  random  variables.   Random  Structures  &amp;amp;  Algorithms,      3(3):289–304, 1992.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;   [9]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/jcss/AngluinV79&quot;&gt;&lt;/a&gt;Dana Angluin and Leslie&amp;nbsp;G. Valiant. Fast probabilistic algorithms for hamiltonian      circuits and matchings. J. Comput. Syst. Sci., 18(2):155–193, 1979.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [10]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAroraLuMoSuSz98&quot;&gt;&lt;/a&gt;Sanjeev Arora, Carsten Lund, Rajeev Motwani, Madhu Sudan, and Mario Szegedy.                                                                                                                                                                                          Proof  verification  and  the  hardness  of  approximation  problems.    J.&amp;nbsp;of  the  ACM,      45(3):501–555, May 1998.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [11]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/siamcomp/BackursI18&quot;&gt;&lt;/a&gt;Arturs Backurs and Piotr Indyk.  Edit distance cannot be computed in strongly      subquadratic time (unless SETH is false). SIAM J. Comput., 47(3):1087–1097, 2018.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [12]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XBatcher68&quot;&gt;&lt;/a&gt;Kenneth&amp;nbsp;E. Batcher.  Sorting networks and their applications.  In AFIPS Spring      Joint Computing Conference, volume&amp;nbsp;32, pages 307–314, 1968.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [13]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XBeameCH86&quot;&gt;&lt;/a&gt;Paul  Beame,  Stephen&amp;nbsp;A.  Cook,  and  H.&amp;nbsp;James  Hoover.   Log  depth  circuits  for      division and related problems. SIAM J. Comput., 15(4):994–1003, 1986.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [14]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XBSSV03&quot;&gt;&lt;/a&gt;Paul Beame, Michael Saks, Xiaodong Sun, and Erik Vee.   Time-space trade-off      lower  bounds  for  randomized  computation  of  decision  problems.   J.&amp;nbsp;of  the  ACM,      50(2):154–195, 2003.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [15]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XBen-OrC92&quot;&gt;&lt;/a&gt;Michael Ben-Or and Richard Cleve. Computing algebraic formulas using a constant      number of registers. SIAM J.&amp;nbsp;on Computing, 21(1):54–58, 1992.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [16]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/cc/BussW15&quot;&gt;&lt;/a&gt;Samuel&amp;nbsp;R.  Buss  and  Ryan  Williams.   Limits  on  alternation  trading  proofs  for      time-space lower bounds. Comput. Complex., 24(3):533–600, 2015.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [17]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:conf/stoc/ChenT19&quot;&gt;&lt;/a&gt;Lijie Chen and Roei Tell. Bootstrapping results for threshold circuits &amp;#8220;just beyond&amp;#8221;      known lower bounds.  In Moses Charikar and Edith Cohen, editors, Proceedings of the      51st Annual ACM SIGACT Symposium on Theory of Computing, STOC 2019, Phoenix,      AZ, USA, June 23-26, 2019, pages 34–41. ACM, 2019.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [18]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XCleve91&quot;&gt;&lt;/a&gt;Richard  Cleve.    Towards  optimal  simulations  of  formulas  by  bounded-width      programs. Computational Complexity, 1:91–105, 1991.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [19]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XCook73&quot;&gt;&lt;/a&gt;Stephen&amp;nbsp;A. Cook. A hierarchy for nondeterministic time complexity. J.&amp;nbsp;of Computer      and System Sciences, 7(4):343–353, 1973.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [20]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/siamcomp/Csanky76&quot;&gt;&lt;/a&gt;L.&amp;nbsp;Csanky.     Fast  parallel  matrix  inversion  algorithms.     SIAM  J.  Comput.,      5(4):618–623, 1976.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [21]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDodisPT10&quot;&gt;&lt;/a&gt;Yevgeniy Dodis, Mihai Pǎtraşcu, and Mikkel Thorup. Changing base without losing      space. In 42nd ACM Symp.&amp;nbsp;on the Theory of Computing (STOC), pages 593–602. ACM,      2010.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [22]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/jcss/Fortnow00&quot;&gt;&lt;/a&gt;Lance  Fortnow.   Time-space  tradeoffs  for  satisfiability.   J.  Comput.  Syst.  Sci.,      60(2):337–353, 2000.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [23]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/jct/FraenkelL81&quot;&gt;&lt;/a&gt;Aviezri&amp;nbsp;S. Fraenkel and David Lichtenstein. Computing a perfect strategy for n x n      chess requires time exponential in n. J. Comb. Theory, Ser. A, 31(2):199–214, 1981.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [24]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XFredmanS89&quot;&gt;&lt;/a&gt;Michael&amp;nbsp;L. Fredman and Michael&amp;nbsp;E. Saks.  The cell probe complexity of dynamic      data structures. In ACM Symp.&amp;nbsp;on the Theory of Computing (STOC), pages 345–354,      1989.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [25]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XGajentaanO95&quot;&gt;&lt;/a&gt;Anka Gajentaan and Mark&amp;nbsp;H. Overmars. On a class of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7BO%7D%28n%5E2%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7BO%7D%28n%5E2%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7BO%7D%28n%5E2%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;{O}(n^2)&quot; class=&quot;latex&quot; /&gt; problems in computational      geometry. Comput. Geom., 5:165–185, 1995.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [26]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XGalMiltersen07&quot;&gt;&lt;/a&gt;Anna G�l and Peter&amp;nbsp;Bro Miltersen.  The cell probe complexity of succinct data      structures. Theoretical Computer Science, 379(3):405–417, 2007.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [27]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XGareyJ79&quot;&gt;&lt;/a&gt;M.&amp;nbsp;R. Garey and David&amp;nbsp;S. Johnson. Computers and Intractability: A Guide to the      Theory of NP-Completeness. W. H. Freeman, 1979.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [28]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XMR1549939&quot;&gt;&lt;/a&gt;K.&amp;nbsp;G�del.   �ber  formal  unentscheidbare  s�tze  der  Principia  Mathematica  und      verwandter systeme I. Monatsh. Math. Phys., 38, 1931.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [29]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XGoldreich08Complexity&quot;&gt;&lt;/a&gt;Oded Goldreich. Computational Complexity: A Conceptual Perspective. Cambridge      University Press, 2008.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [30]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XGreenlawHR-Limits&quot;&gt;&lt;/a&gt;Raymond  Greenlaw,  H.&amp;nbsp;James  Hoover,  and  Walter  Ruzzo.   Limits  to  Parallel      Computation: P-Completeness Theory. 02 2001.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [31]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;X10.4007/annals.2021.193.2.4&quot;&gt;&lt;/a&gt;David Harvey and Joris van&amp;nbsp;der Hoeven. Integer multiplication in time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=O%28n%5Cmathrm+%7Blog%7D%5C%2C+n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=O%28n%5Cmathrm+%7Blog%7D%5C%2C+n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=O%28n%5Cmathrm+%7Blog%7D%5C%2C+n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;O(n&amp;#92;mathrm {log}&amp;#92;, n)&quot; class=&quot;latex&quot; /&gt;. Annals of      Mathematics, 193(2):563 – 617, 2021.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [32]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/iandc/Hennie65&quot;&gt;&lt;/a&gt;F.&amp;nbsp;C. Hennie.  One-tape, off-line turing machine computations.  Information and      Control, 8(6):553–578, 1965.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [33]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XHennieS66&quot;&gt;&lt;/a&gt;Fred  Hennie  and  Richard  Stearns.    Two-tape  simulation  of  multitape  turing      machines. J.&amp;nbsp;of the ACM, 13:533–546, October 1966.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [34]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/jacm/HopcroftPV77&quot;&gt;&lt;/a&gt;John&amp;nbsp;E. Hopcroft, Wolfgang&amp;nbsp;J. Paul, and Leslie&amp;nbsp;G. Valiant. On time versus space.      J. ACM, 24(2):332–337, 1977.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [35]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XIP99&quot;&gt;&lt;/a&gt;Russell Impagliazzo and Ramamohan Paturi.   The complexity of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;k&quot; class=&quot;latex&quot; /&gt;-sat.   In IEEE      Conf.&amp;nbsp;on Computational Complexity (CCC), pages 237–, 1999.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [36]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XImpagliazzoPS97&quot;&gt;&lt;/a&gt;Russell Impagliazzo, Ramamohan Paturi, and Michael&amp;nbsp;E. Saks. Size-depth tradeoffs      for threshold circuits. SIAM J. Comput., 26(3):693–707, 1997.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [37]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XIPZ01&quot;&gt;&lt;/a&gt;Russell Impagliazzo, Ramamohan Paturi, and Francis Zane.  Which problems have      strongly exponential complexity? J. Computer &amp;amp; Systems Sciences, 63(4):512–530, Dec      2001.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [38]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XImW97&quot;&gt;&lt;/a&gt;Russell  Impagliazzo  and  Avi  Wigderson.    &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cmathit+%7BP%7D+%3D+%5Cmathit+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cmathit+%7BP%7D+%3D+%5Cmathit+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathit+%7BP%7D+%3D+%5Cmathit+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;mathit {P} = &amp;#92;mathit {BPP}&quot; class=&quot;latex&quot; /&gt;  if  &lt;img src=&quot;https://s0.wp.com/latex.php?latex=E&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=E&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=E&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;E&quot; class=&quot;latex&quot; /&gt;  requires  exponential  circuits:      Derandomizing the XOR lemma.  In 29th ACM Symp.&amp;nbsp;on the Theory of Computing      (STOC), pages 220–229. ACM, 1997.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [39]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XKarpLi82&quot;&gt;&lt;/a&gt;Richard&amp;nbsp;M.  Karp  and  Richard&amp;nbsp;J.  Lipton.    Turing  machines  that  take  advice.      L’Enseignement Math�matique. Revue Internationale. IIe S�rie, 28(3-4):191–209, 1982.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [40]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XKobayashi1985OnTS&quot;&gt;&lt;/a&gt;Kojiro Kobayashi.  On the structure of one-tape nondeterministic turing machine      time hierarchy. Theor. Comput. Sci., 40:175–193, 1985.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [41]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/toc/Kopparty018&quot;&gt;&lt;/a&gt;Swastik Kopparty and Srikanth Srinivasan. Certifying polynomials for AC\({}^{\mbox {0}}\)[\(\oplus \)] circuits,      with  applications  to  lower  bounds  and  circuit  compression.   Theory of Computing,      14(1):1–24, 2018.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [42]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/siamcomp/LarsenWY20&quot;&gt;&lt;/a&gt;Kasper&amp;nbsp;Green Larsen, Omri Weinstein, and Huacheng Yu. Crossing the logarithmic      barrier for dynamic boolean data structure lower bounds.  SIAM J. Comput., 49(5),      2020.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [43]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XLevin73&quot;&gt;&lt;/a&gt;Leonid&amp;nbsp;A.  Levin.    Universal  sequential  search  problems.    Problemy  Peredachi      Informatsii, 9(3):115–116, 1973.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [44]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XLundFoKaNi92&quot;&gt;&lt;/a&gt;Carsten Lund, Lance Fortnow, Howard Karloff, and Noam Nisan. Algebraic methods      for interactive proof systems. J.&amp;nbsp;of the ACM, 39(4):859–868, October 1992.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [45]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XLupanov58&quot;&gt;&lt;/a&gt;O.&amp;nbsp;B. Lupanov. A method of circuit synthesis. Izv. VUZ Radiofiz., 1:120–140, 1958.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [46]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XMaS87&quot;&gt;&lt;/a&gt;Wolfgang Maass and Amir Schorr. Speed-up of Turing machines with one work tape      and a two-way input tape. SIAM J.&amp;nbsp;on Computing, 16(1):195–202, 1987.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [47]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XBarrington89&quot;&gt;&lt;/a&gt;David&amp;nbsp;A.  Mix  Barrington.   Bounded-width  polynomial-size  branching  programs      recognize  exactly  those  languages  in  NC&lt;sup&gt;1&lt;/sup&gt;.   J.&amp;nbsp;of  Computer  and  System  Sciences,      38(1):150–164, 1989.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [48]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XNaN93&quot;&gt;&lt;/a&gt;Joseph Naor and Moni Naor.  Small-bias probability spaces: efficient constructions      and applications. SIAM J.&amp;nbsp;on Computing, 22(4):838–856, 1993.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [49]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XNechiporuk66&quot;&gt;&lt;/a&gt;E.&amp;nbsp;I. Nechiporuk. A boolean function. Soviet Mathematics-Doklady, 169(4):765–766,      1966.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [50]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XNep70&quot;&gt;&lt;/a&gt;Valery&amp;nbsp;A. Nepomnjaščiĭ. Rudimentary predicates and Turing calculations. Soviet      Mathematics-Doklady, 11(6):1462–1465, 1970.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [51]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XViolaNEU-ram2sat-neu-author&quot;&gt;&lt;/a&gt;NEU. From RAM to SAT. Available at &lt;a href=&quot;http://www.ccs.neu.edu/home/viola/&quot; rel=&quot;nofollow&quot;&gt;http://www.ccs.neu.edu/home/viola/&lt;/a&gt;, 2012.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [52]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/jcss/PapadimitriouY91&quot;&gt;&lt;/a&gt;Christos&amp;nbsp;H. Papadimitriou and Mihalis Yannakakis. Optimization, approximation,      and complexity classes. J. Comput. Syst. Sci., 43(3):425–440, 1991.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [53]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XPatrascu08Succincter&quot;&gt;&lt;/a&gt;Mihai Pǎtraşcu.  Succincter.  In 49th IEEE Symp.&amp;nbsp;on Foundations of Computer      Science (FOCS). IEEE, 2008.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [54]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XPPST83&quot;&gt;&lt;/a&gt;Wolfgang&amp;nbsp;J. Paul, Nicholas Pippenger, Endre Szemer�di, and William&amp;nbsp;T. Trotter.      On determinism versus non-determinism and related problems (preliminary version). In      IEEE Symp.&amp;nbsp;on Foundations of Computer Science (FOCS), pages 429–438, 1983.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [55]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XPippengerF79&quot;&gt;&lt;/a&gt;Nicholas Pippenger and Michael&amp;nbsp;J. Fischer. Relations among complexity measures.      J.&amp;nbsp;of the ACM, 26(2):361–381, 1979.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [56]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XRaz87&quot;&gt;&lt;/a&gt;Alexander Razborov. Lower bounds on the dimension of schemes of bounded depth      in a complete basis containing the logical addition function.  Akademiya Nauk SSSR.      Matematicheskie Zametki, 41(4):598–607, 1987.  English translation in Mathematical      Notes of the Academy of Sci. of the USSR, 41(4):333-338, 1987.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [57]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XReingold08&quot;&gt;&lt;/a&gt;Omer Reingold. Undirected connectivity in log-space. J.&amp;nbsp;of the ACM, 55(4), 2008.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [58]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/siamcomp/Robson84&quot;&gt;&lt;/a&gt;J.&amp;nbsp;M.  Robson.    N  by  N  checkers  is  exptime  complete.    SIAM  J.  Comput.,      13(2):252–267, 1984.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [59]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:conf/coco/Santhanam01&quot;&gt;&lt;/a&gt;Rahul Santhanam.   On separators, segregators and time versus space.   In IEEE      Conf.&amp;nbsp;on Computational Complexity (CCC), pages 286–294, 2001.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;                                                                                                                                                                                      [60]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XSAVITCH1970177&quot;&gt;&lt;/a&gt;Walter&amp;nbsp;J. Savitch.  Relationships between nondeterministic and deterministic tape      complexities. Journal of Computer and System Sciences, 4(2):177–192, 1970.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [61]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/siamcomp/Schonhage80&quot;&gt;&lt;/a&gt;Arnold Sch�nhage. Storage modification machines. SIAM J. Comput., 9(3):490–508,      1980.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [62]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XShamir92&quot;&gt;&lt;/a&gt;Adi Shamir. IP = PSPACE. J.&amp;nbsp;of the ACM, 39(4):869–877, October 1992.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [63]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XMR29860&quot;&gt;&lt;/a&gt;Claude&amp;nbsp;E. Shannon. The synthesis of two-terminal switching circuits. Bell System      Tech. J., 28:59–98, 1949.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [64]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XSho90&quot;&gt;&lt;/a&gt;Victor Shoup. New algorithms for finding irreducible polynomials over finite fields.      Mathematics of Computation, 54(189):435–447, 1990.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [65]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XSiegel04&quot;&gt;&lt;/a&gt;Alan Siegel. On universal classes of extremely random constant-time hash functions.      SIAM J.&amp;nbsp;on Computing, 33(3):505–543, 2004.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [66]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XSip83b&quot;&gt;&lt;/a&gt;Michael Sipser. A complexity theoretic approach to randomness. In ACM Symp.&amp;nbsp;on      the Theory of Computing (STOC), pages 330–335, 1983.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [67]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XSmo87&quot;&gt;&lt;/a&gt;Roman Smolensky.  Algebraic methods in the theory of lower bounds for Boolean      circuit complexity.  In 19th ACM Symp.&amp;nbsp;on the Theory of Computing (STOC), pages      77–82. ACM, 1987.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [68]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XMR2145856&quot;&gt;&lt;/a&gt;Larry Stockmeyer and Albert&amp;nbsp;R. Meyer.  Cosmological lower bound on the circuit      complexity of a small problem in logic. J. ACM, 49(6):753–784, 2002.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [69]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XToda91&quot;&gt;&lt;/a&gt;Seinosuke Toda.   PP is as hard as the polynomial-time hierarchy.   SIAM J.&amp;nbsp;on      Computing, 20(5):865–877, 1991.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [70]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/x/Turing37&quot;&gt;&lt;/a&gt;Alan&amp;nbsp;M.   Turing.      On   computable   numbers,   with   an   application   to   the      entscheidungsproblem. Proc. London Math. Soc., s2-42(1):230–265, 1937.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [71]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XVal77&quot;&gt;&lt;/a&gt;Leslie&amp;nbsp;G.  Valiant.   Graph-theoretic  arguments  in  low-level  complexity.   In  6th      Symposium on Mathematical Foundations of Computer Science, volume&amp;nbsp;53 of Lecture      Notes in Computer Science, pages 162–176. Springer, 1977.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [72]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/tcs/ValiantV86&quot;&gt;&lt;/a&gt;Leslie&amp;nbsp;G. Valiant and Vijay&amp;nbsp;V. Vazirani. NP is as easy as detecting unique solutions.      Theor. Comput. Sci., 47(3):85–93, 1986.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [73]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XMelkebeek06&quot;&gt;&lt;/a&gt;Dieter  van  Melkebeek.   A  survey  of  lower  bounds  for  satisfiability  and  related      problems. Foundations and Trends in Theoretical Computer Science, 2(3):197–303, 2006.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [74]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/tcs/MelkebeekR05&quot;&gt;&lt;/a&gt;Dieter van Melkebeek and Ran Raz.  A time lower bound for satisfiability.  Theor.      Comput. Sci., 348(2-3):311–320, 2005.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [75]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/tcs/Vinodchandran05&quot;&gt;&lt;/a&gt;N.&amp;nbsp;V. Vinodchandran.  A note on the circuit complexity of PP.  Theor. Comput.      Sci., 347(1-2):415–418, 2005.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [76]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;Xviola-gems09&quot;&gt;&lt;/a&gt;Emanuele Viola.  Gems of theoretical computer science.  Lecture notes of the class      taught           at           Northeastern           University.           Available           at      &lt;a href=&quot;http://www.ccs.neu.edu/home/viola/classes/gems-08/index.html&quot; rel=&quot;nofollow&quot;&gt;http://www.ccs.neu.edu/home/viola/classes/gems-08/index.html&lt;/a&gt;, 2009.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [77]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XViolaBPvsE&quot;&gt;&lt;/a&gt;Emanuele Viola.  On approximate majority and probabilistic time.  Computational      Complexity, 18(3):337–375, 2009.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [78]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;Xviola-FTTCS09&quot;&gt;&lt;/a&gt;Emanuele Viola. On the power of small-depth computation. Foundations and Trends      in Theoretical Computer Science, 5(1):1–72, 2009.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [79]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XViola-xxx&quot;&gt;&lt;/a&gt;Emanuele Viola.  Reducing 3XOR to listing triangles, an exposition.  Available at      &lt;a href=&quot;http://www.ccs.neu.edu/home/viola/&quot; rel=&quot;nofollow&quot;&gt;http://www.ccs.neu.edu/home/viola/&lt;/a&gt;, 2011.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [80]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;Xviola-triz&quot;&gt;&lt;/a&gt;Emanuele Viola. Bit-probe lower bounds for succinct data structures. SIAM J.&amp;nbsp;on      Computing, 41(6):1593–1604, 2012.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [81]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;Xviola-datastructurelb-implies-cclb&quot;&gt;&lt;/a&gt;Emanuele Viola.  Lower bounds for data structures with space close to maximum      imply  circuit  lower  bounds.    Theory  of  Computing,  15:1–9,  2019.    Available  at      &lt;a href=&quot;http://www.ccs.neu.edu/home/viola/&quot; rel=&quot;nofollow&quot;&gt;http://www.ccs.neu.edu/home/viola/&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt;  [82]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;Xviola-tm&quot;&gt;&lt;/a&gt;Emanuele  Viola.   Pseudorandom  bits  and  lower  bounds  for  randomized  turing      machines. Theory of Computing, 18(10):1–12, 2022.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;authors&quot;&gt;By Manu&lt;/p&gt;
  </content>
    <author>
      <name>Emanuele Viola</name>
      <uri>https://emanueleviola.wordpress.com</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">CCI: jobs: Two Ph.D. Students at KTH Royal Institute of Technology (apply by June 1, 2023)</title>
    <link href="https://cstheory-jobs.org/2023/05/14/two-ph-d-students-at-kth-royal-institute-of-technology-apply-by-june-1-2023/"/>
    <id>http://cstheory-jobs.org/2023/05/14/two-ph-d-students-at-kth-royal-institute-of-technology-apply-by-june-1-2023/</id>
    <updated>2023-05-14T13:17:45+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;KTH Royal Institute for Technology is hiring for two Ph.D. students in algorithms and data analysis, with a focus on graph algorithms. The Ph.D. students will work under the supervision of assistant professor Stefan Neumann.&lt;/p&gt;
&lt;p&gt;These are two full positions (100% employment) with opportunities for research visits abroad.&lt;/p&gt;
&lt;p&gt;Website: &lt;a href=&quot;https://www.kth.se/en/om/work-at-kth/lediga-jobb/what:job/jobID:625561/where:4/&quot;&gt;https://www.kth.se/en/om/work-at-kth/lediga-jobb/what:job/jobID:625561/where:4/&lt;/a&gt;&lt;br /&gt;
Email: neum@kth.se&lt;/p&gt;
&lt;p class=&quot;authors&quot;&gt;By shacharlovett&lt;/p&gt;
  </content>
    <author>
      <name>CCI: jobs</name>
      <uri>https://cstheory-jobs.org</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">ECCC Papers: TR23-071 |  Sampling and Certifying Symmetric Functions | 

	Artur Riazanov, 

	Yuval Filmus, 

	Dmitry Sokolov, 

	Itai Leigh</title>
    <link href="https://eccc.weizmann.ac.il/report/2023/071"/>
    <id>https://eccc.weizmann.ac.il/report/2023/071</id>
    <updated>2023-05-14T11:04:25+00:00</updated>
    <content type="html" xml:lang="en">
    A circuit $\mathcal{C}$ samples a distribution $\mathbf{X}$ with an error $\epsilon$ if the statistical distance between the output of $\mathcal{C}$ on the uniform input and $\mathbf{X}$ is $\epsilon$. We study the hardness of sampling a uniform distribution over the set of $n$-bit strings of Hamming weight $k$ denoted by $\mathbf{U}^n_k$ for decision forests, i.e. every output bit is computed as a decision tree of the inputs. For every $k$ there is an $O(\log n)$-depth decision forest sampling $\mathbf{U}^n_k$ with an inverse-polynomial error [Viola 2012, Czumaj 2015]. We show that for every $\epsilon &amp;gt; 0$ there exists $\tau$ such that for decision depth $\tau \log (n/k) / \log \log (n/k)$, the error for sampling $\mathbf{U}_k^n$ is at least $1-\epsilon$. Our result is based on the recent robust sunflower lemma [Alweiss, Lovett, Wu, Zhang 2021, Rao 2019].
  Our second result is about matching a set of $n$-bit strings with the image of a $d$-local circuit, i.e. such that each output bit depends on at most $d$ input bits. We study the set of all $n$-bit strings whose Hamming weight is at least $n/2$. We improve the previously known locality lower bound from $\Omega(\log^* n)$ [Beyersdorff, Datta, Krebs, Mahajan, Scharfenberger-Fabian, Sreenivasaiah, Thomas and Vollmer, 2013] to $\Omega(\sqrt{\log n})$, leaving only a quartic gap from the best upper bound of $O(\log^2 n)$.
  </content>
    <author>
      <name>ECCC Papers</name>
      <uri>https://eccc.weizmann.ac.il/</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">Hung Le: Amazing Recent Advances on Shotcut Set and The Likes</title>
    <link href="https://minorfree.github.io/hopset-adv/"/>
    <id>https://minorfree.github.io/hopset-adv</id>
    <updated>2023-05-14T00:00:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;&lt;a href=&quot;http://www.weizmann.ac.il/math/parter/home&quot;&gt;Merav Parter&lt;/a&gt; gave a talk at UMass theory seminar last week titled “Reachability Shortcuts: New Bounds and Algorithms”. In the talk, Merav summarized recent developments in shortcut sets and related concepts. It was amazing to see all the results, and I cannot resist the attempt to share my take here in this blog post.&lt;/p&gt;

&lt;h1 id=&quot;1-shortcut-set-what-is-it&quot;&gt;1. Shortcut set: what is it?&lt;/h1&gt;

&lt;p&gt;A \(d\)-shortcut set of a &lt;em&gt;directed graph&lt;/em&gt; \(G=(V,E)\) is a set of directed edges \(E_H\) such that (i) the graph \(H = (V,E\cup E_H)\) has the same transitive closure as \(G\) and (ii) for every \(u\not=v\in V\), if \(v\) is reachable from \(u\), then there is directed \(u\)-to-\(v\) path of at most \(d\) edges (a.k.a. hops).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/figs/shortcut-set.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figure:  Adding two shortcuts (the red dashed edges) reduces the hop distance from \(u\) to \(v\) to 4. For a shortcut set of linear size, DAG is the most difficult instance: one can shortcut any strongly connected graph to diameter \(2\) by \(n-1\) edges.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The shortcut set problem was introduced by &lt;a href=&quot;https://link.springer.com/chapter/10.1007/3-540-56402-0_48&quot;&gt;Thorup&lt;/a&gt;. The main goal is to understand the trade-off between the hop diameter \(d\) and the size of the shortcut set \(E_H\). The most well-studied regime is fixing \(\lvert E_H\rvert = \tilde{O}(n)\), and then minimizing \(d\). (Here, \(n\) is the number of vertices.) We will call this special regime &lt;em&gt;the shortcut set problem&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For the shortcut set problem, a folklore sampling gives \(d = O(\sqrt{n})\): sample each vertex with probability \(\tilde{O}(1/\sqrt{n})\) to get a set \(S\), and add all (permissible) directed edges between vertices in \(S\). The key insight for bounding the diameter is: For any shortest path \(\pi_G(u,v)\) from \(u\) to \(v\) with at least \(2\sqrt{n}\) edges,  \(S\) will likely hit both the prefix and suffix of length \(\sqrt{n}\) of \(\pi_G(u,v)\). (This algorithm is attributed to &lt;a href=&quot;https://dl.acm.org/doi/10.1145/97444.97686&quot;&gt;Ullman and Yannakakis&lt;/a&gt;.) A long-standing open problem is:&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Question 1&lt;/strong&gt;: Is diameter bound \(\sqrt{n}\) optimal for shortcut sets of nearly linear size?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The answer is no due to the &lt;a href=&quot;https://arxiv.org/pdf/2111.13240.pdf&quot;&gt;recent breakthrough&lt;/a&gt; by Kogan and Parter: using  \(\tilde{O}(n)\) shorcuts, they reduced the diameter down to \(n^{1/3}\). Their result deservingly won the best paper award at SODA 22. A key conceptual contribution of their work is a shift in perspective: shortcutting by connecting vertices to paths of length roughly \(n^{1/3}\), instead of only making vertex-to-vertex connections as the folklore sampling. Find this intriguing? Read &lt;a href=&quot;https://arxiv.org/pdf/2111.13240.pdf&quot;&gt;the paper&lt;/a&gt; or watch &lt;a href=&quot;https://www.youtube.com/watch?v=qaY14SnLdMM&quot;&gt;Merav’s talk&lt;/a&gt; or both. The paper has a bunch of other interesting results.&lt;/p&gt;

&lt;p&gt;At this point, you might wonder: how far could one go about reducing the diameter? Thorup &lt;a href=&quot;https://link.springer.com/chapter/10.1007/3-540-56402-0_48&quot;&gt;conjectured&lt;/a&gt; that the diameter could be reduced all the way down to \(\mathrm{poly}(\log(n))\) with a nearly linear number of shortcuts. This conjecture was disproved by &lt;a href=&quot;https://dl.acm.org/doi/pdf/10.5555/644108.644216&quot;&gt;Hesse&lt;/a&gt;, who was a graduate student at UMass Amherst at the time with our &lt;a href=&quot;https://www.mathgenealogy.org/id.php?id=30442&quot;&gt;Neil Immerman&lt;/a&gt; :). Hesse constructed a directed graph with \(m = \Theta(n^{19/17})\) edges such that one has to use \(\Omega(mn^{1/17})\) shortcuts to reduce the diameter to below \(\Theta(n^{1/17})\). This lower bound &lt;a href=&quot;https://arxiv.org/abs/1802.06271&quot;&gt;has been&lt;/a&gt; &lt;a href=&quot;https://arxiv.org/abs/2110.15809&quot;&gt;improved&lt;/a&gt; &lt;a href=&quot;https://arxiv.org/pdf/2304.02193.pdf&quot;&gt;further&lt;/a&gt;. Notably, &lt;a href=&quot;https://arxiv.org/pdf/2304.02193.pdf&quot;&gt;Bodwin and Hoppenworth&lt;/a&gt; recently obtained a lower bound of \(\Omega(n^{1/4})\) on the diameter, which is very close to the upper bound of \(O(n^{1/3})\) by Kogan and Parter. This result leaves another fascinating open problem:&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Open Problem&lt;/strong&gt;: Closing the gap \(O(n^{1/3})\) vs. \(\Omega(n^{1/4})\) on the diameter for shortcut sets of nearly linear size.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;2-approximate-hopsets&quot;&gt;2. (Approximate) hopsets&lt;/h1&gt;

&lt;p&gt;Hopset is very similar to the shortcut set but applied to weighted graphs instead. More formally, a \(d\)-hopset set of a &lt;em&gt;directed, weighted graph&lt;/em&gt;  \(G=(V,E)\) is a set of directed, &lt;em&gt;weighted&lt;/em&gt; edges \(E_H\) such that (i) the graph \(H = (V,E\cup E_H)\) has the same distance metric as \(G\) and (ii) for every \(u\not=v\in V\),  there is a shortest \(u\)-to-\(v\) path of at most \(d\) edges in \(H = (V,E\cup E_H)\).&lt;/p&gt;

&lt;p&gt;Clearly, the hopset problem is at least as hard as the shortcut set problem: any hopset is a shortcut set with the same diameter bound.&lt;/p&gt;

&lt;p&gt;A related notion is &lt;em&gt;approximate hopset&lt;/em&gt;, in which we are given an additional parameter \(\epsilon \in (0,1)\), and for every \(u,v\), we would like to have a \((1+\epsilon)\)-approximate \(u\)-to-\(v\) path of at most \(d\) edges. We allow \(d\) to depend on \(\epsilon\)—think of \(\epsilon\) as a small constant.&lt;/p&gt;

&lt;p&gt;One could check that the folklore sampling also works for hopset (and hence for approximate hopset as well): by adding \(\tilde{O}(n \log n)\) edges, one could reduce the diameter bound to \(\sqrt{n}\). The same question arises: Is the  \(\sqrt{n}\) bound on the diameter optimal for hopsets and approximate hopsets of nearly linear size?&lt;/p&gt;

&lt;p&gt;For the approximate hopset, the same paper by Kogan and Parter provided a no answer: They constructed a nearly linear hopset with a diameter bound of \(n^{2/5}\). In follow-up work, &lt;a href=&quot;https://arxiv.org/abs/2207.04507&quot;&gt;Bernstein and Wein&lt;/a&gt; improved the diameter to \(n^{1/3}\), matching the known bound for shortcut set; &lt;a href=&quot;https://video.cs.utexas.edu/node/428&quot;&gt;watch the talk here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;How about the (exact) hopset? One might expect that the diameter bound should also be improved to  \(n^{1/3}\). &lt;a href=&quot;https://arxiv.org/pdf/2304.02193.pdf&quot;&gt;Bodwin and Hoppenworth&lt;/a&gt; recently showed that \(\sqrt{n}\) is the best one could do (up to some polylog). I personally find this result very surprising. How do they achieve their lower bound? Read their paper; the exposition of the ideas in the paper is so well written that any attempt to summarize better would be in vain.&lt;/p&gt;

&lt;p&gt;Somehow, the exact hopset is strictly harder than the approximate hopset and the shortcut set. Could approximate hopset be strictly harder than shortcut set? Bernstein and Wein provided state-of-the-art bounds for approximate hopsets, matching those of shortcut sets. As far as I understand, their proof does not provide a black-box reduction. Is such a reduction possible? I am curious to know the answer.&lt;/p&gt;&lt;p class=&quot;authors&quot;&gt;By Hung Le&lt;/p&gt;
  </content>
    <author>
      <name>Hung Le</name>
      <uri>https://minorfree.github.io</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">David Eppstein: Coloring the plane for generic norms</title>
    <link href="https://11011110.github.io/blog/2023/05/13/coloring-plane-generic.html"/>
    <id>https://11011110.github.io/blog/2023/05/13/coloring-plane-generic</id>
    <updated>2023-05-13T17:09:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;Noga Alon recently stopped by my department earlier this month to give two talks. During his visit, he pointed me to some interesting recent work he had done on coloring the plane, buried in the discussion at the end of his preprint “Unit and distinct distances in typical norms” (&lt;a href=&quot;https://arxiv.org/abs/2302.09058&quot;&gt;arXiv:2302.09058&lt;/a&gt;, with Matija Bucić and Lisa Sauermann). Recall that the still-unsolved &lt;a href=&quot;https://en.wikipedia.org/wiki/Hadwiger%E2%80%93Nelson_problem&quot;&gt;Hadwiger–Nelson problem&lt;/a&gt; asks how many colors are needed to color the points of the plane so that no two points at distance one from each other have the same color. The figure below shows a 7-coloring in the pattern of a hexagonal tiling, with this property, so at most seven colors are needed. The black unit distance graph outlined in the same figure, the &lt;a href=&quot;/blog/2011/11/29/moser-spindle.html&quot;&gt;Moser spindle&lt;/a&gt;, requires four colors, but by now much larger and more complicated unit distance graphs are known that force the number of colors to be at least five.&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;/blog/assets/2023/Hadwiger-Nelson.svg&quot; alt=&quot;Seven-coloring of the plane with superimposed Moser spindle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The preprint asks, what if we use a different distance function for the plane, defined by a non-Euclidean &lt;a href=&quot;https://en.wikipedia.org/wiki/Norm_(mathematics)&quot;&gt;norm&lt;/a&gt;? The answer turns out to be very different: for most such distances, the optimal number of colors is four.&lt;/p&gt;

&lt;p&gt;Any norm in the \(d\)-dimensional space \(\mathbb{R}^d\) can be described by its unit ball, a centrally symmetric convex body, and any centrally symmetric convex body defines a norm. The distance between two points is measured by the factor you would need to scale the body so that if you center it at one of the two points it touches the other one. A unit vector, for a distance defined in this way, is just a point on the boundary of the unit ball. For Euclidean distance in the plane the unit ball is a circular disk, and it is also common in computational geometry to consider norms whose unit ball is a regular polygon (with evenly many sides), such as a square or hexagon. But infinitely many other less-regular shapes are also possible, each defining its own distance. Because these distances are different from each other, the number of colors they need may also be different, and may be easier to compute. For instance, for a square unit ball, you can use a square tiling instead of the hexagonal one and color the tiling with only four colors (being careful of how to handle boundary points) so that no two points at unit distance have the same color:&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;/blog/assets/2023/plaid.svg&quot; alt=&quot;Four-coloring of the plane for a square norm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Alon, Bucić, and Sauermann approach this problem by treating \(\mathbb{R}^d\) as an infinite-dimensional vector space over the rational numbers rather than a \(d\)-dimensional vector space over the real numbers, and asking questions about which subsets of the unit vectors are rationally independent (treating a unit vector and its negation as being the same for this purpose). That means that there is no way to produce one of the vectors as a weighted combination of other vectors in the same set, with rational numbers as the weights. This is much in the same spirit as &lt;a href=&quot;/blog/2022/04/03/dissection-into-rectangles.html&quot;&gt;using Dehn invariants to study polygonal dissections&lt;/a&gt; where again, it is rational dependence more than real dependence that is central.&lt;/p&gt;

&lt;p&gt;For a polygonal distance, any two unit vectors on the same side of a polygon have infinitely many rational combinations that are also unit vectors. If \(u\) and \(v\) are unit vectors on one side of a convex polygon, and \(p\) is any rational number with \(0\lt p\lt 1\), then \(pu+(1-p)v\) is a rational combination that lies between \(u\) and \(v\) on the same side of the polygon. Because it is on the boundary of the polygon, it is a unit vector. For the Euclidean distance, we have to be more careful, but there still can be infinitely many rational combinations that are also unit vectors. For instance, if \(x=(1,0)\) and \(y=(0,1)\) are the axis-parallel unit vectors of a Cartesian coordinate system, their rational combination \(\tfrac12 x + \tfrac12 y = (\tfrac12,\tfrac12)\) is not a unit vector for Euclidean distance (its length is \(1/\sqrt2\)), and the unit vector in the same direction, \((1/\sqrt2,1/\sqrt2)\), is not a rational combination of \(x\) and \(y\). However, if \(a^2+b^2=c^2\) is any integer Pythagorean triple, the vector \(\tfrac{a}{c}x+\tfrac{b}{c}y=(\tfrac{a}{c},\tfrac{b}{c})\) is both a unit vector and a rational combination of \(x\) and \(y\). Because there are infinitely many Pythagorean triples, \(x\) and \(y\) have infinitely many unit-vector rational combinations.&lt;/p&gt;

&lt;p&gt;What Alon, Bucić, and Sauermann show is that for “most” norms in a certain technical sense (a &lt;a href=&quot;https://en.wikipedia.org/wiki/Comeager&quot;&gt;comeager&lt;/a&gt; set of norms in a certain topological space of norms), rational combinations are much less common. More precisely, they prove the following statements, which are equivalent to each other by standard results in the theory of &lt;a href=&quot;https://en.wikipedia.org/wiki/Matroid_partitioning&quot;&gt;matroid partitions&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Every finite set \(U\) of unit vectors, for a \(d\)-dimensional generic norm, has rational rank \(\ge \vert U\vert/d\)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If \(U\) is a finite set of unit vectors for a \(d\)-dimensional generic norm, then every subset of \(k\) vectors from \(U\) has at most \(kd\) rational combinations in \(U\) (including themselves, but not counting negations as different).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Every finite set of unit vectors for a \(d\)-dimensional generic norm can be partitioned into at most \(d\) subsets, so that the vectors within each subset are rationally independent.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we give each of these \(d\) subsets a color, and use these colors for the edges of any finite unit distance graph, then every two parallel edges will have the same color, and every monochromatic cycle will have edges that can be paired into parallel edges in opposite directions from each other (like the edges of a square or regular hexagon). This means that the subgraph of edges of any single color will be bipartite. We can color each of these subgraphs with two colors, and combine the subgraphs to get \(2^d\) colors for the whole unit distance graph. Let’s see how such a coloring might look for the Moser spindle:&lt;/p&gt;

&lt;p style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;/blog/assets/2023/spindle-color.svg&quot; alt=&quot;Four-coloring the Moser spindle by partitioning it into bipartite subgraphs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this example, the blue-edge subgraph has two cycles, both rhombi. Each edge of a rhombus can be paired with another parallel edge; if you travel around the rhombus you will follow these two edges in opposite directions. The yellow-edge subgraph has no cycles at all. Combining the 2-colorings of the two subgraphs gives us a 4-coloring of the whole Moser spindle.&lt;/p&gt;

&lt;p&gt;This method 4-colors every finite unit distance graph, for a generic norm, but not the whole plane at once. To color the whole plane, the &lt;a href=&quot;https://en.wikipedia.org/wiki/De_Bruijn%E2%80%93Erd%C5%91s_theorem_(graph_theory)&quot;&gt;De Bruijn–Erdős theorem&lt;/a&gt; can be used. This is a theorem that, whenever all finite subgraphs of an infinite graph can be colored with a certain finite number of colors, the whole graph can be colored with the same number of colors. It’s possible to construct a copy of the Moser spindle as a unit distance graph for any norm, by using the intermediate value theorem to find equilateral triangles supported by any edge and then rotating one pair of triangles with respect to another until getting another unit distance. Therefore, four colors is optimal. But the 4-coloring you get is a nasty set-theoretic thing, impossible to visualize, unlike the nice tiling-based 7-coloring of the Euclidean plane.&lt;/p&gt;

&lt;p&gt;Noga left me with some related but unsolved questions: Can we find an explicit example of a norm with this few-rational-combinations property? It would need to be strictly convex (the boundaries of its balls could not include any line segments); can we find an explicit example of a strictly-convex norm requiring only four colors? Is it possible for such a norm to have a simple finite description? And what about smooth norms, or \(L^p\)-norms (possibly for non-integer \(p\))?&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;https://mathstodon.xyz/@11011110/110364160343375481&quot;&gt;Discuss on Mastodon&lt;/a&gt;)&lt;/p&gt;&lt;p class=&quot;authors&quot;&gt;By David Eppstein&lt;/p&gt;
  </content>
    <author>
      <name>David Eppstein</name>
      <uri>https://11011110.github.io/blog/</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">CCI: jobs: Postdoc at Cambridge (apply by July 1, 2023)</title>
    <link href="https://cstheory-jobs.org/2023/05/12/postdoc-at-cambridge-apply-by-july-1-2023/"/>
    <id>http://cstheory-jobs.org/2023/05/12/postdoc-at-cambridge-apply-by-july-1-2023/</id>
    <updated>2023-05-12T10:03:39+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;A postdoc position in Quantum Algorithms and Complexity at the University of Cambridge, under the supervision of Sergii Strelchuk and Tom Gur, is available.&lt;/p&gt;
&lt;p&gt;Website: &lt;a href=&quot;https://www.maths.cam.ac.uk/person/ss870&quot;&gt;https://www.maths.cam.ac.uk/person/ss870&lt;/a&gt;, &lt;a href=&quot;https://www.dcs.warwick.ac.uk/~tomgur/&quot;&gt;https://www.dcs.warwick.ac.uk/~tomgur/&lt;/a&gt;&lt;br /&gt;
Email: ss870@cam.ac.uk, tom.gur@warwick.ac.uk&lt;/p&gt;
&lt;p class=&quot;authors&quot;&gt;By shacharlovett&lt;/p&gt;
  </content>
    <author>
      <name>CCI: jobs</name>
      <uri>https://cstheory-jobs.org</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Constant-depth circuits vs. monotone circuits</title>
    <link href="http://arxiv.org/abs/2305.06821"/>
    <id>http://arxiv.org/abs/2305.06821</id>
    <updated>2023-05-12T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Cavalar_B/0/1/0/all/0/1&quot;&gt;Bruno P. Cavalar&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Oliveira_I/0/1/0/all/0/1&quot;&gt;Igor C. Oliveira&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We establish new separations between the power of monotone and general
(non-monotone) Boolean circuits:
&lt;/p&gt;
&lt;p&gt;- For every $k \geq 1$, there is a monotone function in ${\sf AC^0}$ that
requires monotone circuits of depth $\Omega(\log^k n)$. This significantly
extends a classical result of Okol&#39;nishnikova (1982) and Ajtai and Gurevich
(1987). In addition, our separation holds for a monotone graph property, which
was unknown even in the context of ${\sf AC^0}$ versus ${\sf mAC^0}$.
&lt;/p&gt;
&lt;p&gt;- For every $k \geq 1$, there is a monotone function in ${\sf AC^0}[\oplus]$
that requires monotone circuits of size $\exp(\Omega(\log^k n))$. This makes
progress towards a question posed by Grigni and Sipser (1992).
&lt;/p&gt;
&lt;p&gt;These results show that constant-depth circuits can be more efficient than
monotone circuits when computing monotone functions.
&lt;/p&gt;
&lt;p&gt;In the opposite direction, we observe that non-trivial simulations are
possible in the absence of parity gates: every monotone function computed by an
${\sf AC^0}$ circuit of size $s$ and depth $d$ can be computed by a monotone
circuit of size $2^{n - n/O(\log s)^{d-1}}$. We show that the existence of
significantly faster monotone simulations would lead to breakthrough circuit
lower bounds. In particular, if every monotone function in ${\sf AC^0}$ admits
a polynomial size monotone circuit, then ${\sf NC^2}$ is not contained in ${\sf
NC^1}$ .
&lt;/p&gt;
&lt;p&gt;Finally, we revisit our separation result against monotone circuit size and
investigate the limits of our approach, which is based on a monotone lower
bound for constraint satisfaction problems established by G\&quot;o\&quot;os et al.
(2019) via lifting techniques. Adapting results of Schaefer (1978) and Allender
et al. (2009), we obtain an unconditional classification of the monotone
circuit complexity of Boolean-valued CSPs via their polymorphisms. This result
and the consequences we derive from it might be of independent interest.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: A Near-Optimal Deterministic Distributed Synchronizer</title>
    <link href="http://arxiv.org/abs/2305.06452"/>
    <id>http://arxiv.org/abs/2305.06452</id>
    <updated>2023-05-12T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Ghaffari_M/0/1/0/all/0/1&quot;&gt;Mohsen Ghaffari&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Trygub_A/0/1/0/all/0/1&quot;&gt;Anton Trygub&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We provide the first deterministic distributed synchronizer with near-optimal
time complexity and message complexity overheads. Concretely, given any
distributed algorithm $\mathcal{A}$ that has time complexity $T$ and message
complexity $M$ in the synchronous message-passing model (subject to some care
in defining the model), the synchronizer provides a distributed algorithm
$\mathcal{A}&#39;$ that runs in the asynchronous message-passing model with time
complexity $T \cdot poly(\log n)$ and message complexity $(M+m)\cdot poly(\log
n)$. Here, $n$ and $m$ denote the number of nodes and edges in the network,
respectively. The synchronizer is deterministic in the sense that if algorithm
$\mathcal{A}$ is deterministic, then so is algorithm $\mathcal{A}&#39;$.
Previously, only a randomized synchronizer with near-optimal overheads was
known by seminal results of Awerbuch, Patt-Shamir, Peleg, and Saks [STOC 1992]
and Awerbuch and Peleg [FOCS 1990]. We also point out and fix some inaccuracies
in these prior works.
&lt;/p&gt;
&lt;p&gt;As concrete applications of our synchronizer, we resolve some longstanding
and fundamental open problems in distributed algorithms: we get the first
asynchronous deterministic distributed algorithms with near-optimal time and
message complexities for leader election, breadth-first search tree, and
minimum spanning tree computations: these all have message complexity
$\tilde{O}(m)$ message complexity. The former two have $\tilde{O}(D)$ time
complexity, where $D$ denotes the network diameter, and the latter has
$\tilde{O}(D+\sqrt{n})$ time complexity. All these bounds are optimal up to
logarithmic factors. Previously all such near-optimal algorithms were either
restricted to the synchronous setting or required randomization.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Spectral Clustering on Large Datasets: When Does it Work? Theory from Continuous Clustering and Density Cheeger-Buser</title>
    <link href="http://arxiv.org/abs/2305.06541"/>
    <id>http://arxiv.org/abs/2305.06541</id>
    <updated>2023-05-12T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Chu_T/0/1/0/all/0/1&quot;&gt;Timothy Chu&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Miller_G/0/1/0/all/0/1&quot;&gt;Gary Miller&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Walkington_N/0/1/0/all/0/1&quot;&gt;Noel Walkington&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Spectral clustering is one of the most popular clustering algorithms that has
stood the test of time. It is simple to describe, can be implemented using
standard linear algebra, and often finds better clusters than traditional
clustering algorithms like $k$-means and $k$-centers. The foundational
algorithm for two-way spectral clustering, by Shi and Malik, creates a
geometric graph from data and finds a spectral cut of the graph.
&lt;/p&gt;
&lt;p&gt;In modern machine learning, many data sets are modeled as a large number of
points drawn from a probability density function. Little is known about when
spectral clustering works in this setting -- and when it doesn&#39;t. Past
researchers justified spectral clustering by appealing to the graph Cheeger
inequality (which states that the spectral cut of a graph approximates the
``Normalized Cut&#39;&#39;), but this justification is known to break down on large
data sets.
&lt;/p&gt;
&lt;p&gt;We provide theoretically-informed intuition about spectral clustering on
large data sets drawn from probability densities, by proving when a continuous
form of spectral clustering considered by past researchers (the unweighted
spectral cut of a probability density) finds good clusters of the underlying
density itself. Our work suggests that Shi-Malik spectral clustering works well
on data drawn from mixtures of Laplace distributions, and works poorly on data
drawn from certain other densities, such as a density we call the `square-root
trough&#39;.
&lt;/p&gt;
&lt;p&gt;Our core theorem proves that weighted spectral cuts have low weighted
isoperimetry for all probability densities. Our key tool is a new Cheeger-Buser
inequality for all probability densities, including discontinuous ones.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Optimal Algorithms for Bounded Weighted Edit Distance</title>
    <link href="http://arxiv.org/abs/2305.06659"/>
    <id>http://arxiv.org/abs/2305.06659</id>
    <updated>2023-05-12T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Cassis_A/0/1/0/all/0/1&quot;&gt;Alejandro Cassis&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kociumaka_T/0/1/0/all/0/1&quot;&gt;Tomasz Kociumaka&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Wellnitz_P/0/1/0/all/0/1&quot;&gt;Philip Wellnitz&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The edit distance of two strings is the minimum number of insertions,
deletions, and substitutions of characters needed to transform one string into
the other. The textbook dynamic-programming algorithm computes the edit
distance of two length-$n$ strings in $O(n^2)$ time, which is optimal up to
subpolynomial factors under SETH. An established way of circumventing this
hardness is to consider the bounded setting, where the running time is
parameterized by the edit distance $k$. A celebrated algorithm by Landau and
Vishkin (JCSS &#39;88) achieves time $O(n + k^2)$, which is optimal as a function
of $n$ and $k$.
&lt;/p&gt;
&lt;p&gt;Most practical applications rely on a more general weighted edit distance,
where each edit has a weight depending on its type and the involved characters
from the alphabet $\Sigma$. This is formalized through a weight function $w :
\Sigma\cup\{\varepsilon\}\times\Sigma\cup\{\varepsilon\}\to\mathbb{R}$
normalized so that $w(a,a)=0$ and $w(a,b)\geq 1$ for all $a,b \in
\Sigma\cup\{\varepsilon\}$ with $a \neq b$; the goal is to find an alignment of
the two strings minimizing the total weight of edits. The $O(n^2)$-time
algorithm supports this setting seamlessly, but only very recently, Das,
Gilbert, Hajiaghayi, Kociumaka, and Saha (STOC &#39;23) gave the first non-trivial
algorithm for the bounded version, achieving time $O(n + k^5)$. While this
running time is linear for $k\le n^{1/5}$, it is still very far from the bound
$O(n+k^2)$ achievable in the unweighted setting.
&lt;/p&gt;
&lt;p&gt;In this paper, we essentially close this gap by showing both an improved
$\tilde O(n+\sqrt{nk^3})$-time algorithm and, more surprisingly, a matching
lower bound: Conditioned on the All-Pairs Shortest Paths (APSP) hypothesis, our
running time is optimal for $\sqrt{n}\le k\le n$ (up to subpolynomial factors).
This is the first separation between the complexity of the weighted and
unweighted edit distance problems.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Characterizing the impact of last-level cache replacement policies on big-data workloads</title>
    <link href="http://arxiv.org/abs/2305.06696"/>
    <id>http://arxiv.org/abs/2305.06696</id>
    <updated>2023-05-12T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Jamet_A/0/1/0/all/0/1&quot;&gt;Alexandre Valentin Jamet&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Alvarez_L/0/1/0/all/0/1&quot;&gt;Lluc Alvarez&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Casas_M/0/1/0/all/0/1&quot;&gt;Marc Casas&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In recent years, graph-processing has become an essential class of workloads
with applications in a rapidly growing number of fields. Graph-processing
typically uses large input sets, often in multi-gigabyte scale, and
data-dependent graph traversal methods exhibiting irregular memory access
patterns. Recent work demonstrates that, due to the highly irregular memory
access patterns of data-dependent graph traversals, state-of-the-art
graph-processing workloads spend up to 80 % of the total execution time waiting
for memory accesses to be served by the DRAM. The vast disparity between the
Last Level Cache (LLC) and main memory latencies is a problem that has been
addressed for years in computer architecture. One of the prevailing approaches
when it comes to mitigating this performance gap between modern CPUs and DRAM
is cache replacement policies. In this work, we characterize the challenges
drawn by graph-processing workloads and evaluate the most relevant cache
replacement policies.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Minimal dominating sets enumeration with FPT-delay parameterized by the degeneracy and maximum degree</title>
    <link href="http://arxiv.org/abs/2305.06974"/>
    <id>http://arxiv.org/abs/2305.06974</id>
    <updated>2023-05-12T00:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Bartier_V/0/1/0/all/0/1&quot;&gt;Valentin Bartier&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Defrain_O/0/1/0/all/0/1&quot;&gt;Oscar Defrain&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Inerney_F/0/1/0/all/0/1&quot;&gt;Fionn Mc Inerney&lt;/a&gt;&lt;/p&gt;&lt;p&gt;At STOC 2002, Eiter, Gottlob, and Makino presented a technique called ordered
generation that yields an $n^{O(d)}$-delay algorithm listing all minimal
transversals of an $n$-vertex hypergraph of degeneracy $d$, for an appropriate
definition of degeneracy. Recently at IWOCA 2019, Conte, Kant\&#39;e, Marino, and
Uno asked whether, even for a more restrictive notion of degeneracy, this
XP-delay algorithm parameterized by $d$ could be made FPT-delay parameterized
by $d$ and the maximum degree $\Delta$, i.e., an algorithm with delay
$f(d,\Delta)\cdot n^{O(1)}$ for some computable function $f$. We answer this
question in the affirmative whenever the hypergraph corresponds to the closed
neighborhoods of a graph, i.e., we show that the intimately related problem of
enumerating minimal dominating sets in graphs admits an FPT-delay algorithm
parameterized by the degeneracy and the maximum degree.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


</feed>
