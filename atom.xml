<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>Theory of Computing Report</title>
  <link rel="self" href=""/>
  <link href=""/>
  <id></id>
  <updated></updated>
  <generator uri="http://feedreader.github.io/">Pluto 1.6.2 on Ruby 3.0.5 (2022-11-24) [x86_64-linux]</generator>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">ECCC Papers: TR23-009 |  Towards Optimal Depth-Reductions for Algebraic Formulas | 

	Sébastien Tavenas, 

	Hervé Fournier, 

	Guillaume Malod, 

	Nutan Limaye, 

	Srikanth Srinivasan</title>
    <link href="https://eccc.weizmann.ac.il/report/2023/009"/>
    <id>https://eccc.weizmann.ac.il/report/2023/009</id>
    <updated>2023-02-14T18:25:27+00:00</updated>
    <content type="html" xml:lang="en">
    Classical results of Brent, Kuck and Maruyama (IEEE Trans. Computers 1973) and Brent (JACM 1974) show that any algebraic formula of size s can be converted to one of depth O(log s) with only a polynomial blow-up in size. In this paper, we consider a fine-grained version of this result depending on the degree of the polynomial computed by the algebraic formula.
Given a homogeneous algebraic formula of size s computing a polynomial P of degree d, we show that P can also be computed by an (unbounded fan-in) algebraic formula of depth O(log d) and size poly(s). Our proof shows that this result also holds in the highly restricted setting of monotone, non-commutative algebraic formulas. This improves on previous results in the regime when d is small (i.e., d&amp;lt;&amp;lt;s). In particular, for the setting of d=O(log s), along with a result of Raz (STOC 2010, JACM 2013), our result implies the same depth reduction even for inhomogeneous formulas. This is particularly interesting in light of recent algebraic formula lower bounds, which work precisely in this ``low-degree&amp;quot; and ``low-depth&amp;quot; setting.
We also show that these results cannot be improved in the monotone setting, even for commutative formulas.
  </content>
    <author>
      <name>ECCC Papers</name>
      <uri>https://eccc.weizmann.ac.il/</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">Gil Kalai: Absolutely Sensational Morning News – Zander Kelley and Raghu Meka proved Behrend-type bounds for 3APs</title>
    <link href="https://gilkalai.wordpress.com/2023/02/14/absolutely-sensational-morning-news-zander-kelley-and-raghua-meka-proved-behrend-type-bounds-for-3aps/"/>
    <id>http://gilkalai.wordpress.com/?p=23866</id>
    <updated>2023-02-14T07:42:46+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;&lt;img data-attachment-id=&quot;23891&quot; data-permalink=&quot;https://gilkalai.wordpress.com/2023/02/14/absolutely-sensational-morning-news-zander-kelley-and-raghua-meka-proved-behrend-type-bounds-for-3aps/ultimate-roth-3/&quot; data-orig-file=&quot;https://gilkalai.files.wordpress.com/2023/02/ultimate-roth-2.jpg&quot; data-orig-size=&quot;770,372&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;1&amp;quot;}&quot; data-image-title=&quot;ultimate-roth&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://gilkalai.files.wordpress.com/2023/02/ultimate-roth-2.jpg?w=300&quot; data-large-file=&quot;https://gilkalai.files.wordpress.com/2023/02/ultimate-roth-2.jpg?w=640&quot; class=&quot;alignnone size-full wp-image-23891&quot; src=&quot;https://gilkalai.files.wordpress.com/2023/02/ultimate-roth-2.jpg?w=640&quot; alt=&quot;ultimate-roth&quot; srcset=&quot;https://gilkalai.files.wordpress.com/2023/02/ultimate-roth-2.jpg?w=640 640w, https://gilkalai.files.wordpress.com/2023/02/ultimate-roth-2.jpg?w=150 150w, https://gilkalai.files.wordpress.com/2023/02/ultimate-roth-2.jpg?w=300 300w, https://gilkalai.files.wordpress.com/2023/02/ultimate-roth-2.jpg?w=768 768w, https://gilkalai.files.wordpress.com/2023/02/ultimate-roth-2.jpg 770w&quot; sizes=&quot;(max-width: 640px) 100vw, 640px&quot;   /&gt;&lt;/p&gt;
&lt;p&gt;What is the density of a subset &lt;img src=&quot;https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;A&quot; class=&quot;latex&quot; /&gt; of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5C%7B1%2C2%2C%5Cdots+%2C+n+%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5C%7B1%2C2%2C%5Cdots+%2C+n+%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5C%7B1%2C2%2C%5Cdots+%2C+n+%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;{1,2,&amp;#92;dots , n &amp;#92;}&quot; class=&quot;latex&quot; /&gt; that guarantees that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;A&quot; class=&quot;latex&quot; /&gt; contains a 3-term arithmetic progression? And, more generally, if the density of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;A&quot; class=&quot;latex&quot; /&gt; is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cdelta&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cdelta&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cdelta&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;delta&quot; class=&quot;latex&quot; /&gt; what is the minimum number of 3-terms AP that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;A&quot; class=&quot;latex&quot; /&gt; contains?&lt;/p&gt;
&lt;p&gt;These problems and the more general problems for &lt;img src=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;k&quot; class=&quot;latex&quot; /&gt;-term AP, are very exciting and mathematicians worked on them extensively in the last century. (We devoted &lt;a href=&quot;https://gilkalai.wordpress.com/2020/07/08/to-cheer-you-up-in-difficult-times-7-bloom-and-sisask-just-broke-the-logarithm-barrier-for-roths-theorem/&quot;&gt;several&lt;/a&gt;  posts to earlier breakthroughs.)&lt;/p&gt;
&lt;p&gt;This morning. a striking new paper by Zander Kelley and Raghu Meka appeared on the arXiv describing an absolutely amazing breakthrough. (I am thankful to &lt;span class=&quot;gI&quot;&gt;&lt;span class=&quot;qu&quot; role=&quot;gridcell&quot;&gt;&lt;span class=&quot;gD&quot;&gt;Ryan Alweiss for telling me about it.) Here is the link to the paper&lt;br /&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 class=&quot;title mathjax&quot;&gt;&lt;a href=&quot;https://arxiv.org/abs/2302.05537&quot;&gt;Strong Bounds for 3-Progressions&lt;/a&gt;, by Zander Kelley and Raghu Meka&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Abstract:&lt;/strong&gt; We show that for some constant &lt;span id=&quot;MathJax-Element-1-Frame&quot; class=&quot;MathJax&quot;&gt;&lt;span id=&quot;MathJax-Span-1&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-2&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-3&quot; class=&quot;mi&quot;&gt;β&lt;/span&gt;&lt;span id=&quot;MathJax-Span-4&quot; class=&quot;mo&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span id=&quot;MathJax-Span-5&quot; class=&quot;mn&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, any subset &lt;span id=&quot;MathJax-Element-2-Frame&quot; class=&quot;MathJax&quot;&gt;&lt;span id=&quot;MathJax-Span-6&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-7&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-8&quot; class=&quot;mi&quot;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; of integers &lt;span id=&quot;MathJax-Element-3-Frame&quot; class=&quot;MathJax&quot;&gt;&lt;span id=&quot;MathJax-Span-9&quot; class=&quot;math&quot;&gt;&lt;span id=&quot;MathJax-Span-10&quot; class=&quot;mrow&quot;&gt;&lt;span id=&quot;MathJax-Span-11&quot; class=&quot;mo&quot;&gt;{&lt;/span&gt;&lt;span id=&quot;MathJax-Span-12&quot; class=&quot;mn&quot;&gt;1&lt;/span&gt;&lt;span id=&quot;MathJax-Span-13&quot; class=&quot;mo&quot;&gt;,&lt;/span&gt;&lt;span id=&quot;MathJax-Span-14&quot; class=&quot;mo&quot;&gt;…&lt;/span&gt;&lt;span id=&quot;MathJax-Span-15&quot; class=&quot;mo&quot;&gt;,&lt;/span&gt;&lt;span id=&quot;MathJax-Span-16&quot; class=&quot;mi&quot;&gt;N&lt;/span&gt;&lt;span id=&quot;MathJax-Span-17&quot; class=&quot;mo&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; of size at least&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=2%5E%7B-O%28%28%5Clog+N%29%5E%5Cbeta%29%7D+%5Ccdot+N&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=2%5E%7B-O%28%28%5Clog+N%29%5E%5Cbeta%29%7D+%5Ccdot+N&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=2%5E%7B-O%28%28%5Clog+N%29%5E%5Cbeta%29%7D+%5Ccdot+N&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;2^{-O((&amp;#92;log N)^&amp;#92;beta)} &amp;#92;cdot N&quot; class=&quot;latex&quot; /&gt;&lt;/p&gt;
&lt;p&gt;contains a non-trivial three-term arithmetic progression. Previously, three-term arithmetic progressions were known to exist only for sets of size at least &lt;img src=&quot;https://s0.wp.com/latex.php?latex=N%2F%28%5Clog+N%29%5E%7B1+%2B+c%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=N%2F%28%5Clog+N%29%5E%7B1+%2B+c%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=N%2F%28%5Clog+N%29%5E%7B1+%2B+c%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;N/(&amp;#92;log N)^{1 + c}&quot; class=&quot;latex&quot; /&gt; for a constant &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c%3E0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c%3E0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c%3E0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c&amp;gt;0&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p&gt;Our approach is first to develop new analytic techniques for addressing some related questions in the finite-field setting and then to apply some analogous variants of these same techniques, suitably adapted for the more complicated setting of integers.&lt;/p&gt;
&lt;p&gt;Huge congratulations to Zander Kelley and Raghu Meka, and to the mathematical community.&lt;/p&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; data-attachment-id=&quot;23875&quot; data-permalink=&quot;https://gilkalai.wordpress.com/2023/02/14/absolutely-sensational-morning-news-zander-kelley-and-raghua-meka-proved-behrend-type-bounds-for-3aps/3-term-ap-2/&quot; data-orig-file=&quot;https://gilkalai.files.wordpress.com/2023/02/3-term-ap-1.jpg&quot; data-orig-size=&quot;1024,1024&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;1&amp;quot;}&quot; data-image-title=&quot;3-term AP&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://gilkalai.files.wordpress.com/2023/02/3-term-ap-1.jpg?w=300&quot; data-large-file=&quot;https://gilkalai.files.wordpress.com/2023/02/3-term-ap-1.jpg?w=640&quot; class=&quot;alignnone  wp-image-23875&quot; src=&quot;https://gilkalai.files.wordpress.com/2023/02/3-term-ap-1.jpg?w=463&amp;#038;h=463&quot; alt=&quot;3-term AP&quot; width=&quot;463&quot; height=&quot;463&quot; srcset=&quot;https://gilkalai.files.wordpress.com/2023/02/3-term-ap-1.jpg?w=463&amp;amp;h=463 463w, https://gilkalai.files.wordpress.com/2023/02/3-term-ap-1.jpg?w=926&amp;amp;h=926 926w, https://gilkalai.files.wordpress.com/2023/02/3-term-ap-1.jpg?w=150&amp;amp;h=150 150w, https://gilkalai.files.wordpress.com/2023/02/3-term-ap-1.jpg?w=300&amp;amp;h=300 300w, https://gilkalai.files.wordpress.com/2023/02/3-term-ap-1.jpg?w=768&amp;amp;h=768 768w&quot; sizes=&quot;(max-width: 463px) 100vw, 463px&quot; /&gt;&lt;/p&gt;
&lt;p&gt;AI generated image showing arithmetic progression by shutterstock.&lt;/p&gt;
&lt;p&gt;An earlier 2020 post on 3-term AP and related problems with much bacground on the problem: &lt;a href=&quot;https://gilkalai.wordpress.com/2020/07/08/to-cheer-you-up-in-difficult-times-7-bloom-and-sisask-just-broke-the-logarithm-barrier-for-roths-theorem/&quot; rel=&quot;bookmark&quot;&gt;To cheer you up in difficult times 7: Bloom and Sisask just broke the logarithm barrier for Roth’s theorem!;&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;authors&quot;&gt;By Gil Kalai&lt;/p&gt;
  </content>
    <author>
      <name>Gil Kalai</name>
      <uri>https://gilkalai.wordpress.com</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">Richard Lipton: Novel Proofs of the Infinitude of Primes</title>
    <link href="https://rjlipton.wpcomstaging.com/2023/02/13/novel-proofs-of-the-infinitude-of-primes/"/>
    <id>https://rjlipton.wpcomstaging.com/?p=21108</id>
    <updated>2023-02-14T04:09:43+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;
&lt;font color=&quot;#0044cc&quot;&gt;&lt;br /&gt;
&lt;em&gt;Can they inform computational complexity theory?&lt;/em&gt;&lt;br /&gt;
&lt;font color=&quot;#000000&quot;&gt;&lt;/p&gt;
&lt;p&gt;
Bill Gasarch and Christian Elsholtz both like primes and jokes and graphs and ways of sharing baked goods. Bill is a Professor of Computer Science at the University of Maryland; Elsholtz is an Associate Professor of Mathematics at T.U. Graz in Austria. They recently independently came up with a new proof of the infinitude of the primes.&lt;/p&gt;
&lt;p&gt;&lt;P&gt;&lt;/p&gt;
&lt;table style=&quot;margin:auto;&quot;&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href=&quot;https://rjlipton.wpcomstaging.com/2023/02/13/novel-proofs-of-the-infinitude-of-primes/gasarchelsholtz/&quot; rel=&quot;attachment wp-att-21110&quot;&gt;&lt;img data-attachment-id=&quot;21110&quot; data-permalink=&quot;https://rjlipton.wpcomstaging.com/2023/02/13/novel-proofs-of-the-infinitude-of-primes/gasarchelsholtz/&quot; data-orig-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/GasarchElsholtz.png?fit=571%2C457&amp;amp;ssl=1&quot; data-orig-size=&quot;571,457&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;GasarchElsholtz&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/GasarchElsholtz.png?fit=300%2C240&amp;amp;ssl=1&quot; data-large-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/GasarchElsholtz.png?fit=571%2C457&amp;amp;ssl=1&quot; decoding=&quot;async&quot; loading=&quot;lazy&quot; src=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/GasarchElsholtz.png?resize=300%2C240&amp;#038;ssl=1&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;240&quot; class=&quot;aligncenter size-medium wp-image-21110&quot; srcset=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/GasarchElsholtz.png?resize=300%2C240&amp;amp;ssl=1 300w, https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/GasarchElsholtz.png?w=571&amp;amp;ssl=1 571w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;caption alignright&quot;&gt;&lt;FONT size=&quot;-2&quot;&gt;Composite crop of &lt;a href=&quot;https://www.facebook.com/wspcphysicsmaths/photos/william-gasarch-problems-with-a-point-exploring-math-and-computer-science-httpsd/2600013870048218/?locale=zh_CN&quot;&gt;src1&lt;/a&gt;, &lt;a href=&quot;https://www.tugraz.at/en/tu-graz/services/news-stories/planet-research/singleview/article/primzahlen-die-atome-der-mathematik0/&quot;&gt;src2&lt;/a&gt;&lt;/FONT&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;
Today we discuss reasons for being interested in such new proofs.&lt;/p&gt;
&lt;p&gt;
Bill&amp;#8217;s &lt;a href=&quot;https://www.cs.umd.edu/~gasarch/&quot;&gt;website&lt;/a&gt; features his co-written book on the problem of equitably dividing muffins in ways that avoid cutting small pieces, which we covered &lt;a href=&quot;https://rjlipton.wpcomstaging.com/2018/06/21/muffins-and-integers/&quot;&gt;here&lt;/a&gt;. Elsholtz&amp;#8217;s &lt;a href=&quot;https://www.math.tugraz.at/~elsholtz/&quot;&gt;website&lt;/a&gt; reveals that the final oral component of his &lt;em&gt;Habilitation&lt;/em&gt;&amp;#8212;the successor to PhD in Germany&amp;#8212;was on &amp;#8220;fair division of sandwiches and cakes.&amp;#8221; We trust that his examiners did not go hungry. &lt;/p&gt;
&lt;p&gt;
Bill co-writes the blog &lt;a href=&quot;https://blog.computationalcomplexity.org&quot;&gt;blog&lt;/a&gt; &lt;em&gt;Computational Complexity&lt;/em&gt;, which was started by Lance Fortnow in 2002. He &lt;a href=&quot;https://blog.computationalcomplexity.org/2023/02/after-you-are-notified-that-article-is.html&quot;&gt;posted&lt;/a&gt; last week about his new &lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S0012365X23000225?dgcid=author&quot;&gt;paper&lt;/a&gt; titled, &amp;#8220;Fermat&amp;#8217;s Last Theorem, Schur&amp;#8217;s Theorem (in Ramsey Theory), and the Infinitude of the Primes.&amp;#8221; Elsholtz&amp;#8217;s &lt;a href=&quot;https://www.tandfonline.com/doi/epdf/10.1080/00029890.2021.1856544?src=getftr&quot;&gt;paper&lt;/a&gt; is titled, &amp;#8220;Fermat’s Last Theorem Implies Euclid’s Infinitude of Primes&amp;#8221; and is discussed in this sprightly &lt;a href=&quot;https://www.tugraz.at/en/tu-graz/services/news-stories/planet-research/singleview/article/primzahlen-die-atome-der-mathematik0/&quot;&gt;interview&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
&lt;p&gt;&lt;H2&gt; New Proofs &lt;/H2&gt;&lt;/p&gt;
&lt;p&gt;&lt;p&gt;
The issue is: &lt;i&gt;How many ways can we prove that there are an infinite number of primes?&lt;/i&gt; We have known this fact since Euclid proved it in his &lt;a href=&quot;https://en.wikipedia.org/wiki/Euclid&amp;#37;27s_Elements&quot;&gt;Elements&lt;/a&gt;&amp;#8212;a few years ago in 300 BCE. &lt;/p&gt;
&lt;p&gt;
There are now many proofs known. A relatively recent cool proof came from Filip Saidak. &lt;/p&gt;
&lt;p&gt;&lt;P&gt;&lt;/p&gt;
&lt;table style=&quot;margin:auto;&quot;&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href=&quot;https://rjlipton.wpcomstaging.com/2023/02/13/novel-proofs-of-the-infinitude-of-primes/fs/&quot; rel=&quot;attachment wp-att-21112&quot;&gt;&lt;img data-attachment-id=&quot;21112&quot; data-permalink=&quot;https://rjlipton.wpcomstaging.com/2023/02/13/novel-proofs-of-the-infinitude-of-primes/fs/&quot; data-orig-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/fs.jpeg?fit=172%2C222&amp;amp;ssl=1&quot; data-orig-size=&quot;172,222&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;fs&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/fs.jpeg?fit=172%2C222&amp;amp;ssl=1&quot; data-large-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/fs.jpeg?fit=172%2C222&amp;amp;ssl=1&quot; decoding=&quot;async&quot; loading=&quot;lazy&quot; src=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/fs.jpeg?resize=172%2C222&amp;#038;ssl=1&quot; alt=&quot;&quot; width=&quot;172&quot; height=&quot;222&quot; class=&quot;aligncenter size-full wp-image-21112&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;caption alignright&quot;&gt;&lt;FONT size=&quot;-2&quot;&gt;UNC Greensboro &lt;a href=&quot;https://mathstats.uncg.edu/people/directory/saidak/&quot;&gt;homepage&lt;/a&gt;&lt;/FONT&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;It can be viewed in PDF &lt;a href=&quot;https://mathstats.uncg.edu/wp-content/uploads/2018/08/infinitude-of-primes.pdf&quot;&gt;here&lt;/a&gt;. Briefly:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;b&gt; &lt;/b&gt; &lt;em&gt; Let &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7B%5C%23%28n%29%7D&amp;#038;bg=e8e8e8&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{&amp;#92;#(n)}&quot; class=&quot;latex&quot; /&gt; be the number of distinct primes that divide &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;#038;bg=e8e8e8&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{n}&quot; class=&quot;latex&quot; /&gt;. A key property is: Let &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bn+%3E+1%7D&amp;#038;bg=e8e8e8&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{n &amp;gt; 1}&quot; class=&quot;latex&quot; /&gt; be a positive integer. Since &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;#038;bg=e8e8e8&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{n}&quot; class=&quot;latex&quot; /&gt; and &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bn%2B1%7D&amp;#038;bg=e8e8e8&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{n+1}&quot; class=&quot;latex&quot; /&gt; are consecutive integers, they must be coprime, and hence the number &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7BN+%3D+n%28n+%2B+1%29%7D&amp;#038;bg=e8e8e8&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{N = n(n + 1)}&quot; class=&quot;latex&quot; /&gt; must have &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7B%5C%23%28N%29+%5Cge+%5C%23%28n%29+%2B+1%7D&amp;#038;bg=e8e8e8&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{&amp;#92;#(N) &amp;#92;ge &amp;#92;#(n) + 1}&quot; class=&quot;latex&quot; /&gt;. This shows that &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7B%5C%23%28N%29%7D&amp;#038;bg=e8e8e8&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{&amp;#92;#(N)}&quot; class=&quot;latex&quot; /&gt; must be unbounded. &lt;/em&gt;
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;p&gt;
The site &lt;a href=&quot;https://brilliant.org&quot;&gt;Brilliant.org&lt;/a&gt; maintains a &lt;a href=&quot;https://brilliant.org/wiki/infinitely-many-primes/&quot;&gt;wiki&lt;/a&gt; of proofs. There is also a nice 2013 &lt;a href=&quot;https://www.gcsu.edu/sites/files/page-assets/node-808/attachments/harrison.pdf&quot;&gt;survey&lt;/a&gt; by Lindsey Harrison. &lt;/p&gt;
&lt;p&gt;
Bill&amp;#8217;s paper begins with reference to two other recent proofs: a &lt;a href=&quot;https://people.math.harvard.edu/~alpoge/papers/monthly&amp;#37;20note.pdf&quot;&gt;note&lt;/a&gt; by Levent Alpoge and a &lt;a href=&quot;https://arxiv.org/pdf/1708.06951.pdf&quot;&gt;paper&lt;/a&gt; by Andrew Granville. Working separately, they gave novel proofs that the primes are infinite that use Ramsey Theory. Bill&amp;#8217;s abstract continues:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;b&gt; &lt;/b&gt; &lt;em&gt; In particular, they use Van der Waerden&amp;#8217;s Theorem and some number theory. We prove the primes are infinite using an easier theorem from Ramsey Theory, namely Schur&amp;#8217;s Theorem, and some number theory. &lt;/em&gt;
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;p&gt;
Alpoge&amp;#8217;s paper has had several &lt;a href=&quot;https://www.semanticscholar.org/paper/van-der-Waerden-and-the-Primes-Alpoge/3b1e75a55465470b0009f35b01a2cfee38bf3603&quot;&gt;followups&lt;/a&gt;, including a &lt;a href=&quot;https://www.semanticscholar.org/paper/A-panopoly-of-proofs-that-there-are-infinitely-many-Granville/ce23103812dd271226b7b47124e008e2932505d4&quot;&gt;survey&lt;/a&gt; by Granville titled, &amp;#8220;A panoply of proofs that there are infinitely many primes.&amp;#8221; But where does Schur come in?&lt;/p&gt;
&lt;p&gt;
&lt;p&gt;&lt;H2&gt; A Schur Way To Do It &lt;/H2&gt;&lt;/p&gt;
&lt;p&gt;&lt;p&gt;
Issai Schur was a giant in Berlin and Bonn for the first four decades of the 20th century. We once did a &lt;a href=&quot;https://rjlipton.wpcomstaging.com/2011/04/08/why-is-everything-named-after-gauss/&quot;&gt;post&lt;/a&gt; titled on, why is everything named after Carl Gauss?  Schur is no slouch in that department:&lt;/p&gt;
&lt;p&gt;&lt;P&gt;&lt;/p&gt;
&lt;table style=&quot;margin:auto;&quot;&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;a href=&quot;https://rjlipton.wpcomstaging.com/2023/02/13/novel-proofs-of-the-infinitude-of-primes/schurlist/&quot; rel=&quot;attachment wp-att-21114&quot;&gt;&lt;img data-attachment-id=&quot;21114&quot; data-permalink=&quot;https://rjlipton.wpcomstaging.com/2023/02/13/novel-proofs-of-the-infinitude-of-primes/schurlist/&quot; data-orig-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/SchurList.jpg?fit=1129%2C247&amp;amp;ssl=1&quot; data-orig-size=&quot;1129,247&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;KWRegan&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;1676224069&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;SchurList&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/SchurList.jpg?fit=300%2C66&amp;amp;ssl=1&quot; data-large-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/SchurList.jpg?fit=600%2C131&amp;amp;ssl=1&quot; decoding=&quot;async&quot; loading=&quot;lazy&quot; src=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/SchurList.jpg?resize=565%2C124&amp;#038;ssl=1&quot; alt=&quot;&quot; width=&quot;565&quot; height=&quot;124&quot; class=&quot;aligncenter wp-image-21114&quot; srcset=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/SchurList.jpg?w=1129&amp;amp;ssl=1 1129w, https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/SchurList.jpg?resize=300%2C66&amp;amp;ssl=1 300w, https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/SchurList.jpg?resize=1024%2C224&amp;amp;ssl=1 1024w, https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/SchurList.jpg?resize=768%2C168&amp;amp;ssl=1 768w&quot; sizes=&quot;(max-width: 565px) 100vw, 565px&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;caption alignright&quot;&gt;&lt;FONT size=&quot;-2&quot;&gt;Wikipedia &lt;a href=&quot;https://en.wikipedia.org/wiki/Issai_Schur#Concepts_named_after_Schur&quot;&gt;source&lt;/a&gt;&lt;/FONT&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;p&gt;
There&amp;#8217;s more: the highlighted link on &amp;#8220;Schur&amp;#8217;s theorem&amp;#8221; goes to a page of several theorems named for Schur, hence Bill felt the need to disambiguate the one in Ramsey theory. This is simple to state:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;b&gt;Theorem 1&lt;/b&gt; &lt;em&gt; For every partition of the positive integers into finitely many subsets, at least one subset contains integers &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bx%2Cy%2Cz%7D&amp;#038;bg=e8e8e8&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{x,y,z}&quot; class=&quot;latex&quot; /&gt; such that &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bx+%2B+y+%3D+z%7D&amp;#038;bg=e8e8e8&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{x + y = z}&quot; class=&quot;latex&quot; /&gt;. &lt;/em&gt;
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;p&gt;
The &amp;#8220;some number theory&amp;#8221; used in both proofs involves cases of Fermat&amp;#8217;s Last Theorem (FLT) for particular &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bn+%5Cgeq+3%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{n &amp;#92;geq 3}&quot; class=&quot;latex&quot; /&gt;. But wait&amp;#8212;aren&amp;#8217;t Schur&amp;#8217;s Theorem and cases of FLT stronger theorems than the infinitude of primes? The relevant facts are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
Schur&amp;#8217;s Theorem follows from Ramsey&amp;#8217;s Theorem in a way that employs no multiplicative properties of the integers. Namely, let &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7BK%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{K}&quot; class=&quot;latex&quot; /&gt; be the number of subsets. Ramsey gives a number &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7BN%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{N}&quot; class=&quot;latex&quot; /&gt; such that any &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7BK%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{K}&quot; class=&quot;latex&quot; /&gt;-coloring of the edges of the complete graph of &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7BG%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{G}&quot; class=&quot;latex&quot; /&gt; on &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7BN%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{N}&quot; class=&quot;latex&quot; /&gt; nodes has a monochrome triangle. &amp;#8220;Color&amp;#8221; each edge &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7B%28i%2Cj%29%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{(i,j)}&quot; class=&quot;latex&quot; /&gt; of &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7BG%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{G}&quot; class=&quot;latex&quot; /&gt; by the label of the subset &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bj+-+i%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{j - i}&quot; class=&quot;latex&quot; /&gt; belongs to. The triangle gives numbers &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bj+-+i%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{j - i}&quot; class=&quot;latex&quot; /&gt;, &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bk+-+j%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{k - j}&quot; class=&quot;latex&quot; /&gt;, and &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bk+-+i%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{k - i}&quot; class=&quot;latex&quot; /&gt; in the same subset, and &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7B%28j+-+i%29+%2B+%28k+-+j%29+%3D+%28k+-+i%29%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{(j - i) + (k - j) = (k - i)}&quot; class=&quot;latex&quot; /&gt;. &lt;/p&gt;
&lt;li&gt;
As remarked directly by Elsholtz, the cases &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bn%3D3%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{n=3}&quot; class=&quot;latex&quot; /&gt;, &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bn%3D4%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{n=4}&quot; class=&quot;latex&quot; /&gt;, and &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bn%3D5%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{n=5}&quot; class=&quot;latex&quot; /&gt; of FLT do not rely on having infinitely many primes. &lt;/p&gt;
&lt;li&gt;
Known proofs of the full FLT use the infinitude of primes. This leads to open problems about which other cases, besides multiples of &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7B3%2C4%2C5%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{3,4,5}&quot; class=&quot;latex&quot; /&gt; and other known &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{n}&quot; class=&quot;latex&quot; /&gt;, have proofs that do not require the infinitude of primes.
&lt;/ul&gt;
&lt;p&gt;
&lt;p&gt;&lt;H2&gt; Their Theorem and Proof &lt;/H2&gt;&lt;/p&gt;
&lt;p&gt;&lt;p&gt;
An informal statement of their theorem is:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;b&gt;Theorem 2&lt;/b&gt; &lt;em&gt; In any mathematical structure that models certain simple properties of the integers, if any case &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;#038;bg=e8e8e8&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{n}&quot; class=&quot;latex&quot; /&gt; of FLT holds then the structure has infinitely many irreducible elements. &lt;/em&gt;
&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;p&gt;
For an integral domain, that is equivalent to having infinitely many primes. The main property needed, which Bill calls &amp;#8220;atomic,&amp;#8221; is that all nonzero elements &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bx%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{x}&quot; class=&quot;latex&quot; /&gt; can be formed by multiplying together powers of irreducible elements (and a unit like &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7B-1%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{-1}&quot; class=&quot;latex&quot; /&gt; if needed), that is, &lt;/p&gt;
&lt;p align=center&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++x+%3D+p_1%5E%7Be_1%7D+p_2%5E%7Be_2%7D+%5Ccdots+p_k%5E%7Be_k%7D+&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;&amp;#92;displaystyle  x = p_1^{e_1} p_2^{e_2} &amp;#92;cdots p_k^{e_k} &quot; class=&quot;latex&quot; /&gt;&lt;/p&gt;
&lt;p&gt;with each &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Be_i+%5Cgeq+0%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{e_i &amp;#92;geq 0}&quot; class=&quot;latex&quot; /&gt;. Such a representation need not be unique like it is in &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7B%5Cmathbb%7BZ%7D%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{&amp;#92;mathbb{Z}}&quot; class=&quot;latex&quot; /&gt;, and the concept does not presuppose having infinitely many irreducibles. Our informal rendition of their proof is lighter on notation but still complete.&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;Proof:&lt;/em&gt;  Given &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{n}&quot; class=&quot;latex&quot; /&gt;, suppose there are only finitely many irreducibles &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bp_1%2C%5Cdots%2Cp_k%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{p_1,&amp;#92;dots,p_k}&quot; class=&quot;latex&quot; /&gt;. Every integer &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bx%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{x}&quot; class=&quot;latex&quot; /&gt; can be decomposed as an &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{n}&quot; class=&quot;latex&quot; /&gt;-th power &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bq_x%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{q_x}&quot; class=&quot;latex&quot; /&gt; times a number &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Br%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{r}&quot; class=&quot;latex&quot; /&gt; that has no &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{n}&quot; class=&quot;latex&quot; /&gt;-th power as a divisor. By the &amp;#8220;atomic&amp;#8221; hypothesis, the &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Br%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{r}&quot; class=&quot;latex&quot; /&gt; part can always be written as a product of powers of the &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bp_i%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{p_i}&quot; class=&quot;latex&quot; /&gt;. Those powers must all be less than &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{n}&quot; class=&quot;latex&quot; /&gt;. That leaves &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bn%5Ek%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{n^k}&quot; class=&quot;latex&quot; /&gt; possible patterns for &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Br%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{r}&quot; class=&quot;latex&quot; /&gt;, and the integers produced by each pattern becomes the partition into &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bn%5Ek%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{n^k}&quot; class=&quot;latex&quot; /&gt; subsets. Schur then gives a subset &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Br%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{r}&quot; class=&quot;latex&quot; /&gt; containing a triple &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bx+%2B+y+%3D+z%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{x + y = z}&quot; class=&quot;latex&quot; /&gt;. This means &lt;/p&gt;
&lt;p align=center&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++q_x+r+%2B+q_y+r+%3D+q_z+r%2C+%5Cqquad%5Ctext%7Bso%7D%5Cqquad+q_x+%2B+q_r+%2B+q_z.+&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;&amp;#92;displaystyle  q_x r + q_y r = q_z r, &amp;#92;qquad&amp;#92;text{so}&amp;#92;qquad q_x + q_r + q_z. &quot; class=&quot;latex&quot; /&gt;&lt;/p&gt;
&lt;p&gt;But since &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bq_x%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{q_x}&quot; class=&quot;latex&quot; /&gt;, &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bq_y%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{q_y}&quot; class=&quot;latex&quot; /&gt;, and &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bq_z%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{q_z}&quot; class=&quot;latex&quot; /&gt; are all &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{n}&quot; class=&quot;latex&quot; /&gt;-th powers, this contradicts the case &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{n}&quot; class=&quot;latex&quot; /&gt; of FLT. &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%5CBox&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;&amp;#92;Box&quot; class=&quot;latex&quot; /&gt;&lt;/p&gt;
&lt;p&gt;
Both papers have much additional content. Bill&amp;#8217;s focuses on the relationships of axioms and logical models resembling the integers. Elsholtz&amp;#8217;s has more number theory. This speaks to the lineage of their PhD advisors. Bill was co-advised by Harry Lewis, whom we &lt;a href=&quot;https://rjlipton.wpcomstaging.com/2023/01/04/logicians-are-everywhere/&quot;&gt;mentioned&lt;/a&gt; recently, and Albert Meyer, a top theorist known for deep connections between machine computations and arithmetical structures. Elsholtz&amp;#8217;s PhD advisor, Wolfgang Schwarz, was a student of Carl Siegel, a giant of analytic number theory, whose work on the Riemann Hypothesis has been in &lt;a href=&quot;https://arxiv.org/abs/2211.02515&quot;&gt;recent&lt;/a&gt; &lt;a href=&quot;https://science.thewire.in/the-sciences/yitang-zhang-landau-siegel-zeroes-riemann-hypothesis/&quot;&gt;news&lt;/a&gt; that we have not yet had time to appraise. &lt;/p&gt;
&lt;p&gt;
&lt;p&gt;&lt;H2&gt; More New Proofs? &lt;/H2&gt;&lt;/p&gt;
&lt;p&gt;&lt;p&gt;
That their theorem shows certain other structures besides the integers must have infinitely many irreducibles is a further reason to care about it. To quote Elsholtz, its flip side informs what must happen in &amp;#8220;worlds with only finitely many primes.&amp;#8221; In complexity theory we also consider different &amp;#8220;&lt;a href=&quot;https://blog.computationalcomplexity.org/2004/06/impagliazzos-five-worlds.html&quot;&gt;worlds&lt;/a&gt;,&amp;#8221; some in which &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7B%5Cmathsf%7BP+%3D+NP%7D%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{&amp;#92;mathsf{P = NP}}&quot; class=&quot;latex&quot; /&gt; and other important unknown assertions go one way, others the opposite. We wonder if there is any meeting of worlds to eb found here.&lt;/p&gt;
&lt;p&gt;
In particular, we wonder: are there are proofs of the infinitude of primes that use complexity theory rather than number theory? The best we can do is unfortunately weak. We can prove for example:&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Theorem&lt;/b&gt;: &lt;i&gt;If RSA is not breakable in linear time, then the primes are infinite&lt;/i&gt;.&lt;/p&gt;
&lt;p&gt;
This shows that &lt;a href=&quot;https://www.geeksforgeeks.org/rsa-algorithm-cryptography/&quot;&gt;RSA&lt;/a&gt; being hard to crack implies that there must be infinitely many primes. But this is a &amp;#8220;swiz&amp;#8221; in that the notion of linear time is asymptotic in a way that makes this mostly presuppose what it purports to prove.&lt;/p&gt;
&lt;p&gt;
&lt;i&gt;Wait a minute.&lt;/i&gt; We can do a little better. Here is a proof of the infinitude of primes that is more concrete in complexity terms. Look at the numbers that have at most &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{n}&quot; class=&quot;latex&quot; /&gt;-bit binary representation&amp;#8212;denote them by &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7BA%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{A}&quot; class=&quot;latex&quot; /&gt;. The relevant abstract properties we need, besides &amp;#8220;atomic,&amp;#8221; are that all members of &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7BA%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{A}&quot; class=&quot;latex&quot; /&gt; are &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7B%3C+2%5E%7Bn%2B1%7D%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{&amp;lt; 2^{n+1}}&quot; class=&quot;latex&quot; /&gt; and there are exponentially many of them. Suppose that there are at most &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bk%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{k}&quot; class=&quot;latex&quot; /&gt; primes: &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bp_1%2C%5Cdots%2Cp_k%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{p_1,&amp;#92;dots,p_k}&quot; class=&quot;latex&quot; /&gt;. The members of &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7BA%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{A}&quot; class=&quot;latex&quot; /&gt; have representations &lt;/p&gt;
&lt;p align=center&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%7Bp_1%7D%5E%7Be_1%7D+%7Bp_2%7D%5E%7Be_2%7D+%5Ccdots+%7Bp_k%7D%5E%7Be_k%7D+%3C+2%5E%7Bn%2B1%7D.+&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;&amp;#92;displaystyle  {p_1}^{e_1} {p_2}^{e_2} &amp;#92;cdots {p_k}^{e_k} &amp;lt; 2^{n+1}. &quot; class=&quot;latex&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This shows that each &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Be_k%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{e_k}&quot; class=&quot;latex&quot; /&gt; is at most &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{n}&quot; class=&quot;latex&quot; /&gt;. (Or, if we have an abstract structure in which &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7B1+%3C+%7Cp_i%7C+%3C+2%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{1 &amp;lt; |p_i| &amp;lt; 2}&quot; class=&quot;latex&quot; /&gt; is allowed, there must be a minimum magnitude &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7B1%2B%5Cepsilon%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{1+&amp;#92;epsilon}&quot; class=&quot;latex&quot; /&gt;, and then each &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Be_k%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{e_k}&quot; class=&quot;latex&quot; /&gt; is at most &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{n}&quot; class=&quot;latex&quot; /&gt; times &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7B%5Cfrac%7B1%7D%7B%5Clog%281%2B%5Cepsilon%29%7D%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{&amp;#92;frac{1}{&amp;#92;log(1+&amp;#92;epsilon)}}&quot; class=&quot;latex&quot; /&gt;, for which the argument easily adjusts.) So the cardinality of &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7BA%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{A}&quot; class=&quot;latex&quot; /&gt; can be at most &lt;/p&gt;
&lt;p align=center&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%5Cdisplaystyle++%5Cunderbrace%7Bn+%5Ctimes+%5Ccdots+%5Ctimes+n%7D_%7Bk%5Crm%5C+times%7D+%3D+n%5Ek.+&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;&amp;#92;displaystyle  &amp;#92;underbrace{n &amp;#92;times &amp;#92;cdots &amp;#92;times n}_{k&amp;#92;rm&amp;#92; times} = n^k. &quot; class=&quot;latex&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This means that &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Bk%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{k}&quot; class=&quot;latex&quot; /&gt; must be unbounded, since &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7BA%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{A}&quot; class=&quot;latex&quot; /&gt; has exponential size. This actually proves a stronger lower bound on the density of primes than Euclid&amp;#8217;s proof and some of the others. &lt;/p&gt;
&lt;p&gt;
In fact, this is much the same as Axel Thue&amp;#8217;s &lt;a href=&quot;https://www.cut-the-knot.org/proofs/ThueInfinitudeOfPrimes.shtml&quot;&gt;proof&lt;/a&gt;, and the &amp;#8220;proof by information theory&amp;#8221; on the Brilliant.org wiki linked above. &lt;/p&gt;
&lt;p&gt;
&lt;p&gt;&lt;H2&gt; Open Problems &lt;/H2&gt;&lt;/p&gt;
&lt;p&gt;&lt;p&gt;
Can we get other complexity based proofs? Note it is interesting that the above proof uses the concept of &lt;a href=&quot;https://en.wikipedia.org/wiki/Binary_number&quot;&gt;binary numbers&lt;/a&gt; to get a proof. That concept was discovered long after Euclid, in the 16th and 17th centuries by Thomas Harriot, Juan Lobkowitz, and Gottfried Leibniz among Europeans. &lt;/p&gt;
&lt;p&gt;
Schur&amp;#8217;s Theorem has a version for Pythagorean triples &lt;img decoding=&quot;async&quot; src=&quot;https://s0.wp.com/latex.php?latex=%7Ba%5E2+%2B+b%5E2+%3D+c%5E2%7D&amp;#038;bg=ffffff&amp;#038;fg=000000&amp;#038;s=0&amp;#038;c=20201002&quot; alt=&quot;{a^2 + b^2 = c^2}&quot; class=&quot;latex&quot; /&gt; rather than sums. We &lt;a href=&quot;https://rjlipton.wpcomstaging.com/2016/09/04/how-hard-really-is-sat/&quot;&gt;covered&lt;/a&gt; the prodigious instances of SAT that accompany the search for exact bounds on cases of these theorems.&lt;/p&gt;
&lt;p&gt;
&lt;p class=&quot;authors&quot;&gt;By RJLipton+KWRegan&lt;/p&gt;
  </content>
    <author>
      <name>Richard Lipton</name>
      <uri>https://rjlipton.wpcomstaging.com</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Compositional Algorithms on Compositional Data: Deciding Sheaves on Presheaves</title>
    <link href="http://arxiv.org/abs/2302.05575"/>
    <id>http://arxiv.org/abs/2302.05575</id>
    <updated>2023-02-14T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Althaus_E/0/1/0/all/0/1&quot;&gt;Ernst Althaus&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Bumpus_B/0/1/0/all/0/1&quot;&gt;Benjamin Merlin Bumpus&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Fairbanks_J/0/1/0/all/0/1&quot;&gt;James Fairbanks&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Rosiak_D/0/1/0/all/0/1&quot;&gt;Daniel Rosiak&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Algorithmicists are well-aware that fast dynamic programming algorithms are
very often the correct choice when computing on compositional (or even
recursive) graphs. Here we initiate the study of how to generalize this
folklore intuition to mathematical structures writ large. We achieve this
horizontal generality by adopting a categorial perspective which allows us to
show that: (1) structured decompositions (a recent, abstract generalization of
many graph decompositions) define Grothendieck topologies on categories of data
(adhesive categories) and that (2) any computational problem which can be
represented as a sheaf with respect to these topologies can be decided in
linear time on classes of inputs which admit decompositions of bounded width
and whose decomposition shapes have bounded feedback vertex number. This
immediately leads to algorithms on objects of any C-set category; these include
-- to name but a few examples -- structures such as: symmetric graphs, directed
graphs, directed multigraphs, hypergraphs, directed hypergraphs, databases,
simplicial complexes, circular port graphs and half-edge graphs.
&lt;/p&gt;
&lt;p&gt;Thus we initiate the bridging of tools from sheaf theory, structural graph
theory and parameterized complexity theory; we believe this to be a very
fruitful approach for a general, algebraic theory of dynamic programming
algorithms. Finally we pair our theoretical results with concrete
implementations of our main algorithmic contribution in the AlgebraicJulia
ecosystem.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: On the Existence of Anomalies</title>
    <link href="http://arxiv.org/abs/2302.05972"/>
    <id>http://arxiv.org/abs/2302.05972</id>
    <updated>2023-02-14T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Epstein_S/0/1/0/all/0/1&quot;&gt;Samuel Epstein&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The Independence Postulate (IP) is a finitary Church-Turing Thesis, saying
mathematical sequences are independent from physical ones. IP implies the
existence of anomalies.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Geometry: Partial k-means to avoid outliers, mathematical programming formulations, complexity results</title>
    <link href="http://arxiv.org/abs/2302.05644"/>
    <id>http://arxiv.org/abs/2302.05644</id>
    <updated>2023-02-14T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Dupin_N/0/1/0/all/0/1&quot;&gt;Nicolas Dupin&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Nielsen_F/0/1/0/all/0/1&quot;&gt;Frank Nielsen&lt;/a&gt;&lt;/p&gt;&lt;p&gt;A known bottleneck of Min-Sum-of-Square Clustering (MSSC, also denoted
k-means problem) is to tackle the perturbation implied by outliers. This paper
proposes a partial clustering variant, denoted PMSSC, considering a fixed
number of outliers to remove. Integer Programming formulations are proposed.
Complexity results extending the ones from MSSC are studied. PMSSC is NP-hard
in a general Euclidean space, and also when dimension or the number of clusters
is upper than 2. Lastly, one dimensional case are studied. Unweighted PMSSC is
polynomial in theses cases with a dynamic programming algorithm, extending the
optimality property of MSSC with interval clustering. A weaker optimality
property holds for weighted PMSSC, NP-hardness remains still an open question
in dimension one.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Geometry</name>
      <uri>https://arxiv.org/list/cs.CG/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Geometry: Support Generation for Robot-Assisted 3D Printing with Curved Layers</title>
    <link href="http://arxiv.org/abs/2302.05510"/>
    <id>http://arxiv.org/abs/2302.05510</id>
    <updated>2023-02-14T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Zhang_T/0/1/0/all/0/1&quot;&gt;Tianyu Zhang&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Huang_Y/0/1/0/all/0/1&quot;&gt;Yuming Huang&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kukulski_P/0/1/0/all/0/1&quot;&gt;Piotr Kukulski&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Dutta_N/0/1/0/all/0/1&quot;&gt;Neelotpal Dutta&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Fang_G/0/1/0/all/0/1&quot;&gt;Guoxin Fang&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Wang_C/0/1/0/all/0/1&quot;&gt;Charlie C.L. Wang&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Robot-assisted 3D printing has drawn a lot of attention by its capability to
fabricate curved layers that are optimized according to different objectives.
However, the support generation algorithm based on a fixed printing direction
for planar layers cannot be directly applied for curved layers as the
orientation of material accumulation is dynamically varied. In this paper, we
propose a skeleton-based support generation method for robot-assisted 3D
printing with curved layers. The support is represented as an implicit solid so
that the problems of numerical robustness can be effectively avoided. The
effectiveness of our algorithm is verified on a dual-material printing platform
that consists of a robotic arm and a newly designed dual-material extruder.
Experiments have been successfully conducted on our system to fabricate a
variety of freeform models.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Geometry</name>
      <uri>https://arxiv.org/list/cs.CG/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Geometry: The Two-Squirrel Problem and Its Relatives</title>
    <link href="http://arxiv.org/abs/2302.05937"/>
    <id>http://arxiv.org/abs/2302.05937</id>
    <updated>2023-02-14T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Bereg_S/0/1/0/all/0/1&quot;&gt;Sergey Bereg&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Higashikawa_Y/0/1/0/all/0/1&quot;&gt;Yuya Higashikawa&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Katoh_N/0/1/0/all/0/1&quot;&gt;Naoki Katoh&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Lafond_M/0/1/0/all/0/1&quot;&gt;Manuel Lafond&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Tokuni_Y/0/1/0/all/0/1&quot;&gt;Yuki Tokuni&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Zhu_B/0/1/0/all/0/1&quot;&gt;Binhai Zhu&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In this paper, we start with a variation of the star cover problem called the
Two-Squirrel problem. Given a set $P$ of $2n$ points in the plane, and two
sites $c_1$ and $c_2$, compute two $n$-stars $S_1$ and $S_2$ centered at $c_1$
and $c_2$ respectively such that the maximum weight of $S_1$ and $S_2$ is
minimized. This problem is strongly NP-hard by a reduction from Equal-size
Set-Partition with Rationals. Then we consider two variations of the
Two-Squirrel problem, namely the Two-MST and Two-TSP problem, which are both
NP-hard. The NP-hardness for the latter is obvious while the former needs a
non-trivial reduction from Equal-size Set-Partition with Rationals. In terms of
approximation algorithms, for Two-MST and Two-TSP we give factor 3.6402 and
$4+\varepsilon$ approximations respectively. Finally, we also show some
interesting polynomial-time solvable cases for Two-MST.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Geometry</name>
      <uri>https://arxiv.org/list/cs.CG/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Computation with Large Advice</title>
    <link href="http://arxiv.org/abs/2302.06012"/>
    <id>http://arxiv.org/abs/2302.06012</id>
    <updated>2023-02-14T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Morizumi_H/0/1/0/all/0/1&quot;&gt;Hiroki Morizumi&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In this paper, we consider a new direction of computation, which we call
computation with large advice. We mainly consider constant space computation
with large advice in Turing machines, and prove the following facts.
\begin{itemize} \item The class of decision problems solvable by a constant
space Turing machine with polynomial-size advice includes nonuniform-{\sf
NC}$^1$. \item The class of decision problems solvable by a constant space
Turing machine with quasipolynomial-size advice equals nonuniform-{\sf polyL}.
\end{itemize} The facts mean constant space computation with large advice has
an unexpected computational power. On the other hand, we attempt to propose a
concept of ``algorithms with large advice&#39;&#39;. In the proposal, advice is
precomputed data for a problem and a fixed instance size, and we expect
efficient algorithms by large or huge advice.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Characterization of Simplicial Complexes by Counting Simplets Beyond Four Nodes</title>
    <link href="http://arxiv.org/abs/2302.05505"/>
    <id>http://arxiv.org/abs/2302.05505</id>
    <updated>2023-02-14T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kim_H/0/1/0/all/0/1&quot;&gt;Hyunju Kim&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Ko_J/0/1/0/all/0/1&quot;&gt;Jihoon Ko&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Bu_F/0/1/0/all/0/1&quot;&gt;Fanchen Bu&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Shin_K/0/1/0/all/0/1&quot;&gt;Kijung Shin&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Simplicial complexes are higher-order combinatorial structures which have
been used to represent real-world complex systems. In this paper, we
concentrate on the local patterns in simplicial complexes called
\textit{simplets}, a generalization of graphlets. We formulate the problem of
counting simplets of a given size in a given simplicial complex. For this
problem, we extend a sampling algorithm based on color coding from graphs to
simplicial complexes, with essential technical novelty. We theoretically
analyze our proposed algorithm named SC3, showing its correctness,
unbiasedness, convergence, and time/space complexity. Through the extensive
experiments on sixteen real-world datasets, we show the superiority of SC3 in
terms of accuracy, speed, and scalability, compared to the baseline methods.
Finally, we use the counts given by SC3 for simplicial complex analysis,
especially for characterization, which is further used for simplicial complex
clustering, where SC3 shows a strong ability of characterization with
domain-based similarity.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Synchrony/Asynchrony vs. Stationary/Mobile? The Latter is Superior...in Theory</title>
    <link href="http://arxiv.org/abs/2302.05520"/>
    <id>http://arxiv.org/abs/2302.05520</id>
    <updated>2023-02-14T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Gafni_E/0/1/0/all/0/1&quot;&gt;Eli Gafni&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Zikas_V/0/1/0/all/0/1&quot;&gt;Vasileios Zikas&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Like Asynchrony, Mobility of faults precludes consensus. Yet, a model M in
which Consensus is solvable, has an analogue relaxed model in which Consensus
is not solvable and for which we can ask, whether Consensus is solvable if the
system initially behaves like the relaxed analogue model, but eventually morphs
into M. We consider two relaxed analogues of M. The first is the traditional
Asynchronous model, and the second to be defined, the Mobile analogue. While
for some M we show that Consensus is not solvable in the Asynchronous analogue,
it is solvable in all the Mobile analogues. Hence, from this perspective
Mobility is superior to Asynchrony.
&lt;/p&gt;
&lt;p&gt;The pie in the sky relationship we envision is: Consensus is solvable in M,
if and only if binary Commit-Adopt is solvable in the mobile analogue.
&lt;/p&gt;
&lt;p&gt;The ``only if&#39;&#39; is easy. Here we show case by case that the ``if&#39;&#39; holds for
all the common faults types.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: A Linear Delay Algorithm for Enumeration of 2-Edge/Vertex-connected Induced Subgraphs</title>
    <link href="http://arxiv.org/abs/2302.05526"/>
    <id>http://arxiv.org/abs/2302.05526</id>
    <updated>2023-02-14T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Tada_T/0/1/0/all/0/1&quot;&gt;Takumi Tada&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Haraguchi_K/0/1/0/all/0/1&quot;&gt;Kazuya Haraguchi&lt;/a&gt;&lt;/p&gt;&lt;p&gt;For a set system $(V,{\mathcal C}\subseteq 2^V)$, we call a subset
$C\in{\mathcal C}$ a component. A nonempty subset $Y\subseteq C$ is a minimal
removable set (MRS) of $C$ if $C\setminus Y\in{\mathcal C}$ and no proper
nonempty subset $Z\subsetneq Y$ satisfies $C\setminus Z\in{\mathcal C}$. In
this paper, we consider the problem of enumerating all components in a set
system such that, for every two components $C,C&#39;\in{\mathcal C}$ with
$C&#39;\subsetneq C$, every MRS $X$ of $C$ satisfies either $X\subseteq C&#39;$ or
$X\cap C&#39;=\emptyset$. We provide a partition-based algorithm for this problem,
which yields the first linear delay algorithms to enumerate all
2-edge-connected induced subgraphs, and to enumerate all 2-vertex-connected
induced subgraphs.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Algorithmically Effective Differentially Private Synthetic Data</title>
    <link href="http://arxiv.org/abs/2302.05552"/>
    <id>http://arxiv.org/abs/2302.05552</id>
    <updated>2023-02-14T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+He_Y/0/1/0/all/0/1&quot;&gt;Yiyun He&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Vershynin_R/0/1/0/all/0/1&quot;&gt;Roman Vershynin&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Zhu_Y/0/1/0/all/0/1&quot;&gt;Yizhe Zhu&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We present a highly effective algorithmic approach for generating
$\varepsilon$-differentially private synthetic data in a bounded metric space
with near-optimal utility guarantees under the 1-Wasserstein distance. In
particular, for a dataset $\mathcal X$ in the hypercube $[0,1]^d$, our
algorithm generates synthetic dataset $\mathcal Y$ such that the expected
1-Wasserstein distance between the empirical measure of $\mathcal X$ and
$\mathcal Y$ is $O((\varepsilon n)^{-1/d})$ for $d\geq 2$, and is
$O(\log^2(\varepsilon n)(\varepsilon n)^{-1})$ for $d=1$. The accuracy
guarantee is optimal up to a constant factor for $d\geq 2$, and up to a
logarithmic factor for $d=1$. Our algorithm has a fast running time of
$O(\varepsilon n)$ for all $d\geq 1$ and demonstrates improved accuracy
compared to the method in (Boedihardjo et al., 2022) for $d\geq 2$.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Improved Competitive Ratio for Edge-Weighted Online Stochastic Matching</title>
    <link href="http://arxiv.org/abs/2302.05633"/>
    <id>http://arxiv.org/abs/2302.05633</id>
    <updated>2023-02-14T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Feng_Y/0/1/0/all/0/1&quot;&gt;Yilong Feng&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Qiu_G/0/1/0/all/0/1&quot;&gt;Guoliang Qiu&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Wu_X/0/1/0/all/0/1&quot;&gt;Xiaowei Wu&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Zhou_S/0/1/0/all/0/1&quot;&gt;Shengwei Zhou&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We consider the edge-weighted online stochastic matching problem, in which an
edge-weighted bipartite graph G=(I\cup J, E) with offline vertices J and online
vertex types I is given. The online vertices have types sampled from I with
probability proportional to the arrival rates of online vertex types. The
online algorithm must make immediate and irrevocable matching decisions with
the objective of maximizing the total weight of the matching. For the problem
with general arrival rates, Feldman et al. (FOCS 2009) proposed the Suggested
Matching algorithm and showed that it achieves a competitive ratio of 1-1/e
\approx 0.632. The ratio has recently been improved to 0.645 by Yan (2022), who
proposed the Multistage Suggested Matching (MSM) algorithm. In this paper, we
propose the Evolving Suggested Matching (ESM) algorithm, and show that it
achieves a competitive ratio of 0.650.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: An EPTAS for Budgeted Matching and Budgeted Matroid Intersection</title>
    <link href="http://arxiv.org/abs/2302.05681"/>
    <id>http://arxiv.org/abs/2302.05681</id>
    <updated>2023-02-14T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Doron_Arad_I/0/1/0/all/0/1&quot;&gt;Ilan Doron-Arad&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kulik_A/0/1/0/all/0/1&quot;&gt;Ariel Kulik&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Shachnai_H/0/1/0/all/0/1&quot;&gt;Hadas Shachnai&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We study the budgeted versions of the well known matching and matroid
intersection problems. While both problems admit a polynomial-time
approximation scheme (PTAS) [Berger et al. (Math. Programming, 2011), Chekuri,
Vondrak and Zenklusen (SODA 2011)], it has been an intriguing open question
whether these problems admit a fully PTAS (FPTAS), or even an efficient PTAS
(EPTAS).
&lt;/p&gt;
&lt;p&gt;In this paper we answer the second part of this question affirmatively, by
presenting an EPTAS for budgeted matching and budgeted matroid intersection. A
main component of our scheme is a novel construction of representative sets for
desired solutions, whose cardinality depends only on $\varepsilon$, the
accuracy parameter. Thus, enumerating over solutions within a representative
set leads to an EPTAS. This crucially distinguishes our algorithms from
previous approaches, which rely on exhaustive enumeration over the solution
set. Our ideas for constructing representative sets may find use in tackling
other budgeted optimization problems, and are thus of independent interest.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: A Simple Data Structure for Maintaining a Discrete Probability Distribution</title>
    <link href="http://arxiv.org/abs/2302.05682"/>
    <id>http://arxiv.org/abs/2302.05682</id>
    <updated>2023-02-14T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Allendorf_D/0/1/0/all/0/1&quot;&gt;Daniel Allendorf&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We revisit the following problem: given a set of indices $S = \{1, \dots,
n\}$ and weights $w_1, \dots, w_n \in \mathbb{R}_{&amp;gt; 0}$, provide samples from
$S$ with distribution $p(i) = w_i / W$ where $W = \sum_j w_j$ gives the proper
normalization. In the static setting, there is a simple data structure due to
Walker called Alias Table that allows for samples to be drawn in constant time.
A more challenging task is to maintain the distribution in a dynamic setting,
where elements may be added or removed, or weights may change over time; here,
existing solutions restrict the permissible weights, require rebuilding of the
associated data structure after a number of updates, or are rather complex.
&lt;/p&gt;
&lt;p&gt;In this paper, we describe, analyze, and engineer a simple data structure for
maintaining a discrete probability distribution in the dynamic setting.
Construction of the data structure for an arbitrary distribution takes time
$O(n)$, sampling takes expected time $O(1)$, and updates of size $\Delta = O(W
/ n)$ can be processed in time $O(1)$. To evaluate the efficiency of the data
structure we conduct an experimental study. The results suggest that the
dynamic sampling performance is comparable to the static Alias Table with a
minor slowdown.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: On Differential Privacy and Adaptive Data Analysis with Bounded Space</title>
    <link href="http://arxiv.org/abs/2302.05707"/>
    <id>http://arxiv.org/abs/2302.05707</id>
    <updated>2023-02-14T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Dinur_I/0/1/0/all/0/1&quot;&gt;Itai Dinur&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Stemmer_U/0/1/0/all/0/1&quot;&gt;Uri Stemmer&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Woodruff_D/0/1/0/all/0/1&quot;&gt;David P. Woodruff&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Zhou_S/0/1/0/all/0/1&quot;&gt;Samson Zhou&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We study the space complexity of the two related fields of differential
privacy and adaptive data analysis. Specifically,
&lt;/p&gt;
&lt;p&gt;(1) Under standard cryptographic assumptions, we show that there exists a
problem P that requires exponentially more space to be solved efficiently with
differential privacy, compared to the space needed without privacy. To the best
of our knowledge, this is the first separation between the space complexity of
private and non-private algorithms.
&lt;/p&gt;
&lt;p&gt;(2) The line of work on adaptive data analysis focuses on understanding the
number of samples needed for answering a sequence of adaptive queries. We
revisit previous lower bounds at a foundational level, and show that they are a
consequence of a space bottleneck rather than a sampling bottleneck.
&lt;/p&gt;
&lt;p&gt;To obtain our results, we define and construct an encryption scheme with
multiple keys that is built to withstand a limited amount of key leakage in a
very particular way.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Fully Dynamic Exact Edge Connectivity in Sublinear Time</title>
    <link href="http://arxiv.org/abs/2302.05951"/>
    <id>http://arxiv.org/abs/2302.05951</id>
    <updated>2023-02-14T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Goranci_G/0/1/0/all/0/1&quot;&gt;Gramoz Goranci&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Henzinger_M/0/1/0/all/0/1&quot;&gt;Monika Henzinger&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Nanongkai_D/0/1/0/all/0/1&quot;&gt;Danupon Nanongkai&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Saranurak_T/0/1/0/all/0/1&quot;&gt;Thatchaphol Saranurak&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Thorup_M/0/1/0/all/0/1&quot;&gt;Mikkel Thorup&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Wulff_Nilsen_C/0/1/0/all/0/1&quot;&gt;Christian Wulff-Nilsen&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Given a simple $n$-vertex, $m$-edge graph $G$ undergoing edge insertions and
deletions, we give two new fully dynamic algorithms for exactly maintaining the
edge connectivity of $G$ in $\tilde{O}(n)$ worst-case update time and
$\tilde{O}(m^{1-1/16})$ amortized update time, respectively. Prior to our work,
all dynamic edge connectivity algorithms assumed bounded edge connectivity,
guaranteed approximate solutions, or were restricted to edge insertions only.
Our results answer in the affirmative an open question posed by Thorup
[Combinatorica&#39;07].
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Computing Truncated Metric Dimension of Trees</title>
    <link href="http://arxiv.org/abs/2302.05960"/>
    <id>http://arxiv.org/abs/2302.05960</id>
    <updated>2023-02-14T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Gutkovich_P/0/1/0/all/0/1&quot;&gt;Paul Gutkovich&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Yeoh_Z/0/1/0/all/0/1&quot;&gt;Zi Song Yeoh&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Let $G=(V,E)$ be a simple, unweighted, connected graph. Let $d(u,v)$ denote
the distance between vertices $u,v$. A resolving set of $G$ is a subset $S$ of
$V$ such that knowing the distance from a vertex $v$ to every vertex in $S$
uniquely identifies $v$. The metric dimension of $G$ is defined as the size of
the smallest resolving set of $G$. We define the $k$-truncated resolving set
and $k$-truncated metric dimension of a graph similarly, but with the notion of
distance replaced with $d_k(u,v) := \min(d(u,v),k+1)$.
&lt;/p&gt;
&lt;p&gt;In this paper, we demonstrate that computing $k$-truncated dimension of trees
is NP-Hard for general $k$. We then present a polynomial-time algorithm to
compute $k$-truncated dimension of trees when $k$ is a fixed constant.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Infinite Lewis Weights in Spectral Graph Theory</title>
    <link href="http://arxiv.org/abs/2302.05966"/>
    <id>http://arxiv.org/abs/2302.05966</id>
    <updated>2023-02-14T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Suliman_A/0/1/0/all/0/1&quot;&gt;Amit Suliman&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Weinstein_O/0/1/0/all/0/1&quot;&gt;Omri Weinstein&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We study the spectral implications of re-weighting a graph by the
$\ell_\infty$-Lewis weights of its edges. Our main motivation is the
ER-Minimization problem (Saberi et al., SIAM&#39;08): Given an undirected graph
$G$, the goal is to find positive normalized edge-weights $w\in \mathbb{R}_+^m$
which minimize the sum of pairwise \emph{effective-resistances} of $G_w$
(Kirchhoff&#39;s index). By contrast, $\ell_\infty$-Lewis weights minimize the
\emph{maximum} effective-resistance of \emph{edges}, but are much cheaper to
approximate, especially for Laplacians. With this algorithmic motivation, we
study the ER-approximation ratio obtained by Lewis weights.
&lt;/p&gt;
&lt;p&gt;Our first main result is that $\ell_\infty$-Lewis weights provide a constant
($\approx 3.12$) approximation for ER-minimization on \emph{trees}. The proof
introduces a new technique, a local polarization process for
effective-resistances ($\ell_2$-congestion) on trees, which is of independent
interest in electrical network analysis. For general graphs, we prove an upper
bound $\alpha(G)$ on the approximation ratio obtained by Lewis weights, which
is always $\leq \min\{ \text{diam}(G), \kappa(L_{w_\infty})\}$, where $\kappa$
is the condition number of the weighted Laplacian. All our approximation
algorithms run in \emph{input-sparsity} time $\tilde{O}(m)$, a major
improvement over Saberi et al.&#39;s $O(m^{3.5})$ SDP for exact ER-minimization.
&lt;/p&gt;
&lt;p&gt;Finally, we demonstrate the favorable effects of $\ell_\infty$-LW reweighting
on the \emph{spectral-gap} of graphs and on their \emph{spectral-thinness}
(Anari and Gharan, 2015). En-route to our results, we prove a weighted analogue
of Mohar&#39;s classical bound on $\lambda_2(G)$, and provide a new
characterization of leverage-scores of a matrix, as the gradient (w.r.t
weights) of the volume of the enclosing ellipsoid.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">Emanuele Viola: Eric Allender’s day</title>
    <link href="https://emanueleviola.wordpress.com/2023/02/13/eric-allenders-day/"/>
    <id>http://emanueleviola.wordpress.com/?p=1202</id>
    <updated>2023-02-13T23:10:18+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;&lt;a href=&quot;https://simons.berkeley.edu/workshops/lower-bounds-learning-average-case-complexity/schedule#simons-tabs&quot;&gt;is unfolding at Simons institute&lt;/a&gt; (and tomorrow is Valentine&amp;#8217;s day, joke by Rahul).  The speakers are praising Eric&amp;#8217;s many contributions to the field, so I thought I&amp;#8217;d add my praise, since over the years I interacted with Eric in many different capacities, excluding coauthor, but there&amp;#8217;s time to fix that, Eric.  I met him the first time 20 years ago in Denmark.  I had already read some of his surveys, and I remember being somewhat surprised that the mental image I had subconsciously created of him didn&amp;#8217;t match the way he looked.  Turns out even he was expecting something different from the emails we had exchanged &amp;#8212; pictures weren&amp;#8217;t online back then.  Anyway, back to more scientific matters, I told him that his surveys were one of the first things I read, and I think he said it was good that they had had an effect.&lt;/p&gt;
&lt;p&gt;Indeed, they have, his works and surveys have had a significant impact on my research.  Especially his surveys on low-level complexity classes, a topic dear to my heart.  Counting hierarchies, arithmetic circuits, and the division breakthroughs are some of the many things his surveys exposed me to.  Eric has a unique angle about these topics, and I often go back to his surveys and papers for knowledge and inspiration.  More in line with the topic of the workshop, people are emphasizing how Eric anticipated recent trends, such as &amp;#8220;meta complexity,&amp;#8221; before they were a thing.  Way to go.&lt;/p&gt;
&lt;p class=&quot;authors&quot;&gt;By Manu&lt;/p&gt;
  </content>
    <author>
      <name>Emanuele Viola</name>
      <uri>https://emanueleviola.wordpress.com</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">CCI: jobs: postdoc at Institute of Mathematics, Czech Academy of Sciences (apply by March 31, 2023)</title>
    <link href="https://cstheory-jobs.org/2023/02/13/postdoc-at-institute-of-mathematics-czech-academy-of-sciences-apply-by-march-31-2023/"/>
    <id>http://cstheory-jobs.org/2023/02/13/postdoc-at-institute-of-mathematics-czech-academy-of-sciences-apply-by-march-31-2023/</id>
    <updated>2023-02-13T10:19:11+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;The Institute of Mathematics of the Czech Academy of Sciences is seeking a researcher for the project “Logic and unsatisfiability”. Applications are invited from candidates who have completed their PhD within the last 5 years (or will have completed it before the time of hiring), and who have a strong background in proof complexity or bounded arithmetic.&lt;/p&gt;
&lt;p&gt;Website: &lt;a href=&quot;http://www.math.cas.cz/recrutements/postes.php&quot;&gt;http://www.math.cas.cz/recrutements/postes.php&lt;/a&gt;&lt;br /&gt;
Email: thapen@math.cas.cz&lt;/p&gt;
&lt;p class=&quot;authors&quot;&gt;By shacharlovett&lt;/p&gt;
  </content>
    <author>
      <name>CCI: jobs</name>
      <uri>https://cstheory-jobs.org</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Lower bounds for Choiceless Polynomial Time via Symmetric XOR-circuits</title>
    <link href="http://arxiv.org/abs/2302.05426"/>
    <id>http://arxiv.org/abs/2302.05426</id>
    <updated>2023-02-13T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Pago_B/0/1/0/all/0/1&quot;&gt;Benedikt Pago&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Choiceless Polynomial Time (CPT) is one of the few remaining candidate logics
for capturing PTIME. In this paper, we make progress towards separating CPT
from polynomial time by firstly establishing a connection between the
expressive power of CPT and the existence of certain symmetric circuit
families, and secondly, proving lower bounds against these circuits. We focus
on the isomorphism problem of unordered Cai-F\&quot;urer-Immerman-graphs (the
CFI-query) as a potential candidate for separating CPT from P. Results by
Dawar, Richerby and Rossman, and subsequently by Pakusa, Schalth\&quot;ofer and
Selman show that the CFI-query is CPT-definable on linearly ordered and
preordered base graphs with small colour classes. We define a class of
CPT-algorithms, that we call &quot;CFI-symmetric algorithms&quot;, which generalises all
the known ones, and show that such algorithms can only define the CFI-query on
a given class of base graphs if there exists a family of symmetric XOR-circuits
with certain properties. These properties include that the circuits have the
same symmetries as the base graphs, are of polynomial size, and satisfy certain
fan-in restrictions. Then we prove that such circuits with slightly
strengthened requirements (i.e. stronger symmetry and fan-in and fan-out
restrictions) do not exist for the n-dimensional hypercubes as base graphs.
This almost separates the CFI-symmetric algorithms from polynomial time - up to
the gap that remains between the circuits whose existence we can currently
disprove and the circuits whose existence is necessary for the definability of
the CFI-query by a CFI-symmetric algorithm.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Geometry: Certified simultaneous isotopic approximation of pairs of curves via subdivision</title>
    <link href="http://arxiv.org/abs/2302.04908"/>
    <id>http://arxiv.org/abs/2302.04908</id>
    <updated>2023-02-13T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Burr_M/0/1/0/all/0/1&quot;&gt;Michael Burr&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Byrd_M/0/1/0/all/0/1&quot;&gt;Michael Byrd&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We present a certified algorithm based on subdivision for computing an
isotopic approximation to a pair of curves in the plane. Our algorithm is based
on the certified curve approximation algorithm of Plantinga and Vegter. The
main challenge in this computation is to correctly and efficiently compute the
intersections of the curves. To address this issue, we introduce a new, but
simple test that guarantees the global correctness of our output.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Geometry</name>
      <uri>https://arxiv.org/list/cs.CG/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Quadratic Memory is Necessary for Optimal Query Complexity in Convex Optimization: Center-of-Mass is Pareto-Optimal</title>
    <link href="http://arxiv.org/abs/2302.04963"/>
    <id>http://arxiv.org/abs/2302.04963</id>
    <updated>2023-02-13T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Blanchard_M/0/1/0/all/0/1&quot;&gt;Mo&amp;#xef;se Blanchard&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Zhang_J/0/1/0/all/0/1&quot;&gt;Junhui Zhang&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Jaillet_P/0/1/0/all/0/1&quot;&gt;Patrick Jaillet&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We give query complexity lower bounds for convex optimization and the related
feasibility problem. We show that quadratic memory is necessary to achieve the
optimal oracle complexity for first-order convex optimization. In particular,
this shows that center-of-mass cutting-planes algorithms in dimension $d$ which
use $\tilde O(d^2)$ memory and $\tilde O(d)$ queries are Pareto-optimal for
both convex optimization and the feasibility problem, up to logarithmic
factors. Precisely, we prove that to minimize $1$-Lipschitz convex functions
over the unit ball to $1/d^4$ accuracy, any deterministic first-order
algorithms using at most $d^{2-\delta}$ bits of memory must make
$\tilde\Omega(d^{1+\delta/3})$ queries, for any $\delta\in[0,1]$. For the
feasibility problem, in which an algorithm only has access to a separation
oracle, we show a stronger trade-off: for at most $d^{2-\delta}$ memory, the
number of queries required is $\tilde\Omega(d^{1+\delta})$. This resolves a
COLT 2019 open problem of Woodworth and Srebro.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Dynamic $(1+\epsilon)$-Approximate Matching Size in Truly Sublinear Update Time</title>
    <link href="http://arxiv.org/abs/2302.05030"/>
    <id>http://arxiv.org/abs/2302.05030</id>
    <updated>2023-02-13T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Bhattacharya_S/0/1/0/all/0/1&quot;&gt;Sayan Bhattacharya&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kiss_P/0/1/0/all/0/1&quot;&gt;Peter Kiss&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Saranurak_T/0/1/0/all/0/1&quot;&gt;Thatchaphol Saranurak&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We show a fully dynamic algorithm for maintaining $(1+\epsilon)$-approximate
\emph{size} of maximum matching of the graph with $n$ vertices and $m$ edges
using $m^{0.5-\Omega_{\epsilon}(1)}$ update time. This is the first polynomial
improvement over the long-standing $O(n)$ update time, which can be trivially
obtained by periodic recomputation. Thus, we resolve the value version of a
major open question of the dynamic graph algorithms literature (see, e.g.,
[Gupta and Peng FOCS&#39;13], [Bernstein and Stein SODA&#39;16],[Behnezhad and Khanna
SODA&#39;22]).
&lt;/p&gt;
&lt;p&gt;Our key technical component is the first sublinear algorithm for $(1,\epsilon
n)$-approximate maximum matching with sublinear running time on dense graphs.
All previous algorithms suffered a multiplicative approximation factor of at
least $1.499$ or assumed that the graph has a very small maximum degree.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Count-min sketch with variable number of hash functions: an experimental study</title>
    <link href="http://arxiv.org/abs/2302.05245"/>
    <id>http://arxiv.org/abs/2302.05245</id>
    <updated>2023-02-13T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Fusy_E/0/1/0/all/0/1&quot;&gt;&amp;#xc9;ric Fusy&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kucherov_G/0/1/0/all/0/1&quot;&gt;Gregory Kucherov&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Conservative Count-Min, an improved version of Count-Min sketch [Cormode,
Muthukrishnan 2005], is an online-maintained hashing-based data structure
summarizing element frequency information without storing elements themselves.
Although several works attempted to analyze the error that can be made by
Count-Min, the behavior of this data structure remains poorly understood. In
[Fusy, Kucherov 2022], we demonstrated that under the uniform distribution of
input elements, the error of conservative Count-Min follows two distinct
regimes depending on its load factor.
&lt;/p&gt;
&lt;p&gt;In this work, we provide a series of experimental results providing new
insights into the behavior of conservative Count-Min. Our contributions can be
seen as twofold. On one hand, we provide a detailed experimental analysis of
the behavior of Count-Min sketch in different regimes and under several
representative probability distributions of input elements. On the other hand,
we demonstrate improvements that can be made by assigning a variable number of
hash functions to different elements. This includes, in particular, reduced
space of the data structure while still supporting a small error.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Online Algorithms with Randomly Infused Advice</title>
    <link href="http://arxiv.org/abs/2302.05366"/>
    <id>http://arxiv.org/abs/2302.05366</id>
    <updated>2023-02-13T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Emek_Y/0/1/0/all/0/1&quot;&gt;Yuval Emek&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Gil_Y/0/1/0/all/0/1&quot;&gt;Yuval Gil&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Pacut_M/0/1/0/all/0/1&quot;&gt;Maciej Pacut&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Schmid_S/0/1/0/all/0/1&quot;&gt;Stefan Schmid&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We introduce a novel method for the rigorous quantitative evaluation of
online algorithms that relaxes the &quot;radical worst-case&quot; perspective of classic
competitive analysis. In contrast to prior work, our method, referred to as
randomly infused advice (RIA), does not make any probabilistic assumptions
about the input sequence and does not rely on the development of designated
online algorithms. Rather, it can be applied to existing online randomized
algorithms, introducing a means to evaluate their performance in scenarios that
lie outside the radical worst-case regime. More concretely, an online algorithm
ALG with RIA benefits from pieces of advice generated by an omniscient but not
entirely reliable oracle. The crux of the new method is that the advice is
provided to ALG by writing it into the buffer B from which ALG normally reads
its random bits, hence allowing us to augment it through a very simple and
non-intrusive interface. The (un)reliability of the oracle is captured via a
parameter 0 {\le} {\alpha} {\le} 1 that determines the probability (per round)
that the advice is successfully infused by the oracle; if the advice is not
infused, which occurs with probability 1 - {\alpha}, then the buffer B contains
fresh random bits (as in the classic online setting).
&lt;/p&gt;
&lt;p&gt;The applicability of the new RIA method is demonstrated by applying it to
three extensively studied online problems: paging, uniform metrical task
systems, and online set cover. For these problems, we establish new upper
bounds on the competitive ratio of classic online algorithms that improve as
the infusion parameter {\alpha} increases. These are complemented with (often
tight) lower bounds on the competitive ratio of online algorithms with RIA for
the three problems.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">Computational Complexity: When is a paper `Easily Available&#39; ?</title>
    <link href="https://blog.computationalcomplexity.org/2023/02/when-is-paper-easily-available.html"/>
    <id>tag:blogger.com,1999:blog-3722233.post-6399876367839804480</id>
    <updated>2023-02-12T21:22:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;I was looking at the paper&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; PSPACE-Completeness of reversible deterministic systems&lt;/i&gt;&lt;/p&gt;&lt;p&gt;by Erik Demaine, Robert Hearn,&amp;nbsp; Dylan Hendrickson, and Jayson Lynch (see&amp;nbsp;&lt;a href=&quot;https://arxiv.org/abs/2207.07229&quot;&gt;here&lt;/a&gt;) and came across the following fascinating result which I paraphrase:&lt;/p&gt;&lt;p&gt;&lt;i&gt;The problem of, given balls on a pool table (though it can be one you devise which is not the standard one) and each balls initial position and velocity, and a particular ball and place, it is PSPACE complete to determine if that ball ever gets to that place.&amp;nbsp;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;Demaine et al. stated that this was proven by&amp;nbsp;Edward Fredkin and Tommaso Toffoli in 1982 (see&amp;nbsp;&lt;a href=&quot;https://link.springer.com/article/10.1007/BF01857727&quot;&gt;here&lt;/a&gt;&amp;nbsp;for a link to the 1982 paper, not behind a paywall). Demaine et al. gave an easier proof with some nice properties. (Just in case the link goes away I downloaded the paper to my files and you can find it&amp;nbsp;&lt;a href=&quot;https://www.cs.umd.edu/~gasarch/BLOGPAPERS/clogic.pdf&quot;&gt;here&lt;/a&gt;.)&amp;nbsp;&lt;/p&gt;&lt;p&gt;I needed the bib reference for the FT-1982 paper and rather than copy it from Demaine et al. I wanted to cut-and-paste, so I looked for it in DBLP. I didn&#39;t find the 1982 paper but I did find a book from 2002 that reprinted it. The book, &lt;i&gt;Collision-based computing,&lt;/i&gt; has a website&amp;nbsp;&lt;a href=&quot;https://link.springer.com/book/10.1007/978-1-4471-0129-1&quot;&gt;here&lt;/a&gt;. The book itself is behind a paywall.&lt;/p&gt;&lt;p&gt;On the website is the following curious statement:&lt;/p&gt;&lt;p&gt;&lt;i&gt;[This book] Gives a state-of-the-art overview of an emerging topic, on which there is little published literature at the moment. [The book] Includes 2 classic paper, both of which are widely referred to but are NOT EASILY AVAILABLE (E. Fredkin and T. Toffoli: Conservative Logic, and N . Margolous Physics-Like Models of Computation).&amp;nbsp;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;The caps are mine.&lt;/p&gt;&lt;p&gt;Not easily available? I found a link in less than a minute, and I used it above when I pointed to the paper.&amp;nbsp;&lt;/p&gt;&lt;p&gt;But the book IS behind a paywall.&amp;nbsp;&lt;/p&gt;&lt;p&gt;Perhaps Springer does not know that the article is easily available. That would be odd since the place I found the article is also a Springer website.&amp;nbsp;&lt;/p&gt;&lt;p&gt;The notion of EASILY AVAILABLE is very odd. While not quite related, it reminds me of when MIT Press had to pay a few thousand dollars for permission (that might not be the legal term) to reprint Turing&#39;s 1936 paper where he defined Turing Machines (he didn&#39;t call them that), which is&amp;nbsp;&lt;a href=&quot;https://www.cs.virginia.edu/~robins/Turing_Paper_1936.pdf&quot;&gt;on line here&lt;/a&gt;&amp;nbsp;(and other places), for Harry Lewis&#39;s book &lt;i&gt;Ideas that created the&lt;/i&gt; &lt;i&gt;future.&amp;nbsp;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/p&gt;&lt;p class=&quot;authors&quot;&gt;By gasarch&lt;/p&gt;
  </content>
    <author>
      <name>Computational Complexity</name>
      <uri>http://blog.computationalcomplexity.org/</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">Richard Lipton: Are We Nuts?</title>
    <link href="https://rjlipton.wpcomstaging.com/2023/02/11/are-we-nuts/"/>
    <id>https://rjlipton.wpcomstaging.com/?p=21068</id>
    <updated>2023-02-11T13:25:38+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p&gt;Gil Kalai is one of the top researchers in the world in the area of combinatorics. His &lt;a href=&quot;https://gilkalai.wordpress.com&quot;&gt;blog&lt;/a&gt; is one of the best in the universe.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://rjlipton.wpcomstaging.com/2023/02/11/are-we-nuts/gk-2/&quot; rel=&quot;attachment wp-att-21072&quot;&gt;&lt;img data-attachment-id=&quot;21072&quot; data-permalink=&quot;https://rjlipton.wpcomstaging.com/2023/02/11/are-we-nuts/gk-2/&quot; data-orig-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/gk.jpeg?fit=278%2C181&amp;amp;ssl=1&quot; data-orig-size=&quot;278,181&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;gk&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/gk.jpeg?fit=278%2C181&amp;amp;ssl=1&quot; data-large-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/gk.jpeg?fit=278%2C181&amp;amp;ssl=1&quot; decoding=&quot;async&quot; loading=&quot;lazy&quot; src=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/gk.jpeg?resize=278%2C181&amp;#038;ssl=1&quot; alt=&quot;&quot; width=&quot;278&quot; height=&quot;181&quot; class=&quot;aligncenter size-full wp-image-21072&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;He also has some of the top results of anyone. One measure of excellence is how important not your results are, but how important your conjectures are. He with Jeff Kahn created in 2006 the expectation threshold &lt;a href=&quot;https://arxiv.org/abs/math/0603218&quot;&gt;conjecture&lt;/a&gt; which was just solved by Jinyoung Park and Huy Tuan Pham&amp;#8212; &lt;a href=&quot;https://arxiv.org/abs/2203.17207&quot;&gt;here&lt;/a&gt;.&lt;br /&gt;
&lt;span id=&quot;more-21068&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The fact that open problems are perhaps more important than results will be reflected in the next FOCS 2023. There will be a whole &lt;a href=&quot;https://windowsontheory.org/2023/01/16/new-in-focs-2023-a-conjectures-track/&quot;&gt;track&lt;/a&gt; on open problems. See Amit Sahai, Shubhangi Saraf, and Thomas Vidick who have put together an FAQ about this: This year, FOCS 2023 will include something new: a Conjectures Track, separate from the Main Track. Submissions to the Main Track will be evaluated along similar lines as STOC/FOCS papers typically are, aiming to accept papers that obtain the very best results across all fields of theoretical computer science. Submissions to the new Conjectures Track will be evaluated completely separately from submissions to the Main Track. There is no a priori acceptance quota for either track, or desired number of accepted papers: it will all depend on the quality of submissions only.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://rjlipton.wpcomstaging.com/2023/02/11/are-we-nuts/am-2/&quot; rel=&quot;attachment wp-att-21082&quot;&gt;&lt;img data-attachment-id=&quot;21082&quot; data-permalink=&quot;https://rjlipton.wpcomstaging.com/2023/02/11/are-we-nuts/am-2/&quot; data-orig-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/am.jpeg?fit=171%2C295&amp;amp;ssl=1&quot; data-orig-size=&quot;171,295&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;am&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/am.jpeg?fit=171%2C295&amp;amp;ssl=1&quot; data-large-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/am.jpeg?fit=171%2C295&amp;amp;ssl=1&quot; decoding=&quot;async&quot; loading=&quot;lazy&quot; src=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/am.jpeg?resize=171%2C295&amp;#038;ssl=1&quot; alt=&quot;&quot; width=&quot;171&quot; height=&quot;295&quot; class=&quot;aligncenter size-full wp-image-21082&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://rjlipton.wpcomstaging.com/2023/02/11/are-we-nuts/ss-2/&quot; rel=&quot;attachment wp-att-21077&quot;&gt;&lt;img data-attachment-id=&quot;21077&quot; data-permalink=&quot;https://rjlipton.wpcomstaging.com/2023/02/11/are-we-nuts/ss-2/&quot; data-orig-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/ss.jpeg?fit=225%2C225&amp;amp;ssl=1&quot; data-orig-size=&quot;225,225&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;ss&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/ss.jpeg?fit=225%2C225&amp;amp;ssl=1&quot; data-large-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/ss.jpeg?fit=225%2C225&amp;amp;ssl=1&quot; decoding=&quot;async&quot; loading=&quot;lazy&quot; src=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/ss.jpeg?resize=225%2C225&amp;#038;ssl=1&quot; alt=&quot;&quot; width=&quot;225&quot; height=&quot;225&quot; class=&quot;aligncenter size-full wp-image-21077&quot; srcset=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/ss.jpeg?w=225&amp;amp;ssl=1 225w, https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/ss.jpeg?resize=150%2C150&amp;amp;ssl=1 150w, https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/ss.jpeg?resize=200%2C200&amp;amp;ssl=1 200w&quot; sizes=&quot;(max-width: 225px) 100vw, 225px&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://rjlipton.wpcomstaging.com/2023/02/11/are-we-nuts/tv-2/&quot; rel=&quot;attachment wp-att-21079&quot;&gt;&lt;img data-attachment-id=&quot;21079&quot; data-permalink=&quot;https://rjlipton.wpcomstaging.com/2023/02/11/are-we-nuts/tv-2/&quot; data-orig-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/tv.jpeg?fit=198%2C255&amp;amp;ssl=1&quot; data-orig-size=&quot;198,255&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;tv&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/tv.jpeg?fit=198%2C255&amp;amp;ssl=1&quot; data-large-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/tv.jpeg?fit=198%2C255&amp;amp;ssl=1&quot; decoding=&quot;async&quot; loading=&quot;lazy&quot; src=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/tv.jpeg?resize=198%2C255&amp;#038;ssl=1&quot; alt=&quot;&quot; width=&quot;198&quot; height=&quot;255&quot; class=&quot;aligncenter size-full wp-image-21079&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Against Quantum Computers&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Gil Kalai has argued against quantum computation being a faster type of computation. See his paper &lt;a href=&quot;https://gilkalai.wordpress.com&quot;&gt;here&lt;/a&gt; for one example. Or see &lt;a href=&quot;https://gilkalai.wordpress.com/2020/12/29/the-argument-against-quantum-computers-a-very-short-introduction/&quot;&gt;anti 1&lt;/a&gt; and &lt;a href=&quot;https://arxiv.org/abs/1908.02499&quot;&gt;anti 2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The New Yorker Magazine&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://rjlipton.wpcomstaging.com/2023/02/11/are-we-nuts/cover-3/&quot; rel=&quot;attachment wp-att-21074&quot;&gt;&lt;img data-attachment-id=&quot;21074&quot; data-permalink=&quot;https://rjlipton.wpcomstaging.com/2023/02/11/are-we-nuts/cover-3/&quot; data-orig-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/cover.jpeg?fit=258%2C352&amp;amp;ssl=1&quot; data-orig-size=&quot;258,352&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;cover&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/cover.jpeg?fit=220%2C300&amp;amp;ssl=1&quot; data-large-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/cover.jpeg?fit=258%2C352&amp;amp;ssl=1&quot; decoding=&quot;async&quot; loading=&quot;lazy&quot; src=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/cover.jpeg?resize=258%2C352&amp;#038;ssl=1&quot; alt=&quot;&quot; width=&quot;258&quot; height=&quot;352&quot; class=&quot;aligncenter size-full wp-image-21074&quot; srcset=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/cover.jpeg?w=258&amp;amp;ssl=1 258w, https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/cover.jpeg?resize=220%2C300&amp;amp;ssl=1 220w&quot; sizes=&quot;(max-width: 258px) 100vw, 258px&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last month the New Yorker had two articles about math. That&amp;#8217;s two more than usual.&lt;/p&gt;
&lt;p&gt;The main article was on quantum algorithms by Stephen Witt. He is a reporter and has a degree in 2001 from the University of Chicago in mathematics.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://rjlipton.wpcomstaging.com/2023/02/11/are-we-nuts/sw/&quot; rel=&quot;attachment wp-att-21073&quot;&gt;&lt;img data-attachment-id=&quot;21073&quot; data-permalink=&quot;https://rjlipton.wpcomstaging.com/2023/02/11/are-we-nuts/sw/&quot; data-orig-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/sw.jpeg?fit=225%2C225&amp;amp;ssl=1&quot; data-orig-size=&quot;225,225&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;sw&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/sw.jpeg?fit=225%2C225&amp;amp;ssl=1&quot; data-large-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/sw.jpeg?fit=225%2C225&amp;amp;ssl=1&quot; decoding=&quot;async&quot; loading=&quot;lazy&quot; src=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/sw.jpeg?resize=225%2C225&amp;#038;ssl=1&quot; alt=&quot;&quot; width=&quot;225&quot; height=&quot;225&quot; class=&quot;aligncenter size-full wp-image-21073&quot; srcset=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/sw.jpeg?w=225&amp;amp;ssl=1 225w, https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/sw.jpeg?resize=150%2C150&amp;amp;ssl=1 150w, https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/sw.jpeg?resize=200%2C200&amp;amp;ssl=1 200w&quot; sizes=&quot;(max-width: 225px) 100vw, 225px&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;His article features Peter Shor a leader in quantum algorithms&amp;#8212;no relationship to Santa&amp;#8212;but long time friend.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://rjlipton.wpcomstaging.com/2023/02/11/are-we-nuts/peter-2/&quot; rel=&quot;attachment wp-att-21076&quot;&gt;&lt;img data-attachment-id=&quot;21076&quot; data-permalink=&quot;https://rjlipton.wpcomstaging.com/2023/02/11/are-we-nuts/peter-2/&quot; data-orig-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/peter.jpeg?fit=224%2C224&amp;amp;ssl=1&quot; data-orig-size=&quot;224,224&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;peter&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/peter.jpeg?fit=224%2C224&amp;amp;ssl=1&quot; data-large-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/peter.jpeg?fit=224%2C224&amp;amp;ssl=1&quot; decoding=&quot;async&quot; loading=&quot;lazy&quot; src=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/peter.jpeg?resize=224%2C224&amp;#038;ssl=1&quot; alt=&quot;&quot; width=&quot;224&quot; height=&quot;224&quot; class=&quot;aligncenter size-full wp-image-21076&quot; srcset=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/peter.jpeg?w=224&amp;amp;ssl=1 224w, https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/peter.jpeg?resize=150%2C150&amp;amp;ssl=1 150w, https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/peter.jpeg?resize=200%2C200&amp;amp;ssl=1 200w&quot; sizes=&quot;(max-width: 224px) 100vw, 224px&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Witt&amp;#8217;s article features other friends of ours such as Scott Aaronson&amp;#8212;the owner of the wonderful &lt;a href=&quot;https://scottaaronson.blog&quot;&gt;blog&lt;/a&gt;&amp;#8212;Shtetl-Optimized. Scott&amp;#8217;s post starts: I, Scott confess: this was the first time I felt visceral anger, rather than mere bemusement, over this wormhole affair. Before, I had implicitly assumed: no one was actually hoodwinked by this. No one really, literally believed that this little 9-qubit simulation opened up a wormhole, or helped prove the holographic nature of the real universe, or anything like that. I was wrong.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quantum Is Weird&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Read the New Yorker article, which is a nice popular writeup by Witt. Quantum is tricky, but his article is pretty straightforward.&lt;/p&gt;
&lt;p&gt;Witt&amp;#8217;s main focus is on the potential to build quantum computers that can solve real problems. The goal is of course to make quantum computers that can handle more and more qubits. Witt says this will make: Quantum physics win the Nobel prizes; Quantum chemistry will write the checks. Tens of billions of dollars are being invested in searching for ways to make such quantum computers. The &lt;a href=&quot;https://thequantuminsider.com&quot;&gt;investments&lt;/a&gt; are by existing huge companies as well as new startups.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quantum Is Powerful?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Witt assumes the usual view that classic computers are weaker than quantum computers. This is likely to be the case; it is the main viewpoint, but it is open. It could be that quantum computers could indeed be efficiently simulated by classic computers. That is still an open problem. See list of blogs on quantum for the main view.&lt;/p&gt;
&lt;p&gt;We cannot prove that PSPACE is more powerful than P=POLYTIME. This is believed by most, but it is open. It could be the case that they are equal. If that is true, then Shor&amp;#8217;s factoring algorithm is in P and other shocks happen. But it could be true.&lt;/p&gt;
&lt;p&gt;Take a look at the recent &lt;em&gt;A Closer Look at Some Recent Proof Compression-Related Claims&lt;/em&gt; &lt;a href=&quot;https://arxiv.org/pdf/2212.12150.pdf}{https://arxiv.org/pdf/2212.12150.pdf&quot;&gt;paper&lt;/a&gt; by Michael Chavrimootoo, Ethan Ferland, Erin Gibson, Ashley Wilson. They show that a claimed proof that resolves a related open problem fails. But it could be possible via some other argument. It is interesting that people believe they have an approach to such results&amp;#8212;even if their arguments are wrong.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Open Problems&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://rjlipton.wpcomstaging.com/2023/02/11/are-we-nuts/just2/&quot; rel=&quot;attachment wp-att-21075&quot;&gt;&lt;img data-attachment-id=&quot;21075&quot; data-permalink=&quot;https://rjlipton.wpcomstaging.com/2023/02/11/are-we-nuts/just2/&quot; data-orig-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/just2.jpeg?fit=225%2C225&amp;amp;ssl=1&quot; data-orig-size=&quot;225,225&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;just2&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/just2.jpeg?fit=225%2C225&amp;amp;ssl=1&quot; data-large-file=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/just2.jpeg?fit=225%2C225&amp;amp;ssl=1&quot; decoding=&quot;async&quot; loading=&quot;lazy&quot; src=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/just2.jpeg?resize=225%2C225&amp;#038;ssl=1&quot; alt=&quot;&quot; width=&quot;225&quot; height=&quot;225&quot; class=&quot;aligncenter size-full wp-image-21075&quot; srcset=&quot;https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/just2.jpeg?w=225&amp;amp;ssl=1 225w, https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/just2.jpeg?resize=150%2C150&amp;amp;ssl=1 150w, https://i0.wp.com/rjlipton.wpcomstaging.com/wp-content/uploads/2023/02/just2.jpeg?resize=200%2C200&amp;amp;ssl=1 200w&quot; sizes=&quot;(max-width: 225px) 100vw, 225px&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Are we nuts to point out that quantum computers could be no more powerful than classic computers? Are the billions of dollars being spent on quantum computers foolish? What do you think? Should some resources be spent on advances in classic algorithms?&lt;/p&gt;
&lt;p class=&quot;authors&quot;&gt;By rjlipton&lt;/p&gt;
  </content>
    <author>
      <name>Richard Lipton</name>
      <uri>https://rjlipton.wpcomstaging.com</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Quantum free games</title>
    <link href="http://arxiv.org/abs/2302.04322"/>
    <id>http://arxiv.org/abs/2302.04322</id>
    <updated>2023-02-10T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/quant-ph/1/au:+Natarajan_A/0/1/0/all/0/1&quot;&gt;Anand Natarajan&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/quant-ph/1/au:+Zhang_T/0/1/0/all/0/1&quot;&gt;Tina Zhang&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The complexity of free games with two or more classical players was
essentially settled by Aaronson, Impagliazzo, and Moshkovitz (CCC&#39;14). There
are two complexity classes that can be considered quantum analogues of
classical free games: (1) AM*, the multiprover interactive proof class
corresponding to free games with entangled players, and, somewhat less
obviously, (2) BellQMA(2), the class of quantum Merlin-Arthur proof systems
with two unentangled Merlins, whose proof states are separately measured by
Arthur. In this work, we make significant progress towards a tight
characterization of both of these classes. 1. We show a BellQMA(2) protocol for
3SAT on $n$ variables, where the total amount of communication is
$\tilde{O}(\sqrt{n})$. This answers an open question of Chen and Drucker (2010)
and also shows, conditional on ETH, that the algorithm of Brand\~{a}o,
Christandl and Yard (STOC&#39;11) is tight up to logarithmic factors. 2. We show
that $\mathsf{AM}^*[n_{\text{provers}} = 2, q = O(1), a =\mathrm{poly}\log(n)]
= \mathsf{RE}$, i.e. that free entangled games with constant-sized questions
are as powerful as general entangled games. Our result is a significant
improvement over the headline result of Ji et al. (2020), whose MIP* protocol
for the halting problem has $\mathrm{poly}(n)$-sized questions and answers. 3.
We obtain a zero-gap AM* protocol for a $\Pi_2$ complete language with
constant-size questions and almost logarithmically large answers, improving on
the headline result of Mousavi, Nezhadi and Yuen (STOC&#39;22). 4. Using a
connection to the nonuniform complexity of the halting problem we show that any
MIP* protocol for RE requires $\Omega(\log n)$ bits of communication. It
follows that our results in item 3 are optimal up to an $O(\log^* n)$ factor,
and that the gapless compression theorems of MNY&#39;22 are asymptotically optimal.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Secret Sharing on Superconcentrator</title>
    <link href="http://arxiv.org/abs/2302.04482"/>
    <id>http://arxiv.org/abs/2302.04482</id>
    <updated>2023-02-10T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Li_Y/0/1/0/all/0/1&quot;&gt;Yuan Li&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Using information inequalities, we prove any unrestricted arithmetic circuits
computing the shares of any $(t, n)$-threshold secret sharing scheme must
satisfy some superconcentrator-like connection properties. In the reverse
direction, we prove, when the underlying field is large enough, any graph
satisfying these connection properties can be turned into a linear arithmetic
circuit computing the shares of a $(t, n)$-threshold secret sharing scheme.
Specifically, $n$ shares can be computed by a linear arithmetic circuits with
$O(n)$ wires in depth $O(\alpha(t, n))$, where $\alpha(t, n)$ is the
two-parameter version of the inverse Ackermann function. For example, when $n
\ge t^{2.5}$, depth $2$ would be enough; when $n \ge t \log^{2.5} t$, depth 3
would be enough.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Hardness of monadic second-order formulae over succinct graphs</title>
    <link href="http://arxiv.org/abs/2302.04522"/>
    <id>http://arxiv.org/abs/2302.04522</id>
    <updated>2023-02-10T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Gamard_G/0/1/0/all/0/1&quot;&gt;Guilhem Gamard&lt;/a&gt; (LORIA), &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Guillon_P/0/1/0/all/0/1&quot;&gt;Pierre Guillon&lt;/a&gt; (I2M), &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Perrot_K/0/1/0/all/0/1&quot;&gt;K&amp;#xe9;vin Perrot&lt;/a&gt; (LIS), &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Theyssier_G/0/1/0/all/0/1&quot;&gt;Guillaume Theyssier&lt;/a&gt; (I2M)&lt;/p&gt;&lt;p&gt;Our main result is a succinct counterpoint to Courcelle&#39;s meta-theorem as
follows: every arborescent monadic second-order (MSO) property is either
NP-hard or coNP-hard over graphs given by succinct representations. Succint
representations are Boolean circuits computing the adjacency relation.
Arborescent properties are those which have infinitely many models and
countermodels with bounded treewidth. We actually prove this result in the
terminology of automata network, which is a generalization of finite cellular
automata over arbitrary graphs. This model arose from the biological
modelization of neural networks and gene regulation networks. Our result states
that every arborescent MSO property on the transition graph of automata
networks is either NP-hard or coNP-hard. Moreover, we explore what happens when
the arborescence condition is dropped and show that, under a reasonable
complexity assumption, the previous dichotomy fails, even for questions
expressible in first-order logic.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Find a witness or shatter: the landscape of computable PAC learning</title>
    <link href="http://arxiv.org/abs/2302.04731"/>
    <id>http://arxiv.org/abs/2302.04731</id>
    <updated>2023-02-10T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Rose_V/0/1/0/all/0/1&quot;&gt;Valentino Delle Rose&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kozachinskiy_A/0/1/0/all/0/1&quot;&gt;Alexander Kozachinskiy&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Rojas_C/0/1/0/all/0/1&quot;&gt;Cristobal Rojas&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Steifer_T/0/1/0/all/0/1&quot;&gt;Tomasz Steifer&lt;/a&gt;&lt;/p&gt;&lt;p&gt;This paper contributes to the study of CPAC learnability -- a computable
version of PAC learning -- by solving three open questions from recent papers.
Firstly, we prove that every improperly CPAC learnable class is contained in a
class which is properly CPAC learnable with polynomial sample complexity. This
confirms a conjecture by Agarwal et al (COLT 2021). Secondly, we show that
there exists a decidable class of hypothesis which is properly CPAC learnable,
but only with uncomputably fast growing sample complexity. This solves a
question from Sterkenburg (COLT 2022). Finally, we construct a decidable class
of finite Littlestone dimension which is not improperly CPAC learnable,
strengthening a recent result of Sterkenburg (2022) and answering a question
posed by Hasrati and Ben-David (ALT 2023). Together with previous work, our
results provide a complete landscape for the learnability problem in the CPAC
setting.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Quantum Advantage from One-Way Functions</title>
    <link href="http://arxiv.org/abs/2302.04749"/>
    <id>http://arxiv.org/abs/2302.04749</id>
    <updated>2023-02-10T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/quant-ph/1/au:+Morimae_T/0/1/0/all/0/1&quot;&gt;Tomoyuki Morimae&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/quant-ph/1/au:+Yamakawa_T/0/1/0/all/0/1&quot;&gt;Takashi Yamakawa&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We demonstrate quantum advantage with several basic assumptions, specifically
based on only the existence of OWFs. We introduce inefficient-verifier proofs
of quantumness (IV-PoQ), and construct it from classical bit commitments.
IV-PoQ is an interactive protocol between a verifier and a quantum prover
consisting of two phases. In the first phase, the verifier is probabilistic
polynomial-time, and it interacts with the prover. In the second phase, the
verifier becomes inefficient, and makes its decision based on the transcript of
the first phase. If the prover is honest, the inefficient verifier accepts with
high probability, but any classical malicious prover only has a small
probability of being accepted by the inefficient verifier. Our construction
demonstrates the following results: (1)If one-way functions exist, then IV-PoQ
exist. (2)If distributional collision-resistant hash functions exist (which
exist if hard-on-average problems in $\mathbf{SZK}$ exist), then constant-round
IV-PoQ exist. We also demonstrate quantum advantage based on worst-case-hard
assumptions. We define auxiliary-input IV-PoQ (AI-IV-PoQ) that only require
that for any malicious prover, there exist infinitely many auxiliary inputs
under which the prover cannot cheat. We construct AI-IV-PoQ from an
auxiliary-input version of commitments in a similar way, showing that (1)If
auxiliary-input one-way functions exist (which exist if
$\mathbf{CZK}\not\subseteq\mathbf{BPP}$), then AI-IV-PoQ exist. (2)If
auxiliary-input collision-resistant hash functions exist (which is equivalent
to $\mathbf{PWPP}\nsubseteq \mathbf{FBPP}$) or $\mathbf{SZK}\nsubseteq
\mathbf{BPP}$, then constant-round AI-IV-PoQ exist.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Nonlinear Random Matrices and Applications to the Sum of Squares Hierarchy</title>
    <link href="http://arxiv.org/abs/2302.04462"/>
    <id>http://arxiv.org/abs/2302.04462</id>
    <updated>2023-02-10T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Rajendran_G/0/1/0/all/0/1&quot;&gt;Goutham Rajendran&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We develop new tools in the theory of nonlinear random matrices and apply
them to study the performance of the Sum of Squares (SoS) hierarchy on
average-case problems.
&lt;/p&gt;
&lt;p&gt;The SoS hierarchy is a powerful optimization technique that has achieved
tremendous success for various problems in combinatorial optimization, robust
statistics and machine learning. It&#39;s a family of convex relaxations that lets
us smoothly trade off running time for approximation guarantees. In recent
works, it&#39;s been shown to be extremely useful for recovering structure in high
dimensional noisy data. It also remains our best approach towards refuting the
notorious Unique Games Conjecture.
&lt;/p&gt;
&lt;p&gt;In this work, we analyze the performance of the SoS hierarchy on fundamental
problems stemming from statistics, theoretical computer science and statistical
physics. In particular, we show subexponential-time SoS lower bounds for the
problems of the Sherrington-Kirkpatrick Hamiltonian, Planted Slightly Denser
Subgraph, Tensor Principal Components Analysis and Sparse Principal Components
Analysis. These SoS lower bounds involve analyzing large random matrices,
wherein lie our main contributions. These results offer strong evidence for the
truth of and insight into the low-degree likelihood ratio hypothesis, an
important conjecture that predicts the power of bounded-time algorithms for
hypothesis testing.
&lt;/p&gt;
&lt;p&gt;We also develop general-purpose tools for analyzing the behavior of random
matrices which are functions of independent random variables. Towards this, we
build on and generalize the matrix variant of the Efron-Stein inequalities. In
particular, our general theorem on matrix concentration recovers various
results that have appeared in the literature. We expect these random matrix
theory ideas to have other significant applications.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Fast Parallel Degree+1 List Coloring</title>
    <link href="http://arxiv.org/abs/2302.04378"/>
    <id>http://arxiv.org/abs/2302.04378</id>
    <updated>2023-02-10T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Coy_S/0/1/0/all/0/1&quot;&gt;Sam Coy&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Czumaj_A/0/1/0/all/0/1&quot;&gt;Artur Czumaj&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Davies_P/0/1/0/all/0/1&quot;&gt;Peter Davies&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Mishra_G/0/1/0/all/0/1&quot;&gt;Gopinath Mishra&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Graph coloring problems are arguably among the most fundamental graph
problems in parallel and distributed computing with numerous applications. In
particular, in recent years the classical ($\Delta+1$)-coloring problem became
a benchmark problem to study the impact of local computation for parallel and
distributed algorithms. In this work, we study the parallel complexity of a
generalization of the ($\Delta+1$)-coloring problem: the problem of
(degree+1)-list coloring (${\mathsf{D1LC}}$), where each node has an input
palette of acceptable colors, of size one more than its degree, and the
objective is to find a proper coloring using these palettes.
&lt;/p&gt;
&lt;p&gt;In a recent work, Halld\&#39;orsson et al. (STOC&#39;22) presented a randomized
$O(\log^3\log n)$-rounds distributed algorithm for ${\mathsf{D1LC}}$ in the
${\mathsf{LOCAL}}$ model, matching for the first time the state-of-the art
complexity for $(\Delta+1)$-coloring due to Chang et al. (SICOMP&#39;20).
&lt;/p&gt;
&lt;p&gt;In this paper, we obtain a similar connection for $\mathsf{D1LC}$ in the
Massively Parallel Computation (${\mathsf{MPC}}$) model with sublinear local
space: we present a randomized $O(\log\log\log n)$-round ${\mathsf{MPC}}$
algorithm for ${\mathsf{D1LC}}$, matching the state-of-the art ${\mathsf{MPC}}$
algorithm for the $(\Delta+1)$-coloring problem. We also show that our
algorithm can be efficiently derandomized.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: SF-SGL: Solver-Free Spectral Graph Learning from Linear Measurements</title>
    <link href="http://arxiv.org/abs/2302.04384"/>
    <id>http://arxiv.org/abs/2302.04384</id>
    <updated>2023-02-10T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Zhang_Y/0/1/0/all/0/1&quot;&gt;Ying Zhang&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Zhao_Z/0/1/0/all/0/1&quot;&gt;Zhiqiang Zhao&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Feng_Z/0/1/0/all/0/1&quot;&gt;Zhuo Feng&lt;/a&gt;&lt;/p&gt;&lt;p&gt;This work introduces a highly-scalable spectral graph densification framework
(SGL) for learning resistor networks with linear measurements, such as node
voltages and currents. We show that the proposed graph learning approach is
equivalent to solving the classical graphical Lasso problems with
Laplacian-like precision matrices. We prove that given $O(\log N)$ pairs of
voltage and current measurements, it is possible to recover sparse $N$-node
resistor networks that can well preserve the effective resistance distances on
the original graph. In addition, the learned graphs also preserve the
structural (spectral) properties of the original graph, which can potentially
be leveraged in many circuit design and optimization tasks.
&lt;/p&gt;
&lt;p&gt;To achieve more scalable performance, we also introduce a solver-free method
(SF-SGL) that exploits multilevel spectral approximation of the graphs and
allows for a scalable and flexible decomposition of the entire graph spectrum
(to be learned) into multiple different eigenvalue clusters (frequency bands).
Such a solver-free approach allows us to more efficiently identify the most
spectrally-critical edges for reducing various ranges of spectral embedding
distortions. Through extensive experiments for a variety of real-world test
cases, we show that the proposed approach is highly scalable for learning
sparse resistor networks without sacrificing solution quality. We also
introduce a data-driven EDA algorithm for vectorless power/thermal integrity
verifications to allow estimating worst-case voltage/temperature (gradient)
distributions across the entire chip by leveraging a few voltage/temperature
measurements.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Locally consistent decomposition of strings with applications to edit distance sketching</title>
    <link href="http://arxiv.org/abs/2302.04475"/>
    <id>http://arxiv.org/abs/2302.04475</id>
    <updated>2023-02-10T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Bhattacharya_S/0/1/0/all/0/1&quot;&gt;Sudatta Bhattacharya&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Koucky_M/0/1/0/all/0/1&quot;&gt;Michal Kouck&amp;#xfd;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;In this paper we provide a new locally consistent decomposition of strings.
Each string $x$ is decomposed into blocks that can be described by grammars of
size $\widetilde{O}(k)$ (using some amount of randomness). If we take two
strings $x$ and $y$ of edit distance at most $k$ then their block decomposition
uses the same number of grammars and the $i$-th grammar of $x$ is the same as
the $i$-th grammar of $y$ except for at most $k$ indexes $i$. The edit distance
of $x$ and $y$ equals to the sum of edit distances of pairs of blocks where $x$
and $y$ differ. Our decomposition can be used to design a sketch of size
$\widetilde{O}(k^2)$ for edit distance, and also a rolling sketch for edit
distance of size $\widetilde{O}(k^2)$. The rolling sketch allows to update the
sketched string by appending a symbol or removing a symbol from the beginning
of the string.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: Dual Algorithmic Reasoning</title>
    <link href="http://arxiv.org/abs/2302.04496"/>
    <id>http://arxiv.org/abs/2302.04496</id>
    <updated>2023-02-10T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Numeroso_D/0/1/0/all/0/1&quot;&gt;Danilo Numeroso&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Bacciu_D/0/1/0/all/0/1&quot;&gt;Davide Bacciu&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Velickovic_P/0/1/0/all/0/1&quot;&gt;Petar Veli&amp;#x10d;kovi&amp;#x107;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Neural Algorithmic Reasoning is an emerging area of machine learning which
seeks to infuse algorithmic computation in neural networks, typically by
training neural models to approximate steps of classical algorithms. In this
context, much of the current work has focused on learning reachability and
shortest path graph algorithms, showing that joint learning on similar
algorithms is beneficial for generalisation. However, when targeting more
complex problems, such similar algorithms become more difficult to find. Here,
we propose to learn algorithms by exploiting duality of the underlying
algorithmic problem. Many algorithms solve optimisation problems. We
demonstrate that simultaneously learning the dual definition of these
optimisation problems in algorithmic learning allows for better learning and
qualitatively better solutions. Specifically, we exploit the max-flow min-cut
theorem to simultaneously learn these two algorithms over synthetically
generated graphs, demonstrating the effectiveness of the proposed approach. We
then validate the real-world utility of our dual algorithmic reasoner by
deploying it on a challenging brain vessel classification task, which likely
depends on the vessels&#39; flow properties. We demonstrate a clear performance
gain when using our model within such a context, and empirically show that
learning the max-flow and min-cut algorithms together is critical for achieving
such a result.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: A Reduction from Chores Allocation to Job Scheduling</title>
    <link href="http://arxiv.org/abs/2302.04581"/>
    <id>http://arxiv.org/abs/2302.04581</id>
    <updated>2023-02-10T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Huang_X/0/1/0/all/0/1&quot;&gt;Xin Huang&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Segal_Halevi_E/0/1/0/all/0/1&quot;&gt;Erel Segal-Halevi&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We consider allocating indivisible chores among agents with different cost
functions, such that all agents receive a cost of at most a constant factor
times their maximin share. The state-of-the-art was presented in In EC 2021 by
Huang and Lu. They presented a non-polynomial-time algorithm, called HFFD, that
attains an 11/9 approximation, and a polynomial-time algorithm that attains a
5/4 approximation.
&lt;/p&gt;
&lt;p&gt;In this paper, we show that HFFD can be reduced to an algorithm called
MultiFit, developed by Coffman, Garey and Johnson in 1978 for makespan
minimization in job scheduling. Using this reduction, we prove that the
approximation ratio of HFFD is in fact equal to that of MultiFit, which is
known to be 13/11 in general, 20/17 for n at most 7, and 15/13 for n=3.
&lt;/p&gt;
&lt;p&gt;Moreover, we develop an algorithm for (13/11+epsilon)-maximin-share
allocation for any epsilon&amp;gt;0, with run-time polynomial in the problem size and
1/epsilon. For n=3, we can improve the algorithm to find a 15/13-maximin-share
allocation with run-time polynomial in the problem size. Thus, we have
practical algorithms that attain the best known approximation to maximin-share
chore allocation.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: A new width parameter of graphs based on edge cuts: $\alpha$-edge-crossing width</title>
    <link href="http://arxiv.org/abs/2302.04624"/>
    <id>http://arxiv.org/abs/2302.04624</id>
    <updated>2023-02-10T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Chang_Y/0/1/0/all/0/1&quot;&gt;Yeonsu Chang&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Kwon_O/0/1/0/all/0/1&quot;&gt;O-joung Kwon&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Lee_M/0/1/0/all/0/1&quot;&gt;Myounghwan Lee&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We introduce graph width parameters, called $\alpha$-edge-crossing width and
edge-crossing width. These are defined in terms of the number of edges crossing
a bag of a tree-cut decomposition. They are motivated by edge-cut width,
recently introduced by Brand et al. (WG 2022). We show that edge-crossing width
is equivalent to the known parameter tree-partition-width. On the other hand,
$\alpha$-edge-crossing width is a new parameter; tree-cut width and
$\alpha$-edge-crossing width are incomparable, and they both lie between
tree-partition-width and edge-cut width.
&lt;/p&gt;
&lt;p&gt;We provide an algorithm that, for a given $n$-vertex graph $G$ and integers
$k$ and $\alpha$, in time $2^{O((\alpha+k)\log (\alpha+k))}n^2$ either outputs
a tree-cut decomposition certifying that the $\alpha$-edge-crossing width of
$G$ is at most $2\alpha^2+5k$ or confirms that the $\alpha$-edge-crossing width
of $G$ is more than $k$. As applications, for every fixed $\alpha$, we obtain
FPT algorithms for the List Coloring and Precoloring Extension problems
parameterized by $\alpha$-edge-crossing width. They were known to be W[1]-hard
parameterized by tree-partition-width, and FPT parameterized by edge-cut width,
and we close the complexity gap between these two parameters.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: An $O(\log k)$-Approximation for Directed Steiner Tree in Planar Graphs</title>
    <link href="http://arxiv.org/abs/2302.04747"/>
    <id>http://arxiv.org/abs/2302.04747</id>
    <updated>2023-02-10T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Friggstad_Z/0/1/0/all/0/1&quot;&gt;Zachary Friggstad&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Mousavi_R/0/1/0/all/0/1&quot;&gt;Ramin Mousavi&lt;/a&gt;&lt;/p&gt;&lt;p&gt;We present an $O(\log k)$-approximation for both the edge-weighted and
node-weighted versions of \DST in planar graphs where $k$ is the number of
terminals. We extend our approach to \MDST (in general graphs \MDST and \DST
are easily seen to be equivalent but in planar graphs this is not the case
necessarily) in which we get a $O(R+\log k)$-approximation for planar graphs
for where $R$ is the number of roots.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Data Structures and Algorithms: $t$-sails and sparse hereditary classes of unbounded tree-width</title>
    <link href="http://arxiv.org/abs/2302.04783"/>
    <id>http://arxiv.org/abs/2302.04783</id>
    <updated>2023-02-10T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Cocks_D/0/1/0/all/0/1&quot;&gt;Daniel Cocks&lt;/a&gt;&lt;/p&gt;&lt;p&gt;It has long been known that the following basic objects are obstructions to
bounded tree-width: for arbitrarily large $t$, $(1)$ a subdivision of the
complete graph $K_t$, $(2)$ a subdivision of the complete bipartite graph
$K_{t,t}$, $(3)$ a subdivision of the $(t \times t)$-wall and $(4)$ a line
graph of a subdivision of the $(t \times t)$-wall. We are now able to add a
further \emph{boundary object} to this list, a subdivision of a
\emph{$t$-sail}. We identify new hereditary graph classes of unbounded
tree-width that do not contain any of the four basic obstructions but instead
contain arbitrarily large $t$-sails or subdivisions of a $t$-sail. We also show
that these sparse graph classes do not contain a minimal class of unbounded
tree-width.
&lt;/p&gt;
&lt;p&gt;These results have been obtained by studying \emph{path-star} graph classes,
a type of sparse hereditary graph class formed by combining a path (or union of
paths) with a forest of stars, characterised by an infinite word over a
possibly infinite alphabet.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Data Structures and Algorithms</name>
      <uri>https://arxiv.org/list/cs.DS/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">Computational Complexity: Why Can&#39;t Little Chatty Do Math?</title>
    <link href="https://blog.computationalcomplexity.org/2023/02/why-cant-little-chatty-do-math.html"/>
    <id>tag:blogger.com,1999:blog-3722233.post-6944633050600856974</id>
    <updated>2023-02-09T14:59:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;div&gt;Despite OpenAI&#39;s claim that ChatGPT has improved mathematical capabilities, we don&#39;t get far multiplying large numbers.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjnHsNFxbQ6oNEW1qIr0bFD8Jw_ESAXGWVGYfpsQyeZVoVnhlOgUHS5lozsRweLvsHAe3MFc5GU4tWvOyU7IbcykpHEVL2fo5Pm7kMkz-WIb5khJqZhVyXv9mI9bvRhlI9n6Jl0T29uzy8nVlcCtrEki46W0We3IxOBaXYZZHB36dMopnKWPA/s887/mult.jpg&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img alt=&quot;L:What is 866739766 * 745762645?  C:647733560997969470&quot; border=&quot;0&quot; data-original-height=&quot;191&quot; data-original-width=&quot;887&quot; height=&quot;86&quot; src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjnHsNFxbQ6oNEW1qIr0bFD8Jw_ESAXGWVGYfpsQyeZVoVnhlOgUHS5lozsRweLvsHAe3MFc5GU4tWvOyU7IbcykpHEVL2fo5Pm7kMkz-WIb5khJqZhVyXv9mI9bvRhlI9n6Jl0T29uzy8nVlcCtrEki46W0We3IxOBaXYZZHB36dMopnKWPA/w400-h86/mult.jpg&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;Typical for ChatGPT, the answer passes the smell test. It has the right number of digits and has correct first and last couple of digits. But the real answer is&amp;nbsp;646382140418841070,&amp;nbsp; quite different from the number given.&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;As far as I know, multiplication isn&#39;t known to be in&amp;nbsp;&lt;a href=&quot;https://complexityzoo.net/Complexity_Zoo:T#tc0&quot;&gt;TC&lt;sup&gt;0&lt;/sup&gt;&lt;/a&gt;, the complexity class that roughly corresponds to neural nets. [Note Added: Multiplication is in TC&lt;sup&gt;0&lt;/sup&gt;. See &lt;a href=&quot;https://blog.computationalcomplexity.org/2023/02/why-cant-little-chatty-do-math.html?showComment=1675963811947#c5283298584977635369&quot;&gt;comments&lt;/a&gt;.] Also functions learned by deep learning can often be inverted by deep learning. So if AI can learn how to multiply, it might also learn how to factor.&amp;nbsp;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;But what about addition? Addition is known to be in TC&lt;sup&gt;0&lt;/sup&gt; and ChatGPT performs better.&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgVo4fuwVf4sege-8Wm41_dOSQZvTeHhUB7Wn5oe3_OQZna0J-y2EmiBka5yq8ftdHPrG4Lth6SJyEcerSExsJpQm6DbsiKN9Hf49Fkcgf3XReVRCzYylbGfGJqzHmsCj8BF46UCv4DLWcIFfSnFrG41RoTtUCMb6YwaaP2V7nAC6LntsM26A/s897/add.jpg&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;193&quot; data-original-width=&quot;897&quot; height=&quot;86&quot; src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEgVo4fuwVf4sege-8Wm41_dOSQZvTeHhUB7Wn5oe3_OQZna0J-y2EmiBka5yq8ftdHPrG4Lth6SJyEcerSExsJpQm6DbsiKN9Hf49Fkcgf3XReVRCzYylbGfGJqzHmsCj8BF46UCv4DLWcIFfSnFrG41RoTtUCMb6YwaaP2V7nAC6LntsM26A/w400-h86/add.jpg&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;The correct answer is&amp;nbsp;1612502411, only one digit off but still wrong. The TC&lt;sup&gt;0&lt;/sup&gt; algorithm needs to do some tricks for carry lookahead that is probably hard to learn. Addition is easier if you work from right to left, but ChatGPT has trouble reversing numbers. There&#39;s a limit to its self-attention.&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiVaCr_CJXUTeQUVDWj38LkVnI37p0u5P8_ABoOqBG5T4ymxwEUxlzc60UU9-YSCXSccpH1ICpDlJJ8KGuK8h7Olf4JmYdwsW2nd3kdEhmnm4mQe0HikFlmkiZt1v6Zj3jddoVV-waokMYLixiFYQAR4pV58e9s6ULshXUql32JuR5nIzd7Lg/s892/backwards.jpg&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;201&quot; data-original-width=&quot;892&quot; height=&quot;90&quot; src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEiVaCr_CJXUTeQUVDWj38LkVnI37p0u5P8_ABoOqBG5T4ymxwEUxlzc60UU9-YSCXSccpH1ICpDlJJ8KGuK8h7Olf4JmYdwsW2nd3kdEhmnm4mQe0HikFlmkiZt1v6Zj3jddoVV-waokMYLixiFYQAR4pV58e9s6ULshXUql32JuR5nIzd7Lg/w400-h90/backwards.jpg&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;ChatGPT can&#39;t multiply but it does know how to write a program to multiply.&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjAtKeY7oA8q4mgvad016knm2noD1Nd7-Pk2wSicc_6fs-4nAF0f2LWInnmeV0sBnHB7sw92eeFbEfsXDCD1kNoebURfH4zziLhSbVVv-GKL0g_EwnE8A2PH8Qr5J12uC1xkYk16I6HwMdmmodECNEijrrSV5FeArwyLA1qKZ-3QdCC8lxOiQ/s907/python.jpg&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;528&quot; data-original-width=&quot;907&quot; height=&quot;233&quot; src=&quot;https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjAtKeY7oA8q4mgvad016knm2noD1Nd7-Pk2wSicc_6fs-4nAF0f2LWInnmeV0sBnHB7sw92eeFbEfsXDCD1kNoebURfH4zziLhSbVVv-GKL0g_EwnE8A2PH8Qr5J12uC1xkYk16I6HwMdmmodECNEijrrSV5FeArwyLA1qKZ-3QdCC8lxOiQ/w400-h233/python.jpg&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;It still claims the result will be the same as before. Running the program gives the correct answer&amp;nbsp;646382140418841070.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;ChatGPT is run on a general purpose computer, so one could hope a later version that could determine when its given a math question, write a program and run it. That&#39;s probably too dangerous--we would want to avoid a code injection vulnerability. But still it could use an API to WolframAlpha or some other math engine. Or a chess engine to play chess. Etc.&amp;nbsp;&lt;/div&gt;&lt;p class=&quot;authors&quot;&gt;By Lance Fortnow&lt;/p&gt;
  </content>
    <author>
      <name>Computational Complexity</name>
      <uri>http://blog.computationalcomplexity.org/</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">Emanuele Viola: Mathematics of the impossible: Computational Complexity, chapter 4, reductions</title>
    <link href="https://emanueleviola.wordpress.com/2023/02/09/mathematics-of-the-impossible-computational-complexity-chapter-4-reductions/"/>
    <id>http://emanueleviola.wordpress.com/?p=1192</id>
    <updated>2023-02-09T14:06:22+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;hr /&gt;
&lt;p&gt;&lt;!--?xml version=&quot;1.0&quot; encoding=&quot;iso-8859-1&quot; ?--&gt; &lt;!--http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd--&gt; &lt;!-- html,xhtml,-css,NoFonts --&gt;&lt;/p&gt;
&lt;div class=&quot;maketitle&quot;&gt;
&lt;div class=&quot;date&quot;&gt;&lt;a href=&quot;https://emanueleviola.wordpress.com/tag/moti/&quot;&gt;All posts in this series.&lt;/a&gt;&lt;br /&gt;
A PDF version of this post will be published with a delay, but if you’d like to have it soon let me know.&lt;/div&gt;
&lt;/div&gt;
&lt;h2 class=&quot;likechapterHead&quot;&gt;&lt;a id=&quot;x1-1000&quot;&gt;&lt;/a&gt;Contents&lt;/h2&gt;
&lt;div class=&quot;tableofcontents&quot;&gt;&lt;span class=&quot;chapterToc&quot;&gt;4 &lt;a id=&quot;QQ2-1-48&quot; href=&quot;#x1-450004&quot;&gt;Reductions&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;sectionToc&quot;&gt;4.1 &lt;a id=&quot;QQ2-1-49&quot; href=&quot;#x1-460004.1&quot;&gt;Types of reductions&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;sectionToc&quot;&gt;4.2 &lt;a id=&quot;QQ2-1-50&quot; href=&quot;#x1-470004.2&quot;&gt;Reductions&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;subsectionToc&quot;&gt;4.2.1 &lt;a id=&quot;QQ2-1-51&quot; href=&quot;#x1-480004.2.1&quot;&gt;Multiplication&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;subsectionToc&quot;&gt;4.2.2 &lt;a id=&quot;QQ2-1-52&quot; href=&quot;#x1-490004.2.2&quot;&gt;3Sum&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;sectionToc&quot;&gt;4.3 &lt;a id=&quot;QQ2-1-53&quot; href=&quot;#x1-500004.3&quot;&gt;Reductions from 3Sat &lt;/a&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;sectionToc&quot;&gt;4.4 &lt;a id=&quot;QQ2-1-54&quot; href=&quot;#x1-510004.4&quot;&gt;Power hardness from SETH&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;sectionToc&quot;&gt;4.5 &lt;a id=&quot;QQ2-1-55&quot; href=&quot;#x1-520004.5&quot;&gt;Search problems&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;subsectionToc&quot;&gt;4.5.1 &lt;a id=&quot;QQ2-1-56&quot; href=&quot;#x1-530004.5.1&quot;&gt;Fastest algorithm for Search-3Sat&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;sectionToc&quot;&gt;4.6 &lt;a id=&quot;QQ2-1-57&quot; href=&quot;#x1-540004.6&quot;&gt;Gap-SAT: The PCP theorem &lt;/a&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;sectionToc&quot;&gt;4.7 &lt;a id=&quot;QQ2-1-58&quot; href=&quot;#x1-550004.7&quot;&gt;Problems&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div id=&quot;verbatim-1&quot; class=&quot;verbatim&quot;&gt;&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;h2 class=&quot;chapterHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;Chapter&amp;nbsp;4&lt;/span&gt;&lt;br /&gt;
&lt;a id=&quot;x1-450004&quot;&gt;&lt;/a&gt;Reductions&lt;/h2&gt;
&lt;div class=&quot;flushright&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;img src=&quot;hamiltonian.png&quot; alt=&quot;PIC&quot; width=&quot;371&quot; height=&quot;321&quot;/&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;flushright&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;a href=&quot;https://xkcd.com/230/&quot; rel=&quot;nofollow&quot;&gt;https://xkcd.com/230/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;One can relate the complexity of functions via &lt;em&gt;reductions&lt;/em&gt;. This concept is so ingrained in common reasoning that giving it a name may feel, at times, strange. For in some sense pretty much everything proceeds by reductions. In any algorithms textbook, the majority of algorithms can be cast as reductions to algorithms presented earlier in the book, and so on. And it is worthwhile to emphasize now that, as we shall see below, reductions, even in the context of computing, have been used for millennia. For about a century reductions have been used in the context of undecidability in a modern way, starting with the incompleteness theorem in logic &lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#XMR1549939&quot;&gt;8&lt;/a&gt;]&lt;/span&gt;, whose proof reduces questions in logic to questions in arithmetic.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;Perhaps one reason for the more recent interest in complexity reductions is that we can use them to relate problems that are tantalizingly close to problems that today we solve routinely on somewhat large scale inputs with computers, and that therefore appear to be just out of reach. By contrast, reductions in the context of undecidability tend to apply to problems that are completely out of reach, and in this sense remote from our immediate worries.&lt;/p&gt;
&lt;h3 class=&quot;sectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;4.1 &lt;/span&gt; &lt;a id=&quot;x1-460004.1&quot;&gt;&lt;/a&gt;Types of reductions&lt;/h3&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;Informally, a reduction from a function &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; to a function &lt;img src=&quot;https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;g&quot; class=&quot;latex&quot; /&gt; is a way to compute &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; given that we can compute &lt;img src=&quot;https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;g&quot; class=&quot;latex&quot; /&gt;. One can define reductions in different ways, depending on the overhead required to compute &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; given that we can compute &lt;img src=&quot;https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;g&quot; class=&quot;latex&quot; /&gt;. The most general type of reduction is simply an &lt;em&gt;implication&lt;/em&gt;.&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;div class=&quot;minipage&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;b&gt;General form of reduction from &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;g&quot; class=&quot;latex&quot; /&gt;:&lt;/b&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;b&gt;If&lt;/b&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;g&quot; class=&quot;latex&quot; /&gt; can be computed with resources &lt;img src=&quot;https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;X&quot; class=&quot;latex&quot; /&gt; &lt;b&gt;then &lt;/b&gt;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; can be computed with resources &lt;img src=&quot;https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;Y&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;A common setting is when &lt;img src=&quot;https://s0.wp.com/latex.php?latex=X%3DY&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=X%3DY&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=X%3DY&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;X=Y&quot; class=&quot;latex&quot; /&gt;. In this case the reduction allows us to stay within the same complexity class.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-46001r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Definition&lt;/b&gt; 4.1. &lt;/span&gt;We say that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; reduces to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;g&quot; class=&quot;latex&quot; /&gt; in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;X&quot; class=&quot;latex&quot; /&gt; (or under &lt;img src=&quot;https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;X&quot; class=&quot;latex&quot; /&gt; reductions) if&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+g%5Cin+X%5CRightarrow+f%5Cin+X.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+g%5Cin+X%5CRightarrow+f%5Cin+X.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+g%5Cin+X%5CRightarrow+f%5Cin+X.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} g&amp;#92;in X&amp;#92;Rightarrow f&amp;#92;in X. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;A further special and noteworthy case is when &lt;img src=&quot;https://s0.wp.com/latex.php?latex=X%3D%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=X%3D%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=X%3D%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;X=&amp;#92;text {P}&quot; class=&quot;latex&quot; /&gt;, or &lt;img src=&quot;https://s0.wp.com/latex.php?latex=X%3D%5Ctext+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=X%3D%5Ctext+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=X%3D%5Ctext+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;X=&amp;#92;text {BPP}&quot; class=&quot;latex&quot; /&gt;; in these cases the reduction can be interpreted as saying that if &lt;img src=&quot;https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;g&quot; class=&quot;latex&quot; /&gt; is easy to compute than &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; is too.But in general &lt;img src=&quot;https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;X&quot; class=&quot;latex&quot; /&gt; may not be equal to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;Y&quot; class=&quot;latex&quot; /&gt;. We will see examples of such implications for various &lt;img src=&quot;https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;X&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=Y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;Y&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;It is sometimes useful to be more specific about how the implication is proved. For example, this is useful when inferring various properties of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; from properties of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;g&quot; class=&quot;latex&quot; /&gt;, something which can be obscured by a stark implication. The following definition gives a specific way in which the implication can be proved.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-46002r2&quot;&gt;&lt;/a&gt; &lt;b&gt;Definition&lt;/b&gt; 4.2. &lt;/span&gt;We say that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; &lt;em&gt;map reduces &lt;/em&gt;to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;g&quot; class=&quot;latex&quot; /&gt; in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;X&quot; class=&quot;latex&quot; /&gt; (or via a map in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;X&quot; class=&quot;latex&quot; /&gt;) if there is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M%5Cin+X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M%5Cin+X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M%5Cin+X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M&amp;#92;in X&quot; class=&quot;latex&quot; /&gt; such that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f%28x%29%3Dg%28M%28x%29%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f%28x%29%3Dg%28M%28x%29%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f%28x%29%3Dg%28M%28x%29%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f(x)=g(M(x))&quot; class=&quot;latex&quot; /&gt; for every &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-46003r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 4.1. &lt;/span&gt;Suppose that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; map reduces to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;g&quot; class=&quot;latex&quot; /&gt; in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=X&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;X&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;(1) Suppose &lt;img src=&quot;https://s0.wp.com/latex.php?latex=X%3D%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=X%3D%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=X%3D%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;X=&amp;#92;text {P}&quot; class=&quot;latex&quot; /&gt;. Show &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; reduces to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;g&quot; class=&quot;latex&quot; /&gt; in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BX%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BX%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BX%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {X}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;(2) Suppose &lt;img src=&quot;https://s0.wp.com/latex.php?latex=X%3D%5Cbigcup+_%7Bd%7D%5Ctext+%7BTime%7D%28d%5Ccdot+n%5E%7B2%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=X%3D%5Cbigcup+_%7Bd%7D%5Ctext+%7BTime%7D%28d%5Ccdot+n%5E%7B2%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=X%3D%5Cbigcup+_%7Bd%7D%5Ctext+%7BTime%7D%28d%5Ccdot+n%5E%7B2%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;X=&amp;#92;bigcup _{d}&amp;#92;text {Time}(d&amp;#92;cdot n^{2})&quot; class=&quot;latex&quot; /&gt;. Can you still show that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; reduces to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=g&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;g&quot; class=&quot;latex&quot; /&gt; in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BX%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BX%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BX%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {X}&quot; class=&quot;latex&quot; /&gt;?&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;Many reductions we shall see are not mapping reductions. In fact, our first example is not a mapping reduction.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;h3 class=&quot;sectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;4.2 &lt;/span&gt; &lt;a id=&quot;x1-470004.2&quot;&gt;&lt;/a&gt;Reductions&lt;/h3&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;h4 class=&quot;subsectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;4.2.1 &lt;/span&gt; &lt;a id=&quot;x1-480004.2.1&quot;&gt;&lt;/a&gt;Multiplication&lt;/h4&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;Summing two &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt;-bit integers is in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BCktGates%7D%28cn%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BCktGates%7D%28cn%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BCktGates%7D%28cn%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {CktGates}(cn)&quot; class=&quot;latex&quot; /&gt; (Exercise &lt;a href=&quot;#x1-25005r8&quot;&gt;2.8&lt;!--tex4ht:ref: xca:sum-ckt --&gt;&lt;/a&gt;). But the smallest circuit known for multiplication has &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cge+cn%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cge+cn%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cge+cn%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;ge cn&amp;#92;log n&quot; class=&quot;latex&quot; /&gt; gates &lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#X10.4007/annals.2021.193.2.4&quot;&gt;10&lt;/a&gt;]&lt;/span&gt;. (The same situation holds for MTMs; over RAMs and related models multiplication can be done in time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=cn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=cn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=cn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;cn&quot; class=&quot;latex&quot; /&gt; &lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;journals/siamcomp/Schonhage80&quot;&gt;21&lt;/a&gt;]&lt;/span&gt;.) It is a long-standing question whether we can multiply two &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt;-bit integers with a linear-size circuit.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;What about squaring integers? Is that harder or easier than multiplication? Obviously, if we can multiply two numbers we can also square a number: simply multiply it by itself. This is a trivial example of a reduction. What about the other way around? We can use a reduction established millennia ago by the Babylonians. They employed the equation&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+a%5Ccdot+b%3D%5Cfrac+%7B%28a%2Bb%29%5E%7B2%7D-%28a-b%29%5E%7B2%7D%7D%7B4%7D%7E%7E%7E%7E%284.1%29+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+a%5Ccdot+b%3D%5Cfrac+%7B%28a%2Bb%29%5E%7B2%7D-%28a-b%29%5E%7B2%7D%7D%7B4%7D%7E%7E%7E%7E%284.1%29+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+a%5Ccdot+b%3D%5Cfrac+%7B%28a%2Bb%29%5E%7B2%7D-%28a-b%29%5E%7B2%7D%7D%7B4%7D%7E%7E%7E%7E%284.1%29+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} a&amp;#92;cdot b=&amp;#92;frac {(a+b)^{2}-(a-b)^{2}}{4}~~~~(4.1) &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;to reduce multiplication to squaring, plus some easy operations like addition and division by four. In our terminology we have the following.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-48001r3&quot;&gt;&lt;/a&gt; &lt;b&gt;Definition&lt;/b&gt; 4.3. &lt;/span&gt;Multiplication is the problem of computing the product of two &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt;-bit integers. Squaring is the problem of computing the square of an &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt;-bit integer.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-48002r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 4.1. &lt;/span&gt;If Squaring has linear-size circuits then Multiplication has linear-size circuits.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;b&gt;Proof&lt;/b&gt;.&amp;nbsp;&lt;/span&gt;Suppose &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C&quot; class=&quot;latex&quot; /&gt; computes Squaring. Then we can multiply using equation&amp;nbsp;(??). Specifically, given &lt;img src=&quot;https://s0.wp.com/latex.php?latex=a&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=a&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=a&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;a&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b&quot; class=&quot;latex&quot; /&gt; we use Exercise &lt;a href=&quot;#x1-25005r8&quot;&gt;2.8&lt;!--tex4ht:ref: xca:sum-ckt --&gt;&lt;/a&gt; to compute &lt;img src=&quot;https://s0.wp.com/latex.php?latex=a%2Bb&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=a%2Bb&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=a%2Bb&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;a+b&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=a-b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=a-b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=a-b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;a-b&quot; class=&quot;latex&quot; /&gt;. (We haven’t seen subtraction or negative integers, but it’s similar to addition.) Then we run &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C&quot; class=&quot;latex&quot; /&gt; on both of them. Finally, we again use Exercise &lt;a href=&quot;#x1-25005r8&quot;&gt;2.8&lt;!--tex4ht:ref: xca:sum-ckt --&gt;&lt;/a&gt; for computing their difference. It remains to divide by four. In binary, this is accomplished by ignoring the last two bits – which costs nothing on a circuit. &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;h4 class=&quot;subsectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;4.2.2 &lt;/span&gt; &lt;a id=&quot;x1-490004.2.2&quot;&gt;&lt;/a&gt;3Sum&lt;/h4&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-49001r4&quot;&gt;&lt;/a&gt; &lt;b&gt;Definition&lt;/b&gt; 4.4. &lt;/span&gt; The &lt;img src=&quot;https://s0.wp.com/latex.php?latex=3%5Ctext+%7BSum%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=3%5Ctext+%7BSum%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=3%5Ctext+%7BSum%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;3&amp;#92;text {Sum}&quot; class=&quot;latex&quot; /&gt; problem: Given a list of integers, are there three integers that sum to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;0&quot; class=&quot;latex&quot; /&gt;?&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;It is easy to solve 3Sum in time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=cn%5E%7B2%7D%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=cn%5E%7B2%7D%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=cn%5E%7B2%7D%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;cn^{2}&amp;#92;log n&quot; class=&quot;latex&quot; /&gt; on a RAM. (We can first sort the integers then for each pair &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%28a%2Cb%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%28a%2Cb%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28a%2Cb%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;(a,b)&quot; class=&quot;latex&quot; /&gt; we can do a binary search to check if &lt;img src=&quot;https://s0.wp.com/latex.php?latex=-%28a%2Bb%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=-%28a%2Bb%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=-%28a%2Bb%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;-(a+b)&quot; class=&quot;latex&quot; /&gt; is also present.) The time can be improved &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%5E%7B2%7D%2F%5Clog+%5E%7Bc%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%5E%7B2%7D%2F%5Clog+%5E%7Bc%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%5E%7B2%7D%2F%5Clog+%5E%7Bc%7Dn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n^{2}/&amp;#92;log ^{c}n&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;3Sum is believed to require quadratic time.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-49002r5&quot;&gt;&lt;/a&gt; &lt;b&gt;Definition&lt;/b&gt; 4.5. &lt;/span&gt;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BSubquadraticTime%7D%3A%3D%5Cbigcup+_%7B%5Cepsilon+%3E0%7D%5Ctext+%7BTime%7D%28n%5E%7B2-%5Cepsilon+%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BSubquadraticTime%7D%3A%3D%5Cbigcup+_%7B%5Cepsilon+%3E0%7D%5Ctext+%7BTime%7D%28n%5E%7B2-%5Cepsilon+%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BSubquadraticTime%7D%3A%3D%5Cbigcup+_%7B%5Cepsilon+%3E0%7D%5Ctext+%7BTime%7D%28n%5E%7B2-%5Cepsilon+%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {SubquadraticTime}:=&amp;#92;bigcup _{&amp;#92;epsilon &amp;gt;0}&amp;#92;text {Time}(n^{2-&amp;#92;epsilon })&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-49003r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Conjecture&lt;/b&gt; 4.1. &lt;/span&gt;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7B3Sum%7D%5Cnot+%5Cin+%5Ctext+%7BSubquadraticTime%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7B3Sum%7D%5Cnot+%5Cin+%5Ctext+%7BSubquadraticTime%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7B3Sum%7D%5Cnot+%5Cin+%5Ctext+%7BSubquadraticTime%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {3Sum}&amp;#92;not &amp;#92;in &amp;#92;text {SubquadraticTime}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;One can reduce 3Sum to a number of other interesting problem to infer that, under Conjecture &lt;a href=&quot;#x1-49003r1&quot;&gt;4.1&lt;!--tex4ht:ref: conj:3sum --&gt;&lt;/a&gt;, those problems require quadratic time too.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-49004r6&quot;&gt;&lt;/a&gt; &lt;b&gt;Definition&lt;/b&gt; 4.6. &lt;/span&gt;The Collinearity problem: Given a list of points in the plane, are there three points on a line?&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-49005r2&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 4.2. &lt;/span&gt;&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#XGajentaanO95&quot;&gt;6&lt;/a&gt;]&lt;/span&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BCollinearity%7D%5Cin+%5Ctext+%7BSubquadraticTime%5Censuremath+%7B%5CRightarrow+%5Ctext+%7B3Sum%7D%5Cin+%5Ctext+%7BSubquadraticTime%7D%7D+%28i.e.%2C+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BCollinearity%7D%5Cin+%5Ctext+%7BSubquadraticTime%5Censuremath+%7B%5CRightarrow+%5Ctext+%7B3Sum%7D%5Cin+%5Ctext+%7BSubquadraticTime%7D%7D+%28i.e.%2C+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BCollinearity%7D%5Cin+%5Ctext+%7BSubquadraticTime%5Censuremath+%7B%5CRightarrow+%5Ctext+%7B3Sum%7D%5Cin+%5Ctext+%7BSubquadraticTime%7D%7D+%28i.e.%2C+%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {Collinearity}&amp;#92;in &amp;#92;text {SubquadraticTime&amp;#92;ensuremath {&amp;#92;Rightarrow &amp;#92;text {3Sum}&amp;#92;in &amp;#92;text {SubquadraticTime}} (i.e., }&quot; class=&quot;latex&quot; /&gt;Conjecture &lt;a href=&quot;#x1-49003r1&quot;&gt;4.1&lt;!--tex4ht:ref: conj:3sum --&gt;&lt;/a&gt; is false).&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;b&gt;Proof&lt;/b&gt;.&amp;nbsp;&lt;/span&gt;We map instance &lt;img src=&quot;https://s0.wp.com/latex.php?latex=a_%7B1%7D%2Ca_%7B2%7D%2C%5Cldots+%2Ca_%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=a_%7B1%7D%2Ca_%7B2%7D%2C%5Cldots+%2Ca_%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=a_%7B1%7D%2Ca_%7B2%7D%2C%5Cldots+%2Ca_%7Bn%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;a_{1},a_{2},&amp;#92;ldots ,a_{n}&quot; class=&quot;latex&quot; /&gt; of 3Sum to the points&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%28a_%7B1%7D%2Ca_%7B1%7D%5E%7B3%7D%29%2C%28a_%7B2%7D%2Ca_%7B2%7D%5E%7B3%7D%29%2C%5Cldots+%2C%28a_%7Bn%7D%2Ca_%7Bn%7D%5E%7B3%7D%29%2C+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%28a_%7B1%7D%2Ca_%7B1%7D%5E%7B3%7D%29%2C%28a_%7B2%7D%2Ca_%7B2%7D%5E%7B3%7D%29%2C%5Cldots+%2C%28a_%7Bn%7D%2Ca_%7Bn%7D%5E%7B3%7D%29%2C+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%28a_%7B1%7D%2Ca_%7B1%7D%5E%7B3%7D%29%2C%28a_%7B2%7D%2Ca_%7B2%7D%5E%7B3%7D%29%2C%5Cldots+%2C%28a_%7Bn%7D%2Ca_%7Bn%7D%5E%7B3%7D%29%2C+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} (a_{1},a_{1}^{3}),(a_{2},a_{2}^{3}),&amp;#92;ldots ,(a_{n},a_{n}^{3}), &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;and solve Collinearity on those points.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;To verify correctness, notice that points &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%28x%2Cx%5E%7B3%7D%29%2C%28y%2Cy%5E%7B3%7D%29%2C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%28x%2Cx%5E%7B3%7D%29%2C%28y%2Cy%5E%7B3%7D%29%2C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28x%2Cx%5E%7B3%7D%29%2C%28y%2Cy%5E%7B3%7D%29%2C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;(x,x^{3}),(y,y^{3}),&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%28z%2Cz%5E%7B3%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%28z%2Cz%5E%7B3%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28z%2Cz%5E%7B3%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;(z,z^{3})&quot; class=&quot;latex&quot; /&gt; are on a line iff&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cfrac+%7By%5E%7B3%7D-x%5E%7B3%7D%7D%7By-x%7D%3D%5Cfrac+%7Bz%5E%7B3%7D-x%5E%7B3%7D%7D%7Bz-x%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cfrac+%7By%5E%7B3%7D-x%5E%7B3%7D%7D%7By-x%7D%3D%5Cfrac+%7Bz%5E%7B3%7D-x%5E%7B3%7D%7D%7Bz-x%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cfrac+%7By%5E%7B3%7D-x%5E%7B3%7D%7D%7By-x%7D%3D%5Cfrac+%7Bz%5E%7B3%7D-x%5E%7B3%7D%7D%7Bz-x%7D.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} &amp;#92;frac {y^{3}-x^{3}}{y-x}=&amp;#92;frac {z^{3}-x^{3}}{z-x}. &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;Because &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y%5E%7B3%7D-x%5E%7B3%7D%3D%28y-x%29%28y%5E%7B2%7D%2Byx%2Bx%5E%7B2%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y%5E%7B3%7D-x%5E%7B3%7D%3D%28y-x%29%28y%5E%7B2%7D%2Byx%2Bx%5E%7B2%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y%5E%7B3%7D-x%5E%7B3%7D%3D%28y-x%29%28y%5E%7B2%7D%2Byx%2Bx%5E%7B2%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y^{3}-x^{3}=(y-x)(y^{2}+yx+x^{2})&quot; class=&quot;latex&quot; /&gt;, this condition is equivalent to&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+y%5E%7B2%7D%2Byx%2Bx%5E%7B2%7D%3Dz%5E%7B2%7D%2Bzx%2Bx%5E%7B2%7D%5CLeftrightarrow+%28x%2B%28y%2Bz%29%29%28y-z%29.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+y%5E%7B2%7D%2Byx%2Bx%5E%7B2%7D%3Dz%5E%7B2%7D%2Bzx%2Bx%5E%7B2%7D%5CLeftrightarrow+%28x%2B%28y%2Bz%29%29%28y-z%29.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+y%5E%7B2%7D%2Byx%2Bx%5E%7B2%7D%3Dz%5E%7B2%7D%2Bzx%2Bx%5E%7B2%7D%5CLeftrightarrow+%28x%2B%28y%2Bz%29%29%28y-z%29.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} y^{2}+yx+x^{2}=z^{2}+zx+x^{2}&amp;#92;Leftrightarrow (x+(y+z))(y-z). &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;Assuming &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y%5Cne+z&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y%5Cne+z&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y%5Cne+z&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y&amp;#92;ne z&quot; class=&quot;latex&quot; /&gt;, i.e., that the 3Sum instance consists of distinct numbers, this is equivalent to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x%2By%2Bz%3D0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x%2By%2Bz%3D0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x%2By%2Bz%3D0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x+y+z=0&quot; class=&quot;latex&quot; /&gt;, as desired. (The case where there can be duplicates is left as an exercise.)&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;Note that the Collinearity instance has length linear in the 3Sum instance, and the result follows. &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-49006r2&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 4.2. &lt;/span&gt;The Tripartite-3Sum problem: Given lists &lt;img src=&quot;https://s0.wp.com/latex.php?latex=A_%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=A_%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=A_%7B1%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;A_{1}&quot; class=&quot;latex&quot; /&gt;, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=A_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=A_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=A_%7B2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;A_{2}&quot; class=&quot;latex&quot; /&gt;, and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=A_%7B3%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=A_%7B3%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=A_%7B3%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;A_{3}&quot; class=&quot;latex&quot; /&gt; of numbers, are there &lt;img src=&quot;https://s0.wp.com/latex.php?latex=a_%7Bi%7D%5Cin+A_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=a_%7Bi%7D%5Cin+A_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=a_%7Bi%7D%5Cin+A_%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;a_{i}&amp;#92;in A_{i}&quot; class=&quot;latex&quot; /&gt; s.t.&amp;nbsp;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=a_%7B1%7D%2Ba_%7B2%7D%2Ba_%7B3%7D%3D0%3F&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=a_%7B1%7D%2Ba_%7B2%7D%2Ba_%7B3%7D%3D0%3F&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=a_%7B1%7D%2Ba_%7B2%7D%2Ba_%7B3%7D%3D0%3F&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;a_{1}+a_{2}+a_{3}=0?&quot; class=&quot;latex&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;Prove that Tripartite-3Sum is in subquadratic time iff 3Sum is.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;We now give a reduction in the other direction: We reduce a problem to 3Sum.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-49007r7&quot;&gt;&lt;/a&gt; &lt;b&gt;Definition&lt;/b&gt; 4.7. &lt;/span&gt;The 3Cycle-Detection problem: Given the adjacency list of a directed graph, is there a cycle of length 3?&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;This problem can be solved in time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%5E%7B2%5Comega+%2F%28%5Comega+%2B1%29%2Bo%281%29%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%5E%7B2%5Comega+%2F%28%5Comega+%2B1%29%2Bo%281%29%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%5E%7B2%5Comega+%2F%28%5Comega+%2B1%29%2Bo%281%29%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n^{2&amp;#92;omega /(&amp;#92;omega +1)+o(1)}&quot; class=&quot;latex&quot; /&gt; where &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Comega+%3C2.373&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Comega+%3C2.373&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Comega+%3C2.373&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;omega &amp;lt;2.373&quot; class=&quot;latex&quot; /&gt; is the exponent of matrix multiplication. If &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Comega+%3D2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Comega+%3D2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Comega+%3D2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;omega =2&quot; class=&quot;latex&quot; /&gt; then the bound is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n%5E%7B1.3%5Cbar+%7B3%7D%2Bo%281%29%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n%5E%7B1.3%5Cbar+%7B3%7D%2Bo%281%29%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n%5E%7B1.3%5Cbar+%7B3%7D%2Bo%281%29%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n^{1.3&amp;#92;bar {3}+o(1)}&quot; class=&quot;latex&quot; /&gt;. It is not known if any subquadratic algorithm for 3Sum would improve these bounds. However, we can show that an improvement follows if &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7B3Sum%7D%5Cin+%5Ctext+%7BTime%7D%28n%5E%7B1%2B%5Cepsilon%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7B3Sum%7D%5Cin+%5Ctext+%7BTime%7D%28n%5E%7B1%2B%5Cepsilon%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7B3Sum%7D%5Cin+%5Ctext+%7BTime%7D%28n%5E%7B1%2B%5Cepsilon%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {3Sum}&amp;#92;in &amp;#92;text {Time}(n^{1+&amp;#92;epsilon})&quot; class=&quot;latex&quot; /&gt; for a small enough &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cepsilon&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cepsilon&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cepsilon&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;epsilon&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-49008r3&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 4.3. &lt;/span&gt;&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#XViola-xxx&quot;&gt;26&lt;/a&gt;]&lt;/span&gt; &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7B3Sum%7D%5Cin+%5Ctext+%7BTime%7D%28t%28n%29%29%5CRightarrow+%5Ctext+%7B3Cycle-Detection%7D%5Cin+%5Ctext+%7BBPTime%7D%28ct%28n%29%29%2C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7B3Sum%7D%5Cin+%5Ctext+%7BTime%7D%28t%28n%29%29%5CRightarrow+%5Ctext+%7B3Cycle-Detection%7D%5Cin+%5Ctext+%7BBPTime%7D%28ct%28n%29%29%2C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7B3Sum%7D%5Cin+%5Ctext+%7BTime%7D%28t%28n%29%29%5CRightarrow+%5Ctext+%7B3Cycle-Detection%7D%5Cin+%5Ctext+%7BBPTime%7D%28ct%28n%29%29%2C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {3Sum}&amp;#92;in &amp;#92;text {Time}(t(n))&amp;#92;Rightarrow &amp;#92;text {3Cycle-Detection}&amp;#92;in &amp;#92;text {BPTime}(ct(n)),&quot; class=&quot;latex&quot; /&gt; for any &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t%28n%29%5Cge+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t%28n%29%5Cge+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t%28n%29%5Cge+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t(n)&amp;#92;ge n&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;The reduction can be derandomized (that is, one can replace &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BBPTime%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BBPTime%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BBPTime%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {BPTime}&quot; class=&quot;latex&quot; /&gt; with &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BTime%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BTime%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BTime%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {Time}&quot; class=&quot;latex&quot; /&gt; in the conclusion) but the randomized case contains the main ideas.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;b&gt;Proof&lt;/b&gt;.&amp;nbsp;&lt;/span&gt;We assign random numbers &lt;img src=&quot;https://s0.wp.com/latex.php?latex=r_%7Bx%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=r_%7Bx%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=r_%7Bx%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;r_{x}&quot; class=&quot;latex&quot; /&gt; with &lt;img src=&quot;https://s0.wp.com/latex.php?latex=4%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=4%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=4%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;4&amp;#92;log n&quot; class=&quot;latex&quot; /&gt; bits to each node &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt; in the graph. The 3Sum instance consists of the integers &lt;img src=&quot;https://s0.wp.com/latex.php?latex=r_%7Bx%7D-r_%7By%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=r_%7Bx%7D-r_%7By%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=r_%7Bx%7D-r_%7By%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;r_{x}-r_{y}&quot; class=&quot;latex&quot; /&gt; for every edge &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x%5Cto+y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x%5Cto+y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x%5Cto+y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&amp;#92;to y&quot; class=&quot;latex&quot; /&gt; in the graph.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;To verify correctness, suppose that there is a cycle&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+x%5Cto+y%5Cto+z%5Cto+x+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+x%5Cto+y%5Cto+z%5Cto+x+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+x%5Cto+y%5Cto+z%5Cto+x+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} x&amp;#92;to y&amp;#92;to z&amp;#92;to x &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;in the graph. Then we have &lt;img src=&quot;https://s0.wp.com/latex.php?latex=r_%7Bx%7D-r_%7By%7D%2Br_%7By%7D-r_%7Bz%7D%2Br_%7Bz%7D-r_%7Bx%7D%3D0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=r_%7Bx%7D-r_%7By%7D%2Br_%7By%7D-r_%7Bz%7D%2Br_%7Bz%7D-r_%7Bx%7D%3D0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=r_%7Bx%7D-r_%7By%7D%2Br_%7By%7D-r_%7Bz%7D%2Br_%7Bz%7D-r_%7Bx%7D%3D0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;r_{x}-r_{y}+r_{y}-r_{z}+r_{z}-r_{x}=0&quot; class=&quot;latex&quot; /&gt;, for any random choices.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;Conversely, suppose there is no cycle, and consider any three numbers &lt;img src=&quot;https://s0.wp.com/latex.php?latex=r_%7Bx1%7D-r_%7By1%7D%2Cr_%7Bx2%7D-r_%7By2%7D%2Cr_%7Bx3%7D-r_%7By3%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=r_%7Bx1%7D-r_%7By1%7D%2Cr_%7Bx2%7D-r_%7By2%7D%2Cr_%7Bx3%7D-r_%7By3%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=r_%7Bx1%7D-r_%7By1%7D%2Cr_%7Bx2%7D-r_%7By2%7D%2Cr_%7Bx3%7D-r_%7By3%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;r_{x1}-r_{y1},r_{x2}-r_{y2},r_{x3}-r_{y3}&quot; class=&quot;latex&quot; /&gt; from the reduction and its corresponding edges. Some node &lt;img src=&quot;https://s0.wp.com/latex.php?latex=xi&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=xi&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=xi&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;xi&quot; class=&quot;latex&quot; /&gt; has unequal in-degree and out-degree in those edges. This means that when summing the three numbers, the random variable &lt;img src=&quot;https://s0.wp.com/latex.php?latex=r_%7Bxi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=r_%7Bxi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=r_%7Bxi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;r_{xi}&quot; class=&quot;latex&quot; /&gt; will not cancel out. When selecting uniform values for that variable, the probability of getting &lt;img src=&quot;https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;0&quot; class=&quot;latex&quot; /&gt; is at most &lt;img src=&quot;https://s0.wp.com/latex.php?latex=1%2Fn%5E%7B4%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=1%2Fn%5E%7B4%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=1%2Fn%5E%7B4%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;1/n^{4}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;By a union bound, the probability there there are three numbers that sum to zero is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+n%5E%7B3%7D%2Fn%5E%7B4%7D%3C1%2F3.&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+n%5E%7B3%7D%2Fn%5E%7B4%7D%3C1%2F3.&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+n%5E%7B3%7D%2Fn%5E%7B4%7D%3C1%2F3.&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le n^{3}/n^{4}&amp;lt;1/3.&quot; class=&quot;latex&quot; /&gt; &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-49009r3&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 4.3. &lt;/span&gt;Prove an analogous result for undirected graphs. Note TBD: This exercise should be more interesting for 4-cycles, because you can’t just duplicate edges, I think.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;Many other clusters of problems exist, for example based on matrix multiplication or all-pairs shortest path.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;h3 class=&quot;sectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;4.3 &lt;/span&gt; &lt;a id=&quot;x1-500004.3&quot;&gt;&lt;/a&gt;Reductions from 3Sat&lt;/h3&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;In this section we begin to explore an important cluster of problems not known to be in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {BPP}&quot; class=&quot;latex&quot; /&gt;. What’s special about these problems is that in Chapter ?? we will show that we can reduce &lt;em&gt;arbitrary computation&lt;/em&gt; to them, while this is unknown for the problems in the previous section.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;Perhaps the most basic problem in the cluster is the following.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-50001r8&quot;&gt;&lt;/a&gt; &lt;b&gt;Definition&lt;/b&gt; 4.8. &lt;/span&gt;The 3Sat problem: Given a 3CNF &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;phi &quot; class=&quot;latex&quot; /&gt;, is there an assignment &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt; s.t.&amp;nbsp;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cphi+%28x%29%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cphi+%28x%29%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cphi+%28x%29%3D1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;phi (x)=1&quot; class=&quot;latex&quot; /&gt;?&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-50002r2&quot;&gt;&lt;/a&gt; &lt;b&gt;Conjecture&lt;/b&gt; 4.2. &lt;/span&gt;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7B3Sat%5Censuremath+%7B%5Cnot+%7D%5Censuremath+%7B%5Censuremath+%7B%5Cin+%5Ctext+%7BP%7D%7D%7D.%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7B3Sat%5Censuremath+%7B%5Cnot+%7D%5Censuremath+%7B%5Censuremath+%7B%5Cin+%5Ctext+%7BP%7D%7D%7D.%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7B3Sat%5Censuremath+%7B%5Cnot+%7D%5Censuremath+%7B%5Censuremath+%7B%5Cin+%5Ctext+%7BP%7D%7D%7D.%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {3Sat&amp;#92;ensuremath {&amp;#92;not }&amp;#92;ensuremath {&amp;#92;ensuremath {&amp;#92;in &amp;#92;text {P}}}.}&quot; class=&quot;latex&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;Stronger conjectures have been made.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-50003r3&quot;&gt;&lt;/a&gt; &lt;b&gt;Conjecture&lt;/b&gt; 4.3. &lt;/span&gt;&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#XIP99&quot;&gt;13&lt;/a&gt;]&lt;/span&gt; [Exponential time hypothesis (ETH)] There is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cepsilon%3E0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cepsilon%3E0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cepsilon%3E0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;epsilon&amp;gt;0&quot; class=&quot;latex&quot; /&gt; such that there is no algorithm that on input a &lt;img src=&quot;https://s0.wp.com/latex.php?latex=3&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=3&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=3&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;3&quot; class=&quot;latex&quot; /&gt;CNF &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;phi &quot; class=&quot;latex&quot; /&gt; with &lt;img src=&quot;https://s0.wp.com/latex.php?latex=v&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=v&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=v&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;v&quot; class=&quot;latex&quot; /&gt; variables and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=cv%5E%7B3%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=cv%5E%7B3%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=cv%5E%7B3%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;cv^{3}&quot; class=&quot;latex&quot; /&gt; clauses decides if &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;phi &quot; class=&quot;latex&quot; /&gt; is satisfiable in time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=2%5E%7B%28%5Cepsilon+%2Bo%281%29%29v%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=2%5E%7B%28%5Cepsilon+%2Bo%281%29%29v%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=2%5E%7B%28%5Cepsilon+%2Bo%281%29%29v%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;2^{(&amp;#92;epsilon +o(1))v}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-50004r4&quot;&gt;&lt;/a&gt; &lt;b&gt;Conjecture&lt;/b&gt; 4.4. &lt;/span&gt;&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#XIPZ01&quot;&gt;14&lt;/a&gt;]&lt;/span&gt; [Strong exponential-time hypothesis (SETH)] For every &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cepsilon+%3E0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cepsilon+%3E0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cepsilon+%3E0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;epsilon &amp;gt;0&quot; class=&quot;latex&quot; /&gt; there is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;k&quot; class=&quot;latex&quot; /&gt; such that there is no algorithm that on input a &lt;img src=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;k&quot; class=&quot;latex&quot; /&gt;CNF &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;phi &quot; class=&quot;latex&quot; /&gt; with &lt;img src=&quot;https://s0.wp.com/latex.php?latex=v&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=v&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=v&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;v&quot; class=&quot;latex&quot; /&gt; variables and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=cv%5E%7Bk%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=cv%5E%7Bk%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=cv%5E%7Bk%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;cv^{k}&quot; class=&quot;latex&quot; /&gt; clauses decides if &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;phi &quot; class=&quot;latex&quot; /&gt; is satisfiable in time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=2%5E%7B%281-%5Cepsilon+%2Bo%281%29%29v%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=2%5E%7B%281-%5Cepsilon+%2Bo%281%29%29v%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=2%5E%7B%281-%5Cepsilon+%2Bo%281%29%29v%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;2^{(1-&amp;#92;epsilon +o(1))v}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;It is known that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BSETH%7D%5CRightarrow+%5Ctext+%7BETH%7D%2C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BSETH%7D%5CRightarrow+%5Ctext+%7BETH%7D%2C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BSETH%7D%5CRightarrow+%5Ctext+%7BETH%7D%2C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {SETH}&amp;#92;Rightarrow &amp;#92;text {ETH},&quot; class=&quot;latex&quot; /&gt; but the proof is not immediate.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;We now give reductions from 3Sat to several other problems. The reductions are in fact mapping reductions. Moreover, the reduction map can be extremely restricted, see Problem &lt;a href=&quot;#x1-55004r4&quot;&gt;4.4&lt;!--tex4ht:ref: prob:reducing-the-complexity-of-reductions --&gt;&lt;/a&gt;. In this sense, therefore, this reduction can be viewed as a direct translation of the problem, and maybe we shouldn’t really be thinking of the problems as different, even if they at first sight refer to different types of objects (formulas, graphs, numbers, etc.).&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;b&gt;Watch videos 29, 30, 31, and 32 &lt;/b&gt;covering reductions: 3SAT to CLIQUE, CLIQUE to VERTEX-COVER, 3SAT to SUBSET-SUM, 3SAT to 3COLOR &lt;b&gt;from &lt;a href=&quot;https://www.ccs.neu.edu/home/viola/classes/algm-generic.html&quot; rel=&quot;nofollow&quot;&gt;https://www.ccs.neu.edu/home/viola/classes/algm-generic.html&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;Note: The videos use the terminology “polynomial time” instead of “power time” here.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-50005r4&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 4.4. &lt;/span&gt;The problem System is defined as follows. A &lt;em&gt;linear inequality&lt;/em&gt; is an inequality involving sums of variables and constants, such as &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x%2By%5Cge+z&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x%2By%5Cge+z&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x%2By%5Cge+z&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x+y&amp;#92;ge z&quot; class=&quot;latex&quot; /&gt;, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x%5Cle+-17&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x%5Cle+-17&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x%5Cle+-17&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&amp;#92;le -17&quot; class=&quot;latex&quot; /&gt;, and so on. A system of linear inequalities has an &lt;em&gt;integer&lt;/em&gt; solution if it is possible to substitute integer values for the variables so that every inequality in the system becomes true. The language System consists of systems of linear inequalities that have an integer solution. For example,&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%28x%2By%5Cge+z%2Cx%5Cle+5%2Cy%5Cle+1%2Cz%5Cge+5%29%5Cin+%5Cmbox+%7BSystem+%7D%5C%5C+%28x%2By%5Cge+2z%2Cx%5Cle+5%2Cy%5Cle+1%2Cz%5Cge+5%29%5Cnot+%5Cin+%5Cmbox+%7BSystem+%7D+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%28x%2By%5Cge+z%2Cx%5Cle+5%2Cy%5Cle+1%2Cz%5Cge+5%29%5Cin+%5Cmbox+%7BSystem+%7D%5C%5C+%28x%2By%5Cge+2z%2Cx%5Cle+5%2Cy%5Cle+1%2Cz%5Cge+5%29%5Cnot+%5Cin+%5Cmbox+%7BSystem+%7D+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%28x%2By%5Cge+z%2Cx%5Cle+5%2Cy%5Cle+1%2Cz%5Cge+5%29%5Cin+%5Cmbox+%7BSystem+%7D%5C%5C+%28x%2By%5Cge+2z%2Cx%5Cle+5%2Cy%5Cle+1%2Cz%5Cge+5%29%5Cnot+%5Cin+%5Cmbox+%7BSystem+%7D+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} (x+y&amp;#92;ge z,x&amp;#92;le 5,y&amp;#92;le 1,z&amp;#92;ge 5)&amp;#92;in &amp;#92;mbox {System }&amp;#92;&amp;#92; (x+y&amp;#92;ge 2z,x&amp;#92;le 5,y&amp;#92;le 1,z&amp;#92;ge 5)&amp;#92;not &amp;#92;in &amp;#92;mbox {System } &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;Reduce 3Sat to System in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {P}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-50006r5&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 4.5. &lt;/span&gt;For an integer &lt;img src=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;k&quot; class=&quot;latex&quot; /&gt;, &lt;img src=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;k&quot; class=&quot;latex&quot; /&gt;-Color is the problem of deciding if the nodes of a given undirected graph &lt;img src=&quot;https://s0.wp.com/latex.php?latex=G&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=G&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=G&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;G&quot; class=&quot;latex&quot; /&gt; can be colored using &lt;img src=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;k&quot; class=&quot;latex&quot; /&gt; colors in such a way that no two adjacent vertices have the same color.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;Reduce 3-Color to 4-Color P.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;Reductions in the opposite directions are possible, and so in fact the problems in this section are &lt;em&gt;power-time equivalent&lt;/em&gt; in the sense that any of the problems is in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {P}&quot; class=&quot;latex&quot; /&gt; iff all the others are. We will see a generic reduction in the next chapter. For now, we illustrate this equivalence in a particular case.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-50007r6&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 4.6. &lt;/span&gt;Reduce 3Color to 3Sat in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {P}&quot; class=&quot;latex&quot; /&gt;, following these steps:&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;1. Given a graph &lt;img src=&quot;https://s0.wp.com/latex.php?latex=G&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=G&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=G&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;G&quot; class=&quot;latex&quot; /&gt;, introduce variables &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x_%7Bi%2Cc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x_%7Bi%2Cc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x_%7Bi%2Cc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x_{i,c}&quot; class=&quot;latex&quot; /&gt; representing that node &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&quot; class=&quot;latex&quot; /&gt; has color &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c&quot; class=&quot;latex&quot; /&gt;, where &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c&quot; class=&quot;latex&quot; /&gt; ranges in the set of colors &lt;img src=&quot;https://s0.wp.com/latex.php?latex=C%3D%5C%7Bg%2Cr%2Cb%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=C%3D%5C%7Bg%2Cr%2Cb%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=C%3D%5C%7Bg%2Cr%2Cb%5C%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;C=&amp;#92;{g,r,b&amp;#92;}&quot; class=&quot;latex&quot; /&gt;. Describe a set of clauses that is satisfiable if and only if for every &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&quot; class=&quot;latex&quot; /&gt; there is exactly one &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c%5Cin+C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c%5Cin+C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c%5Cin+C&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c&amp;#92;in C&quot; class=&quot;latex&quot; /&gt; such that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x_%7Bi%2Cc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x_%7Bi%2Cc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x_%7Bi%2Cc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x_{i,c}&quot; class=&quot;latex&quot; /&gt; is true.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;2. Introduce clauses representing that adjacent nodes do not have the same color.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;3. Briefly conclude the proof.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;Thus, we are identifying a cluster of problems which are all power-time equivalent. This cluster is so prominent that problems in it have been compiled into books &lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#XGareyJ79&quot;&gt;7&lt;/a&gt;]&lt;/span&gt;. More recently, it was shown that it contains (generalized versions of) several games including: Tetris, Lemmings, Sudoku, etc. For a list see e.g.&amp;nbsp;the wikipedia page &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_NP-complete_problems&quot; rel=&quot;nofollow&quot;&gt;https://en.wikipedia.org/wiki/List_of_NP-complete_problems&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;h3 class=&quot;sectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;4.4 &lt;/span&gt; &lt;a id=&quot;x1-510004.4&quot;&gt;&lt;/a&gt;Power hardness from SETH&lt;/h3&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;In this section we show that a conjecture similar to Conjecture &lt;a href=&quot;#x1-49003r1&quot;&gt;4.1&lt;!--tex4ht:ref: conj:3sum --&gt;&lt;/a&gt; can be proved assuming SETH. This is an interesting example of how we can connect different parameter regimes, since SETH is stated in terms of exponential running times. In general, “scaling” parameters is a powerful technique in the complexity toolkit.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-51001r9&quot;&gt;&lt;/a&gt; &lt;b&gt;Definition&lt;/b&gt; 4.9. &lt;/span&gt;The Or-Vector problem: Given two sets &lt;img src=&quot;https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;A&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B&quot; class=&quot;latex&quot; /&gt; of strings of the same length, determine if there is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=a%5Cin+A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=a%5Cin+A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=a%5Cin+A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;a&amp;#92;in A&quot; class=&quot;latex&quot; /&gt; and &lt;img src=&quot;https://s0.wp.com/latex.php?latex=b%5Cin+B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=b%5Cin+B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=b%5Cin+B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;b&amp;#92;in B&quot; class=&quot;latex&quot; /&gt; such that the bit-wise Or &lt;img src=&quot;https://s0.wp.com/latex.php?latex=a%5Cvee+b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=a%5Cvee+b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=a%5Cvee+b&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;a&amp;#92;vee b&quot; class=&quot;latex&quot; /&gt; equals the all-one vector.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;The Or-Vector problem is in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BTime%7D%28n%5E%7B2%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BTime%7D%28n%5E%7B2%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BTime%7D%28n%5E%7B2%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {Time}(n^{2})&quot; class=&quot;latex&quot; /&gt;. We can show that a substantial improvement would disprove SETH.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-51002r4&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 4.4. &lt;/span&gt;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BOr-Vector%7D%5Cin+%5Ctext+%7BSubquadraticTime%7D%5CRightarrow+%5Ctext+%7BSETH+is+false.%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BOr-Vector%7D%5Cin+%5Ctext+%7BSubquadraticTime%7D%5CRightarrow+%5Ctext+%7BSETH+is+false.%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BOr-Vector%7D%5Cin+%5Ctext+%7BSubquadraticTime%7D%5CRightarrow+%5Ctext+%7BSETH+is+false.%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {Or-Vector}&amp;#92;in &amp;#92;text {SubquadraticTime}&amp;#92;Rightarrow &amp;#92;text {SETH is false.}&quot; class=&quot;latex&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;b&gt;Proof&lt;/b&gt;.&amp;nbsp;&lt;/span&gt;Divide the variables in two blocks of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=v%2F2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=v%2F2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=v%2F2&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;v/2&quot; class=&quot;latex&quot; /&gt; each. For each assignment to the variables in the first block construct the vector in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5C%7B0%2C1%5C%7D+%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;{0,1&amp;#92;} ^{d}&quot; class=&quot;latex&quot; /&gt; where bit &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&quot; class=&quot;latex&quot; /&gt; is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;1&quot; class=&quot;latex&quot; /&gt; iff clause &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&quot; class=&quot;latex&quot; /&gt; is satisfied by the variables in the first block. Call &lt;img src=&quot;https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=A&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;A&quot; class=&quot;latex&quot; /&gt; the resulting set of vectors. Let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=N%3A%3D2%5E%7Bv%2F2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=N%3A%3D2%5E%7Bv%2F2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=N%3A%3D2%5E%7Bv%2F2%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;N:=2^{v/2}&quot; class=&quot;latex&quot; /&gt; and note &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7CA%7C%3DN&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7CA%7C%3DN&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7CA%7C%3DN&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;|A|=N&quot; class=&quot;latex&quot; /&gt;. Do the same for the other block and call the resulting set &lt;img src=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;B&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;Note that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cphi+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;phi &quot; class=&quot;latex&quot; /&gt; is satisfiable iff &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cexists+a%5Cin+A%2Cb%5Cin+B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cexists+a%5Cin+A%2Cb%5Cin+B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cexists+a%5Cin+A%2Cb%5Cin+B&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;exists a&amp;#92;in A,b&amp;#92;in B&quot; class=&quot;latex&quot; /&gt; such that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=a%5Cvee+b%3D1%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=a%5Cvee+b%3D1%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=a%5Cvee+b%3D1%5E%7Bd%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;a&amp;#92;vee b=1^{d}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;Constructing these sets takes time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=Nd%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=Nd%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=Nd%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;Nd^{c}&quot; class=&quot;latex&quot; /&gt;. If &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BOr-Vector%7D%5Cin+%5Ctext+%7BTime%7D%28n%5E%7B2-%5Cepsilon+%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BOr-Vector%7D%5Cin+%5Ctext+%7BTime%7D%28n%5E%7B2-%5Cepsilon+%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BOr-Vector%7D%5Cin+%5Ctext+%7BTime%7D%28n%5E%7B2-%5Cepsilon+%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {Or-Vector}&amp;#92;in &amp;#92;text {Time}(n^{2-&amp;#92;epsilon })&quot; class=&quot;latex&quot; /&gt; for some &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cepsilon+%3E0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cepsilon+%3E0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cepsilon+%3E0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;epsilon &amp;gt;0&quot; class=&quot;latex&quot; /&gt;, we can take &lt;img src=&quot;https://s0.wp.com/latex.php?latex=k%3Dc_%7B%5Cepsilon%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=k%3Dc_%7B%5Cepsilon%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=k%3Dc_%7B%5Cepsilon%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;k=c_{&amp;#92;epsilon}&quot; class=&quot;latex&quot; /&gt; and rule out SETH. &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;Tight hardness results based on SETH have been established for several well-studied problems, including longest-common subsequence &lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;conf/focs/AbboudBW15&quot;&gt;1&lt;/a&gt;]&lt;/span&gt; and edit distance &lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;journals/siamcomp/BackursI18&quot;&gt;5&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;h3 class=&quot;sectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;4.5 &lt;/span&gt; &lt;a id=&quot;x1-520004.5&quot;&gt;&lt;/a&gt;Search problems&lt;/h3&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;Most of the problems in the previous sections ask about the &lt;em&gt;existence&lt;/em&gt; of solutions. For example 3Sat asks about the existence of a satisfying assignment. It is natural to ask about computing such a solution, if it exists. Such non-boolean problems are known as &lt;em&gt;search problems&lt;/em&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;Next we show that in some cases we can reduce a search problem to the corresponding boolean problem.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-52001r10&quot;&gt;&lt;/a&gt; &lt;b&gt;Definition&lt;/b&gt; 4.10. &lt;/span&gt;Search-3Sat is the problem: Given a satisfiable 3CNF formula, output a satisfying assignment.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-52002r5&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 4.5. &lt;/span&gt; Search-3Sat reduces to 3Sat in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {P}&quot; class=&quot;latex&quot; /&gt;. That is: &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7B3Sat%7D%5Cin+%5Ctext+%7BP%7D%5CRightarrow+%5Ctext+%7BSearch-3Sat%7D%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7B3Sat%7D%5Cin+%5Ctext+%7BP%7D%5CRightarrow+%5Ctext+%7BSearch-3Sat%7D%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7B3Sat%7D%5Cin+%5Ctext+%7BP%7D%5CRightarrow+%5Ctext+%7BSearch-3Sat%7D%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {3Sat}&amp;#92;in &amp;#92;text {P}&amp;#92;Rightarrow &amp;#92;text {Search-3Sat}&amp;#92;in &amp;#92;text {P}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;b&gt;Proof&lt;/b&gt;.&amp;nbsp;&lt;/span&gt;We construct a satisfying assignment one variable at the time. Given a satisfiable 3CNF, set the first variable to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=0&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;0&quot; class=&quot;latex&quot; /&gt; and check if it is still satisfiable with the assumed algorithm for 3Sat. If it is, go to the next variable. If it is not, set the first variable to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;1&quot; class=&quot;latex&quot; /&gt; and go to the next variable. &lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-52003r7&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 4.7. &lt;/span&gt;Show &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BClique%7D%5Cin+%5Ctext+%7BP%7D%5CRightarrow+%5Ctext+%7BSearch-Clique%7D%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BClique%7D%5Cin+%5Ctext+%7BP%7D%5CRightarrow+%5Ctext+%7BSearch-Clique%7D%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BClique%7D%5Cin+%5Ctext+%7BP%7D%5CRightarrow+%5Ctext+%7BSearch-Clique%7D%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {Clique}&amp;#92;in &amp;#92;text {P}&amp;#92;Rightarrow &amp;#92;text {Search-Clique}&amp;#92;in &amp;#92;text {P}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;h4 class=&quot;subsectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;4.5.1 &lt;/span&gt; &lt;a id=&quot;x1-530004.5.1&quot;&gt;&lt;/a&gt;Fastest algorithm for Search-3Sat&lt;/h4&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;A curious fact about many search problems is that we know of an algorithm which is, in an asymptotic sense to be discussed now, essentially the fastest possible algorithm. This algorithm proceeds by simulating every possible program. When a program stops and outputs the answer, we can &lt;em&gt;check it&lt;/em&gt; efficiently. Naturally, we can’t just take any program and simulate it until it ends, since it may never end. So we will clock programs, and stop them if they take too long. There is a particular simulation schedule which leads to efficient running times.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-53001r6&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 4.6. &lt;/span&gt; &lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#XLevin73&quot;&gt;17&lt;/a&gt;]&lt;/span&gt; There is a RAM &lt;img src=&quot;https://s0.wp.com/latex.php?latex=U&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=U&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=U&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;U&quot; class=&quot;latex&quot; /&gt; such that on input any satisfiable formula &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt;:&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;(1) &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M&quot; class=&quot;latex&quot; /&gt; outputs a satisfying assignment, and&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;(2) If there is a RAM &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M&quot; class=&quot;latex&quot; /&gt; that on input &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt; outputs a satisfying assignment for &lt;img src=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=x&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;x&quot; class=&quot;latex&quot; /&gt; in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt; steps then &lt;img src=&quot;https://s0.wp.com/latex.php?latex=U&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=U&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=U&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;U&quot; class=&quot;latex&quot; /&gt; stops in &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c_%7BM%7Dt%2B%7Cx%7C%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c_%7BM%7Dt%2B%7Cx%7C%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c_%7BM%7Dt%2B%7Cx%7C%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c_{M}t+|x|^{c}&quot; class=&quot;latex&quot; /&gt; steps.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;We are taking advantage of the RAM model. On other models it is not known if the dependence on &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt; can be linear.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;div class=&quot;proof&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;b&gt;Proof&lt;/b&gt;.&amp;nbsp;&lt;/span&gt;For &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i%3D1%2C2%2C%5Cldots+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i%3D1%2C2%2C%5Cldots+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i%3D1%2C2%2C%5Cldots+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i=1,2,&amp;#92;ldots &quot; class=&quot;latex&quot; /&gt; the RAM &lt;img src=&quot;https://s0.wp.com/latex.php?latex=U&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=U&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=U&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;U&quot; class=&quot;latex&quot; /&gt; simulates RAM &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&quot; class=&quot;latex&quot; /&gt; for &lt;img src=&quot;https://s0.wp.com/latex.php?latex=2%5E%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=2%5E%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=2%5E%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;2^{i}&quot; class=&quot;latex&quot; /&gt; steps. &lt;a href=&quot;#x1-26006r2&quot;&gt;2.2&lt;!--tex4ht:ref: lem-univ-ram --&gt;&lt;/a&gt; guarantees that for each &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&quot; class=&quot;latex&quot; /&gt; the simulation takes time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c2%5E%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c2%5E%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c2%5E%7Bi%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c2^{i}&quot; class=&quot;latex&quot; /&gt;. If RAM &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&quot; class=&quot;latex&quot; /&gt; stops and outputs &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y&quot; class=&quot;latex&quot; /&gt;, then &lt;img src=&quot;https://s0.wp.com/latex.php?latex=U&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=U&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=U&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;U&quot; class=&quot;latex&quot; /&gt; checks in time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7Cx%7C%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7Cx%7C%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7Cx%7C%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;|x|^{c}&quot; class=&quot;latex&quot; /&gt; if &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y&quot; class=&quot;latex&quot; /&gt; is a satisfying assignment. If it is, then &lt;img src=&quot;https://s0.wp.com/latex.php?latex=U&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=U&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=U&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;U&quot; class=&quot;latex&quot; /&gt; outputs &lt;img src=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=y&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;y&quot; class=&quot;latex&quot; /&gt; and stops. Otherwise it continues.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;Now let &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M&quot; class=&quot;latex&quot; /&gt; be as in (2). As before, we work with an enumeration of programs where each program appears infinitely often. Hence we can assume that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=M&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;M&quot; class=&quot;latex&quot; /&gt; has a description of length &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cell+%3A%3Dc_%7BM%7D%2B%5Clog+t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cell+%3A%3Dc_%7BM%7D%2B%5Clog+t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cell+%3A%3Dc_%7BM%7D%2B%5Clog+t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;ell :=c_{M}+&amp;#92;log t&quot; class=&quot;latex&quot; /&gt;. Thus the simulation will terminate when &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i%3D%5Cell+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i%3D%5Cell+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i%3D%5Cell+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i=&amp;#92;ell &quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;The time spent by &lt;img src=&quot;https://s0.wp.com/latex.php?latex=U&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=U&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=U&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;U&quot; class=&quot;latex&quot; /&gt; for a fixed &lt;img src=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=i&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;i&quot; class=&quot;latex&quot; /&gt; is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cle+c%5Ccdot+2%5E%7Bi%7D%2B%7Cx%7C%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cle+c%5Ccdot+2%5E%7Bi%7D%2B%7Cx%7C%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cle+c%5Ccdot+2%5E%7Bi%7D%2B%7Cx%7C%5E%7Bc%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;le c&amp;#92;cdot 2^{i}+|x|^{c}&quot; class=&quot;latex&quot; /&gt;. Hence he total running time of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=U&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=U&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=U&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;U&quot; class=&quot;latex&quot; /&gt; is&lt;/p&gt;
&lt;div style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cle+c%5Csum+_%7Bj%3D1%7D%5E%7B%5Cell+%7D%5Cleft+%28c2%5E%7Bj%7D%2B%7Cx%7C%5E%7Bc%7D%5Cright+%29%5Cle+c_%7BM%7D2%5E%7B%5Cell+%7D%2Bc_%7BM%7D%7Cx%7C%5E%7Bc%7D%5Cle+c_%7BM%7D%28t%2B%7Cx%7C%5E%7Bc%7D%29.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cle+c%5Csum+_%7Bj%3D1%7D%5E%7B%5Cell+%7D%5Cleft+%28c2%5E%7Bj%7D%2B%7Cx%7C%5E%7Bc%7D%5Cright+%29%5Cle+c_%7BM%7D2%5E%7B%5Cell+%7D%2Bc_%7BM%7D%7Cx%7C%5E%7Bc%7D%5Cle+c_%7BM%7D%28t%2B%7Cx%7C%5E%7Bc%7D%29.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbegin%7Baligned%7D+%5Cle+c%5Csum+_%7Bj%3D1%7D%5E%7B%5Cell+%7D%5Cleft+%28c2%5E%7Bj%7D%2B%7Cx%7C%5E%7Bc%7D%5Cright+%29%5Cle+c_%7BM%7D2%5E%7B%5Cell+%7D%2Bc_%7BM%7D%7Cx%7C%5E%7Bc%7D%5Cle+c_%7BM%7D%28t%2B%7Cx%7C%5E%7Bc%7D%29.+%5Cend%7Baligned%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;begin{aligned} &amp;#92;le c&amp;#92;sum _{j=1}^{&amp;#92;ell }&amp;#92;left (c2^{j}+|x|^{c}&amp;#92;right )&amp;#92;le c_{M}2^{&amp;#92;ell }+c_{M}|x|^{c}&amp;#92;le c_{M}(t+|x|^{c}). &amp;#92;end{aligned}&quot; class=&quot;latex&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&lt;b&gt;QED&lt;/b&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;This result nicely illustrates how “constant factors” can lead to impractical results because, of course, the problem is that the constant in front of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt; is enormous. Specifically, it is exponential in the size of the program, see Problem &lt;a href=&quot;#x1-55005r5&quot;&gt;4.5&lt;!--tex4ht:ref: prob:universal-search-program-enumeration-bottleneck --&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;h3 class=&quot;sectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;4.6 &lt;/span&gt; &lt;a id=&quot;x1-540004.6&quot;&gt;&lt;/a&gt;Gap-SAT: The PCP theorem&lt;/h3&gt;
&lt;table class=&quot;quotation&quot; cellspacing=&quot;15&quot; cellpadding=&quot;0&quot; border=&quot;0&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;div class=&quot;quotation&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;“Furthermore, most problem reductions do not create or preserve such gaps. There would appear to be a last resort, namely to &lt;em&gt;create &lt;/em&gt;such a gap in the generic reduction [C]. Unfortunately, this also seems doubtful. The intuitive reason is that computation is an inherently unstable, non-robust mathematical object, in the sense that it can be turned from non-accepting by changes that would be insignificant in any reasonable metric – say, by flipping a single state to accepting.” &lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;journals/jcss/PapadimitriouY91&quot;&gt;19&lt;/a&gt;]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;One of the most exciting, consequential, and technical developments in complexity theory of the last few decades has been the development of reductions that create &lt;em&gt;gaps.&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-54001r11&quot;&gt;&lt;/a&gt; &lt;b&gt;Definition&lt;/b&gt; 4.11. &lt;/span&gt;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cgamma+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cgamma+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cgamma+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;gamma &quot; class=&quot;latex&quot; /&gt;-Gap-3Sat is the 3Sat problem restricted to input formulas &lt;img src=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=f&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;f&quot; class=&quot;latex&quot; /&gt; that are either satisfiable or such that any assignment satisfies at most a &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cgamma+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cgamma+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cgamma+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;gamma &quot; class=&quot;latex&quot; /&gt; fraction of clauses.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;Note that 3Sat is equivalent to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cgamma+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cgamma+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cgamma+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;gamma &quot; class=&quot;latex&quot; /&gt;-Gap-3Sat for &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cgamma+%3D1-1%2Fn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cgamma+%3D1-1%2Fn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cgamma+%3D1-1%2Fn&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;gamma =1-1/n&quot; class=&quot;latex&quot; /&gt;, since a formula of size &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt; has at most &lt;img src=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;n&quot; class=&quot;latex&quot; /&gt; clauses. At first sight it is unclear how to connect the problems when &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cgamma+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cgamma+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cgamma+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;gamma &quot; class=&quot;latex&quot; /&gt; is much smaller. But in fact it is possible to obtain a constant &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cgamma+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cgamma+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cgamma+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;gamma &quot; class=&quot;latex&quot; /&gt;. This result is known as the PCP theorem, where PCP stands for probabilistically-checkable-proofs. The connection to proofs will be discussed in Chapter ??.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-54002r7&quot;&gt;&lt;/a&gt; &lt;b&gt;Theorem&lt;/b&gt; 4.7. &lt;/span&gt;&lt;span class=&quot;cite&quot;&gt;[&lt;a href=&quot;#XAroraLuMoSuSz98&quot;&gt;4&lt;/a&gt;]&lt;/span&gt; [PCP] There is &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cgamma+%3C1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cgamma+%3C1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cgamma+%3C1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;gamma &amp;lt;1&quot; class=&quot;latex&quot; /&gt; such that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cgamma+%5Ctext+%7B-Gap-3Sat%7D%5Cin+%5Ctext+%7BP%7D%5CRightarrow+%5Ctext+%7B3Sat%7D%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cgamma+%5Ctext+%7B-Gap-3Sat%7D%5Cin+%5Ctext+%7BP%7D%5CRightarrow+%5Ctext+%7B3Sat%7D%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cgamma+%5Ctext+%7B-Gap-3Sat%7D%5Cin+%5Ctext+%7BP%7D%5CRightarrow+%5Ctext+%7B3Sat%7D%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;gamma &amp;#92;text {-Gap-3Sat}&amp;#92;in &amp;#92;text {P}&amp;#92;Rightarrow &amp;#92;text {3Sat}&amp;#92;in &amp;#92;text {P}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;Similar results can be established for other problems such as 3Color, but the reductions in the previous section don’t preserve gaps and can’t be immediately applied.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;A major application of the PCP theorem is in &lt;em&gt;inapproximability&lt;/em&gt; results. A typical optimization problem is Max-3Sat.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-54003r12&quot;&gt;&lt;/a&gt; &lt;b&gt;Definition&lt;/b&gt; 4.12. &lt;/span&gt;The Max-3Sat problem: given a 3CNF formula, find a satisfying assignment that satisfies the maximum number of clauses.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;Solving 3Sat reduces to Max-3Sat (in Chapter ?? we will give a reverse reduction as well). But we can ask for &lt;em&gt;&lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbeta+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbeta+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbeta+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;beta &quot; class=&quot;latex&quot; /&gt;-approximating&lt;/em&gt; Max-3Sat, that is, computing an assignment that satisfies a number of clauses that is at least a &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbeta+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbeta+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbeta+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;beta &quot; class=&quot;latex&quot; /&gt; fraction of the maximum possible clauses that can be satisfied.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;The PCP Theorem &lt;a href=&quot;#x1-54002r7&quot;&gt;4.7&lt;!--tex4ht:ref: thm:-=00005BPCP=00005D --&gt;&lt;/a&gt; implies that 3Sat reduces to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbeta+-&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbeta+-&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbeta+-&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;beta -&quot; class=&quot;latex&quot; /&gt;approximating Max-3Sat, for some constant &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbeta+%3C1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbeta+%3C1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbeta+%3C1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;beta &amp;lt;1&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;It has been a major line of research to obtain tight approximation factors &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbeta+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbeta+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbeta+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;beta &quot; class=&quot;latex&quot; /&gt; for a variety of problems. For example, 3Sat reduces to &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cbeta+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cbeta+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cbeta+&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;beta &quot; class=&quot;latex&quot; /&gt;-approximating Max-3Sat for any &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cb+%3E7%2F8&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cb+%3E7%2F8&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cb+%3E7%2F8&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;b &amp;gt;7/8&quot; class=&quot;latex&quot; /&gt;. This constant is tight because a random uniform assignment to the variables satisfies each clause with probability &lt;img src=&quot;https://s0.wp.com/latex.php?latex=7%2F8&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=7%2F8&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=7%2F8&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;7/8&quot; class=&quot;latex&quot; /&gt; and hence expects to satisfy a &lt;img src=&quot;https://s0.wp.com/latex.php?latex=7%2F8&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=7%2F8&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=7%2F8&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;7/8&quot; class=&quot;latex&quot; /&gt; fraction of the clauses.&lt;/p&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-54004r8&quot;&gt;&lt;/a&gt; &lt;b&gt;Exercise&lt;/b&gt; 4.8. &lt;/span&gt;Turn this latter observation in an efficient randomized algorithm with an approximation factor &lt;img src=&quot;https://s0.wp.com/latex.php?latex=7%2F8-o%281%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=7%2F8-o%281%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=7%2F8-o%281%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;7/8-o(1)&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;h3 class=&quot;sectionHead&quot;&gt;&lt;span class=&quot;titlemark&quot;&gt;4.7 &lt;/span&gt; &lt;a id=&quot;x1-550004.7&quot;&gt;&lt;/a&gt;Problems&lt;/h3&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-55001r1&quot;&gt;&lt;/a&gt; &lt;b&gt;Problem&lt;/b&gt; 4.1. &lt;/span&gt;Reduce 3Sat to the PIT problem (Definition &lt;a href=&quot;#x1-32001r8&quot;&gt;2.8&lt;!--tex4ht:ref: def:arithmetic-circuit-PIT --&gt;&lt;/a&gt;) over the field with two elements.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-55002r2&quot;&gt;&lt;/a&gt; &lt;b&gt;Problem&lt;/b&gt; 4.2. &lt;/span&gt;Prove that 3Sat is not &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BTM-Time%7D%28n%5E%7B1.99%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7BTM-Time%7D%28n%5E%7B1.99%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7BTM-Time%7D%28n%5E%7B1.99%7D%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {TM-Time}(n^{1.99})&quot; class=&quot;latex&quot; /&gt;. (Hint: Consider the &lt;em&gt;Padded-Palindromes &lt;/em&gt;problem which is like palindromes except the input is divided in blocks of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=c%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=c%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=c%5Clog+n&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;c&amp;#92;log n&quot; class=&quot;latex&quot; /&gt; bits, and only the first bit of each block may be non-zero. (1) Prove a time lower bound for Padded-Palindromes by explaining what modifications are needed to the proof of Theorem &lt;a href=&quot;#x1-38001r1&quot;&gt;3.1&lt;!--tex4ht:ref: thm:TM-pal-requires-quadratic --&gt;&lt;/a&gt;. (2) Give a suitable reduction from Padded-Palindromes to 3Sat.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-55003r3&quot;&gt;&lt;/a&gt; &lt;b&gt;Problem&lt;/b&gt; 4.3. &lt;/span&gt;Show that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7B3Color%7D%5Cin+%5Ctext+%7BP%7D%5CRightarrow+%5Ctext+%7BSearch-3Color%7D%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7B3Color%7D%5Cin+%5Ctext+%7BP%7D%5CRightarrow+%5Ctext+%7BSearch-3Color%7D%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7B3Color%7D%5Cin+%5Ctext+%7BP%7D%5CRightarrow+%5Ctext+%7BSearch-3Color%7D%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {3Color}&amp;#92;in &amp;#92;text {P}&amp;#92;Rightarrow &amp;#92;text {Search-3Color}&amp;#92;in &amp;#92;text {P}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-55004r4&quot;&gt;&lt;/a&gt; &lt;b&gt;Problem&lt;/b&gt; 4.4. &lt;/span&gt;Give an encoding of 3Sat so that the reduction to 3Color in section&amp;nbsp;º&lt;a href=&quot;#x1-500004.3&quot;&gt;4.3&lt;!--tex4ht:ref: sec:Reductions-from-3Sat --&gt;&lt;/a&gt; can be computed, for any input length, by a &lt;img src=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=1&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;1&quot; class=&quot;latex&quot; /&gt;-local map (in particular, a circuit of constant depth).&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;newtheorem&quot;&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;&lt;span class=&quot;head&quot;&gt; &lt;a id=&quot;x1-55005r5&quot;&gt;&lt;/a&gt; &lt;b&gt;Problem&lt;/b&gt; 4.5. &lt;/span&gt;Suppose there exists &lt;img src=&quot;https://s0.wp.com/latex.php?latex=a&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=a&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=a&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;a&quot; class=&quot;latex&quot; /&gt; such that Theorem &lt;a href=&quot;#x1-53001r6&quot;&gt;4.6&lt;!--tex4ht:ref: thm:univeral-search --&gt;&lt;/a&gt; holds with the running time of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=U&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=U&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=U&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;U&quot; class=&quot;latex&quot; /&gt; replaced with &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%28%7CM%7C%5Ccdot+t%5Ccdot+%7Cx%7C%29%5E%7Ba%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%28%7CM%7C%5Ccdot+t%5Ccdot+%7Cx%7C%29%5E%7Ba%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%28%7CM%7C%5Ccdot+t%5Ccdot+%7Cx%7C%29%5E%7Ba%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;(|M|&amp;#92;cdot t&amp;#92;cdot |x|)^{a}&quot; class=&quot;latex&quot; /&gt;. (That is, the dependence on the program description improved to polynomial, and we allow even weaker dependence on &lt;img src=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=t&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;t&quot; class=&quot;latex&quot; /&gt;.) Prove that &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7B3Sat%7D%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Ctext+%7B3Sat%7D%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Ctext+%7B3Sat%7D%5Cin+%5Ctext+%7BP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;text {3Sat}&amp;#92;in &amp;#92;text {P}&quot; class=&quot;latex&quot; /&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;h3 class=&quot;likesectionHead&quot;&gt;&lt;a id=&quot;x1-560004.7&quot;&gt;&lt;/a&gt;References&lt;/h3&gt;
&lt;p style=&quot;text-align: justify&quot;&gt;
&lt;div class=&quot;thebibliography&quot;&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt; [1]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:conf/focs/AbboudBW15&quot;&gt;&lt;/a&gt;Amir Abboud, Arturs Backurs, and Virginia&amp;nbsp;Vassilevska Williams. Tight hardness results for LCS and other sequence similarity measures. In Venkatesan Guruswami, editor, IEEE 56th Annual Symposium on Foundations of Computer Science, FOCS 2015, Berkeley, CA, USA, 17-20 October, 2015, pages 59–78. IEEE Computer Society, 2015.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt; [2]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAdleman78&quot;&gt;&lt;/a&gt;Leonard Adleman. Two theorems on random polynomial time. In 19th IEEE Symp.&amp;nbsp;on Foundations of Computer Science (FOCS), pages 75–83. 1978.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt; [3]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/jcss/AngluinV79&quot;&gt;&lt;/a&gt;Dana Angluin and Leslie&amp;nbsp;G. Valiant. Fast probabilistic algorithms for hamiltonian circuits and matchings. J. Comput. Syst. Sci., 18(2):155–193, 1979.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt; [4]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XAroraLuMoSuSz98&quot;&gt;&lt;/a&gt;Sanjeev Arora, Carsten Lund, Rajeev Motwani, Madhu Sudan, and Mario Szegedy. Proof verification and the hardness of approximation problems. J.&amp;nbsp;of the ACM, 45(3):501–555, May 1998.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt; [5]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/siamcomp/BackursI18&quot;&gt;&lt;/a&gt;Arturs Backurs and Piotr Indyk. Edit distance cannot be computed in strongly subquadratic time (unless SETH is false). SIAM J. Comput., 47(3):1087–1097, 2018.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt; [6]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XGajentaanO95&quot;&gt;&lt;/a&gt;Anka Gajentaan and Mark&amp;nbsp;H. Overmars. On a class of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%7BO%7D%28n%5E2%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%7BO%7D%28n%5E2%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%7BO%7D%28n%5E2%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;{O}(n^2)&quot; class=&quot;latex&quot; /&gt; problems in computational geometry. Comput. Geom., 5:165–185, 1995.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt; [7]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XGareyJ79&quot;&gt;&lt;/a&gt;M.&amp;nbsp;R. Garey and David&amp;nbsp;S. Johnson. Computers and Intractability: A Guide to the Theory of NP-Completeness. W. H. Freeman, 1979.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt; [8]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XMR1549939&quot;&gt;&lt;/a&gt;K.&amp;nbsp;G÷del. ▄ber formal unentscheidbare sΣtze der Principia Mathematica und verwandter systeme I. Monatsh. Math. Phys., 38, 1931.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt; [9]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XGoldreich08Complexity&quot;&gt;&lt;/a&gt;Oded Goldreich. Computational Complexity: A Conceptual Perspective. Cambridge University Press, 2008.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt; [10]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;X10.4007/annals.2021.193.2.4&quot;&gt;&lt;/a&gt;David Harvey and Joris van&amp;nbsp;der Hoeven. Integer multiplication in time &lt;img src=&quot;https://s0.wp.com/latex.php?latex=O%28n%5Cmathrm+%7Blog%7D%5C%2C+n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=O%28n%5Cmathrm+%7Blog%7D%5C%2C+n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=O%28n%5Cmathrm+%7Blog%7D%5C%2C+n%29&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;O(n&amp;#92;mathrm {log}&amp;#92;, n)&quot; class=&quot;latex&quot; /&gt;. Annals of Mathematics, 193(2):563 – 617, 2021.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt; [11]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/iandc/Hennie65&quot;&gt;&lt;/a&gt;F.&amp;nbsp;C. Hennie. One-tape, off-line turing machine computations. Information and Control, 8(6):553–578, 1965.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt; [12]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XHennieS66&quot;&gt;&lt;/a&gt;Fred Hennie and Richard Stearns. Two-tape simulation of multitape turing machines. J.&amp;nbsp;of the ACM, 13:533–546, October 1966.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt; [13]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XIP99&quot;&gt;&lt;/a&gt;Russell Impagliazzo and Ramamohan Paturi. The complexity of &lt;img src=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=k&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;k&quot; class=&quot;latex&quot; /&gt;-sat. In IEEE Conf.&amp;nbsp;on Computational Complexity (CCC), pages 237–, 1999.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt; [14]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XIPZ01&quot;&gt;&lt;/a&gt;Russell Impagliazzo, Ramamohan Paturi, and Francis Zane. Which problems have strongly exponential complexity? J. Computer &amp;amp; Systems Sciences, 63(4):512–530, Dec 2001.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt; [15]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XImW97&quot;&gt;&lt;/a&gt;Russell Impagliazzo and Avi Wigderson. &lt;img src=&quot;https://s0.wp.com/latex.php?latex=%5Cmathit+%7BP%7D+%3D+%5Cmathit+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=%5Cmathit+%7BP%7D+%3D+%5Cmathit+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=%5Cmathit+%7BP%7D+%3D+%5Cmathit+%7BBPP%7D&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;&amp;#92;mathit {P} = &amp;#92;mathit {BPP}&quot; class=&quot;latex&quot; /&gt; if &lt;img src=&quot;https://s0.wp.com/latex.php?latex=E&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&quot; srcset=&quot;https://s0.wp.com/latex.php?latex=E&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002 1x, https://s0.wp.com/latex.php?latex=E&amp;#038;bg=ffffff&amp;#038;fg=333333&amp;#038;s=0&amp;#038;c=20201002&amp;#038;zoom=4.5 4x&quot; alt=&quot;E&quot; class=&quot;latex&quot; /&gt; requires exponential circuits: Derandomizing the XOR lemma. In 29th ACM Symp.&amp;nbsp;on the Theory of Computing (STOC), pages 220–229. ACM, 1997.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt; [16]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XKobayashi1985OnTS&quot;&gt;&lt;/a&gt;Kojiro Kobayashi. On the structure of one-tape nondeterministic turing machine time hierarchy. Theor. Comput. Sci., 40:175–193, 1985.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt; [17]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XLevin73&quot;&gt;&lt;/a&gt;Leonid&amp;nbsp;A. Levin. Universal sequential search problems. Problemy Peredachi Informatsii, 9(3):115–116, 1973.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt; [18]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XLupanov58&quot;&gt;&lt;/a&gt;O.&amp;nbsp;B. Lupanov. A method of circuit synthesis. Izv. VUZ Radiofiz., 1:120–140, 1958.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt; [19]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/jcss/PapadimitriouY91&quot;&gt;&lt;/a&gt;Christos&amp;nbsp;H. Papadimitriou and Mihalis Yannakakis. Optimization, approximation, and complexity classes. J. Comput. Syst. Sci., 43(3):425–440, 1991.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt; [20]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XPippengerF79&quot;&gt;&lt;/a&gt;Nicholas Pippenger and Michael&amp;nbsp;J. Fischer. Relations among complexity measures. J.&amp;nbsp;of the ACM, 26(2):361–381, 1979.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt; [21]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/siamcomp/Schonhage80&quot;&gt;&lt;/a&gt;Arnold Sch÷nhage. Storage modification machines. SIAM J. Comput., 9(3):490–508, 1980.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt; [22]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XMR29860&quot;&gt;&lt;/a&gt;Claude&amp;nbsp;E. Shannon. The synthesis of two-terminal switching circuits. Bell System Tech. J., 28:59–98, 1949.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt; [23]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XSho90&quot;&gt;&lt;/a&gt;Victor Shoup. New algorithms for finding irreducible polynomials over finite fields. Mathematics of Computation, 54(189):435–447, 1990.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt; [24]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XMR2145856&quot;&gt;&lt;/a&gt;Larry Stockmeyer and Albert&amp;nbsp;R. Meyer. Cosmological lower bound on the circuit complexity of a small problem in logic. J. ACM, 49(6):753–784, 2002.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt; [25]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XDBLP:journals/x/Turing37&quot;&gt;&lt;/a&gt;Alan&amp;nbsp;M. Turing. On computable numbers, with an application to the entscheidungsproblem. Proc. London Math. Soc., s2-42(1):230–265, 1937.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt; [26]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;XViola-xxx&quot;&gt;&lt;/a&gt;Emanuele Viola. Reducing 3XOR to listing triangles, an exposition. Available at &lt;a href=&quot;http://www.ccs.neu.edu/home/viola/&quot; rel=&quot;nofollow&quot;&gt;http://www.ccs.neu.edu/home/viola/&lt;/a&gt;, 2011.&lt;/p&gt;
&lt;p class=&quot;bibitem&quot;&gt;&lt;span class=&quot;biblabel&quot;&gt; [27]&lt;span class=&quot;bibsp&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a id=&quot;Xviola-tm&quot;&gt;&lt;/a&gt;Emanuele Viola. Pseudorandom bits and lower bounds for randomized turing machines. Theory of Computing, 18(10):1–12, 2022.&lt;/p&gt;
&lt;/div&gt;
&lt;p class=&quot;authors&quot;&gt;By Manu&lt;/p&gt;
  </content>
    <author>
      <name>Emanuele Viola</name>
      <uri>https://emanueleviola.wordpress.com</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Triplet Loss-less Center Loss Sampling Strategies in Facial Expression Recognition Scenarios</title>
    <link href="http://arxiv.org/abs/2302.04108"/>
    <id>http://arxiv.org/abs/2302.04108</id>
    <updated>2023-02-09T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Rajoli_H/0/1/0/all/0/1&quot;&gt;Hossein Rajoli&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Lotfi_F/0/1/0/all/0/1&quot;&gt;Fatemeh Lotfi&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Atyabi_A/0/1/0/all/0/1&quot;&gt;Adham Atyabi&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Afghah_F/0/1/0/all/0/1&quot;&gt;Fatemeh Afghah&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Facial expressions convey massive information and play a crucial role in
emotional expression. Deep neural network (DNN) accompanied by deep metric
learning (DML) techniques boost the discriminative ability of the model in
facial expression recognition (FER) applications. DNN, equipped with only
classification loss functions such as Cross-Entropy cannot compact intra-class
feature variation or separate inter-class feature distance as well as when it
gets fortified by a DML supporting loss item. The triplet center loss (TCL)
function is applied on all dimensions of the sample&#39;s embedding in the
embedding space. In our work, we developed three strategies: fully-synthesized,
semi-synthesized, and prediction-based negative sample selection strategies. To
achieve better results, we introduce a selective attention module that provides
a combination of pixel-wise and element-wise attention coefficients using
high-semantic deep features of input samples. We evaluated the proposed method
on the RAF-DB, a highly imbalanced dataset. The experimental results reveal
significant improvements in comparison to the baseline for all three negative
sample selection strategies.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: Optimal Sufficient Requirements on the Embedded Ising Problem in Polynomial Time</title>
    <link href="http://arxiv.org/abs/2302.04162"/>
    <id>http://arxiv.org/abs/2302.04162</id>
    <updated>2023-02-09T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/quant-ph/1/au:+Lobe_E/0/1/0/all/0/1&quot;&gt;Elisabeth Lobe&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/quant-ph/1/au:+Kaibel_V/0/1/0/all/0/1&quot;&gt;Volker Kaibel&lt;/a&gt;&lt;/p&gt;&lt;p&gt;One of the central applications for quantum annealers is to find the
solutions of Ising problems. Suitable Ising problems, however, need to be
formulated such that they, on the one hand, respect the specific restrictions
of the hardware and, on the other hand, represent the original problems which
shall actually be solved. We evaluate sufficient requirements on such an
embedded Ising problem analytically and transform them into a linear
optimization problem. With an objective function aiming to minimize the maximal
absolute problem parameter, the precision issues of the annealers are
addressed. Due to the redundancy of several constraints, we can show that the
formally exponentially large optimization problem can be reduced and finally
solved in polynomial time for the standard embedding setting where the embedded
vertices induce trees. This allows to formulate provably equivalent embedded
Ising problems in a practical setup.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Complexity: On the Computational Complexity of Ethics: Moral Tractability for Minds and Machines</title>
    <link href="http://arxiv.org/abs/2302.04218"/>
    <id>http://arxiv.org/abs/2302.04218</id>
    <updated>2023-02-09T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/cs/1/au:+Stenseke_J/0/1/0/all/0/1&quot;&gt;Jakob Stenseke&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Why should moral philosophers, moral psychologists, and machine ethicists
care about computational complexity? Debates on whether artificial intelligence
(AI) can or should be used to solve problems in ethical domains have mainly
been driven by what AI can or cannot do in terms of human capacities. In this
paper, we tackle the problem from the other end by exploring what kind of moral
machines are possible based on what computational systems can or cannot do. To
do so, we analyze normative ethics through the lens of computational
complexity. First, we introduce computational complexity for the uninitiated
reader and discuss how the complexity of ethical problems can be framed within
Marr&#39;s three levels of analysis. We then study a range of ethical problems
based on consequentialism, deontology, and virtue ethics, with the aim of
elucidating the complexity associated with the problems themselves (e.g., due
to combinatorics, uncertainty, strategic dynamics), the computational methods
employed (e.g., probability, logic, learning), and the available resources
(e.g., time, knowledge, learning). The results indicate that most problems the
normative frameworks pose lead to tractability issues in every category
analyzed. Our investigation also provides several insights about the
computational nature of normative ethics, including the differences between
rule- and outcome-based moral strategies, and the implementation-variance with
regard to moral resources. We then discuss the consequences complexity results
have for the prospect of moral machines in virtue of the trade-off between
optimality and efficiency. Finally, we elucidate how computational complexity
can be used to inform both philosophical and cognitive-psychological research
on human morality by advancing the Moral Tractability Thesis (MTT).
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Complexity</name>
      <uri>https://arxiv.org/list/cs.CC/recent</uri>
    </author>
  </entry>


  <entry xml:lang="en">
    <title type="html" xml:lang="en">arXiv: Computational Geometry: A generalization of the persistent Laplacian to simplicial maps</title>
    <link href="http://arxiv.org/abs/2302.03771"/>
    <id>http://arxiv.org/abs/2302.03771</id>
    <updated>2023-02-09T01:30:00+00:00</updated>
    <content type="html" xml:lang="en">
    &lt;p class=&quot;arxiv-authors&quot;&gt;&lt;b&gt;Authors:&lt;/b&gt; &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Gulen_A/0/1/0/all/0/1&quot;&gt;Aziz Burak G&amp;#xfc;len&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Memoli_F/0/1/0/all/0/1&quot;&gt;Facundo M&amp;#xe9;moli&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Wan_Z/0/1/0/all/0/1&quot;&gt;Zhengchao Wan&lt;/a&gt;, &lt;a href=&quot;http://arxiv.org/find/math/1/au:+Wang_Y/0/1/0/all/0/1&quot;&gt;Yusu Wang&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The graph Laplacian is a fundamental object in the analysis of and
optimization on graphs. This operator can be extended to a simplicial complex
$K$ and therefore offers a way to perform ``signal processing&quot; on
$p$-(co)chains of $K$. Recently, the concept of persistent Laplacian was
proposed and studied for a pair of simplicial complexes $K\hookrightarrow L$
connected by an inclusion relation, further broadening the use of Laplace-based
operators.
&lt;/p&gt;
&lt;p&gt;In this paper, we expand the scope of the persistent Laplacian by
generalizing it to a pair of simplicial complexes connected by a simplicial map
$f: K \to L$. Such simplicial map setting arises frequently, e.g., when
relating a coarsened simplicial representation with an original representation,
or the case when the two simplicial complexes are spanned by different point
sets i.e. cases in which it does not hold that $K\subset L$. However, the
simplicial map setting is more challenging than the inclusion setting since the
underlying algebraic structure is more complicated.
&lt;/p&gt;
&lt;p&gt;We present a natural generalization of the persistent Laplacian to the
simplicial setting. To shed insight on the structure behind it, as well as to
develop an algorithm to compute it, we exploit the relationship between the
persistent Laplacian and the Schur complement of a matrix. A critical step is
to view the Schur complement as a functorial way of restricting a self-adjoint
PSD operator to a given subspace. As a consequence, we prove that persistent
Betti numbers of a simplicial map can be recovered by persistent Laplacians. We
then propose an algorithm for finding the matrix representations of persistent
Laplacians which in turn yields a new algorithm for computing persistent Betti
numbers of a simplicial map. Finally, we study the persistent Laplacian on
simplicial towers under simplicial maps and establish monotonicity results for
their eigenvalues.
&lt;/p&gt;
  </content>
    <author>
      <name>arXiv: Computational Geometry</name>
      <uri>https://arxiv.org/list/cs.CG/recent</uri>
    </author>
  </entry>


</feed>
